{
  "curriculums" : [
    {
      "_id"                     : "cs-1A_en-CA",
      "name"                    : "Introduction to Programming (Part 1)",
      "normalizedName"          : "introduction to programming part 1",
      "shortDescription"        : "This course is ideal for beginners with little to no experience in programming.",
      "longDescription"         : "You'll learn the basic building blocks of a high-level programming language (JavaScript) by completing a variety of real-world STEM projects. Throughout the course, you'll try your hand at using essential coding elements such as instructions, variables and conditional statements. At the end of the course, you'll be able to solve numerous problems with code.",
      "locale"                  : "en-CA",
      "grades"                  : ["6"],
      "allowLimited"            : false,
      "trialMode"               : true,
      "comingSoon"              : false,
      "enabled"                 : true,
      "units"                   : [
        {
          "_id"           : "cs-1_en-CA_exercise-258",
          "name"          : "Instructions and Algorithms",
          "normalizedName": "instructions and algorithms",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-258_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-258_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-01",
          "name"          : "Project 1 - Giving a Command",
          "normalizedName": "project 1 - giving a command",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-024",
          "name"          : "Giving an Instruction",
          "normalizedName": "giving an instruction",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-024_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-024_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Add another <concept ref=robot-forward>robot.forward()</concept> instruction to help the robot get to the goal.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "robot.forward();\n?",
          "solution"      : "robot.forward();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"instruction\">Instruction</h3>\n<div class=\"text\">Instructions are special words recognized by computers. They enable computers to complete a specific action. Think of them like commands that we can give to our computer. An example of an instruction is <concept ref=\"robot.forward()\">robot.forward()</concept>.</div>\n<h3 class=\"title\" ref=\"robot.forward()\">Using the robot.forward() instruction</h3>\n<div class=\"text\">The robot.forward() <concept ref=\"instruction\">instruction</concept> is used to make the robot move forward by one square. Like any other <concept ref=\"programming languages\">JavaScript</concept> instruction, robot.forward() is <concept ref=\"case sensitive\">case sensitive</concept> and requires <concept ref=\"forgetting parentheses\">precise spelling</concept>.</div>\n<div class=\"code-sample-title\">Example of robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // moves the robot forward by one square</pre>\n<h3 class=\"title\" ref=\"case sensitive\">Using the Wrong Letter Case in an Instruction</h3>\n<div class=\"text\">It is important that we respect uppercase and lowercase letters in <concept ref=\"instruction\">instruction</concept> names as all instructions in <concept ref=\"programming languages\">JavaScript</concept> are case sensitive.</div>\n<div class=\"code-sample-title\">Example of an invalid instruction</div><pre class=\"codeBlock\">robot.Forward(); // wrong spelling: capital F\nrobot.forward(); // correct spelling</pre>\n<h3 class=\"title\" ref=\"programmer\">Programmer</h3>\n<div class=\"text\">Programmers are people who create programs using <concept ref=\"instruction\">instructions</concept> from a <concept ref=\"programming languages\">programming language</concept>.</div>\n<h3 class=\"title\" ref=\"programming languages\">Programming Language</h3>\n<div class=\"text\">Programming languages are groups of <concept ref=\"instruction\">instructions</concept> recognized by a computer. This course uses the JavaScript programming language.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-025",
          "name"          : "Being Precise With Our Instructions",
          "normalizedName": "being precise with our instructions",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-025_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-025_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Add a <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-forward>robot.forward()</concept> instructions to get the robot to the goal.</li><li class=code-item>The robot cannot leave the designated path. Pay close attention to the order of your instructions as it affects your program!</li></ol>",
          "boilerplate"   : "robot.forward();\n?\n?",
          "solution"      : "robot.forward();\nrobot.right();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"order of instructions\">Order of Instructions</h3>\n<div class=\"text\">As programs are read from top to bottom, the order in which instructions are presented is important.</div>\n<div class=\"code-sample-title\">Example 1</div><pre class=\"codeBlock\">robot.forward();\nrobot.right();</pre>\n<div class=\"text\">In the example above, the robot moves forward before turning right.</div>\n<div class=\"code-sample-title\">Example 2</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<div class=\"text\">In the example above, the robot turns right before moving forward.</div>\n<h3 class=\"title\" ref=\"robot.forward()\">Using the robot.forward() instruction</h3>\n<div class=\"text\">The robot.forward() <concept ref=\"instruction\">instruction</concept> is used to make the robot move forward by one square. Like any other <concept ref=\"programming languages\">JavaScript</concept> instruction, robot.forward() is <concept ref=\"case sensitive\">case sensitive</concept> and requires <concept ref=\"forgetting parentheses\">precise spelling</concept>.</div>\n<div class=\"code-sample-title\">Example of robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // moves the robot forward by one square</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-026",
          "name"          : "Taking a Right Turn",
          "normalizedName": "taking a right turn",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-forward>robot.forward()</concept> instructions to get the robot to the goal.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "robot.forward();\nrobot.right();\n?\n?\n?\n?",
          "solution"      : "robot.forward();\nrobot.right();\nrobot.forward();\nrobot.forward();\nrobot.right();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Using the robot.forward() instruction</h3>\n<div class=\"text\">The robot.forward() <concept ref=\"instruction\">instruction</concept> is used to make the robot move forward by one square. Like any other <concept ref=\"programming languages\">JavaScript</concept> instruction, robot.forward() is <concept ref=\"case sensitive\">case sensitive</concept> and requires <concept ref=\"forgetting parentheses\">precise spelling</concept>.</div>\n<div class=\"code-sample-title\">Example of robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // moves the robot forward by one square</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"case sensitive\">Using the Wrong Letter Case in an Instruction</h3>\n<div class=\"text\">It is important that we respect uppercase and lowercase letters in <concept ref=\"instruction\">instruction</concept> names as all instructions in <concept ref=\"programming languages\">JavaScript</concept> are case sensitive.</div>\n<div class=\"code-sample-title\">Example of an invalid instruction</div><pre class=\"codeBlock\">robot.Forward(); // wrong spelling: capital F\nrobot.forward(); // correct spelling</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-027",
          "name"          : "Squishing a Bug",
          "normalizedName": "squishing a bug",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-027_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-027_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Fix the bug in the code editor by adding another <concept ref=robot-forward>robot.forward()</concept> instruction before the <concept ref=robot-right>robot.right()</concept> instruction.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "robot.forward();\n\nrobot.right();\nrobot.forward();",
          "solution"      : "robot.forward();\nrobot.forward();\nrobot.right();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"case sensitive\">Using the Wrong Letter Case in an Instruction</h3>\n<div class=\"text\">It is important that we respect uppercase and lowercase letters in <concept ref=\"instruction\">instruction</concept> names as all instructions in <concept ref=\"programming languages\">JavaScript</concept> are case sensitive.</div>\n<div class=\"code-sample-title\">Example of an invalid instruction</div><pre class=\"codeBlock\">robot.Forward(); // wrong spelling: capital F\nrobot.forward(); // correct spelling</pre>\n<h3 class=\"title\" ref=\"forgetting parentheses\">Forgetting the Parentheses after an Instruction</h3>\n<div class=\"text\">Forgetting to put the parentheses after an instruction can create various problems.</div>\n<div class=\"code-sample-title\">Example of an invalid instruction</div><pre class=\"codeBlock\">robot.forward // instruction is missing the parentheses and semicolon\nrobot.forward(); // correct</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-028",
          "name"          : "A New Hope",
          "normalizedName": "a new hope",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-028_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-028_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the three <concept ref=robot-right>robot.right()</concept> instructions by a single <concept ref=robot-left>robot.left()</concept> instruction.</li><li class=code-item>Add the missing instructions to help the robot reach the goal.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "robot.forward();\nrobot.right();\nrobot.right();\nrobot.right();",
          "solution"      : "robot.forward();\nrobot.left();\n\nrobot.forward();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"robot.left()\">Using the robot.left() Instruction</h3>\n<div class=\"text\">The robot.left() instruction is used to make the robot turn on itself 90 degrees counterclockwise. Note that it does not make the robot move in any direction. To complete a left turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.left() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-029",
          "name"          : "Using All the Tools",
          "normalizedName": "using all the tools",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-029_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-029_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=robot-forward>robot.forward()</concept>, <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-left>robot.left()</concept> instructions to help the robot reach the goal.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "// Use robot.forward();, robot.right(); and\n// robot.left(); to get the robot to the goal!\nrobot.forward();\n?",
          "solution"      : "// Use robot.forward();, robot.right(); and\n// robot.left(); to get the robot to the goal!\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.forward();\nrobot.left();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"comments\">Comments</h3>\n<div class=\"text\">Sometimes we want to leave helpful information in a program for other <concept ref=\"programmer\">programmers</concept> reading our code or even ourselves. To do so, we can use single line comments which are indicated by a double slash (//). We can also start a multi-line comment by using a slash followed by an asterisk (/*) and then an asterisk followed by a slash (*/) to end the comment.</div>\n<div class=\"code-sample-title\">Example of comments</div><pre class=\"codeBlock\">// This is a comment before a line of code\nrobot.right();\nrobot.right(); // this is a comment after a line of code\n/* this is a two-\nline comment */\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"order of instructions\">Order of Instructions</h3>\n<div class=\"text\">As programs are read from top to bottom, the order in which instructions are presented is important.</div>\n<div class=\"code-sample-title\">Example 1</div><pre class=\"codeBlock\">robot.forward();\nrobot.right();</pre>\n<div class=\"text\">In the example above, the robot moves forward before turning right.</div>\n<div class=\"code-sample-title\">Example 2</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<div class=\"text\">In the example above, the robot turns right before moving forward.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-030",
          "name"          : "From All Directions",
          "normalizedName": "from all directions",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=robot-forward>robot.forward()</concept>, <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-left>robot.left()</concept> instructions to help the robot reach the goal.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "// Use robot.forward();, robot.right(); and\n// robot.left(); to get the robot to the goal!\n?",
          "solution"      : "// Use robot.forward();, robot.right(); and\n// robot.left(); to get the robot to the goal!\nrobot.forward();\nrobot.left();\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.forward();\nrobot.right();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Using the robot.forward() instruction</h3>\n<div class=\"text\">The robot.forward() <concept ref=\"instruction\">instruction</concept> is used to make the robot move forward by one square. Like any other <concept ref=\"programming languages\">JavaScript</concept> instruction, robot.forward() is <concept ref=\"case sensitive\">case sensitive</concept> and requires <concept ref=\"forgetting parentheses\">precise spelling</concept>.</div>\n<div class=\"code-sample-title\">Example of robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // moves the robot forward by one square</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Using the robot.left() Instruction</h3>\n<div class=\"text\">The robot.left() instruction is used to make the robot turn on itself 90 degrees counterclockwise. Note that it does not make the robot move in any direction. To complete a left turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.left() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-031",
          "name"          : "Moving Rapidly",
          "normalizedName": "moving rapidly",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-031_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-031_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=robot-forward>robot.forward()</concept> instruction with a positive numerical value to help the robot reach the goal.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "// The number in between the parentheses\n// needs to be a positive numeral\nrobot.forward(2);",
          "solution"      : "// The number in between the parentheses\n// needs to be a positive numeral\nrobot.forward(6);",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-032",
          "name"          : "Which Way Is the Right Way?",
          "normalizedName": "which way is the right way",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-032_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-032_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=robot-forward>robot.forward()</concept>, <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-left>robot.left()</concept> instructions to help the robot reach the goal.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "// Use robot.forward();,\n// robot.left(); and robot.right();\n// to get to the goal\n?",
          "solution"      : "// Use robot.forward();,\n// robot.left(); and robot.right();\n// to get to the goal\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward(2);\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward(2);\nrobot.left();\nrobot.forward();\nrobot.right();\nrobot.forward(2);",
          "tips"          : "<h3 class=\"title\" ref=\"algorithm\">Algorithm</h3>\n<div class=\"text\">A specific set of steps to solve a problem. For example, think of a cake cooking recipe. We cannot apply the frosting to the cake before cooking the cake.</div>\n<h3 class=\"title\" ref=\"parameter\">Parameter</h3>\n<div class=\"text\">A parameter is a value that we give to an <concept ref=\"instruction\">instruction</concept> to give more details. A parameter will usually change the outcome of an instruction. Some parameters are optional while others are required. Every parameter in an instruction is separated by a comma.</div>\n<div class=\"code-sample-title\">Example of parameters</div><pre class=\"codeBlock\">robot.forward(); // robot.forward() with no parameter\nrobot.forward(6); // robot.forward() with the optional number parameter\nsquare.draw(3, 7); // square.draw() with the two required coordinate parameters</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-033",
          "name"          : "Simplifying Our Code",
          "normalizedName": "simplifying our code",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=robot-forward>robot.forward()</concept>, <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-left>robot.left()</concept> instructions to help the robot reach the goal.</li><li class=code-item>You must use a <strong>maximum</strong> of 5 instructions.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "// Remember, you can use the instruction\n// robot.forward(2); to move the robot 2\n// squares in a single instruction\nrobot.forward();\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.forward();",
          "solution"      : "// Remember, you can use the instruction\n// robot.forward(2); to move the robot 2\n// squares in a single instruction\n\nrobot.forward(2);\nrobot.right();\n\nrobot.forward(2);\nrobot.right();\n\nrobot.forward(2);",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-034",
          "name"          : "Choosing the Right Direction",
          "normalizedName": "choosing the right direction",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=robot-forward>robot.forward()</concept>, <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-left>robot.left()</concept> instructions to help the robot reach the goal.</li><li class=code-item>You must use a <strong>maximum</strong> of 5 instructions.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "// Remember, using robot.left(); three times\n// or using robot.right(); makes the robot face the same direction!\nrobot.forward();\nrobot.left();\nrobot.left();\nrobot.left();\nrobot.forward();\nrobot.left();\nrobot.forward();",
          "solution"      : "// Remember, using robot.left(); three times\n// or using robot.right(); makes the robot face the same direction!\nrobot.forward();\nrobot.right();\n\nrobot.forward();\nrobot.left();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Using the robot.forward() instruction</h3>\n<div class=\"text\">The robot.forward() <concept ref=\"instruction\">instruction</concept> is used to make the robot move forward by one square. Like any other <concept ref=\"programming languages\">JavaScript</concept> instruction, robot.forward() is <concept ref=\"case sensitive\">case sensitive</concept> and requires <concept ref=\"forgetting parentheses\">precise spelling</concept>.</div>\n<div class=\"code-sample-title\">Example of robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // moves the robot forward by one square</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Using the robot.left() Instruction</h3>\n<div class=\"text\">The robot.left() instruction is used to make the robot turn on itself 90 degrees counterclockwise. Note that it does not make the robot move in any direction. To complete a left turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.left() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-035",
          "name"          : "Learning From Our Mistakes",
          "normalizedName": "learning from our mistakes",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=robot-forward>robot.forward()</concept>, <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-left>robot.left()</concept> instructions to help the robot reach the goal.</li><li class=code-item>You must use a <strong>maximum</strong> of 5 instructions.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "// Remember, running your code is important to find bugs!\nrobot.forward(2);\nrobot.right();\nrobot.forward(2);\nrobot.right();\nrobot.forward(2);",
          "solution"      : "// Remember, running your code is important to find bugs!\nrobot.forward();\nrobot.right();\nrobot.forward(3);\nrobot.right();\nrobot.forward(2);",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Using the robot.forward() instruction</h3>\n<div class=\"text\">The robot.forward() <concept ref=\"instruction\">instruction</concept> is used to make the robot move forward by one square. Like any other <concept ref=\"programming languages\">JavaScript</concept> instruction, robot.forward() is <concept ref=\"case sensitive\">case sensitive</concept> and requires <concept ref=\"forgetting parentheses\">precise spelling</concept>.</div>\n<div class=\"code-sample-title\">Example of robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // moves the robot forward by one square</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-036",
          "name"          : "Decomposing a Problem",
          "normalizedName": "decomposing a problem",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=robot-forward>robot.forward()</concept>, <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-left>robot.left()</concept> instructions to help the robot reach the goal.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "// Use robot.forward();, robot.left();\n// and robot.right(); to get to the goal\n?",
          "solution"      : "// Use robot.forward();, robot.left();\n// and robot.right(); to get to the goal\nrobot.left();\nrobot.left();\nrobot.forward(2);\nrobot.left();\nrobot.forward(2);\nrobot.left();\nrobot.forward(6);\nrobot.left();\nrobot.forward(2);\nrobot.left();\nrobot.forward(2);\nrobot.right();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Using the robot.forward() instruction</h3>\n<div class=\"text\">The robot.forward() <concept ref=\"instruction\">instruction</concept> is used to make the robot move forward by one square. Like any other <concept ref=\"programming languages\">JavaScript</concept> instruction, robot.forward() is <concept ref=\"case sensitive\">case sensitive</concept> and requires <concept ref=\"forgetting parentheses\">precise spelling</concept>.</div>\n<div class=\"code-sample-title\">Example of robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // moves the robot forward by one square</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Using the robot.left() Instruction</h3>\n<div class=\"text\">The robot.left() instruction is used to make the robot turn on itself 90 degrees counterclockwise. Note that it does not make the robot move in any direction. To complete a left turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.left() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-037",
          "name"          : "Choosing a Path",
          "normalizedName": "choosing a path",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=robot-forward>robot.forward()</concept>, <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-left>robot.left()</concept> instructions to help the robot reach the goal.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "// Use robot.forward();, robot.left();\n// and robot.right(); to get to the goal\n?",
          "solution"      : "// Use robot.forward();, robot.left();\n// and robot.right(); to get to the goal\nrobot.forward();\nrobot.right();\nrobot.forward(6);\nrobot.left();\nrobot.forward(3);\nrobot.left();\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward(2);\nrobot.right();\nrobot.forward(2);\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward();\nrobot.right();\nrobot.forward(2);",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Using the robot.forward() instruction</h3>\n<div class=\"text\">The robot.forward() <concept ref=\"instruction\">instruction</concept> is used to make the robot move forward by one square. Like any other <concept ref=\"programming languages\">JavaScript</concept> instruction, robot.forward() is <concept ref=\"case sensitive\">case sensitive</concept> and requires <concept ref=\"forgetting parentheses\">precise spelling</concept>.</div>\n<div class=\"code-sample-title\">Example of robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // moves the robot forward by one square</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Using the robot.left() Instruction</h3>\n<div class=\"text\">The robot.left() instruction is used to make the robot turn on itself 90 degrees counterclockwise. Note that it does not make the robot move in any direction. To complete a left turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.left() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-038",
          "name"          : "Master of the Maze",
          "normalizedName": "master of the maze",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=robot-forward>robot.forward()</concept>, <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-left>robot.left()</concept> instructions to help the robot reach the goal.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "// Use robot.forward();, robot.left();\n// and robot.right(); to get to the goal\n?",
          "solution"      : "// Use robot.forward();, robot.left();\n// and robot.right(); to get to the goal\nrobot.left();\nrobot.forward();\nrobot.right();\nrobot.forward(2);\nrobot.right();\nrobot.forward(4);\nrobot.left();\nrobot.forward(2);\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward(2);\nrobot.left();\nrobot.forward(5);\nrobot.left();\nrobot.forward(2);",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Using the robot.forward() instruction</h3>\n<div class=\"text\">The robot.forward() <concept ref=\"instruction\">instruction</concept> is used to make the robot move forward by one square. Like any other <concept ref=\"programming languages\">JavaScript</concept> instruction, robot.forward() is <concept ref=\"case sensitive\">case sensitive</concept> and requires <concept ref=\"forgetting parentheses\">precise spelling</concept>.</div>\n<div class=\"code-sample-title\">Example of robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // moves the robot forward by one square</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Using the robot.left() Instruction</h3>\n<div class=\"text\">The robot.left() instruction is used to make the robot turn on itself 90 degrees counterclockwise. Note that it does not make the robot move in any direction. To complete a left turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.left() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_project-02",
          "name"          : "Project 2 - Building a Better Future",
          "normalizedName": "project 2 - building a better future",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-039",
          "name"          : "The Importance of a Language",
          "normalizedName": "the importance of a language",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-039_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-039_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the building plan using <concept ref=square-draw>square.draw()</concept>. Add a square at the two following coordinates: <strong>(3, 4)</strong> and <strong>(3, 7)</strong>.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-039_en-ca.png\"></div>",
          "boilerplate"   : "square.draw(3, 1);\n?\n?",
          "solution"      : "square.draw(3, 1);\nsquare.draw(3, 4);\nsquare.draw(3, 7);",
          "tips"          : "<h3 class=\"title\" ref=\"square.draw()(cities)\">Using the square.draw() Instruction (with Cities)</h3>\n<div class=\"text\">The square.draw() <concept ref=\"instruction\">instruction</concept> is used to draw squares on the grid at a set of coordinates. The square.draw() instruction has 2 required <concept ref=\"parameter\">parameters</concept> and 2 optional parameters. The parameters must be put in the following order: square.draw(x, y, [type], [direction])</div><div class=\"text\">The x coordinate must be a number between 0 and 14 and is required</div><div class=\"text\">The y coordinate must be a number between 0 and 9 and is required</div><div class=\"text\">The tile type can be any of the following: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optional]</div><div class=\"text\">The tile direction can be any of the following: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optional]</div><div class=\"text\">(Note that the tile direction only affects the tiles of type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Example of square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // creates a house at (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // creates a vertical road at (3,5)\nsquare.draw(17, 7, \"tree\"); // invalid, x coordinate greater than 14\nSquare.draw(0, 0, \"pool\"); // invalid, S of square written in uppercase\nsquare.draw(1, 6, house); // invalid, house missing surrounding quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-040",
          "name"          : "That's a House",
          "normalizedName": "thats a house",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-040_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-040_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=square-draw>square.draw()</concept> instruction to add <strong>4</strong> more squares to the road. The coordinates for these squares are <strong>(5, 1)</strong>, <strong>(5, 2)</strong>, <strong>(5, 3)</strong> and <strong>(5, 4)</strong>. You will need to specify that the squares are roads by adding the <string>\"road\"</string> parameter. (<strong>hint</strong>: look at how it's done for the other squares).</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-040_en-ca.png\"></div>",
          "boilerplate"   : "// These are the vertical road\n?\n?\n?\n?\nsquare.draw(5, 5, \"road\");\nsquare.draw(5, 6, \"road\");\nsquare.draw(5, 7, \"road\");\n\n// These are the houses\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "solution"      : "// These are the vertical road\nsquare.draw(5, 1, \"road\");\nsquare.draw(5, 2, \"road\");\nsquare.draw(5, 3, \"road\");\nsquare.draw(5, 4, \"road\");\nsquare.draw(5, 5, \"road\");\nsquare.draw(5, 6, \"road\");\nsquare.draw(5, 7, \"road\");\n\n// These are the houses\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "tips"          : "<h3 class=\"title\" ref=\"text parameters\">Using Text as a Parameter</h3>\n<div class=\"text\">Some instructions use text as one of their <concept ref=\"parameter\">parameter</concept>. When text is used as parameter, it is important that it is fully surrounded by quotation marks (&quot; &quot;). If the text is not surrounded by quotation marks, the program will think it is a <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Text as a parameter</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" is a text parameter\nsquare.draw(3, 5, blue\"); // invalid, blue is missing an opening quotation mark\nsquare.draw(1, 1, orange); // invalid, orange missing surrounding quotation marks (\" \")</pre>\n<h3 class=\"title\" ref=\"square.draw()(cities)\">Using the square.draw() Instruction (with Cities)</h3>\n<div class=\"text\">The square.draw() <concept ref=\"instruction\">instruction</concept> is used to draw squares on the grid at a set of coordinates. The square.draw() instruction has 2 required <concept ref=\"parameter\">parameters</concept> and 2 optional parameters. The parameters must be put in the following order: square.draw(x, y, [type], [direction])</div><div class=\"text\">The x coordinate must be a number between 0 and 14 and is required</div><div class=\"text\">The y coordinate must be a number between 0 and 9 and is required</div><div class=\"text\">The tile type can be any of the following: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optional]</div><div class=\"text\">The tile direction can be any of the following: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optional]</div><div class=\"text\">(Note that the tile direction only affects the tiles of type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Example of square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // creates a house at (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // creates a vertical road at (3,5)\nsquare.draw(17, 7, \"tree\"); // invalid, x coordinate greater than 14\nSquare.draw(0, 0, \"pool\"); // invalid, S of square written in uppercase\nsquare.draw(1, 6, house); // invalid, house missing surrounding quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-041",
          "name"          : "One More Road",
          "normalizedName": "one more road",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=square-draw>square.draw()</concept> instruction to create a second vertical road. This new road should cover 7 squares at the following coordinates: <strong>(11, 1)</strong>, <strong>(11, 2)</strong>, <strong>(11, 3)</strong>, <strong>(11, 4)</strong>, <strong>(11, 5)</strong>, <strong>(11, 6)</strong> and <strong>(11, 7)</strong>. Don't forget to add the <string>\"road\"</string> parameter to tell the computer that the squares are roads!</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-041_en-ca.png\"></div>",
          "boilerplate"   : "// These are the second vertical road\n?\n?\n?\n?\n?\n?\n?\n\n// These are the first vertical road\nsquare.draw(5, 1, \"road\");\nsquare.draw(5, 2, \"road\");\nsquare.draw(5, 3, \"road\");\nsquare.draw(5, 4, \"road\");\nsquare.draw(5, 5, \"road\");\nsquare.draw(5, 6, \"road\");\nsquare.draw(5, 7, \"road\");\n\n// These are the houses\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "solution"      : "// These are the second vertical road\nsquare.draw(11, 1, \"road\");\nsquare.draw(11, 2, \"road\");\nsquare.draw(11, 3, \"road\");\nsquare.draw(11, 4, \"road\");\nsquare.draw(11, 5, \"road\");\nsquare.draw(11, 6, \"road\");\nsquare.draw(11, 7, \"road\");\n\n// These are the first vertical road\nsquare.draw(5, 1, \"road\");\nsquare.draw(5, 2, \"road\");\nsquare.draw(5, 3, \"road\");\nsquare.draw(5, 4, \"road\");\nsquare.draw(5, 5, \"road\");\nsquare.draw(5, 6, \"road\");\nsquare.draw(5, 7, \"road\");\n\n// These are the houses\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "tips"          : "<h3 class=\"title\" ref=\"text parameters\">Using Text as a Parameter</h3>\n<div class=\"text\">Some instructions use text as one of their <concept ref=\"parameter\">parameter</concept>. When text is used as parameter, it is important that it is fully surrounded by quotation marks (&quot; &quot;). If the text is not surrounded by quotation marks, the program will think it is a <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Text as a parameter</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" is a text parameter\nsquare.draw(3, 5, blue\"); // invalid, blue is missing an opening quotation mark\nsquare.draw(1, 1, orange); // invalid, orange missing surrounding quotation marks (\" \")</pre>\n<h3 class=\"title\" ref=\"square.draw()(cities)\">Using the square.draw() Instruction (with Cities)</h3>\n<div class=\"text\">The square.draw() <concept ref=\"instruction\">instruction</concept> is used to draw squares on the grid at a set of coordinates. The square.draw() instruction has 2 required <concept ref=\"parameter\">parameters</concept> and 2 optional parameters. The parameters must be put in the following order: square.draw(x, y, [type], [direction])</div><div class=\"text\">The x coordinate must be a number between 0 and 14 and is required</div><div class=\"text\">The y coordinate must be a number between 0 and 9 and is required</div><div class=\"text\">The tile type can be any of the following: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optional]</div><div class=\"text\">The tile direction can be any of the following: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optional]</div><div class=\"text\">(Note that the tile direction only affects the tiles of type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Example of square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // creates a house at (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // creates a vertical road at (3,5)\nsquare.draw(17, 7, \"tree\"); // invalid, x coordinate greater than 14\nSquare.draw(0, 0, \"pool\"); // invalid, S of square written in uppercase\nsquare.draw(1, 6, house); // invalid, house missing surrounding quotation marks (\" \")</pre>\n<h3 class=\"title\" ref=\"case sensitive\">Using the Wrong Letter Case in an Instruction</h3>\n<div class=\"text\">It is important that we respect uppercase and lowercase letters in <concept ref=\"instruction\">instruction</concept> names as all instructions in <concept ref=\"programming languages\">JavaScript</concept> are case sensitive.</div>\n<div class=\"code-sample-title\">Example of an invalid instruction</div><pre class=\"codeBlock\">robot.Forward(); // wrong spelling: capital F\nrobot.forward(); // correct spelling</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-042",
          "name"          : "A Change of Direction",
          "normalizedName": "a change of direction",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-042_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-042_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Find and fix the <strong>3</strong> mistakes in the <concept ref=square-draw>square.draw()</concept> instructions used to create the horizontal road. The horizontal road is indicated by a comment.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-042_en-ca.png\"></div>",
          "boilerplate"   : "// These are the horizontal road\nsquare.draw(6, , \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"horizontal\", \"road\");\nsquare.draw(9, 4, \"road\", \"horizontal);\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// These are the second vertical road\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// These are the first vertical road\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// These are the houses\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "solution"      : "// These are the horizontal road\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// These are the second vertical road\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// These are the first vertical road\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// These are the houses\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "tips"          : "<h3 class=\"title\" ref=\"square.draw()(cities)\">Using the square.draw() Instruction (with Cities)</h3>\n<div class=\"text\">The square.draw() <concept ref=\"instruction\">instruction</concept> is used to draw squares on the grid at a set of coordinates. The square.draw() instruction has 2 required <concept ref=\"parameter\">parameters</concept> and 2 optional parameters. The parameters must be put in the following order: square.draw(x, y, [type], [direction])</div><div class=\"text\">The x coordinate must be a number between 0 and 14 and is required</div><div class=\"text\">The y coordinate must be a number between 0 and 9 and is required</div><div class=\"text\">The tile type can be any of the following: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optional]</div><div class=\"text\">The tile direction can be any of the following: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optional]</div><div class=\"text\">(Note that the tile direction only affects the tiles of type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Example of square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // creates a house at (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // creates a vertical road at (3,5)\nsquare.draw(17, 7, \"tree\"); // invalid, x coordinate greater than 14\nSquare.draw(0, 0, \"pool\"); // invalid, S of square written in uppercase\nsquare.draw(1, 6, house); // invalid, house missing surrounding quotation marks (\" \")</pre>\n<h3 class=\"title\" ref=\"text parameters\">Using Text as a Parameter</h3>\n<div class=\"text\">Some instructions use text as one of their <concept ref=\"parameter\">parameter</concept>. When text is used as parameter, it is important that it is fully surrounded by quotation marks (&quot; &quot;). If the text is not surrounded by quotation marks, the program will think it is a <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Text as a parameter</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" is a text parameter\nsquare.draw(3, 5, blue\"); // invalid, blue is missing an opening quotation mark\nsquare.draw(1, 1, orange); // invalid, orange missing surrounding quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-043",
          "name"          : "Something Seems Off...",
          "normalizedName": "something seems off...",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Find and fix the <strong>3</strong> mistakes in the <concept ref=square-draw>square.draw()</concept> instructions used to create the new houses. The new houses are indicated by a comment.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-043_en-ca.png\"></div>",
          "boilerplate"   : "// These are the new houses\nsquare.draw(, 2, \"house\");\nsquare.draw(9, 2, \"house\");\nsquare.draw(7, \"house\", 6);\nsquare.draw(9, 6, house\");\n\n// These are the horizontal road\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// These are the second vertical road\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// These are the first vertical road\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// These are the houses\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "solution"      : "// These are the new houses\nsquare.draw(7, 2, \"house\");\nsquare.draw(9, 2, \"house\");\nsquare.draw(7, 6, \"house\");\nsquare.draw(9, 6, \"house\");\n\n// These are the horizontal road\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// These are the second vertical road\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// These are the first vertical road\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// These are the houses\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "tips"          : "<h3 class=\"title\" ref=\"square.draw()(cities)\">Using the square.draw() Instruction (with Cities)</h3>\n<div class=\"text\">The square.draw() <concept ref=\"instruction\">instruction</concept> is used to draw squares on the grid at a set of coordinates. The square.draw() instruction has 2 required <concept ref=\"parameter\">parameters</concept> and 2 optional parameters. The parameters must be put in the following order: square.draw(x, y, [type], [direction])</div><div class=\"text\">The x coordinate must be a number between 0 and 14 and is required</div><div class=\"text\">The y coordinate must be a number between 0 and 9 and is required</div><div class=\"text\">The tile type can be any of the following: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optional]</div><div class=\"text\">The tile direction can be any of the following: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optional]</div><div class=\"text\">(Note that the tile direction only affects the tiles of type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Example of square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // creates a house at (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // creates a vertical road at (3,5)\nsquare.draw(17, 7, \"tree\"); // invalid, x coordinate greater than 14\nSquare.draw(0, 0, \"pool\"); // invalid, S of square written in uppercase\nsquare.draw(1, 6, house); // invalid, house missing surrounding quotation marks (\" \")</pre>\n<h3 class=\"title\" ref=\"text parameters\">Using Text as a Parameter</h3>\n<div class=\"text\">Some instructions use text as one of their <concept ref=\"parameter\">parameter</concept>. When text is used as parameter, it is important that it is fully surrounded by quotation marks (&quot; &quot;). If the text is not surrounded by quotation marks, the program will think it is a <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Text as a parameter</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" is a text parameter\nsquare.draw(3, 5, blue\"); // invalid, blue is missing an opening quotation mark\nsquare.draw(1, 1, orange); // invalid, orange missing surrounding quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-044",
          "name"          : "Cooling Off",
          "normalizedName": "cooling off",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-044_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-044_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Find and fix the <strong>2</strong> mistakes in the <concept ref=square-draw>square.draw()</concept> instructions used to create the pools. The pools are indicated by a comment.</li><li class=code-item>Use the <concept ref=square-draw>square.draw()</concept> instruction to add <strong>2</strong> more pools to the plan. The coordinates for these squares are <strong>(7, 7)</strong> and <strong>(9, 7)</strong>. You will need to specify that the squares are pools by adding the <string>\"pool\"</string> parameter. (<strong>hint</strong>: look at how it's done for the other squares)</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-044_en-ca.png\"></div>",
          "boilerplate"   : "// These are the pools\nSquare.draw(7, 1, \"pool\");\nsquare.Draw(9, 1, \"pool\");\n?\n?\n\n// Houses around the horizontal road\nsquare.draw(7, 2, \"house\");\nsquare.draw(9, 2, \"house\");\nsquare.draw(7, 6, \"house\");\nsquare.draw(9, 6, \"house\");\n\n// These are the horizontal road\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// These are the second vertical road\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// These are the first vertical road\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// These are the houses\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "solution"      : "// These are the pools\nsquare.draw(7, 1, \"pool\");\nsquare.draw(9, 1, \"pool\");\nsquare.draw(7, 7, \"pool\");\nsquare.draw(9, 7, \"pool\");\n\n// Houses around the horizontal road\nsquare.draw(7, 2, \"house\");\nsquare.draw(9, 2, \"house\");\nsquare.draw(7, 6, \"house\");\nsquare.draw(9, 6, \"house\");\n\n// These are the horizontal road\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// These are the second vertical road\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// These are the first vertical road\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// These are the houses\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "tips"          : "<h3 class=\"title\" ref=\"case sensitive\">Using the Wrong Letter Case in an Instruction</h3>\n<div class=\"text\">It is important that we respect uppercase and lowercase letters in <concept ref=\"instruction\">instruction</concept> names as all instructions in <concept ref=\"programming languages\">JavaScript</concept> are case sensitive.</div>\n<div class=\"code-sample-title\">Example of an invalid instruction</div><pre class=\"codeBlock\">robot.Forward(); // wrong spelling: capital F\nrobot.forward(); // correct spelling</pre>\n<h3 class=\"title\" ref=\"square.draw()(cities)\">Using the square.draw() Instruction (with Cities)</h3>\n<div class=\"text\">The square.draw() <concept ref=\"instruction\">instruction</concept> is used to draw squares on the grid at a set of coordinates. The square.draw() instruction has 2 required <concept ref=\"parameter\">parameters</concept> and 2 optional parameters. The parameters must be put in the following order: square.draw(x, y, [type], [direction])</div><div class=\"text\">The x coordinate must be a number between 0 and 14 and is required</div><div class=\"text\">The y coordinate must be a number between 0 and 9 and is required</div><div class=\"text\">The tile type can be any of the following: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optional]</div><div class=\"text\">The tile direction can be any of the following: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optional]</div><div class=\"text\">(Note that the tile direction only affects the tiles of type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Example of square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // creates a house at (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // creates a vertical road at (3,5)\nsquare.draw(17, 7, \"tree\"); // invalid, x coordinate greater than 14\nSquare.draw(0, 0, \"pool\"); // invalid, S of square written in uppercase\nsquare.draw(1, 6, house); // invalid, house missing surrounding quotation marks (\" \")</pre>\n<h3 class=\"title\" ref=\"text parameters\">Using Text as a Parameter</h3>\n<div class=\"text\">Some instructions use text as one of their <concept ref=\"parameter\">parameter</concept>. When text is used as parameter, it is important that it is fully surrounded by quotation marks (&quot; &quot;). If the text is not surrounded by quotation marks, the program will think it is a <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Text as a parameter</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" is a text parameter\nsquare.draw(3, 5, blue\"); // invalid, blue is missing an opening quotation mark\nsquare.draw(1, 1, orange); // invalid, orange missing surrounding quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-045",
          "name"          : "Adding Some Green",
          "normalizedName": "adding some green",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=square-draw>square.draw()</concept> instruction to add <strong>2</strong> more trees to the plan. The coordinates for these squares are <strong>(2, 4)</strong> and <strong>(2, 7)</strong>. You will need to specify that the squares are trees by adding the <string>\"tree\"</string> parameter. (<strong>hint</strong>: look at how it's done for the other squares)</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-045_en-ca.png\"></div>",
          "boilerplate"   : "// These are the trees\nsquare.draw(2, 1, \"tree\");\n?\n?\n\n// These are the pools\nsquare.draw(7, 1, \"pool\");\nsquare.draw(9, 1, \"pool\");\nsquare.draw(7, 7, \"pool\");\nsquare.draw(9, 7, \"pool\");\n\n// Houses around the horizontal road\nsquare.draw(7, 2, \"house\");\nsquare.draw(9, 2, \"house\");\nsquare.draw(7, 6, \"house\");\nsquare.draw(9, 6, \"house\");\n\n// These are the horizontal road\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// These are the second vertical road\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// These are the first vertical road\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// These are the houses\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "solution"      : "// These are the trees\nsquare.draw(2, 1, \"tree\");\nsquare.draw(2, 4, \"tree\");\nsquare.draw(2, 7, \"tree\");\n\n// These are the pools\nsquare.draw(7, 1, \"pool\");\nsquare.draw(9, 1, \"pool\");\nsquare.draw(7, 7, \"pool\");\nsquare.draw(9, 7, \"pool\");\n\n// Houses around the horizontal road\nsquare.draw(7, 2, \"house\");\nsquare.draw(9, 2, \"house\");\nsquare.draw(7, 6, \"house\");\nsquare.draw(9, 6, \"house\");\n\n// These are the horizontal road\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// These are the second vertical road\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// These are the first vertical road\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// These are the houses\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "tips"          : "<h3 class=\"title\" ref=\"square.draw()(cities)\">Using the square.draw() Instruction (with Cities)</h3>\n<div class=\"text\">The square.draw() <concept ref=\"instruction\">instruction</concept> is used to draw squares on the grid at a set of coordinates. The square.draw() instruction has 2 required <concept ref=\"parameter\">parameters</concept> and 2 optional parameters. The parameters must be put in the following order: square.draw(x, y, [type], [direction])</div><div class=\"text\">The x coordinate must be a number between 0 and 14 and is required</div><div class=\"text\">The y coordinate must be a number between 0 and 9 and is required</div><div class=\"text\">The tile type can be any of the following: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optional]</div><div class=\"text\">The tile direction can be any of the following: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optional]</div><div class=\"text\">(Note that the tile direction only affects the tiles of type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Example of square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // creates a house at (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // creates a vertical road at (3,5)\nsquare.draw(17, 7, \"tree\"); // invalid, x coordinate greater than 14\nSquare.draw(0, 0, \"pool\"); // invalid, S of square written in uppercase\nsquare.draw(1, 6, house); // invalid, house missing surrounding quotation marks (\" \")</pre>\n<h3 class=\"title\" ref=\"text parameters\">Using Text as a Parameter</h3>\n<div class=\"text\">Some instructions use text as one of their <concept ref=\"parameter\">parameter</concept>. When text is used as parameter, it is important that it is fully surrounded by quotation marks (&quot; &quot;). If the text is not surrounded by quotation marks, the program will think it is a <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Text as a parameter</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" is a text parameter\nsquare.draw(3, 5, blue\"); // invalid, blue is missing an opening quotation mark\nsquare.draw(1, 1, orange); // invalid, orange missing surrounding quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-046",
          "name"          : "A New Town",
          "normalizedName": "a new town",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=square-draw>square.draw()</concept> instruction to create your own town! Your town must have at least: <strong>2</strong> <string>\"house\"</string> squares, <strong>2</strong> <string>\"tree\"</string> squares, and <strong>5</strong> <string>\"road\"</string> squares.</li></ol>",
          "boilerplate"   : "// It's up to you to create your own town!",
          "solution"      : "// It's up to you to create your own town!\nsquare.draw(2, 1, \"house\");\nsquare.draw(4, 1, \"house\");\n\nsquare.draw(2, 0, \"tree\");\nsquare.draw(4, 0, \"tree\");\n\nsquare.draw(1, 2, \"road\", \"horizontal\");\nsquare.draw(2, 2, \"road\", \"horizontal\");\nsquare.draw(3, 2, \"road\", \"horizontal\");\nsquare.draw(4, 2, \"road\", \"horizontal\");\nsquare.draw(5, 2, \"road\", \"horizontal\");",
          "tips"          : "<h3 class=\"title\" ref=\"square.draw()(cities)\">Using the square.draw() Instruction (with Cities)</h3>\n<div class=\"text\">The square.draw() <concept ref=\"instruction\">instruction</concept> is used to draw squares on the grid at a set of coordinates. The square.draw() instruction has 2 required <concept ref=\"parameter\">parameters</concept> and 2 optional parameters. The parameters must be put in the following order: square.draw(x, y, [type], [direction])</div><div class=\"text\">The x coordinate must be a number between 0 and 14 and is required</div><div class=\"text\">The y coordinate must be a number between 0 and 9 and is required</div><div class=\"text\">The tile type can be any of the following: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optional]</div><div class=\"text\">The tile direction can be any of the following: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optional]</div><div class=\"text\">(Note that the tile direction only affects the tiles of type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Example of square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // creates a house at (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // creates a vertical road at (3,5)\nsquare.draw(17, 7, \"tree\"); // invalid, x coordinate greater than 14\nSquare.draw(0, 0, \"pool\"); // invalid, S of square written in uppercase\nsquare.draw(1, 6, house); // invalid, house missing surrounding quotation marks (\" \")</pre>\n<h3 class=\"title\" ref=\"text parameters\">Using Text as a Parameter</h3>\n<div class=\"text\">Some instructions use text as one of their <concept ref=\"parameter\">parameter</concept>. When text is used as parameter, it is important that it is fully surrounded by quotation marks (&quot; &quot;). If the text is not surrounded by quotation marks, the program will think it is a <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Text as a parameter</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" is a text parameter\nsquare.draw(3, 5, blue\"); // invalid, blue is missing an opening quotation mark\nsquare.draw(1, 1, orange); // invalid, orange missing surrounding quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-047",
          "name"          : "Smile!",
          "normalizedName": "smile!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=square-draw>square.draw()</concept> instruction to create the drawing below. You will need to use <string>\"blue\"</string> and <string>\"black\"</string> for the <strong>third</strong> parameter of the <concept ref=square-draw>square.draw()</concept> instruction.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-047_en-ca.png\"></div>",
          "boilerplate"   : "square.draw(2, 7, \"blue\");\n?",
          "solution"      : "square.draw(2, 7, \"blue\");\nsquare.draw(5, 7, \"blue\");\nsquare.draw(2, 5, \"black\");\nsquare.draw(3, 4, \"black\");\nsquare.draw(4, 4, \"black\");\nsquare.draw(5, 5, \"black\");",
          "tips"          : "<h3 class=\"title\" ref=\"text parameters\">Using Text as a Parameter</h3>\n<div class=\"text\">Some instructions use text as one of their <concept ref=\"parameter\">parameter</concept>. When text is used as parameter, it is important that it is fully surrounded by quotation marks (&quot; &quot;). If the text is not surrounded by quotation marks, the program will think it is a <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Text as a parameter</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" is a text parameter\nsquare.draw(3, 5, blue\"); // invalid, blue is missing an opening quotation mark\nsquare.draw(1, 1, orange); // invalid, orange missing surrounding quotation marks (\" \")</pre>\n<h3 class=\"title\" ref=\"square.draw()(color)\">Using the square.draw() Instruction (with Colors)</h3>\n<div class=\"text\">The square.draw() <concept ref=\"instruction\">instruction</concept> is used to draw squares on the grid at a set of coordinates. The square.draw() instruction has 2 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: square.draw(x, y, [color]). By default, a square will be black.</div><div class=\"text\">The x coordinate must be a number between 0 and 14 and is required</div><div class=\"text\">The y coordinate must be a number between 0 and 9 and is required</div><div class=\"text\">The color can be any of the following: &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;white&quot;, &quot;gray&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7); // creates a black square at (0,7)\nsquare.draw(3, 5, \"blue\"); // creates a blue square at (3,5)\nsquare.draw(17, 7, \"green\"); // invalid, x coordinate greater than 14\nSquare.draw(0, 0, \"orange\"); // invalid, S of square is written in uppercase\nsquare.draw(1, 6, white); // invalid, white missing surrounding quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-048",
          "name"          : "An Alien",
          "normalizedName": "an alien",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=square-draw>square.draw()</concept> instruction to create the drawing below. You will need to use <string>\"black\"</string> for the <strong>third</strong> parameter of the square.draw(); instruction.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-048_en-ca.png\"></div>",
          "boilerplate"   : "// Write your code here\n\n// Row 1\nsquare.draw(8, 1);\n\n// Row 2\nsquare.draw(4, 2);\nsquare.draw(10, 2);\n\n// Row 3\nsquare.draw(4, 3);\nsquare.draw(5, 3);\nsquare.draw(6, 3);\nsquare.draw(7, 3);\nsquare.draw(8, 3);\nsquare.draw(9, 3);\nsquare.draw(10, 3);\nsquare.draw(12, 3);\n\n// Row 4\nsquare.draw(3, 4);\nsquare.draw(4, 4);\nsquare.draw(5, 4);\nsquare.draw(6, 4);\nsquare.draw(7, 4);\nsquare.draw(8, 4);\nsquare.draw(9, 4);\nsquare.draw(10, 4);\nsquare.draw(12, 4);\n\n// Row 5\nsquare.draw(3, 5);\nsquare.draw(4, 5);\nsquare.draw(6, 5);\nsquare.draw(7, 5);\nsquare.draw(8, 5);\nsquare.draw(10, 5);\n\n// Row 6\nsquare.draw(4, 6);\nsquare.draw(5, 6);\nsquare.draw(6, 6);\nsquare.draw(7, 6);\nsquare.draw(8, 6);\nsquare.draw(9, 6);\nsquare.draw(10, 6);\n\n// Row 7\nsquare.draw(5, 7);\n\n// Row 8\nsquare.draw(10, 8);",
          "solution"      : "// Write your code here\nsquare.draw(5, 1, \"black\");\nsquare.draw(6, 1, \"black\");\nsquare.draw(9, 1, \"black\");\nsquare.draw(2, 2, \"black\");\nsquare.draw(12, 2, \"black\");\nsquare.draw(2, 3, \"black\");\nsquare.draw(2, 4, \"black\");\nsquare.draw(11, 4, \"black\");\nsquare.draw(11, 5, \"black\");\nsquare.draw(9, 7, \"black\");\nsquare.draw(4, 8, \"black\");\n\n// Row 1\nsquare.draw(8, 1);\n\n// Row 2\nsquare.draw(4, 2);\nsquare.draw(10, 2);\n\n// Row 3\nsquare.draw(4, 3);\nsquare.draw(5, 3);\nsquare.draw(6, 3);\nsquare.draw(7, 3);\nsquare.draw(8, 3);\nsquare.draw(9, 3);\nsquare.draw(10, 3);\nsquare.draw(12, 3);\n\n// Row 4\nsquare.draw(3, 4);\nsquare.draw(4, 4);\nsquare.draw(5, 4);\nsquare.draw(6, 4);\nsquare.draw(7, 4);\nsquare.draw(8, 4);\nsquare.draw(9, 4);\nsquare.draw(10, 4);\nsquare.draw(12, 4);\n\n// Row 5\nsquare.draw(3, 5);\nsquare.draw(4, 5);\nsquare.draw(6, 5);\nsquare.draw(7, 5);\nsquare.draw(8, 5);\nsquare.draw(10, 5);\n\n// Row 6\nsquare.draw(4, 6);\nsquare.draw(5, 6);\nsquare.draw(6, 6);\nsquare.draw(7, 6);\nsquare.draw(8, 6);\nsquare.draw(9, 6);\nsquare.draw(10, 6);\n\n// Row 7\nsquare.draw(5, 7);\n\n// Row 8\nsquare.draw(10, 8);",
          "tips"          : "<h3 class=\"title\" ref=\"text parameters\">Using Text as a Parameter</h3>\n<div class=\"text\">Some instructions use text as one of their <concept ref=\"parameter\">parameter</concept>. When text is used as parameter, it is important that it is fully surrounded by quotation marks (&quot; &quot;). If the text is not surrounded by quotation marks, the program will think it is a <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Text as a parameter</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" is a text parameter\nsquare.draw(3, 5, blue\"); // invalid, blue is missing an opening quotation mark\nsquare.draw(1, 1, orange); // invalid, orange missing surrounding quotation marks (\" \")</pre>\n<h3 class=\"title\" ref=\"square.draw()(color)\">Using the square.draw() Instruction (with Colors)</h3>\n<div class=\"text\">The square.draw() <concept ref=\"instruction\">instruction</concept> is used to draw squares on the grid at a set of coordinates. The square.draw() instruction has 2 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: square.draw(x, y, [color]). By default, a square will be black.</div><div class=\"text\">The x coordinate must be a number between 0 and 14 and is required</div><div class=\"text\">The y coordinate must be a number between 0 and 9 and is required</div><div class=\"text\">The color can be any of the following: &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;white&quot;, &quot;gray&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7); // creates a black square at (0,7)\nsquare.draw(3, 5, \"blue\"); // creates a blue square at (3,5)\nsquare.draw(17, 7, \"green\"); // invalid, x coordinate greater than 14\nSquare.draw(0, 0, \"orange\"); // invalid, S of square is written in uppercase\nsquare.draw(1, 6, white); // invalid, white missing surrounding quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-001",
          "name"          : "Quiz 1",
          "description"   : "Instructions and Algorithms",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-001_q-01",
              "question": "<div>In programming, what is an <em>instruction</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-001_q-01_a-01",
                  "value"      : 2,
                  "answer"     : "<div>A special word that allows the computer to take a specific action</div>",
                  "explanation": "Think of an instruction as giving a command to the computer."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>A special type of computer</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-01_a-03",
                  "value" : 0,
                  "answer": "<div>A special computer program</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-01_a-04",
                  "value" : 0,
                  "answer": "<div>All of the above</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-001_q-02",
              "question": "<div>In programming, what is a <em>bug</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>An insect</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-001_q-02_a-02",
                  "value"      : 2,
                  "answer"     : "<div>A problem in a computer program</div>",
                  "explanation": "When the program is not functioning as intended, the problem is known as a <em>bug</em>."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-02_a-03",
                  "value" : 0,
                  "answer": "<div>A special instruction</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-02_a-04",
                  "value" : 0,
                  "answer": "<div>All of the above</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-001_q-03",
              "question": "<div>What is the purpose of the following instruction:</div>\n<pre class=\"language-javascript\"><code>robot.forward(3);</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-03_a-01",
                  "value" : 0,
                  "answer": "<div>Make the robot move a single square</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>Make the robot move forward at a speed of 3</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-001_q-03_a-03",
                  "value"      : 2,
                  "answer"     : "<div>Make the robot move forward a total of 3 squares</div>",
                  "explanation": "The number 3 in the parentheses tells the instruction to move forward 3 times."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>Make the robot move to the square labeled \"3\"</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-001_q-04",
              "question": "<div>Which of the following programs will get the robot to his goal:\n<div class=\"quiz-image\"><img src=\"/images/cs-1_en-CA/quiz-001.question-04.png\" /></div></div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-001_q-04_a-01",
                  "value"      : 2,
                  "answer"     : "<pre class=\"language-javascript\"><code>robot.forward();\nrobot.right();\nrobot.forward();</code></pre>",
                  "explanation": "The robot must move forward before turning right (clockwise)."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-04_a-02",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>robot.right();\nrobot.forward();\nrobot.forward();</code></pre>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-04_a-03",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>robot.forward();\nrobot.left();\nrobot.forward();</code></pre>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-001_q-05",
              "question": "<div>What is the definition of an <em>algorithm</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>A type of computer program</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>A special type of computer</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-001_q-05_a-03",
                  "value"      : 2,
                  "answer"     : "<div>A set of steps to solve a problem</div>",
                  "explanation": "Think of an algorithm as a cooking recipe, where specific steps must be taken in the given order to achieve a goal."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-05_a-04",
                  "value" : 0,
                  "answer": "<div>A cake recipe</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-001_q-06",
              "question": "<div>What is the purpose of the following instruction:</div>\n<pre class=\"language-javascript\"><code>square.draw(1, 2, \"house\");</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-06_a-01",
                  "value" : 0,
                  "answer": "<div>Create a house square of dimensions 1x2</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>Create a house square at the coordinates (2,1)</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-001_q-06_a-03",
                  "value"      : 2,
                  "answer"     : "<div>Create a house square at the coordinates (1,2)</div>",
                  "explanation": "The parameters of <code>square.draw()</code> are: <code>square.draw(x, y, \"type\")</code>."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>Create a house square of dimensions 2x1</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-001_q-07",
              "question": "<div>What is wrong with the following instruction:</div>\n<pre class=\"language-javascript\"><code>square.draw(3, 7, tree);</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-001_q-07_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Quotation marks are missing around the word <em>tree</em> (ex: <string>\"tree\"</string>)</div>",
                  "explanation": "Always remember to place your quotation marks around any text, as it will be seen as an instruction otherwise."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-07_a-02",
                  "value" : 0,
                  "answer": "<div>The word <em>square</em> requires an uppercase \"S\" (ex: <code>Square.draw</code>)</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>The word <em>draw</em> requires an uppercase \"D\" (ex: <code>square.Draw</code>)</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-001_q-07_a-04",
                  "value" : 0,
                  "answer": "<div>All of the above</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 1",
          "trialMode"     : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-259",
          "name"          : "Variables",
          "normalizedName": "variables",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-259_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-259_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-03",
          "name"          : "Project 3 - A Box to the Rescue",
          "normalizedName": "project 3 - a box to the rescue",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-001",
          "name"          : "A Special Box",
          "normalizedName": "a special box",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-001_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-001_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with the word <var id=score>score</var>.</li><li class=code-item>Replace the second question mark with a number smaller than 100.</li></ol>",
          "boilerplate"   : "var ? = ?;",
          "solution"      : "var score = 42;",
          "tips"          : "<h3 class=\"title\" ref=\"variable\">Variable</h3>\n<div class=\"text\">A variable is a special storage space in a program that has a <concept ref=\"variable name\">name</concept> and a <concept ref=\"variable value\">value</concept>. You can think of a variable like a cardboard box with a label identifying its name. The content of the box is the value of the variable.</div>\n<div class=\"code-sample-title\">Example of a variable</div><pre class=\"codeBlock\">var score = 42; // creates a variable named score with a value of 42</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-002",
          "name"          : "The Anatomy of a Box",
          "normalizedName": "the anatomy of a box",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-002_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-002_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Create a variable named <var id=age>age</var> and assign to it a number representing your age.</li></ol>",
          "boilerplate"   : "?",
          "solution"      : "var age = 13;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-003",
          "name"          : "Happy Birthday!",
          "normalizedName": "happy birthday!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's practice creating variables!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Assign to the variable <var id=day>day</var> the day of your birthday. <strong>Hint:</strong> this should be a number between 1 and 31 (ex: var day = 8;).</li><li class=code-item>Create a variable named <var id=month>month</var>. Assign it the month of your birthday (January=1, February=2, etc.). <strong>Hint:</strong> this should be a number between 1 and 12 (ex: var month = 5;).</li><li class=code-item>Create a variable named <var id=year>year</var>. Assign it the year of your birthday. <strong>Hint:</strong> this should be a number, like 2001.</li></ol>",
          "boilerplate"   : "var day = ?;\n?\n?",
          "solution"      : "var day = 1;\nvar month = 1;\nvar year = 1970;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-004",
          "name"          : "A Box in a Box",
          "normalizedName": "a box in a box",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-004_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-004_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Create a new variable named <var id=score>score</var>. Assign to it the product of <var id=coins>coins</var> multiplied by 10. Remember, the multiplication symbol is the asterisk (*).</li></ol>",
          "boilerplate"   : "var coins = 2 + 2;\n?",
          "solution"      : "var coins = 2 + 2;\nvar score = coins * 10;",
          "tips"          : "<h3 class=\"title\" ref=\"variable value\">Assigning a Value to a Variable</h3>\n<div class=\"text\">Assigning a value to a variable means to give it a value. We can assign a value to a variable by referencing its <concept ref=\"variable name\">name</concept> followed by the assignment operator (=) and a value.</div><div class=\"text\">If the variable is a <concept ref=\"variable create\">new variable</concept>, we must use the instruction var before the variable name. The var instruction is required to create a new variable, however it should not be used with an existing variable.</div>\n<div class=\"code-sample-title\">Example of assigning a value to a new and an existing variable</div><pre class=\"codeBlock\">var variableName = 42; // assigns a value of 42 to a new variable\nvariableName = 52; // assigns a value of 52 to an existing variable</pre>\n<div class=\"text\">The value we assign to a variable can be of many different <concept ref=\"data type\">types</concept> and can even be the result of a <concept ref=\"mathematical operators\">calculation</concept>.</div>\n<div class=\"code-sample-title\">Example of assigning a value to variables</div><pre class=\"codeBlock\">var lives; // creates a variable named lives with a value of undefined\nvar score = 42; // creates a variable named score and assigns it the value of 42\nlives = 3; // assigns the value of 3 to the existing variable named lives\nscore = 2 + 2; // assigns the sum of 2 + 2 (4) to the variable score\nvar name = \"EduCode\"; // creates a variable named name and assigns it a value of \"EduCode\"</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-005",
          "name"          : "A Box With a Proper Name",
          "normalizedName": "a box with a proper name",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-005_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-005_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Change the name of the variable <var id=x>x</var> to <var id=priceBeforeTax>priceBeforeTax</var>.</li><li class=code-item>Change the name of the variable <var id=y>y</var> to <var id=tax>tax</var>.</li><li class=code-item>Change the name of the variable <var id=z>z</var> to <var id=priceAfterTax>priceAfterTax</var>.</li></ol>",
          "boilerplate"   : "var x = 10;\nvar y = 1.15;\nvar z = x * y;",
          "solution"      : "var priceBeforeTax = 10;\nvar tax = 1.15;\nvar priceAfterTax = priceBeforeTax * tax;",
          "tips"          : "<h3 class=\"title\" ref=\"variable name\">Naming a Variable</h3>\n<div class=\"text\">The name of a variable is important as it is the only way we can <concept ref=\"variable value\">refer to its value</concept>. A variable name cannot contain spaces or begin with a number.</div><div class=\"text\">Additionally, variable names are regularly written in camelCase to make them easier to read. Names written camelCase use an uppercase letter for the first letter of every word (except the first word).</div>\n<div class=\"code-sample-title\">Example of variable names</div><pre class=\"codeBlock\">var largeGreenApple; // valid name written in proper camelCase\nvar verylongvariablename; // valid name but not written in camelCase\nvar another long variable; // invalid name, contains spaces\nvar 25apples; // invalid name, begins with a number\nvar dollars100; // valid name, number is at the end</pre>\n<h3 class=\"title\" ref=\"variable case sensitive\">Case-Sensitive Variable Names</h3>\n<div class=\"text\">Variable <concept ref=\"variable name\">names</concept> are case sensitive. If two variables have the same name but with different uppercase/lowercase letters, they will be considered as two unique variables. Note that it is not a good practice to have two variables with similar names, as it can easily lead to confusion.</div>\n<div class=\"code-sample-title\">Example of variable names</div><pre class=\"codeBlock\">var aVariableName; // this creates a variable\nvar avariablename; // this creates a different variable</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-006",
          "name"          : "That's a Big Rectangle!",
          "normalizedName": "thats a big rectangle!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's create a program to calculate the area of a rectangle. To calculate the area of a rectangle, you must multiply its width by its length. Can you calculate the area of a rectangle with the specified dimensions?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Create a new variable named <var id=area>area</var>. Assign it the result of <var id=width>width</var> multiplied by <var id=length>length</var>. <strong>Hint:</strong> the multiplication symbol is the asterisk (*).</li></ol>",
          "boilerplate"   : "var width = 10;\nvar length = 10;\n\n// Create the area variable here!\n?",
          "solution"      : "var width = 10;\nvar length = 10;\n\n// Create the area variable here!\nvar area = width * length;",
          "tips"          : "<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-007",
          "name"          : "A Simple Calculator",
          "normalizedName": "a simple calculator",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's see how to use the basic mathematical operators! Complete each of the equations.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Assign to <var id=difference>difference</var> the result of <var id=firstNumber>firstNumber</var> minus <var id=secondNumber>secondNumber</var>. <strong>Hint:</strong> the subtraction symbol is the dash (-).</li><li class=code-item>Assign to <var id=product>product</var> the result of <var id=firstNumber>firstNumber</var> times <var id=secondNumber>secondNumber</var>. <strong>Hint:</strong> the multiplication symbol is the asterisk (*).</li><li class=code-item>Assign to <var id=quotient>quotient</var> the result of <var id=firstNumber>firstNumber</var> divided by <var id=secondNumber>secondNumber</var>. <strong>Hint:</strong> the division symbol is the slash (/).</li></ol>",
          "boilerplate"   : "var firstNumber = 10;\nvar secondNumber = 5;\n\nvar sum = firstNumber + secondNumber;\nvar difference = ?;\nvar product = ?;\nvar quotient = ?;",
          "solution"      : "var firstNumber = 10;\nvar secondNumber = 5;\n\nvar sum = firstNumber + secondNumber;\nvar difference = firstNumber - secondNumber;\nvar product = firstNumber * secondNumber;\nvar quotient = firstNumber / secondNumber;",
          "tips"          : "<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-008",
          "name"          : "An Ever Changing Box",
          "normalizedName": "an ever changing box",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-008_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-008_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Create a new variable named <var id=lives>lives</var>. Assign to it the number 3.</li><li class=code-item>In a different instruction, assign to <var id=lives>lives</var> the number 2.</li></ol>",
          "boilerplate"   : "?\n?",
          "solution"      : "var lives = 3;\nlives = 2;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"variable value\">Assigning a Value to a Variable</h3>\n<div class=\"text\">Assigning a value to a variable means to give it a value. We can assign a value to a variable by referencing its <concept ref=\"variable name\">name</concept> followed by the assignment operator (=) and a value.</div><div class=\"text\">If the variable is a <concept ref=\"variable create\">new variable</concept>, we must use the instruction var before the variable name. The var instruction is required to create a new variable, however it should not be used with an existing variable.</div>\n<div class=\"code-sample-title\">Example of assigning a value to a new and an existing variable</div><pre class=\"codeBlock\">var variableName = 42; // assigns a value of 42 to a new variable\nvariableName = 52; // assigns a value of 52 to an existing variable</pre>\n<div class=\"text\">The value we assign to a variable can be of many different <concept ref=\"data type\">types</concept> and can even be the result of a <concept ref=\"mathematical operators\">calculation</concept>.</div>\n<div class=\"code-sample-title\">Example of assigning a value to variables</div><pre class=\"codeBlock\">var lives; // creates a variable named lives with a value of undefined\nvar score = 42; // creates a variable named score and assigns it the value of 42\nlives = 3; // assigns the value of 3 to the existing variable named lives\nscore = 2 + 2; // assigns the sum of 2 + 2 (4) to the variable score\nvar name = \"EduCode\"; // creates a variable named name and assigns it a value of \"EduCode\"</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-009",
          "name"          : "A Dynamic Box",
          "normalizedName": "a dynamic box",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-009_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-009_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with an instruction to increase the value of <var id=score>score</var> by 100.</li></ol>",
          "boilerplate"   : "var score = 1000;\n?",
          "solution"      : "var score = 1000;\nscore = score + 100;",
          "tips"          : "<h3 class=\"title\" ref=\"undefined variable\">Using Variables with an Undefined Value</h3>\n<div class=\"text\">The default <concept ref=\"variable value\">value</concept> of a variable is undefined. For this reason, it is important that we assign a value to a variable before using it, otherwise we may get strange results.</div>\n<div class=\"code-sample-title\">Example of undefined variable</div><pre class=\"codeBlock\">var coins; // value of coins is undefined\nvar score = coins * 10; // undefined multiplied by 10 is NaN</pre>\n<div class=\"text\">In the above code example, the variable score will receive a value of <concept ref=\"not a number\">NaN</concept>, short for Not a Number, because the result of the expression undefined <concept ref=\"mathematical operators\">multiplied</concept> by 10 is not something that can be calculated.</div>\n<h3 class=\"title\" ref=\"variable assign with variable\">Using a Variable in an Assignment Operation</h3>\n<div class=\"text\">Sometimes a variable will be used to <concept ref=\"variable value\">assign a value</concept> to another variable. In those cases, the value of the variable on the right of the assignment operator (=) will be looked up then the variable on the left will receive its value.</div>\n<div class=\"code-sample-title\">Example of a variable used in an assignment</div><pre class=\"codeBlock\">var firstNumber = 5;\nvar secondNumber = 10 + firstNumber; // secondNumber receives a value of 15</pre>\n<div class=\"text\">To calculate the value of secondNumber, we first look at the value of firstNumber, which is 5, and then calculate the <concept ref=\"mathematical operators\">sum</concept> of 10 plus 5. Once the result 15 is known, we assign it to the variable secondNumber. Note that the variable firstNumber must be created and <concept ref=\"undefined variable\">have a value</concept> before it is used to calculate secondNumber.</div>\n<h3 class=\"title\" ref=\"variable self reference\">Assigning a New Value to a Variable Using its Existing Value</h3>\n<div class=\"text\">Since the right side of an <concept ref=\"variable value\">assignment</concept> operation is always <concept ref=\"mathematical operators\">calculated</concept> first, we can use a variable's current value to calculate a new value. To do this, it is important that the variable has value, otherwise the result will be <concept ref=\"not a number\">NaN</concept> (Not a Number).</div>\n<div class=\"code-sample-title\">Example of using a current value to calculate a new value</div><pre class=\"codeBlock\">var lives = 3;\nlives = lives - 1; // lives will be equal to 2, the current value of lives (3) minus 1\nvar score = score + 100; // invalid, score will be NaN since score has no initial value</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-010",
          "name"          : "In a Fraction of the Time",
          "normalizedName": "in a fraction of the time",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's create a program to convert a fraction into a percentage! To convert a fraction into a percentage, you must first divide the numerator (the top number) by the denominator (the bottom number). Then, you multiply the result by 100 to get a percentage. Complete the program!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=percentage>percentage</var>. Assign to the variable the result of <var id=numerator>numerator</var> divided by <var id=denominator>denominator</var>. <strong>Hint:</strong> the division symbol is the slash (/).</li><li class=code-item>Replace the second question mark with an instruction to multiply the value of <var id=percentage>percentage</var> by 100. This result should be saved into the variable <var id=percentage>percentage</var>. <strong>Hint:</strong> the multiplication symbol is the asterisk (*).</li></ol>",
          "boilerplate"   : "var numerator = 3;\nvar denominator = 4;\n\n// Create percentage variable here and\n// assign it numerator divided by denominator\n?\n\n// Multiply percentage by 100 here and\n// assign the result to percentage\n?",
          "solution"      : "var numerator = 3;\nvar denominator = 4;\n\n// Create percentage variable here and\n// assign it numerator divided by denominator\nvar percentage = numerator / denominator;\n\n// Multiply percentage by 100 here and\n// assign the result to percentage\npercentage = percentage * 100;",
          "tips"          : "<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-011",
          "name"          : "How Many Seconds in a Year?",
          "normalizedName": "how many seconds in a year",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's create a program to calculate how many seconds there are in a year!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Assign to <var id=hoursInYear>hoursInYear</var> the result of <var id=daysInYear>daysInYear</var> multiplied by 24.</li><li class=code-item>Replace the second question mark with a new variable named <var id=minutesInYear>minutesInYear</var>. Assign it the product of <var id=hoursInYear>hoursInYear</var> multiplied by 60.</li><li class=code-item>Replace the third question mark with a new variable named <var id=secondsInYear>secondsInYear</var>. Assign it the result of <var id=minutesInYear>minutesInYear</var> multiplied by 60.</li></ol>",
          "boilerplate"   : "var daysInYear = 365;\n\nvar hoursInYear = ?;\n\n// Create minutesInYear here\n?\n\n// Create secondsInYear here\n?",
          "solution"      : "var daysInYear = 365;\n\nvar hoursInYear = daysInYear * 24;\n\n// Create minutesInYear here\nvar minutesInYear = hoursInYear * 60;\n\n// Create secondsInYear here\nvar secondsInYear = minutesInYear * 60;",
          "tips"          : "<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-012",
          "name"          : "I Love Pizza!",
          "normalizedName": "i love pizza!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's create a program to calculate how many slices of pizza you'll eat in your lifetime!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Assign to <var id=pizzaSlicesPerWeek>pizzaSlicesPerWeek</var> a number between 1 and 10. This variable will represent how many slices of pizza you'll eat every week!</li><li class=code-item>Assign to <var id=lifeSpan>lifeSpan</var> a number less than 100. This variable will represent how many years you'll live.</li><li class=code-item>Replace the third question mark with a new variable named <var id=lifeSpanWeeks>lifeSpanWeeks</var>. Assign it the result of <var id=lifeSpan>lifeSpan</var> multiplied by 52. <strong>Hint:</strong> The multiplication symbol is the asterisk (*).</li><li class=code-item>Replace the fourth question mark with a new variable named <var id=pizzaPerLifeTime>pizzaPerLifeTime</var>. Assign it the result of <var id=lifeSpanWeeks>lifeSpanWeeks</var> multiplied by <var id=pizzaSlicesPerWeek>pizzaSlicesPerWeek</var>. This variable will represent how many slices of pizza you'll eat in your lifetime!</li></ol>",
          "boilerplate"   : "var pizzaSlicesPerWeek = ?;\nvar lifeSpan = ?;\n\n// Create lifeSpanWeeks here\n?\n\n// Create pizzaPerLifeTime here\n?",
          "solution"      : "var pizzaSlicesPerWeek = 2;\nvar lifeSpan = 80;\n\n// Create lifeSpanWeeks here\nvar lifeSpanWeeks = lifeSpan * 52;\n\n// Create pizzaPerLifeTime here\nvar pizzaPerLifetime = lifeSpanWeeks * pizzaSlicesPerWeek;",
          "tips"          : "<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-013",
          "name"          : "What's the Total?",
          "normalizedName": "whats the total",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's create a program that calculates the total after tax of two items. To do so, first sum up the price of the two items, then apply the tax. Can you complete the program?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Create a new variable named <var id=totalBeforeTax>totalBeforeTax</var>. Assign it the result of <var id=firstItem>firstItem</var> plus <var id=secondItem>secondItem</var>.</li><li class=code-item>Create a new variable named <var id=totalAfterTax>totalAfterTax</var>. Assign it the result of <var id=totalBeforeTax>totalBeforeTax</var> multiplied by <var id=tax>tax</var>. <strong>Hint:</strong> The multiplication symbol is the asterisk (*).</li></ol>",
          "boilerplate"   : "var firstItem = 5;\nvar secondItem = 10;\n\nvar tax = 1.15;\n\n// Calculate the total price before tax\n?\n\n// Calculate the total price after tax\n?",
          "solution"      : "var firstItem = 5;\nvar secondItem = 10;\n\nvar tax = 1.15;\n\n// Calculate the total price before tax\nvar totalBeforeTax = firstItem + secondItem;\n\n// Calculate the total price after tax\nvar totalAfterTax = totalBeforeTax * tax;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-068",
          "name"          : "A Trip to Mars",
          "normalizedName": "a trip to mars",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Create a new variable named <var id=numberOfCellsRequired>numberOfCellsRequired</var>. Assign it the result of <var id=distanceToMars>distanceToMars</var> divided by <var id=distancePerFuelCell>distancePerFuelCell</var>. This variable will represent how many fuel cells are required to get to Mars. <strong>Hint:</strong> The division symbol is the slash (/).</li><li class=code-item>Create a new variable named <var id=priceOfTrip>priceOfTrip</var>. Assign it the result of <var id=numberOfCellsRequired>numberOfCellsRequired</var> multiplied by <var id=pricePerFuelCell>pricePerFuelCell</var>. This variable will represent the total cost of the trip to Mars. <strong>Hint:</strong> The multiplication symbol is the asterisk (*).</li></ol>",
          "boilerplate"   : "var distanceToMars = 54600000;\nvar distancePerFuelCell = 500000;\nvar pricePerFuelCell = 1000000;\n\n// Create numberOfCellsRequired here\n?\n\n// Create priceOfTrip here\n?",
          "solution"      : "var distanceToMars = 54600000;\nvar distancePerFuelCell = 500000;\nvar pricePerFuelCell = 1000000;\n\n// Create numberOfCellsRequired here\nvar numberOfCellsRequired = distanceToMars / distancePerFuelCell;\n\n// Create priceOfTrip here\nvar priceOfTrip = numberOfCellsRequired * pricePerFuelCell;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_project-04",
          "name"          : "Project 4 - A Game of Variables",
          "normalizedName": "project 4 - a game of variables",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-014",
          "name"          : "Adding the Player and the Goal",
          "normalizedName": "adding the player and the goal",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-014_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-014_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question marks in the <concept ref=puck-create>puck.create()</concept> instruction by an x coordinate, a y coordinate and a shape. <strong>Hint:</strong> the puck <strong>shape</strong> can be <string>\"circle\"</string>, <string>\"square\"</string>, <string>\"triangle\"</string> or <string>\"hexagon\"</string>.</li><li class=code-item>Replace the question marks in the <concept ref=goal-create>goal.create()</concept> instruction by an x coordinate and a y coordinate.</li></ol>",
          "boilerplate"   : "puck.create(?, ?, \"?\");\n\ngoal.create(?, ?);",
          "solution"      : "puck.create(2, 11, \"circle\");\n\ngoal.create(23, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"physics puzzle game\">How to Play the Physics Puzzle Game</h3>\n<div class=\"text\">The physics puzzle game is a simple game in which the player must try to hit the goal with his puck.</div><div class=\"text\">To play the game, the player's <concept ref=\"puck.create()\">puck</concept> and the <concept ref=\"goal.create()\">goal</concept> must at least be created. To create obstacles, you can use the <concept ref=\"obstacle.create()\">obstacle.create()</concept> instruction.</div>\n<h3 class=\"title\" ref=\"puck.create()\">Using the puck.create() Instruction</h3>\n<div class=\"text\">The puck.create() instruction is used to create the player's puck at a set of coordinates. The puck.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept>. The parameters must be put in the following order: puck.create(x, y, shape).</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div>\n<div class=\"code-sample-title\">Example of puck.create()</div><pre class=\"codeBlock\">puck.create(2, 11, \"circle\"); // creates the circle puck at (2,11)\npuck.create(2, 11); // invalid, missing shape\npuck.create(22, 15, triangle); // invalid, triangle missing surrounding quotation marks (\" \")\npuck.create(\"hexagon\", 10, 11); // invalid, shape before coordinates</pre>\n<h3 class=\"title\" ref=\"goal.create()\">Using the goal.create() Instruction</h3>\n<div class=\"text\">The goal.create() instruction is used to create the game goal at a set of coordinates. The goal.create() instruction has 2 required <concept ref=\"parameter\">parameters</concept>. The parameters must be put in the following order: goal.create(x, y).</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div>\n<div class=\"code-sample-title\">Example of goal.create()</div><pre class=\"codeBlock\">goal.create(20, 11); // creates the goal at (20,11)\ngoal.create(32, 11); // invalid, x coordinate greater than 30\ngoal.Create(15, 11); // invalid, \"C\" of create written in uppercase</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-015",
          "name"          : "Adding Obstacles",
          "normalizedName": "adding obstacles",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-015_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-015_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=obstacle-create>obstacle.create()</concept> instruction to create <string>\"square\"</string> obstacles at the following coordinates: <strong>(26, 10)</strong> and <strong>(26, 12)</strong>.</li></ol>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nobstacle.create(26, 11, \"square\");\n// Create two more obstacles here\n?\n?\n\ngoal.create(28, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nobstacle.create(26, 11, \"square\");\n// Create two more obstacles here\nobstacle.create(26, 10, \"square\");\nobstacle.create(26, 12, \"square\");\n\ngoal.create(28, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"obstacle.create()\">Using the obstacle.create() Instruction</h3>\n<div class=\"text\">The obstacle.create() instruction is used to create the obstacles that stop the player's <concept ref=\"puck.create()\">puck</concept> from reaching the <concept ref=\"goal.create()\">goal</concept>. The obstacle.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: puck.create(x, y, shape, [modifier]). By default, the modifier will be &quot;normal&quot;.</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div><div class=\"text\">The modifier can be any of the following: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // creates a normal square obstacle at (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // creates a faster circle obstacle at (7,7)\nobstacle.create(1, \"triangle\", 17); // invalid, parameters out of order\nobstacle.create(4, 5); // invalid, missing shape\nobstacle.Create(3, 1); // invalid, uppercase C in create\nobstacle.create(6, 6, hexagon); // invalid, hexagon missing surrounding quotation marks (\" \")\nobstacle.create(4, 21, \"octagon\"); // invalid, octagon is not a valid shape</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-016",
          "name"          : "A Change of Shape",
          "normalizedName": "a change of shape",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Change the shape of <strong>every</strong> obstacle to <string>\"circle\"</string>.</li></ol>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nobstacle.create(26, 8, \"square\");\nobstacle.create(26, 9, \"square\");\nobstacle.create(26, 10, \"square\");\nobstacle.create(26, 11, \"square\");\nobstacle.create(26, 12, \"square\");\nobstacle.create(26, 13, \"square\");\nobstacle.create(26, 14, \"square\");\n\ngoal.create(28, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nobstacle.create(26, 8, \"circle\");\nobstacle.create(26, 9, \"circle\");\nobstacle.create(26, 10, \"circle\");\nobstacle.create(26, 11, \"circle\");\nobstacle.create(26, 12, \"circle\");\nobstacle.create(26, 13, \"circle\");\nobstacle.create(26, 14, \"circle\");\n\ngoal.create(28, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"obstacle.create()\">Using the obstacle.create() Instruction</h3>\n<div class=\"text\">The obstacle.create() instruction is used to create the obstacles that stop the player's <concept ref=\"puck.create()\">puck</concept> from reaching the <concept ref=\"goal.create()\">goal</concept>. The obstacle.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: puck.create(x, y, shape, [modifier]). By default, the modifier will be &quot;normal&quot;.</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div><div class=\"text\">The modifier can be any of the following: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // creates a normal square obstacle at (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // creates a faster circle obstacle at (7,7)\nobstacle.create(1, \"triangle\", 17); // invalid, parameters out of order\nobstacle.create(4, 5); // invalid, missing shape\nobstacle.Create(3, 1); // invalid, uppercase C in create\nobstacle.create(6, 6, hexagon); // invalid, hexagon missing surrounding quotation marks (\" \")\nobstacle.create(4, 21, \"octagon\"); // invalid, octagon is not a valid shape</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-017",
          "name"          : "A Box to the Rescue",
          "normalizedName": "a box to the rescue",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-017_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-017_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the word <string>\"circle\"</string> in each of the <concept ref=obstacle-create>obstacle.create()</concept> instructions with the <var id=shape>shape</var> variable. <strong>Hint</strong>: don't forget to remove the quotation marks.</li></ol>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nvar shape = \"triangle\";\n\nobstacle.create(26, 8, \"circle\");\nobstacle.create(26, 9, \"circle\");\nobstacle.create(26, 10, \"circle\");\nobstacle.create(26, 11, \"circle\");\nobstacle.create(26, 12, \"circle\");\nobstacle.create(26, 13, \"circle\");\nobstacle.create(26, 14, \"circle\");\n\ngoal.create(28, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nvar shape = \"triangle\";\n\nobstacle.create(26, 8, shape);\nobstacle.create(26, 9, shape);\nobstacle.create(26, 10, shape);\nobstacle.create(26, 11, shape);\nobstacle.create(26, 12, shape);\nobstacle.create(26, 13, shape);\nobstacle.create(26, 14, shape);\n\ngoal.create(28, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"obstacle.create()\">Using the obstacle.create() Instruction</h3>\n<div class=\"text\">The obstacle.create() instruction is used to create the obstacles that stop the player's <concept ref=\"puck.create()\">puck</concept> from reaching the <concept ref=\"goal.create()\">goal</concept>. The obstacle.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: puck.create(x, y, shape, [modifier]). By default, the modifier will be &quot;normal&quot;.</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div><div class=\"text\">The modifier can be any of the following: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // creates a normal square obstacle at (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // creates a faster circle obstacle at (7,7)\nobstacle.create(1, \"triangle\", 17); // invalid, parameters out of order\nobstacle.create(4, 5); // invalid, missing shape\nobstacle.Create(3, 1); // invalid, uppercase C in create\nobstacle.create(6, 6, hexagon); // invalid, hexagon missing surrounding quotation marks (\" \")\nobstacle.create(4, 21, \"octagon\"); // invalid, octagon is not a valid shape</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-018",
          "name"          : "Everything Is Better With Variables",
          "normalizedName": "everything is better with variables",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's use some variables to create a second wall in our game.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable called <var id=y>y</var>. Assign it the number 6.</li><li class=code-item>Replace the other question marks with 5 obstacles. These obstacles should have the following coordinates: <strong>(26, 6)</strong>, <strong>(27, 6)</strong>, <strong>(28, 6)</strong>, <strong>(29, 6)</strong>, and <strong>(30, 6)</strong>. Use the <var id=y>y</var> variable for their y coordinate and the <var id=shape>shape</var> variable for their shape.</li></ol>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nvar shape = \"triangle\";\n\n// Create your variable here\n?\n\nobstacle.create(23, y, shape);\nobstacle.create(24, y, shape);\nobstacle.create(25, y, shape);\n// Create your obstacles here\n?\n?\n?\n?\n?\n\ny = 16;\n\nobstacle.create(23, y, shape);\nobstacle.create(24, y, shape);\nobstacle.create(25, y, shape);\nobstacle.create(26, y, shape);\nobstacle.create(27, y, shape);\nobstacle.create(28, y, shape);\nobstacle.create(29, y, shape);\nobstacle.create(30, y, shape);\n\ngoal.create(28, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nvar shape = \"triangle\";\n\n// Create your variable here\nvar y = 6;\n\nobstacle.create(23, y, shape);\nobstacle.create(24, y, shape);\nobstacle.create(25, y, shape);\n// Create your obstacles here\nobstacle.create(26, y, shape);\nobstacle.create(27, y, shape);\nobstacle.create(28, y, shape);\nobstacle.create(29, y, shape);\nobstacle.create(30, y, shape);\n\ny = 16;\n\nobstacle.create(23, y, shape);\nobstacle.create(24, y, shape);\nobstacle.create(25, y, shape);\nobstacle.create(26, y, shape);\nobstacle.create(27, y, shape);\nobstacle.create(28, y, shape);\nobstacle.create(29, y, shape);\nobstacle.create(30, y, shape);\n\ngoal.create(28, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"obstacle.create()\">Using the obstacle.create() Instruction</h3>\n<div class=\"text\">The obstacle.create() instruction is used to create the obstacles that stop the player's <concept ref=\"puck.create()\">puck</concept> from reaching the <concept ref=\"goal.create()\">goal</concept>. The obstacle.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: puck.create(x, y, shape, [modifier]). By default, the modifier will be &quot;normal&quot;.</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div><div class=\"text\">The modifier can be any of the following: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // creates a normal square obstacle at (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // creates a faster circle obstacle at (7,7)\nobstacle.create(1, \"triangle\", 17); // invalid, parameters out of order\nobstacle.create(4, 5); // invalid, missing shape\nobstacle.Create(3, 1); // invalid, uppercase C in create\nobstacle.create(6, 6, hexagon); // invalid, hexagon missing surrounding quotation marks (\" \")\nobstacle.create(4, 21, \"octagon\"); // invalid, octagon is not a valid shape</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-019",
          "name"          : "A New Type of Obstacle",
          "normalizedName": "a new type of obstacle",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-019_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-019_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first two quotation marks with the word <string>\"faster\"</string>.</li><li class=code-item>Replace the third quotation mark with the word <string>\"change\"</string>.</li></ol>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nvar shape = \"triangle\";\n\nobstacle.create(23, 8, \"hexagon\", ?);\nobstacle.create(23, 14, \"hexagon\", ?);\nobstacle.create(23, 11, \"hexagon\", ?);\n\nvar y = 6;\n\nobstacle.create(23, y, shape);\nobstacle.create(24, y, shape);\nobstacle.create(25, y, shape);\nobstacle.create(26, y, shape);\nobstacle.create(27, y, shape);\nobstacle.create(28, y, shape);\nobstacle.create(29, y, shape);\nobstacle.create(30, y, shape);\n\ny = 16;\n\nobstacle.create(23, y, shape);\nobstacle.create(24, y, shape);\nobstacle.create(25, y, shape);\nobstacle.create(26, y, shape);\nobstacle.create(27, y, shape);\nobstacle.create(28, y, shape);\nobstacle.create(29, y, shape);\nobstacle.create(30, y, shape);\n\ngoal.create(28, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nvar shape = \"triangle\";\n\nobstacle.create(23, 8, \"hexagon\", \"faster\");\nobstacle.create(23, 14, \"hexagon\", \"faster\");\nobstacle.create(23, 11, \"hexagon\", \"change\");\n\nvar y = 6;\n\nobstacle.create(23, y, shape);\nobstacle.create(24, y, shape);\nobstacle.create(25, y, shape);\nobstacle.create(26, y, shape);\nobstacle.create(27, y, shape);\nobstacle.create(28, y, shape);\nobstacle.create(29, y, shape);\nobstacle.create(30, y, shape);\n\ny = 16;\n\nobstacle.create(23, y, shape);\nobstacle.create(24, y, shape);\nobstacle.create(25, y, shape);\nobstacle.create(26, y, shape);\nobstacle.create(27, y, shape);\nobstacle.create(28, y, shape);\nobstacle.create(29, y, shape);\nobstacle.create(30, y, shape);\n\ngoal.create(28, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"obstacle.create()\">Using the obstacle.create() Instruction</h3>\n<div class=\"text\">The obstacle.create() instruction is used to create the obstacles that stop the player's <concept ref=\"puck.create()\">puck</concept> from reaching the <concept ref=\"goal.create()\">goal</concept>. The obstacle.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: puck.create(x, y, shape, [modifier]). By default, the modifier will be &quot;normal&quot;.</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div><div class=\"text\">The modifier can be any of the following: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // creates a normal square obstacle at (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // creates a faster circle obstacle at (7,7)\nobstacle.create(1, \"triangle\", 17); // invalid, parameters out of order\nobstacle.create(4, 5); // invalid, missing shape\nobstacle.Create(3, 1); // invalid, uppercase C in create\nobstacle.create(6, 6, hexagon); // invalid, hexagon missing surrounding quotation marks (\" \")\nobstacle.create(4, 21, \"octagon\"); // invalid, octagon is not a valid shape</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-020",
          "name"          : "Bugs in the Game",
          "normalizedName": "bugs in the game",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>This level of the game has many bugs! Can you find and fix the bugs so that the game works?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Find and fix the <strong>3</strong> bugs in the <concept ref=obstacle-create>obstacle.create()</concept> instructions. All the bugs are hidden in the <string>\"circle\"</string> obstacles!</li></ol>",
          "boilerplate"   : "puck.create(1, 21, \"circle\");\ngoal.create(7, 19);\n\n// Top-left diagonal\nobstacle.create(4, 11, \"circle\", \"faster\");\nobstacle.create(5, 10, \"faster\", \"circle\");\nobstacle.create(6, 9, \"circle\", \"faster\");\nobstacle.create(7, 8, \"circle\", \"faster\");\nobstacle.create(8, 7, \"circle\", \"faster\");\n\n// Top-right diagonal\nobstacle.create(15, 7, \"circle\", \"faster\");\nobstacle.create(16, 8, \"circle\", \"faster\");\nobstacle.create(17, 9, circle, \"faster\");\nobstacle.create(18, 10, \"circle\", \"faster\");\nobstacle.create(19, 11, \"circle\", \"faster\");\n\n// Bottom-right diagonal\nobstacle.create(19, 18, \"circle\", \"faster\");\nobstacle.create(18, 19, \"circle\", \"faster\");\nobstacle.create(17, \"circle\", 20, \"faster\");\nobstacle.create(16, 21, \"circle\", \"faster\");\nobstacle.create(15, 22, \"circle\", \"faster\");\n\n// All the following obstacles are\n// the square walls. No bugs here!\n\n// Outer shell\nobstacle.create(0, 11, \"square\");\nobstacle.create(1, 11, \"square\");\nobstacle.create(2, 11, \"square\");\nobstacle.create(3, 11, \"square\");\n\nobstacle.create(9, 7, \"square\");\nobstacle.create(10, 7, \"square\");\nobstacle.create(11, 7, \"square\");\nobstacle.create(12, 7, \"square\");\nobstacle.create(13, 7, \"square\");\nobstacle.create(14, 7, \"square\");\n\nobstacle.create(19, 12, \"square\");\nobstacle.create(19, 13, \"square\");\nobstacle.create(19, 14, \"square\");\nobstacle.create(19, 15, \"square\");\nobstacle.create(19, 16, \"square\");\nobstacle.create(19, 17, \"square\");\n\n// Inner shell\nobstacle.create(6, 17, \"square\");\nobstacle.create(5, 18, \"square\");\nobstacle.create(5, 19, \"square\");\nobstacle.create(5, 20, \"square\");\nobstacle.create(5, 21, \"square\");\nobstacle.create(5, 22, \"square\");\n\nobstacle.create(8, 16, \"square\");\nobstacle.create(9, 16, \"square\");\nobstacle.create(7, 16, \"square\");\nobstacle.create(10, 16, \"square\");\nobstacle.create(11, 16, \"square\");\nobstacle.create(12, 16, \"square\");",
          "solution"      : "puck.create(1, 21, \"circle\");\ngoal.create(7, 19);\n\n// Top-left diagonal\nobstacle.create(4, 11, \"circle\", \"faster\");\nobstacle.create(5, 10, \"circle\", \"faster\");\nobstacle.create(6, 9, \"circle\", \"faster\");\nobstacle.create(7, 8, \"circle\", \"faster\");\nobstacle.create(8, 7, \"circle\", \"faster\");\n\n// Top-right diagonal\nobstacle.create(15, 7, \"circle\", \"faster\");\nobstacle.create(16, 8, \"circle\", \"faster\");\nobstacle.create(17, 9, \"circle\", \"faster\");\nobstacle.create(18, 10, \"circle\", \"faster\");\nobstacle.create(19, 11, \"circle\", \"faster\");\n\n// Bottom-right diagonal\nobstacle.create(19, 18, \"circle\", \"faster\");\nobstacle.create(18, 19, \"circle\", \"faster\");\nobstacle.create(17, 20, \"circle\", \"faster\");\nobstacle.create(16, 21, \"circle\", \"faster\");\nobstacle.create(15, 22, \"circle\", \"faster\");\n\n// All the following obstacles are\n// the square walls. No bugs here!\n\n// Outer shell\nobstacle.create(0, 11, \"square\");\nobstacle.create(1, 11, \"square\");\nobstacle.create(2, 11, \"square\");\nobstacle.create(3, 11, \"square\");\n\nobstacle.create(9, 7, \"square\");\nobstacle.create(10, 7, \"square\");\nobstacle.create(11, 7, \"square\");\nobstacle.create(12, 7, \"square\");\nobstacle.create(13, 7, \"square\");\nobstacle.create(14, 7, \"square\");\n\nobstacle.create(19, 12, \"square\");\nobstacle.create(19, 13, \"square\");\nobstacle.create(19, 14, \"square\");\nobstacle.create(19, 15, \"square\");\nobstacle.create(19, 16, \"square\");\nobstacle.create(19, 17, \"square\");\n\n// Inner shell\nobstacle.create(6, 17, \"square\");\nobstacle.create(5, 18, \"square\");\nobstacle.create(5, 19, \"square\");\nobstacle.create(5, 20, \"square\");\nobstacle.create(5, 21, \"square\");\nobstacle.create(5, 22, \"square\");\n\nobstacle.create(8, 16, \"square\");\nobstacle.create(9, 16, \"square\");\nobstacle.create(7, 16, \"square\");\nobstacle.create(10, 16, \"square\");\nobstacle.create(11, 16, \"square\");\nobstacle.create(12, 16, \"square\");",
          "tips"          : "<h3 class=\"title\" ref=\"obstacle.create()\">Using the obstacle.create() Instruction</h3>\n<div class=\"text\">The obstacle.create() instruction is used to create the obstacles that stop the player's <concept ref=\"puck.create()\">puck</concept> from reaching the <concept ref=\"goal.create()\">goal</concept>. The obstacle.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: puck.create(x, y, shape, [modifier]). By default, the modifier will be &quot;normal&quot;.</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div><div class=\"text\">The modifier can be any of the following: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // creates a normal square obstacle at (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // creates a faster circle obstacle at (7,7)\nobstacle.create(1, \"triangle\", 17); // invalid, parameters out of order\nobstacle.create(4, 5); // invalid, missing shape\nobstacle.Create(3, 1); // invalid, uppercase C in create\nobstacle.create(6, 6, hexagon); // invalid, hexagon missing surrounding quotation marks (\" \")\nobstacle.create(4, 21, \"octagon\"); // invalid, octagon is not a valid shape</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-021",
          "name"          : "Building Your Masterpiece",
          "normalizedName": "building your masterpiece",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>It's your turn to create a level! You can use any tool that we've seen so far.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Create a level with a minimum of <strong>15</strong> obstacles. <strong>Reminder</strong>: The <strong>shape</strong> parameter can be <string>\"circle\"</string>, <string>\"square\"</string>, <string>\"triangle\"</string> or <string>\"hexagon\"</string>. The <strong>modifier</strong> parameter can be <string>\"faster\"</string>, <string>\"slower\"</string> or <string>\"change\"</string>.</li></ol>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\ngoal.create(28, 11);\n\n// Create your obstacles after this comment!",
          "solution"      : "puck.create(1, 11, \"circle\");\ngoal.create(28, 11);\n\n// Create your obstacles after this comment!\nobstacle.create(13, 4, \"square\");\nobstacle.create(13, 5, \"square\");\nobstacle.create(13, 6, \"square\");\nobstacle.create(13, 7, \"square\");\nobstacle.create(13, 8, \"square\");\nobstacle.create(13, 9, \"square\");\nobstacle.create(13, 10, \"square\");\nobstacle.create(13, 11, \"square\");\nobstacle.create(13, 12, \"square\");\nobstacle.create(13, 13, \"square\");\nobstacle.create(13, 14, \"square\");\nobstacle.create(13, 15, \"square\");\nobstacle.create(13, 16, \"square\");\nobstacle.create(13, 17, \"square\");\nobstacle.create(13, 18, \"square\");",
          "tips"          : "<h3 class=\"title\" ref=\"obstacle.create()\">Using the obstacle.create() Instruction</h3>\n<div class=\"text\">The obstacle.create() instruction is used to create the obstacles that stop the player's <concept ref=\"puck.create()\">puck</concept> from reaching the <concept ref=\"goal.create()\">goal</concept>. The obstacle.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: puck.create(x, y, shape, [modifier]). By default, the modifier will be &quot;normal&quot;.</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div><div class=\"text\">The modifier can be any of the following: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // creates a normal square obstacle at (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // creates a faster circle obstacle at (7,7)\nobstacle.create(1, \"triangle\", 17); // invalid, parameters out of order\nobstacle.create(4, 5); // invalid, missing shape\nobstacle.Create(3, 1); // invalid, uppercase C in create\nobstacle.create(6, 6, hexagon); // invalid, hexagon missing surrounding quotation marks (\" \")\nobstacle.create(4, 21, \"octagon\"); // invalid, octagon is not a valid shape</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-022",
          "name"          : "Wizard of Pinball",
          "normalizedName": "wizard of pinball",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace each <string>\"hexagon\"</string> shape with the <string>\"triangle\"</string> shape and each <string>\"triangle\"</string> shape with the <string>\"hexagon\"</string> shape. You must use one or more variables to do this.</li></ol>",
          "boilerplate"   : "puck.create(1, 21, \"circle\");\ngoal.create(17, 11);\n\n// Create your variables here!\n\n// Top Line\nobstacle.create(11, 7, \"hexagon\", \"faster\");\nobstacle.create(11, 8, \"hexagon\", \"change\");\nobstacle.create(12, 7, \"hexagon\", \"change\");\nobstacle.create(12, 8, \"hexagon\", \"faster\");\n\nobstacle.create(17, 7, \"triangle\", \"faster\");\nobstacle.create(17, 8, \"triangle\", \"change\");\nobstacle.create(18, 7, \"triangle\", \"change\");\nobstacle.create(18, 8, \"triangle\", \"faster\");\n\nobstacle.create(24, 7, \"hexagon\", \"faster\");\nobstacle.create(24, 8, \"hexagon\", \"change\");\nobstacle.create(25, 7, \"hexagon\", \"change\");\nobstacle.create(25, 8, \"hexagon\", \"faster\");\n\n// Bottom Line\nobstacle.create(11, 15, \"hexagon\", \"faster\");\nobstacle.create(11, 16, \"hexagon\", \"change\");\nobstacle.create(12, 15, \"hexagon\", \"change\");\nobstacle.create(12, 16, \"hexagon\", \"faster\");\n\nobstacle.create(17, 15, \"triangle\", \"faster\");\nobstacle.create(17, 16, \"triangle\", \"change\");\nobstacle.create(18, 15, \"triangle\", \"change\");\nobstacle.create(18, 16, \"triangle\", \"faster\");\n\nobstacle.create(24, 15, \"hexagon\", \"faster\");\nobstacle.create(24, 16, \"hexagon\", \"change\");\nobstacle.create(25, 15, \"hexagon\", \"change\");\nobstacle.create(25, 16, \"hexagon\", \"faster\");\n\n// Do not change these!\nobstacle.create(0, 4, \"circle\", \"faster\");\nobstacle.create(1, 3, \"circle\", \"faster\");\nobstacle.create(2, 2, \"circle\", \"faster\");\nobstacle.create(3, 1, \"circle\", \"faster\");\nobstacle.create(4, 0, \"circle\", \"faster\");\n\nobstacle.create(3, 22, \"square\");\nobstacle.create(3, 21, \"square\");\nobstacle.create(3, 20, \"square\");\nobstacle.create(3, 19, \"square\");\nobstacle.create(3, 18, \"square\");\nobstacle.create(3, 17, \"square\");\nobstacle.create(3, 16, \"square\");\nobstacle.create(3, 15, \"square\");\nobstacle.create(3, 14, \"square\");\nobstacle.create(3, 13, \"square\");\nobstacle.create(3, 12, \"square\");\nobstacle.create(3, 11, \"square\");",
          "solution"      : "puck.create(1, 21, \"circle\");\ngoal.create(17, 11);\n\n// Create your variables here!\nvar hexagon = \"hexagon\";\nvar triangle = \"triangle\";\n\n// Top Line\nobstacle.create(11, 7, triangle, \"faster\");\nobstacle.create(11, 8, triangle, \"change\");\nobstacle.create(12, 7, triangle, \"change\");\nobstacle.create(12, 8, triangle, \"faster\");\n\nobstacle.create(17, 7, hexagon, \"faster\");\nobstacle.create(17, 8, hexagon, \"change\");\nobstacle.create(18, 7, hexagon, \"change\");\nobstacle.create(18, 8, hexagon, \"faster\");\n\nobstacle.create(24, 7, triangle, \"faster\");\nobstacle.create(24, 8, triangle, \"change\");\nobstacle.create(25, 7, triangle, \"change\");\nobstacle.create(25, 8, triangle, \"faster\");\n\n// Bottom Line\nobstacle.create(11, 15, triangle, \"faster\");\nobstacle.create(11, 16, triangle, \"change\");\nobstacle.create(12, 15, triangle, \"change\");\nobstacle.create(12, 16, triangle, \"faster\");\n\nobstacle.create(17, 15, hexagon, \"faster\");\nobstacle.create(17, 16, hexagon, \"change\");\nobstacle.create(18, 15, hexagon, \"change\");\nobstacle.create(18, 16, hexagon, \"faster\");\n\nobstacle.create(24, 15, triangle, \"faster\");\nobstacle.create(24, 16, triangle, \"change\");\nobstacle.create(25, 15, triangle, \"change\");\nobstacle.create(25, 16, triangle, \"faster\");\n\n// Do not change these!\nobstacle.create(0, 4, \"circle\", \"faster\");\nobstacle.create(1, 3, \"circle\", \"faster\");\nobstacle.create(2, 2, \"circle\", \"faster\");\nobstacle.create(3, 1, \"circle\", \"faster\");\nobstacle.create(4, 0, \"circle\", \"faster\");\n\nobstacle.create(3, 22, \"square\");\nobstacle.create(3, 21, \"square\");\nobstacle.create(3, 20, \"square\");\nobstacle.create(3, 19, \"square\");\nobstacle.create(3, 18, \"square\");\nobstacle.create(3, 17, \"square\");\nobstacle.create(3, 16, \"square\");\nobstacle.create(3, 15, \"square\");\nobstacle.create(3, 14, \"square\");\nobstacle.create(3, 13, \"square\");\nobstacle.create(3, 12, \"square\");\nobstacle.create(3, 11, \"square\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"obstacle.create()\">Using the obstacle.create() Instruction</h3>\n<div class=\"text\">The obstacle.create() instruction is used to create the obstacles that stop the player's <concept ref=\"puck.create()\">puck</concept> from reaching the <concept ref=\"goal.create()\">goal</concept>. The obstacle.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: puck.create(x, y, shape, [modifier]). By default, the modifier will be &quot;normal&quot;.</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div><div class=\"text\">The modifier can be any of the following: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // creates a normal square obstacle at (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // creates a faster circle obstacle at (7,7)\nobstacle.create(1, \"triangle\", 17); // invalid, parameters out of order\nobstacle.create(4, 5); // invalid, missing shape\nobstacle.Create(3, 1); // invalid, uppercase C in create\nobstacle.create(6, 6, hexagon); // invalid, hexagon missing surrounding quotation marks (\" \")\nobstacle.create(4, 21, \"octagon\"); // invalid, octagon is not a valid shape</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-023",
          "name"          : "Wall of Triangles",
          "normalizedName": "wall of triangles",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the code to add obstacles at the coordinates: <strong>(22, 12)</strong>, <strong>(23, 13)</strong>, <strong>(24, 14)</strong>, <strong>(25, 15)</strong>, and <strong>(26, 16)</strong>. The coordinates of these obstacles must be calculated using the <var id=x>x</var> and <var id=y>y</var> variables. <strong>Hint:</strong> look at how it's done for the existing obstacles!</li></ol>",
          "boilerplate"   : "puck.create(2, 11, \"triangle\");\ngoal.create(27, 11);\n\nvar x = 21;\nvar y = 11;\n\nobstacle.create(x+5, y-5, \"triangle\");\nobstacle.create(x+4, y-4, \"triangle\");\nobstacle.create(x+3, y-3, \"triangle\");\nobstacle.create(x+2, y-2, \"triangle\");\nobstacle.create(x+1, y-1, \"triangle\");\nobstacle.create(x, y, \"triangle\");\nobstacle.create(?, ?, \"triangle\");\nobstacle.create(?, ?, \"triangle\");\nobstacle.create(?, ?, \"triangle\");\nobstacle.create(?, ?, \"triangle\");\nobstacle.create(?, ?, \"triangle\");",
          "solution"      : "puck.create(2, 11, \"triangle\");\ngoal.create(27, 11);\n\nvar x = 21;\nvar y = 11;\n\nobstacle.create(x+5, y-5, \"triangle\");\nobstacle.create(x+4, y-4, \"triangle\");\nobstacle.create(x+3, y-3, \"triangle\");\nobstacle.create(x+2, y-2, \"triangle\");\nobstacle.create(x+1, y-1, \"triangle\");\nobstacle.create(x, y, \"triangle\");\nobstacle.create(x+1, y+1, \"triangle\");\nobstacle.create(x+2, y+2, \"triangle\");\nobstacle.create(x+3, y+3, \"triangle\");\nobstacle.create(x+4, y+4, \"triangle\");\nobstacle.create(x+5, y+5, \"triangle\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"obstacle.create()\">Using the obstacle.create() Instruction</h3>\n<div class=\"text\">The obstacle.create() instruction is used to create the obstacles that stop the player's <concept ref=\"puck.create()\">puck</concept> from reaching the <concept ref=\"goal.create()\">goal</concept>. The obstacle.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: puck.create(x, y, shape, [modifier]). By default, the modifier will be &quot;normal&quot;.</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div><div class=\"text\">The modifier can be any of the following: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // creates a normal square obstacle at (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // creates a faster circle obstacle at (7,7)\nobstacle.create(1, \"triangle\", 17); // invalid, parameters out of order\nobstacle.create(4, 5); // invalid, missing shape\nobstacle.Create(3, 1); // invalid, uppercase C in create\nobstacle.create(6, 6, hexagon); // invalid, hexagon missing surrounding quotation marks (\" \")\nobstacle.create(4, 21, \"octagon\"); // invalid, octagon is not a valid shape</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-002",
          "name"          : "Quiz 2",
          "description"   : "Variables",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-002_q-01",
              "question": "<div>What is the definition of a <em>variable</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-002_q-01_a-01",
                  "value"      : 2,
                  "answer"     : "<div>A special storage space in the computer's memory</div>",
                  "explanation": "Think of a variable as a cardboard box that we can use to store values."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>Something that changes constantly</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-01_a-03",
                  "value" : 0,
                  "answer": "<div>A number</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-01_a-04",
                  "value" : 0,
                  "answer": "<div>All of the above</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-002_q-02",
              "question": "<div>Select all the variable names that are <strong>valid</strong>.</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-02_a-01",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>var large green apple;</code></pre>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-002_q-02_a-02",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>var firstName;</code></pre>",
                  "explanation": "Short, descriptive name written in camelCase with no spaces."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-02_a-03",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>var 22million;</code></pre>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-002_q-02_a-04",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>var veryLongVariableName;</code></pre>",
                  "explanation": "Long, descriptive name written in camelCase with no spaces."
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-002_q-02_a-05",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>var anotherlongvariablename;</code></pre>",
                  "explanation": "Valid name, but could be written in camelCase instead (anotherLongVariableName)."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-002_q-03",
              "question": "<div>What is the final value of the variable <var>score</var>?</div>\n<pre class=\"language-javascript\"><code>var bonus = 5;\nvar score = 5 + bonus;</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-03_a-01",
                  "value" : 0,
                  "answer": "<div>5</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-002_q-03_a-02",
                  "value"      : 2,
                  "answer"     : "<div>10</div>",
                  "explanation": "Since <var>bonus</var> is equal to 5, the instruction <code>var score = 5 + bonus;</code> becomes: <code>var score = 5 + 5;</code>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-03_a-03",
                  "value" : 0,
                  "answer": "<div>0</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>55</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-002_q-04",
              "question": "<div>What is the final value of the variable <var>lives</var>?</div>\n<pre class=\"language-javascript\"><code>var lives = 5;\nlives = lives + 1;</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-04_a-01",
                  "value" : 0,
                  "answer": "<div>5</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>1</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-002_q-04_a-03",
                  "value"      : 2,
                  "answer"     : "<div>6</div>",
                  "explanation": "Since <var>lives</var> is equal to 5, the instruction <code>var lives = lives + 1;</code> becomes: <code>var lives = 5 + 1;</code>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-04_a-04",
                  "value" : 0,
                  "answer": "<div>0</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-002_q-05",
              "question": "<div>What is wrong with the following instruction:</div>\n<pre class=\"language-javascript\"><code>obstacle.create(5, 5, \"faster\", \"circle\");</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>The parameter <string>\"circle\"</string> is not a valid shape.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>The parameter <string>\"faster\"</string> is not a valid modifier.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-002_q-05_a-03",
                  "value"      : 2,
                  "answer"     : "<div>The parameters <string>\"faster\"</string> and <string>\"circle\"</string> have been inverted.</div>",
                  "explanation": "The parameters of <code>obstacle.create()</code> are: <code>obstacle.create(x, y, \"shape\", \"modifier\")</code>."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-05_a-04",
                  "value" : 0,
                  "answer": "<div>The coordinates (5,5) are invalid.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-002_q-06",
              "question": "<div>True or false. Two different variables can have the same name.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-06_a-01",
                  "value" : 0,
                  "answer": "<div>True</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-002_q-06_a-02",
                  "value"      : 1,
                  "answer"     : "<div>False</div>",
                  "explanation": "Each variable must have a unique name."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-002_q-07",
              "question": "<div>Select all the statements that are true.</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-002_q-07_a-01",
                  "value"      : 1,
                  "answer"     : "<div>The <code>var</code> instruction should only be used to create a new variable.</div>",
                  "explanation": "The <code>var</code> instruction is only used to initially create a variable."
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-002_q-07_a-02",
                  "value"      : 1,
                  "answer"     : "<div>A variable's value can change at anytime during a program.</div>",
                  "explanation": "We can always assign a new value to a variable. (ex: <code>x = 5;</code>)"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>A variable's name does not have to be unique.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-002_q-07_a-04",
                  "value"      : 1,
                  "answer"     : "<div>A variable can only hold one value at a time.</div>",
                  "explanation": "If we assign a second value to a variable, the first value is overwritten."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-002_q-07_a-05",
                  "value" : 0,
                  "answer": "<div>A variable's name cannot contain capital letters.</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 2",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_en-CA_exercise-260",
          "name"          : "Inputs and Outputs",
          "normalizedName": "inputs and outputs",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-260_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-260_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-05",
          "name"          : "Project 5 - Ask Me Anything",
          "normalizedName": "project 5 - ask me anything",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-049",
          "name"          : "Say Something!",
          "normalizedName": "say something!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-049_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-049_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with your first name. It must be surrounded by quotation marks! (example: <string>\"EduCode\"</string>)</li></ol>",
          "boilerplate"   : "console.log(?);",
          "solution"      : "console.log(\"EduCode\");",
          "tips"          : "<h3 class=\"title\" ref=\"output\">Output</h3>\n<div class=\"text\">An output is information returned to us by a program. The sounds coming out of a speaker, or a page from a printer are examples of outputs.</div><div class=\"text\">An example of an instruction to create a <concept ref=\"string\">text</concept> output is the <concept ref=\"console.log()\">console.log()</concept> instruction.</div>\n<h3 class=\"title\" ref=\"console.log()\">Using the console.log() Instruction</h3>\n<div class=\"text\">The console.log() <concept ref=\"instruction\">instruction</concept> allows us to create a text <concept ref=\"output\">output</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be outputted to the program's console.</div><div class=\"text\">Note that the string given as a parameter can be a <concept ref=\"concatenation\">concatenated</concept> string.</div>\n<div class=\"code-sample-title\">Example of console.log()</div><pre class=\"codeBlock\">console.log(\"Hello!\"); // displays: Hello!\nconsole.log(\"Hello \" + \"world!\"); // displays the concatenated string: Hello world!\nconsole.log(Hello!); // invalid, missing quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-050",
          "name"          : "A Variable Output",
          "normalizedName": "a variable output",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-050_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-050_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with your first name. It must be surrounded by quotation marks! (example: <string>\"EduCode\"</string>)</li><li class=code-item>Replace the second question mark with the variable <var id=firstName>firstName</var>.</li></ol>",
          "boilerplate"   : "var firstName = ?;\nconsole.log(?);",
          "solution"      : "var firstName = \"EduCode\";\nconsole.log(firstName);",
          "tips"          : "<h3 class=\"title\" ref=\"variable value\">Assigning a Value to a Variable</h3>\n<div class=\"text\">Assigning a value to a variable means to give it a value. We can assign a value to a variable by referencing its <concept ref=\"variable name\">name</concept> followed by the assignment operator (=) and a value.</div><div class=\"text\">If the variable is a <concept ref=\"variable create\">new variable</concept>, we must use the instruction var before the variable name. The var instruction is required to create a new variable, however it should not be used with an existing variable.</div>\n<div class=\"code-sample-title\">Example of assigning a value to a new and an existing variable</div><pre class=\"codeBlock\">var variableName = 42; // assigns a value of 42 to a new variable\nvariableName = 52; // assigns a value of 52 to an existing variable</pre>\n<div class=\"text\">The value we assign to a variable can be of many different <concept ref=\"data type\">types</concept> and can even be the result of a <concept ref=\"mathematical operators\">calculation</concept>.</div>\n<div class=\"code-sample-title\">Example of assigning a value to variables</div><pre class=\"codeBlock\">var lives; // creates a variable named lives with a value of undefined\nvar score = 42; // creates a variable named score and assigns it the value of 42\nlives = 3; // assigns the value of 3 to the existing variable named lives\nscore = 2 + 2; // assigns the sum of 2 + 2 (4) to the variable score\nvar name = \"EduCode\"; // creates a variable named name and assigns it a value of \"EduCode\"</pre>\n<h3 class=\"title\" ref=\"console.log()\">Using the console.log() Instruction</h3>\n<div class=\"text\">The console.log() <concept ref=\"instruction\">instruction</concept> allows us to create a text <concept ref=\"output\">output</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be outputted to the program's console.</div><div class=\"text\">Note that the string given as a parameter can be a <concept ref=\"concatenation\">concatenated</concept> string.</div>\n<div class=\"code-sample-title\">Example of console.log()</div><pre class=\"codeBlock\">console.log(\"Hello!\"); // displays: Hello!\nconsole.log(\"Hello \" + \"world!\"); // displays the concatenated string: Hello world!\nconsole.log(Hello!); // invalid, missing quotation marks (\" \")</pre>\n<h3 class=\"title\" ref=\"variable in console.log()\">Using a Variable in the console.log() Instruction</h3>\n<div class=\"text\">We can use a <concept ref=\"variable\">variable</concept> as a parameter to the <concept ref=\"console.log()\">console.log()</concept> instruction. The <concept ref=\"variable value\">value</concept> of the variable will be <concept ref=\"output\">outputted</concept> to the program's console.</div><div class=\"text\">Note that the <concept ref=\"variable name\">name</concept> of the variable must not be surrounded by quotation marks, otherwise it will be treated as a <concept ref=\"string\">string</concept>.</div>\n<div class=\"code-sample-title\">Example of console.log() with a variable</div><pre class=\"codeBlock\">var myName = \"EduCode\";\nconsole.log(myName); // displays the text: EduCode\nvar aNumber = 42;\nconsole.log(aNumber); // displays the number: 42\nvar aVariable = \"Coding is fun!\";\nconsole.log(aVariable); // displays the text: Coding is fun!\nconsole.log(\"aVariable\"); // displays the text: aVariable</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-051",
          "name"          : "Full Name Please",
          "normalizedName": "full name please",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Use two variables and console.log() instructions to make the computer say your full name!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with your first name. It must be surrounded by quotation marks! (<strong>example</strong>: \"EduCode\")</li><li class=code-item>Replace the second question mark with a new variable named <var id=lastName>lastName</var>. Assign it your last name! The value of your last name must be surrounded by quotation marks.</li><li class=code-item>Replace the third question mark with a <concept ref=console-log>console.log()</concept> instruction. It should display the value of the variable <var id=lastName>lastName</var>.</li></ol>",
          "boilerplate"   : "var firstName = ?;\n\n// Create the lastName variable\n?\n\nconsole.log(firstName);\n\n// Output the lastName variable\n?",
          "solution"      : "var firstName = \"Edu\";\n\n// Create the lastName variable\nvar lastName = \"Code\";\n\nconsole.log(firstName);\n\n// Output the lastName variable\nconsole.log(lastName);",
          "tips"          : "<h3 class=\"title\" ref=\"variable value\">Assigning a Value to a Variable</h3>\n<div class=\"text\">Assigning a value to a variable means to give it a value. We can assign a value to a variable by referencing its <concept ref=\"variable name\">name</concept> followed by the assignment operator (=) and a value.</div><div class=\"text\">If the variable is a <concept ref=\"variable create\">new variable</concept>, we must use the instruction var before the variable name. The var instruction is required to create a new variable, however it should not be used with an existing variable.</div>\n<div class=\"code-sample-title\">Example of assigning a value to a new and an existing variable</div><pre class=\"codeBlock\">var variableName = 42; // assigns a value of 42 to a new variable\nvariableName = 52; // assigns a value of 52 to an existing variable</pre>\n<div class=\"text\">The value we assign to a variable can be of many different <concept ref=\"data type\">types</concept> and can even be the result of a <concept ref=\"mathematical operators\">calculation</concept>.</div>\n<div class=\"code-sample-title\">Example of assigning a value to variables</div><pre class=\"codeBlock\">var lives; // creates a variable named lives with a value of undefined\nvar score = 42; // creates a variable named score and assigns it the value of 42\nlives = 3; // assigns the value of 3 to the existing variable named lives\nscore = 2 + 2; // assigns the sum of 2 + 2 (4) to the variable score\nvar name = \"EduCode\"; // creates a variable named name and assigns it a value of \"EduCode\"</pre>\n<h3 class=\"title\" ref=\"console.log()\">Using the console.log() Instruction</h3>\n<div class=\"text\">The console.log() <concept ref=\"instruction\">instruction</concept> allows us to create a text <concept ref=\"output\">output</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be outputted to the program's console.</div><div class=\"text\">Note that the string given as a parameter can be a <concept ref=\"concatenation\">concatenated</concept> string.</div>\n<div class=\"code-sample-title\">Example of console.log()</div><pre class=\"codeBlock\">console.log(\"Hello!\"); // displays: Hello!\nconsole.log(\"Hello \" + \"world!\"); // displays the concatenated string: Hello world!\nconsole.log(Hello!); // invalid, missing quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-052",
          "name"          : "Asking the Right Questions",
          "normalizedName": "asking the right questions",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-052_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-052_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a <concept ref=prompt>prompt()</concept> instruction. It should ask the user <string>\"What is your last name?\"</string>.</li></ol>",
          "boilerplate"   : "var firstName = prompt(\"What is your first name?\");\nvar lastName = ?;\n\nconsole.log(firstName);\nconsole.log(lastName);",
          "solution"      : "var firstName = prompt(\"What is your first name?\");\nvar lastName = prompt(\"What is your last name?\");\n\nconsole.log(firstName);\nconsole.log(lastName);",
          "tips"          : "<h3 class=\"title\" ref=\"input\">Input</h3>\n<div class=\"text\">An input is information we give to the program. For example, a calculator takes two numbers as an input, processes them by adding the two numbers and then <concept ref=\"output\">outputs</concept> the result by displaying it on the screen.</div><div class=\"text\">An example of an instruction to create a <concept ref=\"string\">text</concept> input is the <concept ref=\"prompt()\">prompt()</concept> instruction.</div>\n<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-053",
          "name"          : "Adding Some Details",
          "normalizedName": "adding some details",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-053_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-053_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Add the text <string>\"Your last name is \"</string> to the second <concept ref=console-log>console.log()</concept>.</li></ol>",
          "boilerplate"   : "var firstName = prompt(\"What is your first name?\");\nvar lastName = prompt(\"What is your last name?\");\n\nconsole.log(\"Your first name is \" + firstName);\nconsole.log(lastName);",
          "solution"      : "var firstName = prompt(\"What is your first name?\");\nvar lastName = prompt(\"What is your last name?\");\n\nconsole.log(\"Your first name is \" + firstName);\nconsole.log(\"Your last name is \" + lastName);",
          "tips"          : "<h3 class=\"title\" ref=\"console.log() concatenation\">Combining a String and a variable in a console.log()</h3>\n<div class=\"text\">We can combine a <concept ref=\"string\">string</concept> and a variable's <concept ref=\"variable value\">value</concept> between the parentheses of the console.log() to create a complex <concept ref=\"output\">output</concept>.</div><div class=\"text\">To do this, we must use the <concept ref=\"concatenation\">concatenation (+)</concept> operator between every element.</div>\n<div class=\"code-sample-title\">Example of console.log() with a variable and a string</div><pre class=\"codeBlock\">var myName = \"EduCode\";\nconsole.log(\"My name is \" + myName); // displays the concatenated string: My name is EduCode\nvar myAge = 16;\nconsole.log(\"I am \" + myAge + \" years old\"); // displays the concatenated string: I am 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-054",
          "name"          : "A Different Question",
          "normalizedName": "a different question",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a variable named <var id=color>color</var>.</li><li class=code-item>Replace the second question mark with your favorite color. The color must be surrounded by quotation marks! (example: <string>\"green\"</string>)</li><li class=code-item>Replace the third question mark with the text <string>\"Your favorite color is \"</string>.</li><li class=code-item>Replace the last question mark with the variable <var id=color>color</var>.</li></ol>",
          "boilerplate"   : "var ? = ?;\nconsole.log(? + ?);",
          "solution"      : "var color = \"green\";\nconsole.log(\"Your favorite color is \" + color);",
          "tips"          : "<h3 class=\"title\" ref=\"console.log() concatenation\">Combining a String and a variable in a console.log()</h3>\n<div class=\"text\">We can combine a <concept ref=\"string\">string</concept> and a variable's <concept ref=\"variable value\">value</concept> between the parentheses of the console.log() to create a complex <concept ref=\"output\">output</concept>.</div><div class=\"text\">To do this, we must use the <concept ref=\"concatenation\">concatenation (+)</concept> operator between every element.</div>\n<div class=\"code-sample-title\">Example of console.log() with a variable and a string</div><pre class=\"codeBlock\">var myName = \"EduCode\";\nconsole.log(\"My name is \" + myName); // displays the concatenated string: My name is EduCode\nvar myAge = 16;\nconsole.log(\"I am \" + myAge + \" years old\"); // displays the concatenated string: I am 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-055",
          "name"          : "A Single Output",
          "normalizedName": "a single output",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-055_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-055_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with the text <string>\". Your last name is \"</string>.</li><li class=code-item>Replace the second question mark with the variable <var id=lastName>lastName</var>.</li></ol>",
          "boilerplate"   : "var firstName = prompt(\"What is your first name?\");\nvar lastName = prompt(\"What is your last name?\");\n\nconsole.log(\"Your first name is \" + firstName + ? + ?);",
          "solution"      : "var firstName = prompt(\"What is your first name?\");\nvar lastName = prompt(\"What is your last name?\");\n\nconsole.log(\"Your first name is \" + firstName + \". Your last name is \" + lastName);",
          "tips"          : "<h3 class=\"title\" ref=\"console.log() concatenation\">Combining a String and a variable in a console.log()</h3>\n<div class=\"text\">We can combine a <concept ref=\"string\">string</concept> and a variable's <concept ref=\"variable value\">value</concept> between the parentheses of the console.log() to create a complex <concept ref=\"output\">output</concept>.</div><div class=\"text\">To do this, we must use the <concept ref=\"concatenation\">concatenation (+)</concept> operator between every element.</div>\n<div class=\"code-sample-title\">Example of console.log() with a variable and a string</div><pre class=\"codeBlock\">var myName = \"EduCode\";\nconsole.log(\"My name is \" + myName); // displays the concatenated string: My name is EduCode\nvar myAge = 16;\nconsole.log(\"I am \" + myAge + \" years old\"); // displays the concatenated string: I am 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-056",
          "name"          : "A Simple Question",
          "normalizedName": "a simple question",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>This program is supposed to ask the user to input their favorite type of animal. Currently, the program always says that the user's favorite animal is a dog. Let's add an input to the program to allow the user to answer the question!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the word <string>\"dog\"</string> with a <concept ref=prompt>prompt()</concept> instruction. It should ask the user: <string>\"What is your favorite animal?\"</string>.</li></ol>",
          "boilerplate"   : "var favoriteAnimal = \"dog\";\nconsole.log(favoriteAnimal);",
          "solution"      : "var favoriteAnimal = prompt(\"What is your favorite animal?\");\nconsole.log(favoriteAnimal);",
          "tips"          : "<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-057",
          "name"          : "Mastering a Skill",
          "normalizedName": "mastering a skill",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>It is said that it can take up to 10,000 hours to master a skill or an activity. Let's create a program to help us figure out how many years we'll need to master something.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Assign a text value to the variable <var id=skill>skill</var>. This value should represent the skill or activity you want to master (ex: <string>\"sports\"</string>, <string>\"music\"</string>, etc.).</li><li class=code-item>Assign a number value to the variable <var id=timeSpentPerMonth>timeSpentPerMonth</var>. This value should represent the number of hours you want to spend practicing the skill or activity. This number should be smaller than 744 (the number of hours in a month)!</li><li class=code-item>Complete the <concept ref=console-log>console.log()</concept> instruction by replacing the first question mark with the variable <var id=years>years</var> and the second question mark with the variable <var id=skill>skill</var>.</li></ol>",
          "boilerplate"   : "var skill = ?;\nvar timeSpentPerMonth = ?;\n\nvar timeSpentPerYear = timeSpentPerMonth * 12;\n\nvar years = 10000 / timeSpentPerYear;\n\nconsole.log(\"It will take you \" + ? + \" years to master \" + ?);",
          "solution"      : "var skill = \"sports\";\nvar timeSpentPerMonth = 50;\n\nvar timeSpentPerYear = timeSpentPerMonth * 12;\n\nvar years = 10000 / timeSpentPerYear;\n\nconsole.log(\"It will take you \" + years + \" years to master \" + skill);",
          "tips"          : "<h3 class=\"title\" ref=\"variable value\">Assigning a Value to a Variable</h3>\n<div class=\"text\">Assigning a value to a variable means to give it a value. We can assign a value to a variable by referencing its <concept ref=\"variable name\">name</concept> followed by the assignment operator (=) and a value.</div><div class=\"text\">If the variable is a <concept ref=\"variable create\">new variable</concept>, we must use the instruction var before the variable name. The var instruction is required to create a new variable, however it should not be used with an existing variable.</div>\n<div class=\"code-sample-title\">Example of assigning a value to a new and an existing variable</div><pre class=\"codeBlock\">var variableName = 42; // assigns a value of 42 to a new variable\nvariableName = 52; // assigns a value of 52 to an existing variable</pre>\n<div class=\"text\">The value we assign to a variable can be of many different <concept ref=\"data type\">types</concept> and can even be the result of a <concept ref=\"mathematical operators\">calculation</concept>.</div>\n<div class=\"code-sample-title\">Example of assigning a value to variables</div><pre class=\"codeBlock\">var lives; // creates a variable named lives with a value of undefined\nvar score = 42; // creates a variable named score and assigns it the value of 42\nlives = 3; // assigns the value of 3 to the existing variable named lives\nscore = 2 + 2; // assigns the sum of 2 + 2 (4) to the variable score\nvar name = \"EduCode\"; // creates a variable named name and assigns it a value of \"EduCode\"</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-058",
          "name"          : "Your Future Pet",
          "normalizedName": "your future pet",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>This program will help you find the perfect pet for your household. Simply complete the questions!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a <concept ref=prompt>prompt()</concept>. It should ask the user: <string>\"What is your favorite color?\"</string>.</li><li class=code-item>Replace the second question mark with a <concept ref=prompt>prompt()</concept>. It should ask the user: <string>\"Enter a number (ex: 4)\"</string>.</li><li class=code-item>Replace the third question mark with a <concept ref=prompt>prompt()</concept>. It should ask the user: <string>\"What is your favorite animal?\"</string>.</li></ol>",
          "boilerplate"   : "var favoriteColor = ?;\nvar aNumber = ?;\nvar favoriteAnimal = ?;\nvar bodyPart = prompt(\"Enter a body part (ex: legs, eyes, etc.)\");\n\nconsole.log(\"Your dream pet is a \" + favoriteColor + \" \" + favoriteAnimal + \" with \" + aNumber + \" \" + bodyPart);",
          "solution"      : "var favoriteColor = prompt(\"What is your favorite color?\");\nvar aNumber = prompt(\"Enter a number (ex: 4)\");\nvar favoriteAnimal = prompt(\"What is your favorite animal?\");\nvar bodyPart = prompt(\"Enter a body part (ex: legs, eyes, etc.)\");\n\nconsole.log(\"Your dream pet is a \" + favoriteColor + \" \" + favoriteAnimal + \" with \" + aNumber + \" \" + bodyPart);",
          "tips"          : "<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-059",
          "name"          : "What Toppings Would You Like?",
          "normalizedName": "what toppings would you like",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>This program helps the user create a custom pizza. To do so, the user must enter the name of 3 toppings. Then, the program reads back each topping to the user. Can you combine the 3 output instructions into a single output?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Combine the 3 <concept ref=console-log>console.log()</concept> instructions into a single instruction. Your program should output a message like: <string>\"The first pizza topping is cheese. The second pizza topping is pepperoni. The third pizza topping is onions.\"</string>. <strong>Note:</strong> your program should contain a <strong>single</strong> <concept ref=console-log>console.log()</concept> instruction.</li></ol>",
          "boilerplate"   : "var firstTopping = prompt(\"What is the first topping?\");\nvar secondTopping = prompt(\"What is the second topping?\");\nvar thirdTopping = prompt(\"What is the third topping?\");\n\nconsole.log(\"The first pizza topping is \" + firstTopping);\nconsole.log(\"The second pizza topping is \" + secondTopping);\nconsole.log(\"The third pizza topping is \" + thirdTopping);",
          "solution"      : "var firstTopping = prompt(\"What is the first topping?\");\nvar secondTopping = prompt(\"What is the second topping?\");\nvar thirdTopping = prompt(\"What is the third topping?\");\n\nconsole.log(\"The first pizza topping is \" + firstTopping + \". The second pizza topping is \" + secondTopping + \". The third pizza topping is \" + thirdTopping);",
          "tips"          : "<h3 class=\"title\" ref=\"console.log() concatenation\">Combining a String and a variable in a console.log()</h3>\n<div class=\"text\">We can combine a <concept ref=\"string\">string</concept> and a variable's <concept ref=\"variable value\">value</concept> between the parentheses of the console.log() to create a complex <concept ref=\"output\">output</concept>.</div><div class=\"text\">To do this, we must use the <concept ref=\"concatenation\">concatenation (+)</concept> operator between every element.</div>\n<div class=\"code-sample-title\">Example of console.log() with a variable and a string</div><pre class=\"codeBlock\">var myName = \"EduCode\";\nconsole.log(\"My name is \" + myName); // displays the concatenated string: My name is EduCode\nvar myAge = 16;\nconsole.log(\"I am \" + myAge + \" years old\"); // displays the concatenated string: I am 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-060",
          "name"          : "A Magic Trick",
          "normalizedName": "a magic trick",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>This program performs a magic trick. Any number you enter will be transformed into the number 5! Complete the program to see it happen. Make sure to test your program! If it doesn't output the number 5, there is a mistake!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a variable named <var id=myNumber>myNumber</var>. Assign it the response from a prompt() asking the user: <string>\"Enter a positive number (greater than 0)\"</string>. Do not forget the <strong>var</strong> instruction!</li><li class=code-item>Replace the second question mark with a variable named <var id=temporaryNumber>temporaryNumber</var>. Assign it the value of the variable <var id=myNumber>myNumber</var>.</li><li class=code-item>Replace the third question mark with an instruction to multiply <var id=temporaryNumber>temporaryNumber</var> by 2. <strong>Reminder</strong>: the multiplication operator is the asterisk (*).</li><li class=code-item>Replace the fourth question mark with an instruction to add 10 to <var id=temporaryNumber>temporaryNumber</var>.</li><li class=code-item>Replace the fifth question mark with an instruction to divide <var id=temporaryNumber>temporaryNumber</var> by 2. <strong>Reminder</strong>: the division operator is the slash (/).</li></ol>",
          "boilerplate"   : "// Create myNumber here\n?\n\n// Do not change the following line!\nmyNumber = Number(myNumber);\n\n// Create temporaryNumber here\n?\n\ntemporaryNumber = ?;\ntemporaryNumber = ?;\ntemporaryNumber = ?;\ntemporaryNumber = temporaryNumber - myNumber;\n\nconsole.log(\"Your number became the number \" + temporaryNumber);",
          "solution"      : "// Create myNumber here\nvar myNumber = prompt(\"Enter a positive number (greater than 0)\");\n\n// Do not change the following line!\nmyNumber = Number(myNumber);\n\n// Create temporaryNumber here\nvar temporaryNumber = myNumber;\n\ntemporaryNumber = temporaryNumber * 2;\ntemporaryNumber = temporaryNumber + 10;\ntemporaryNumber = temporaryNumber / 2;\ntemporaryNumber = temporaryNumber - myNumber;\n\nconsole.log(\"Your number became the number \" + temporaryNumber);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_project-06",
          "name"          : "Project 6 - A Battle of Inputs",
          "normalizedName": "project 6 - a battle of inputs",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-061",
          "name"          : "What's the Damage?",
          "normalizedName": "whats the damage",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-061_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-061_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=enemyHealth>enemyHealth</var>. Assign to it the value returned by <concept ref=getEnemyHealth>getEnemyHealth()</concept>.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=enemyHealth>enemyHealth</var> the result of <var id=enemyHealth>enemyHealth</var> minus <var id=playerDamage>playerDamage</var>.</li><li class=code-item>Replace the third question mark with <var id=enemyHealth>enemyHealth</var>.</li></ol>",
          "boilerplate"   : "var playerDamage = getPlayerDamage();\n?\n\n?\n\nupdateEnemyHealth(?);",
          "solution"      : "var playerDamage = getPlayerDamage();\nvar enemyHealth = getEnemyHealth();\n\nenemyHealth = enemyHealth - playerDamage;\n\nupdateEnemyHealth(enemyHealth);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-062",
          "name"          : "Patching up Our Wounds",
          "normalizedName": "patching up our wounds",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-062_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-062_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=playerHealth>playerHealth</var>. Assign to it the value returned by <concept ref=getPlayerHealth>getPlayerHealth()</concept>.</li><li class=code-item>Replace the second question mark with a new variable named <var id=healAmount>healAmount</var>. Assign to it the value returned by <concept ref=getHealAmount>getHealAmount()</concept>.</li><li class=code-item>Replace the third question mark with an instruction to assign to <var id=playerHealth>playerHealth</var> the result of <var id=playerHealth>playerHealth</var> plus <var id=healAmount>healAmount</var>.</li><li class=code-item>Replace the fourth question mark with <var id=playerHealth>playerHealth</var>.</li></ol>",
          "boilerplate"   : "?\n?\n\n?\n\nupdatePlayerHealth(?);",
          "solution"      : "var playerHealth = getPlayerHealth();\nvar healAmount = getHealAmount();\n\nplayerHealth = playerHealth + healAmount;\n\nupdatePlayerHealth(playerHealth);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-063",
          "name"          : "Adding Randomness",
          "normalizedName": "adding randomness",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=damageMultiplier>damageMultiplier</var>. Assign to it the value returned by <concept ref=getDamageMultiplier>getDamageMultiplier()</concept>.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=playerDamage>playerDamage</var> the result of <var id=playerDamage>playerDamage</var> multiplied by <var id=damageMultiplier>damageMultiplier</var>. Hint: The multiplication symbol is the asterisk (*).</li></ol>",
          "boilerplate"   : "var playerDamage = getPlayerDamage();\nvar enemyHealth = getEnemyHealth();\n\n?\n?\n\nenemyHealth = enemyHealth - playerDamage;\n\nupdateEnemyHealth(enemyHealth);",
          "solution"      : "var playerDamage = getPlayerDamage();\nvar enemyHealth = getEnemyHealth();\n\nvar damageMultiplier = getDamageMultiplier();\nplayerDamage = playerDamage * damageMultiplier;\n\nenemyHealth = enemyHealth - playerDamage;\n\nupdateEnemyHealth(enemyHealth);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-064",
          "name"          : "The Best Offense Is a Good Defense",
          "normalizedName": "the best offense is a good defense",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-064_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-064_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=playerShield>playerShield</var>. Assign to it the value returned by <concept ref=getPlayerShield>getPlayerShield()</concept>.</li><li class=code-item>Replace the second question mark with a new variable named <var id=shieldAmount>shieldAmount</var>. Assign to it the value returned by <concept ref=getShieldAmount>getShieldAmount()</concept>.</li><li class=code-item>Replace the third question mark with an instruction to assign to <var id=playerShield>playerShield</var> the result of <var id=playerShield>playerShield</var> plus <var id=shieldAmount>shieldAmount</var>.</li><li class=code-item>Replace the fourth question mark with <var id=playerShield>playerShield</var>.</li></ol>",
          "boilerplate"   : "?\n?\n\n?\n\nupdatePlayerShield(?);",
          "solution"      : "var playerShield = getPlayerShield();\nvar shieldAmount = getShieldAmount();\n\nplayerShield = playerShield + shieldAmount;\n\nupdatePlayerShield(playerShield);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-065",
          "name"          : "An Effective Shield",
          "normalizedName": "an effective shield",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-065_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-065_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=enemyShield>enemyShield</var>. Assign to it the value returned by <concept ref=getEnemyShield>getEnemyShield()</concept>.</li><li class=code-item>Replace the second question mark with a new variable named <var id=damageAfterShield>damageAfterShield</var>. Assign to it the value returned by the <concept ref=attackShield>attackShield()</concept> instruction. This instruction requires two parameters: the first is the amount of shield the enemy has and the second is the damage done by the player.</li><li class=code-item>Replace the third question mark with the variable <var id=damageAfterShield>damageAfterShield</var>.</li></ol>",
          "boilerplate"   : "var playerDamage = getPlayerDamage();\nvar enemyHealth = getEnemyHealth();\nvar damageMultiplier = getDamageMultiplier();\n?\n\nplayerDamage = playerDamage * damageMultiplier;\n?\n\nenemyHealth = enemyHealth - ?;\n\nupdateEnemyHealth(enemyHealth);",
          "solution"      : "var playerDamage = getPlayerDamage();\nvar enemyHealth = getEnemyHealth();\nvar damageMultiplier = getDamageMultiplier();\nvar enemyShield = getEnemyShield();\n\nplayerDamage = playerDamage * damageMultiplier;\nvar damageAfterShield = attackShield(enemyShield, playerDamage);\n\nenemyHealth = enemyHealth - damageAfterShield;\n\nupdateEnemyHealth(enemyHealth);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-066",
          "name"          : "Improving Our Shield",
          "normalizedName": "improving our shield",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's make the shield ability more interesting. Instead of only adding 10 points of shield, we'll also add a random bonus shield of 5 to 15 points.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=shieldBonus>shieldBonus</var>. Assign it the value returned by <concept ref=getShieldBonus>getShieldBonus()</concept>.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=shieldAmount>shieldAmount</var> the result of <var id=shieldAmount>shieldAmount</var> plus <var id=shieldBonus>shieldBonus</var>.</li></ol>",
          "boilerplate"   : "var playerShield = getPlayerShield();\nvar shieldAmount = getShieldAmount();\n?\n\n?\n\nplayerShield = playerShield + shieldAmount;\n\nupdatePlayerShield(playerShield);",
          "solution"      : "var playerShield = getPlayerShield();\nvar shieldAmount = getShieldAmount();\nvar shieldBonus = getShieldBonus();\n\nshieldAmount = shieldAmount + shieldBonus;\n\nplayerShield = playerShield + shieldAmount;\n\nupdatePlayerShield(playerShield);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-067",
          "name"          : "Improving Our Healing",
          "normalizedName": "improving our healing",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's make the healing ability more interesting. Instead of only adding 10 hitpoints, we'll also add a random bonus of 10 to 20 hitpoints.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=healingBonus>healingBonus</var>. Assign it the value returned by <concept ref=getHealingBonus>getHealingBonus()</concept>.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=healAmount>healAmount</var> the result of <var id=healAmount>healAmount</var> plus <var id=healingBonus>healingBonus</var>.</li></ol>",
          "boilerplate"   : "var playerHealth = getPlayerHealth();\nvar healAmount = getHealAmount();\n?\n\n?\n\nplayerHealth = playerHealth + healAmount;\n\nupdatePlayerHealth(playerHealth);",
          "solution"      : "var playerHealth = getPlayerHealth();\nvar healAmount = getHealAmount();\nvar healingBonus = getHealingBonus();\n\nhealAmount = healAmount + healingBonus;\n\nplayerHealth = playerHealth + healAmount;\n\nupdatePlayerHealth(playerHealth);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"variable value\">Assigning a Value to a Variable</h3>\n<div class=\"text\">Assigning a value to a variable means to give it a value. We can assign a value to a variable by referencing its <concept ref=\"variable name\">name</concept> followed by the assignment operator (=) and a value.</div><div class=\"text\">If the variable is a <concept ref=\"variable create\">new variable</concept>, we must use the instruction var before the variable name. The var instruction is required to create a new variable, however it should not be used with an existing variable.</div>\n<div class=\"code-sample-title\">Example of assigning a value to a new and an existing variable</div><pre class=\"codeBlock\">var variableName = 42; // assigns a value of 42 to a new variable\nvariableName = 52; // assigns a value of 52 to an existing variable</pre>\n<div class=\"text\">The value we assign to a variable can be of many different <concept ref=\"data type\">types</concept> and can even be the result of a <concept ref=\"mathematical operators\">calculation</concept>.</div>\n<div class=\"code-sample-title\">Example of assigning a value to variables</div><pre class=\"codeBlock\">var lives; // creates a variable named lives with a value of undefined\nvar score = 42; // creates a variable named score and assigns it the value of 42\nlives = 3; // assigns the value of 3 to the existing variable named lives\nscore = 2 + 2; // assigns the sum of 2 + 2 (4) to the variable score\nvar name = \"EduCode\"; // creates a variable named name and assigns it a value of \"EduCode\"</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-003",
          "name"          : "Quiz 3",
          "description"   : "Input and Outputs",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-003_q-01",
              "question": "<div>What is an <em>input</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-003_q-01_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Information we give to our program</div>",
                  "explanation": "Data given to the computer to process is known as <em>input</en>."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>The first instruction in a program</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-01_a-03",
                  "value" : 0,
                  "answer": "<div>The instructions in a program</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-01_a-04",
                  "value" : 0,
                  "answer": "<div>A way for computers to think</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-003_q-02",
              "question": "<div>What is the final value of the variable <var>name</var>?</div>\n<pre class=\"language-javascript\"><code>var name = prompt(\"What is your name?\");</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>The text <string>\"What is your name?\"</string></div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-003_q-02_a-02",
                  "value"      : 2,
                  "answer"     : "<div>Anything the user enters</div>",
                  "explanation": "The <code>prompt()</code> instruction returns a text value that represents the user's answer to the prompt."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-02_a-03",
                  "value" : 0,
                  "answer": "<div>No value</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-02_a-04",
                  "value" : 0,
                  "answer": "<div>The word <string>\"prompt\"</string></div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-003_q-03",
              "question": "<div>What is an <em>output</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-03_a-01",
                  "value" : 0,
                  "answer": "<div>A way for us to give information to our program</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>The last instruction in a program</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-03_a-03",
                  "value" : 0,
                  "answer": "<div>A special instruction</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-003_q-03_a-04",
                  "value"      : 2,
                  "answer"     : "<div>Information that our computer gives us</div>",
                  "explanation": "Any information that our computer displays to us during the program."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-003_q-04",
              "question": "<div>Select the correct statement.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-003_q-04_a-01",
                  "value"      : 2,
                  "answer"     : "<div><code>console.log()</code> creates a text output, while <code>prompt()</code> creates a text input.</div>",
                  "explanation": "The <code>prompt()</code> instruction creates a text input that can be used to ask a question to the user. The <code>console.log()</code> instruction displays some text to the program console."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-04_a-02",
                  "value" : 0,
                  "answer": "<div><code>console.log()</code> and <code>prompt()</code> both create text outputs.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-04_a-03",
                  "value" : 0,
                  "answer": "<div><code>console.log()</code> and <code>prompt()</code> both create text inputs.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-04_a-04",
                  "value" : 0,
                  "answer": "<div><code>prompt()</code> creates a text output, while <code>console.log()</code> creates a text input.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-003_q-05",
              "question": "<div>True or false. A program can have multiple inputs.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-003_q-05_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "A program can have as many inputs as we want."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-003_q-06",
              "question": "<div>Select the correct statement.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-06_a-01",
                  "value" : 0,
                  "answer": "<div>Clicking a button is an example of both an input and an output.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>Clicking a button is an example of an output.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-003_q-06_a-03",
                  "value"      : 2,
                  "answer"     : "<div>Clicking a button is an example of an input.</div>",
                  "explanation": "By clicking a button, we are creating an input."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-003_q-07",
              "question": "<div>True or false. A program can have multiple outputs.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-003_q-07_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "A program can have as many outputs as we want."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-003_q-07_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 3",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_en-CA_exercise-261",
          "name"          : "Data Types",
          "normalizedName": "data types",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-261_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-261_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-07",
          "name"          : "Project 7 - A String and a Number",
          "normalizedName": "project 7 - a string and a number",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-069",
          "name"          : "The Total Is...",
          "normalizedName": "the total is...",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-069_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-069_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=firstItemPrice>firstItemPrice</var>. Assign to it a number smaller than 100.</li><li class=code-item>Replace the second question mark with a new variable named <var id=secondItemPrice>secondItemPrice</var>. Assign to it a number smaller than 100.</li><li class=code-item>Replace the last two question marks with an instruction to assign to <var id=total>total</var> the result of <var id=firstItemPrice>firstItemPrice</var> plus <var id=secondItemPrice>secondItemPrice</var>.</li></ol>",
          "boilerplate"   : "// Get the price of the items from user\n?\n?\n\nvar total = ? + ?;\n\nconsole.log(\"The total price is \" + total.toFixed(2) + \"$\");",
          "solution"      : "// Get the price of the items from user\nvar firstItemPrice = 10.50;\nvar secondItemPrice = 5;\n\nvar total = firstItemPrice + secondItemPrice;\n\nconsole.log(\"The total price is \" + total.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"number\">Numbers</h3>\n<div class=\"text\">Numbers are values that we can use in <concept ref=\"mathematical operators\">mathematical operations</concept>. Numbers must be written with no spaces in between the digits and decimals must be separated using a dot (.) not a comma (,).</div>\n<div class=\"code-sample-title\">Example of numbers</div><pre class=\"codeBlock\">var aNumber = 42;\nvar aVeryLargeNumber = 10000000;\nvar anotherLargeNumber = 100 000 000; // invalid, contains spaces\nvar aDecimalNumber = 1.15;\nvar anotherDecimalNumber = 1,15; // invalid, uses comma instead of dot</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-070",
          "name"          : "What's Your Type?",
          "normalizedName": "whats your type",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-070_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-070_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the first <concept ref=console-log>console.log()</concept> with question marks. The first question mark should be replaced by the variable <var id=aString>aString</var> and the second should also be replaced by <var id=aString>aString</var>.</li><li class=code-item>Complete the second <concept ref=console-log>console.log()</concept> with question marks. The first question mark should be replaced by the variable <var id=aString>aString</var> and the second should be replaced by <var id=aNumber>aNumber</var>.</li><li class=code-item>Complete the third <concept ref=console-log>console.log()</concept> with question marks. The first question mark should be replaced by the variable <var id=aNumber>aNumber</var> and the second should be replaced by <var id=aString>aString</var>.</li></ol>",
          "boilerplate"   : "var aString = \"3\";\nvar aNumber = 2;\n\nconsole.log(\"number + number = \" + (aNumber + aNumber));\nconsole.log(\"string + string = \" + (? + ?));\nconsole.log(\"string + number = \" + (? + ?));\nconsole.log(\"number + string = \" + (? + ?));",
          "solution"      : "var aString = \"3\";\nvar aNumber = 2;\n\nconsole.log(\"number + number = \" + (aNumber + aNumber));\nconsole.log(\"string + string = \" + (aString + aString));\nconsole.log(\"string + number = \" + (aString + aNumber));\nconsole.log(\"number + string = \" + (aNumber + aString));",
          "tips"          : "<h3 class=\"title\" ref=\"data type\">Data Types</h3>\n<div class=\"text\">The <concept ref=\"variable value\">value</concept> of a variable has a type. It is important to consider the type of data a variable holds when performing operations. Some common types are <concept ref=\"number\">numbers</concept> and <concept ref=\"string\">strings</concept>.</div>\n<h3 class=\"title\" ref=\"string\">Strings</h3>\n<div class=\"text\">String are values that we can use to represent text. A string always begins and ends with a quotation mark. Multiple strings can be combined using the <concept ref=\"concatenation\">concatenation operator (+)</concept>.</div>\n<div class=\"code-sample-title\">Example of strings</div><pre class=\"codeBlock\">var myName = \"EduCode\";\nvar aSentence = \"Coding is fun!\";\nvar anotherSentence = I love coding!; // invalid, missing quotation marks (\" \")</pre>\n<div class=\"text\">Strings can also be used to represent <concept ref=\"number\">numbers</concept>. However these numbers cannot be used in mathematical operations without first using the <concept ref=\"Number()\">Number()</concept> instruction.</div>\n<div class=\"code-sample-title\">Example of strings representing numbers</div><pre class=\"codeBlock\">var aStringNumber = \"450\"; // text representation of 450\nvar result = aStringNumber + 10; // result will be 45010</pre>\n<h3 class=\"title\" ref=\"number\">Numbers</h3>\n<div class=\"text\">Numbers are values that we can use in <concept ref=\"mathematical operators\">mathematical operations</concept>. Numbers must be written with no spaces in between the digits and decimals must be separated using a dot (.) not a comma (,).</div>\n<div class=\"code-sample-title\">Example of numbers</div><pre class=\"codeBlock\">var aNumber = 42;\nvar aVeryLargeNumber = 10000000;\nvar anotherLargeNumber = 100 000 000; // invalid, contains spaces\nvar aDecimalNumber = 1.15;\nvar anotherDecimalNumber = 1,15; // invalid, uses comma instead of dot</pre>\n<h3 class=\"title\" ref=\"concatenation\">Combining Strings and Other Values (Concatenation)</h3>\n<div class=\"text\">The result of the + operator depends on the type of data that is being used.</div><div class=\"text\">If the two values being added are numbers, then the + operator will work as the <concept ref=\"mathematical operators\">addition operator</concept> in math.</div><div class=\"text\">However, when used with a string, the + symbol is used as the concatenation operator and combines the values to form a <concept ref=\"string\">string</concept>.</div>\n<div class=\"code-sample-title\">Example of + symbol</div><pre class=\"codeBlock\">var result = 10 + 10; // number + number, result is 20 (number)\nresult = \"10\" + \"10\"; // string + string, result is 1010 (string)\nresult = \"10\" + 10; // string + number, result is 1010 (string)\nresult = \"10\" + (10 + 10); // string + (number + number), result is 1020 (string)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-071",
          "name"          : "What's the Price?",
          "normalizedName": "whats the price",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-071_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-071_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with an instruction to assign to <var id=secondItemPrice>secondItemPrice</var> the value of <var id=secondItemPrice>secondItemPrice</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li></ol>",
          "boilerplate"   : "// Get the price of the items from user\nvar firstItemPrice = prompt(\"What is the price of the first item?\");\nvar secondItemPrice = prompt(\"What is the price of the second item?\");\n\nfirstItemPrice = Number(firstItemPrice);\n?\n\nvar total = firstItemPrice + secondItemPrice;\n\nconsole.log(\"The total price is \" + total.toFixed(2) + \"$\");",
          "solution"      : "// Get the price of the items from user\nvar firstItemPrice = prompt(\"What is the price of the first item?\");\nvar secondItemPrice = prompt(\"What is the price of the second item?\");\n\nfirstItemPrice = Number(firstItemPrice);\nsecondItemPrice = Number(secondItemPrice);\n\nvar total = firstItemPrice + secondItemPrice;\n\nconsole.log(\"The total price is \" + total.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"data type\">Data Types</h3>\n<div class=\"text\">The <concept ref=\"variable value\">value</concept> of a variable has a type. It is important to consider the type of data a variable holds when performing operations. Some common types are <concept ref=\"number\">numbers</concept> and <concept ref=\"string\">strings</concept>.</div>\n<h3 class=\"title\" ref=\"number\">Numbers</h3>\n<div class=\"text\">Numbers are values that we can use in <concept ref=\"mathematical operators\">mathematical operations</concept>. Numbers must be written with no spaces in between the digits and decimals must be separated using a dot (.) not a comma (,).</div>\n<div class=\"code-sample-title\">Example of numbers</div><pre class=\"codeBlock\">var aNumber = 42;\nvar aVeryLargeNumber = 10000000;\nvar anotherLargeNumber = 100 000 000; // invalid, contains spaces\nvar aDecimalNumber = 1.15;\nvar anotherDecimalNumber = 1,15; // invalid, uses comma instead of dot</pre>\n<h3 class=\"title\" ref=\"not a number\">Not a Number (NaN)</h3>\n<div class=\"text\">Not a Number (NaN) is a special value used by <concept ref=\"programming languages\">JavaScript</concept> when a <concept ref=\"mathematical operators\">mathematical</concept> expression cannot be calculated.</div><div class=\"text\">For example, doing an addition with an <concept ref=\"undefined variable\">undefined</concept> variable or converting a word with the <concept ref=\"Number()\">Number()</concept> instruction will both produce NaN.</div>\n<div class=\"code-sample-title\">Example of NaN (Not a Number)</div><pre class=\"codeBlock\">var aNumber;\nvar result = 10 + aNumber; // 10 plus undefined is equal to NaN\n\nvar aString = \"Hello\";\naString = Number(aString); // \"Hello\" cannot be converted to a number, returns NaN</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-072",
          "name"          : "That'll Be 10.77$ Please.",
          "normalizedName": "thatll be 10.77 please.",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an instruction to assign to <var id=userMoney>userMoney</var> the value of <var id=userMoney>userMoney</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Replace the second question mark with a new variable named <var id=change>change</var>. Assign to it the result of <var id=userMoney>userMoney</var> minus <var id=total>total</var>.</li><li class=code-item>Replace the third question mark with the variable <var id=change>change</var> to output its value.</li></ol>",
          "boilerplate"   : "// Get the price of the items from user\nvar firstItemPrice = prompt(\"What is the price of the first item?\");\nvar secondItemPrice = prompt(\"What is the price of the second item?\");\n\nfirstItemPrice = Number(firstItemPrice);\nsecondItemPrice = Number(secondItemPrice);\n\nvar total = firstItemPrice + secondItemPrice;\n\nconsole.log(\"The total price is \" + total);\n\n// Ask the user to input money\nvar userMoney = prompt(\"How much money do you have?\");\n?\n\n?\n\nconsole.log(\"Your change is \" + ? + \"$\");",
          "solution"      : "// Get the price of the items from user\nvar firstItemPrice = prompt(\"What is the price of the first item?\");\nvar secondItemPrice = prompt(\"What is the price of the second item?\");\n\nfirstItemPrice = Number(firstItemPrice);\nsecondItemPrice = Number(secondItemPrice);\n\nvar total = firstItemPrice + secondItemPrice;\n\nconsole.log(\"The total price is \" + total);\n\n// Ask the user to input money\nvar userMoney = prompt(\"How much money do you have?\");\nuserMoney = Number(userMoney);\n\nvar change = userMoney - total;\n\nconsole.log(\"Your change is \" + change + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"Number()\">Using the Number() Instruction</h3>\n<div class=\"text\">The Number() instruction converts a string into a <concept ref=\"number\">number</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. The parameter should be a <concept ref=\"string\">string</concept> or a <concept ref=\"variable\">variable</concept> with a string <concept ref=\"variable value\">value</concept>. In either case, the string should represent a number.</div><div class=\"text\">The instruction returns the string parameter as a number. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later. If the string cannot be converted to a number, the instruction returns <concept ref=\"not a number\">NaN</concept> (Not a Number).</div><div class=\"text\">Note that the &quot;N&quot; of Number() must be in uppercase.</div>\n<div class=\"code-sample-title\">Example of Number()</div><pre class=\"codeBlock\">var first = Number(\"10\"); // first receives the converted value of 10\n\nvar userInput = prompt(\"Enter a number\"); // user enters: 42\nuserInput = Number(userInput); // userInput receives the converted value of 42\n\nvar second = number(\"6\"); // invalid, \"n\" should be in uppercase\nvar third = Number(\"a\"); // invalid, returns NaN (Not a Number)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-073",
          "name"          : "Collecting the Tax",
          "normalizedName": "collecting the tax",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-073_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-073_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a new variable named <var id=tax>tax</var>. Assign to it the number 1.15. Be careful to represent the decimal number with a dot (.) not a comma (,).</li><li class=code-item>Add parentheses around the expression <var id=firstItemPrice>firstItemPrice</var> + <var id=secondItemPrice>secondItemPrice</var>, then multiply the result by the variable <var id=tax>tax</var>.</li></ol>",
          "boilerplate"   : "// Get the price of the items from user\nvar firstItemPrice = prompt(\"What is the price of the first item?\");\nvar secondItemPrice = prompt(\"What is the price of the second item?\");\n?\n\nfirstItemPrice = Number(firstItemPrice);\nsecondItemPrice = Number(secondItemPrice);\n\nvar total = firstItemPrice + secondItemPrice;\n\nconsole.log(\"The total price is \" + total.toFixed(2) + \"$\");\n\n// Ask the user to input money\nvar userMoney = prompt(\"How much money do you have?\");\nuserMoney = Number(userMoney);\n\nvar change = userMoney - total;\n\nconsole.log(\"Your change is \" + change.toFixed(2) + \"$\");",
          "solution"      : "// Get the price of the items from user\nvar firstItemPrice = prompt(\"What is the price of the first item?\");\nvar secondItemPrice = prompt(\"What is the price of the second item?\");\nvar tax = 1.15;\n\nfirstItemPrice = Number(firstItemPrice);\nsecondItemPrice = Number(secondItemPrice);\n\nvar total = (firstItemPrice + secondItemPrice) * tax;\n\nconsole.log(\"The total price is \" + total.toFixed(2) + \"$\");\n\n// Ask the user to input money\nvar userMoney = prompt(\"How much money do you have?\");\nuserMoney = Number(userMoney);\n\nvar change = userMoney - total;\n\nconsole.log(\"Your change is \" + change.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"pedmas\">Order of Operations (PEDMAS)</h3>\n<div class=\"text\">Computer programs respect the order of operations when calculating <concept ref=\"mathematical operators\">mathematical</concept> expressions.</div><div class=\"text\">The order of operations is: Parentheses, Exponent, Division, Multiplication, Addition, Subtraction.</div>\n<div class=\"code-sample-title\">Example of PEDMAS</div><pre class=\"codeBlock\">var result = 10 + 10 * 2; // result is 30\nresult = (10 + 10) * 2; // result is 40\nresult = 2 * 2 / 4; // result is 1</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-074",
          "name"          : "5 + 5 = 55",
          "normalizedName": "5  5  55",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>This program sums two numbers entered by the user, however the data is stored as strings. Because of this, the program returns that 5 + 5 is equal to 55! Can you fix the program by converting the data into numbers?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an instruction to assign to <var id=firstNumber>firstNumber</var> the value of <var id=firstNumber>firstNumber</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction. <strong>Example</strong>: myNumber = Number(myNumber);</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=secondNumber>secondNumber</var> the value of <var id=secondNumber>secondNumber</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li></ol>",
          "boilerplate"   : "var firstNumber = prompt(\"What is the first number?\");\nvar secondNumber = prompt(\"What is the second number?\");\n\n?\n?\n\nvar sum = firstNumber + secondNumber;\n\nconsole.log(firstNumber + \" + \" + secondNumber + \" = \" + sum);",
          "solution"      : "var firstNumber = prompt(\"What is the first number?\");\nvar secondNumber = prompt(\"What is the second number?\");\n\nfirstNumber = Number(firstNumber);\nsecondNumber = Number(secondNumber);\n\nvar sum = firstNumber + secondNumber;\n\nconsole.log(firstNumber + \" + \" + secondNumber + \" = \" + sum);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"Number()\">Using the Number() Instruction</h3>\n<div class=\"text\">The Number() instruction converts a string into a <concept ref=\"number\">number</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. The parameter should be a <concept ref=\"string\">string</concept> or a <concept ref=\"variable\">variable</concept> with a string <concept ref=\"variable value\">value</concept>. In either case, the string should represent a number.</div><div class=\"text\">The instruction returns the string parameter as a number. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later. If the string cannot be converted to a number, the instruction returns <concept ref=\"not a number\">NaN</concept> (Not a Number).</div><div class=\"text\">Note that the &quot;N&quot; of Number() must be in uppercase.</div>\n<div class=\"code-sample-title\">Example of Number()</div><pre class=\"codeBlock\">var first = Number(\"10\"); // first receives the converted value of 10\n\nvar userInput = prompt(\"Enter a number\"); // user enters: 42\nuserInput = Number(userInput); // userInput receives the converted value of 42\n\nvar second = number(\"6\"); // invalid, \"n\" should be in uppercase\nvar third = Number(\"a\"); // invalid, returns NaN (Not a Number)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-075",
          "name"          : "A Discounted Price",
          "normalizedName": "a discounted price",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's modify the cash register program so that the user may apply a discount to their current total. This discount should be applied before the tax. Can you complete the program?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=discount>discount</var>. Assign it the response from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"Enter a discount amount\"</string>. (Do not forget the var instruction!)</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=discount>discount</var> the value of <var id=discount>discount</var> into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Replace the third question mark with the variable <var id=discount>discount</var>.</li></ol>",
          "boilerplate"   : "// Get the price of the items from user\nvar firstItemPrice = prompt(\"What is the price of the first item?\");\nvar secondItemPrice = prompt(\"What is the price of the second item?\");\n?\nvar tax = 1.15;\n\nfirstItemPrice = Number(firstItemPrice);\nsecondItemPrice = Number(secondItemPrice);\n?\n\nvar total = (firstItemPrice + secondItemPrice - ?) * tax;\n\nconsole.log(\"The total price is \" + total.toFixed(2) + \"$\");\n\n// Ask the user to input money\nvar userMoney = prompt(\"How much money do you have?\");\nuserMoney = Number(userMoney);\n\nvar change = userMoney - total;\n\nconsole.log(\"Your change is \" + change.toFixed(2) + \"$\");",
          "solution"      : "// Get the price of the items from user\nvar firstItemPrice = prompt(\"What is the price of the first item?\");\nvar secondItemPrice = prompt(\"What is the price of the second item?\");\nvar discount = prompt(\"Enter a discount amount\");\nvar tax = 1.15;\n\nfirstItemPrice = Number(firstItemPrice);\nsecondItemPrice = Number(secondItemPrice);\ndiscount = Number(discount);\n\nvar total = (firstItemPrice + secondItemPrice - discount) * tax;\n\nconsole.log(\"The total price is \" + total.toFixed(2) + \"$\");\n\n// Ask the user to input money\nvar userMoney = prompt(\"How much money do you have?\");\nuserMoney = Number(userMoney);\n\nvar change = userMoney - total;\n\nconsole.log(\"Your change is \" + change.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-076",
          "name"          : "What's the Temperature?",
          "normalizedName": "whats the temperature",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to convert degrees Fahrenheit into degrees Celsius. To do so, we can use the following formula:</div><div class=text>Celsius = (Fahrenheit - 32) x (5 ÷ 9)</div><div class=text>To test your program, 80 degrees Fahrenheit should return 26.6 degrees Celsius.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=fahrenheit>fahrenheit</var>. Assign it the response from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"What is the temperature in Fahrenheit?\"</string>. (Do not forget the var instruction!)</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=fahrenheit>fahrenheit</var> the value of <var id=fahrenheit>fahrenheit</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Replace the third question mark with the variable <var id=fahrenheit>fahrenheit</var> minus 32.</li></ol>",
          "boilerplate"   : "?\n?\n\nvar celsius = (?) * (5 / 9);\n\nconsole.log(\"The temperature in degrees Celsius is \" + celsius);",
          "solution"      : "var fahrenheit = prompt(\"What is the temperature in Fahrenheit?\");\nfahrenheit = Number(fahrenheit);\n\nvar celsius = (fahrenheit - 32) * (5 / 9);\n\nconsole.log(\"The temperature in degrees Celsius is \" + celsius);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>\n<h3 class=\"title\" ref=\"Number()\">Using the Number() Instruction</h3>\n<div class=\"text\">The Number() instruction converts a string into a <concept ref=\"number\">number</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. The parameter should be a <concept ref=\"string\">string</concept> or a <concept ref=\"variable\">variable</concept> with a string <concept ref=\"variable value\">value</concept>. In either case, the string should represent a number.</div><div class=\"text\">The instruction returns the string parameter as a number. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later. If the string cannot be converted to a number, the instruction returns <concept ref=\"not a number\">NaN</concept> (Not a Number).</div><div class=\"text\">Note that the &quot;N&quot; of Number() must be in uppercase.</div>\n<div class=\"code-sample-title\">Example of Number()</div><pre class=\"codeBlock\">var first = Number(\"10\"); // first receives the converted value of 10\n\nvar userInput = prompt(\"Enter a number\"); // user enters: 42\nuserInput = Number(userInput); // userInput receives the converted value of 42\n\nvar second = number(\"6\"); // invalid, \"n\" should be in uppercase\nvar third = Number(\"a\"); // invalid, returns NaN (Not a Number)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-225",
          "name"          : "This Week I Made...",
          "normalizedName": "this week i made...",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to calculate our weekly gross and total salary. To calculate our weekly salary, we must multiply the number of hours worked by the hourly wage. The gross salary is the salary before taxes, while the total salary is the salary after taxes. For example, if we work 40 hours at $15 an hour with a tax rate of 15%, then our gross salary is $600.00 and our total salary is $510.00.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Create a new variable named <var id=taxRate>taxRate</var> and assign it a value of 0.15.</li><li class=code-item>Convert <var id=hourlyPay>hourlyPay</var> and <var id=weekHours>weekHours</var> to numbers. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Create a new variable named <var id=grossPay>grossPay</var> and assign it the product of <var id=hourlyPay>hourlyPay</var> multiplied by <var id=weekHours>weekHours</var>. Remember, the multiplication symbol is the asterisk (*).</li><li class=code-item>Create a new variable named <var id=deduction>deduction</var> and assign it the product of <var id=grossPay>grossPay</var> multiplied by <var id=taxRate>taxRate</var>.</li><li class=code-item>Create a new variable named <var id=totalPay>totalPay</var> and assign it the result of <var id=grossPay>grossPay</var> minus <var id=deduction>deduction</var>.</li></ol>",
          "boilerplate"   : "var hourlyPay = prompt(\"Enter an hourly wage ($/hr)\");\nvar weekHours = prompt(\"How many hours did you work this week?\");\n\n// Create taxRate variable\n?\n\n// Convert hourlyPay and weekHours to numbers\n?\n\n// Calculate grossPay\n?\n\n// Create deduction variable\n?\n\n// Calculate totalPay\n?\n\nconsole.log(\"Your gross pay is \" + grossPay.toFixed(2) + \"$\");\nconsole.log(\"Your total pay is \" + totalPay.toFixed(2) + \"$\");",
          "solution"      : "var hourlyPay = prompt(\"Enter an hourly wage ($/hr)\");\nvar weekHours = prompt(\"How many hours did you work this week?\");\n\n// Create taxRate variable\nvar taxRate = 0.15;\n\n// Convert hourlyPay and weekHours to numbers\nhourlyPay = Number(hourlyPay);\nweekHours = Number(weekHours);\n\n// Calculate grossPay\nvar grossPay = hourlyPay * weekHours;\n\n// Create deduction variable\nvar deduction = grossPay * taxRate;\n\n// Calculate totalPay\nvar totalPay = grossPay - deduction;\n\nconsole.log(\"Your gross pay is \" + grossPay.toFixed(2) + \"$\");\nconsole.log(\"Your total pay is \" + totalPay.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"Number()\">Using the Number() Instruction</h3>\n<div class=\"text\">The Number() instruction converts a string into a <concept ref=\"number\">number</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. The parameter should be a <concept ref=\"string\">string</concept> or a <concept ref=\"variable\">variable</concept> with a string <concept ref=\"variable value\">value</concept>. In either case, the string should represent a number.</div><div class=\"text\">The instruction returns the string parameter as a number. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later. If the string cannot be converted to a number, the instruction returns <concept ref=\"not a number\">NaN</concept> (Not a Number).</div><div class=\"text\">Note that the &quot;N&quot; of Number() must be in uppercase.</div>\n<div class=\"code-sample-title\">Example of Number()</div><pre class=\"codeBlock\">var first = Number(\"10\"); // first receives the converted value of 10\n\nvar userInput = prompt(\"Enter a number\"); // user enters: 42\nuserInput = Number(userInput); // userInput receives the converted value of 42\n\nvar second = number(\"6\"); // invalid, \"n\" should be in uppercase\nvar third = Number(\"a\"); // invalid, returns NaN (Not a Number)</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_project-08",
          "name"          : "Project 8 - I See Your Future",
          "normalizedName": "project 8 - i see your future",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-077",
          "name"          : "Math, Arts or Science?",
          "normalizedName": "math arts or science",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-077_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-077_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=schoolSubject>schoolSubject</var>. Assign to it the response from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"Which subject do you prefer? math, arts or science\"</string>. (Do not forget the var instruction!)</li><li class=code-item>Replace the second question mark with the variable <var id=schoolSubject>schoolSubject</var>.</li></ol>",
          "boilerplate"   : "?\n\ntellFuture(?);",
          "solution"      : "var schoolSubject = prompt(\"Which subject do you prefer? math, arts or science\");\n\ntellFuture(schoolSubject);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-078",
          "name"          : "Pizza Is the Best!",
          "normalizedName": "pizza is the best!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's add another question to our fortune teller program. This question should ask the user to select their favorite food between ice cream, pizza or fruits. The answer must be in the form of a string!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=favoriteFood>favoriteFood</var>. Assign it the response from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"Which food do you prefer? ice cream, pizza or fruits\"</string>. (Do not forget the var instruction!)</li><li class=code-item>Replace the second question mark with the variable <var id=favoriteFood>favoriteFood</var>.</li></ol>",
          "boilerplate"   : "var schoolSubject = prompt(\"Which subject do you prefer? math, arts or science\");\n?\n\ntellFuture(schoolSubject, ?);",
          "solution"      : "var schoolSubject = prompt(\"Which subject do you prefer? math, arts or science\");\nvar favoriteFood = prompt(\"Which food do you prefer? ice cream, pizza or fruits\");\n\ntellFuture(schoolSubject, favoriteFood);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-079",
          "name"          : "8 Hours a Day",
          "normalizedName": "8 hours a day",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-079_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-079_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=sleepHours>sleepHours</var>. Assign to it the response from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"How many hours do you sleep per day? 0 to 24\"</string>. (Do not forget the var instruction!)</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=sleepHours>sleepHours</var> the value of <var id=sleepHours>sleepHours</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Replace the third question mark with a new variable named <var id=sleepHoursPerYear>sleepHoursPerYear</var>. Assign to it the result of <var id=sleepHours>sleepHours</var> multiplied by 365.</li><li class=code-item>Replace the last question mark with the variable <var id=sleepHoursPerYear>sleepHoursPerYear</var>.</li></ol>",
          "boilerplate"   : "var schoolSubject = prompt(\"Which subject do you prefer? math, arts or science\");\nvar favoriteFood = prompt(\"Which food do you prefer? ice cream, pizza or fruits\");\n?\n\n?\n\n?\n\ntellFuture(schoolSubject, favoriteFood, ?);",
          "solution"      : "var schoolSubject = prompt(\"Which subject do you prefer? math, arts or science\");\nvar favoriteFood = prompt(\"Which food do you prefer? ice cream, pizza or fruits\");\nvar sleepHours = prompt(\"How many hours do you sleep per day? 0 to 24\");\n\nsleepHours = Number(sleepHours);\n\nvar sleepHoursPerYear = sleepHours * 365;\n\ntellFuture(schoolSubject, favoriteFood, sleepHoursPerYear);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-080",
          "name"          : "A Special Animal",
          "normalizedName": "a special animal",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-080_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-080_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=adjective>adjective</var>. Assign to it the response from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"Choose an adjective: fast, large or strong\"</string>. (Do not forget the <strong>var</strong> instruction!)</li><li class=code-item>Replace the second question mark with a new variable named <var id=animal>animal</var>. Assign to it the response from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"Choose an animal: turtle, snail or crab\"</string>. (Do not forget the <strong>var</strong> instruction!)</li><li class=code-item>Replace the third question mark with a new variable named <var id=specialAnimal>specialAnimal</var>. Assign to it the result of combining the variables <var id=adjective>adjective</var> and <var id=animal>animal</var>. A space should separate the text from the two variables.</li><li class=code-item>Replace the question mark in the <concept ref=tellFuture>tellFuture()</concept> instruction by the variable <var id=specialAnimal>specialAnimal</var>.</li></ol>",
          "boilerplate"   : "var schoolSubject = prompt(\"Which subject do you prefer? math, arts or science\");\nvar favoriteFood = prompt(\"Which food do you prefer? ice cream, pizza or fruits\");\nvar sleepHours = prompt(\"How many hours do you sleep per day? 0 to 24\");\n?\n?\n\nsleepHours = Number(sleepHours);\n\nvar sleepHoursPerYear = sleepHours * 365;\n\n? = ? + \" \" + ?;\n\ntellFuture(schoolSubject, favoriteFood, sleepHoursPerYear, ?);",
          "solution"      : "var schoolSubject = prompt(\"Which subject do you prefer? math, arts or science\");\nvar favoriteFood = prompt(\"Which food do you prefer? ice cream, pizza or fruits\");\nvar sleepHours = prompt(\"How many hours do you sleep per day? 0 to 24\");\nvar adjective = prompt(\"Choose an adjective: fast, large or strong\");\nvar animal = prompt(\"Choose an animal: turtle, snail or crab\");\n\nsleepHours = Number(sleepHours);\n\nvar sleepHoursPerYear = sleepHours * 365;\n\nvar specialAnimal = adjective + \" \" + animal;\n\ntellFuture(schoolSubject, favoriteFood, sleepHoursPerYear, specialAnimal);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-226",
          "name"          : "The Better Deal",
          "normalizedName": "the better deal",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>A store sells chocolate bars in bulk prices. We can either buy 12 chocolate bars for $10.50, or 18 bars for $16.75. Let's make a program to figure out which is the better deal.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=firstRatio>firstRatio</var>. Assign it the result of <var id=firstPrice>firstPrice</var> divided by <var id=firstQuantity>firstQuantity</var>. Remember, the division symbol is the slash (/).</li><li class=code-item>Replace the second question mark with a new variable named <var id=secondRatio>secondRatio</var>. Assign it the result of <var id=secondPrice>secondPrice</var> divided by <var id=secondQuantity>secondQuantity</var>.</li></ol>",
          "boilerplate"   : "var firstPrice = 10.50;\nvar firstQuantity = 12;\n\nvar secondPrice = 16.75;\nvar secondQuantity = 18;\n\n// Create firstRatio and secondRatio variables here\n?\n?\n\nconsole.log(\"The cost per unit of the first item is \" + firstRatio.toFixed(2) + \"$\");\nconsole.log(\"The cost per unit of the second item is \" + secondRatio.toFixed(2) + \"$\");",
          "solution"      : "var firstPrice = 10.50;\nvar firstQuantity = 12;\n\nvar secondPrice = 16.75;\nvar secondQuantity = 18;\n\n// Create firstRatio and secondRatio variables here\nvar firstRatio = firstPrice / firstQuantity;\nvar secondRatio = secondPrice / secondQuantity;\n\nconsole.log(\"The cost per unit of the first item is \" + firstRatio.toFixed(2) + \"$\");\nconsole.log(\"The cost per unit of the second item is \" + secondRatio.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-227",
          "name"          : "Road Trip",
          "normalizedName": "road trip",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to help our friend calculate how many hours it will take to travel to various destinations in North America. Our friend is leaving from a small town in Eastern Canada, named Moncton. He would like to know how many hours it takes to travel to Vancouver (Canada), Washington (USA), Montreal (Canada) and Chicago (USA).</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=speed>speed</var>. Assign it the value from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"How quickly will you drive? (km/h)\"</string>. Do not forget the <strong>var</strong> instruction!</li><li class=code-item>Replace the second question mark with an instruction to assign to the variable <var id=speed>speed</var> the value of <var id=speed>speed</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Replace the third question mark with a new variable named <var id=hoursToDestination>hoursToDestination</var>. Assign it the result of <var id=distanceToDestination>distanceToDestination</var> divided by <var id=speed>speed</var>. Remember, the division symbol is the slash (/).</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Select a destination: Vancouver, Washington, Montreal, Chicago\");\nvar distanceToDestination = getDestinationDistance(destination);\n\n?\n?\n\n?\n\nconsole.log(\"It will take \" + hoursToDestination.toFixed(1) + \" hours to drive to \" + destination);",
          "solution"      : "var destination = prompt(\"Select a destination: Vancouver, Washington, Montreal, Chicago\");\nvar distanceToDestination = getDestinationDistance(destination);\n\nvar speed = prompt(\"How quickly will you drive? (km/h)\");\nspeed = Number(speed);\n\nvar hoursToDestination = distanceToDestination / speed;\n\nconsole.log(\"It will take \" + hoursToDestination.toFixed(1) + \" hours to drive to \" + destination);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>\n<h3 class=\"title\" ref=\"Number()\">Using the Number() Instruction</h3>\n<div class=\"text\">The Number() instruction converts a string into a <concept ref=\"number\">number</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. The parameter should be a <concept ref=\"string\">string</concept> or a <concept ref=\"variable\">variable</concept> with a string <concept ref=\"variable value\">value</concept>. In either case, the string should represent a number.</div><div class=\"text\">The instruction returns the string parameter as a number. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later. If the string cannot be converted to a number, the instruction returns <concept ref=\"not a number\">NaN</concept> (Not a Number).</div><div class=\"text\">Note that the &quot;N&quot; of Number() must be in uppercase.</div>\n<div class=\"code-sample-title\">Example of Number()</div><pre class=\"codeBlock\">var first = Number(\"10\"); // first receives the converted value of 10\n\nvar userInput = prompt(\"Enter a number\"); // user enters: 42\nuserInput = Number(userInput); // userInput receives the converted value of 42\n\nvar second = number(\"6\"); // invalid, \"n\" should be in uppercase\nvar third = Number(\"a\"); // invalid, returns NaN (Not a Number)</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-228",
          "name"          : "Am I Done Yet?",
          "normalizedName": "am i done yet",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>In an effort to help us study for a math test, our parents will allow us to play our favorite video games once we've completed 80% of all our math exercises. It's up to us to figure out how many exercises we have to complete to meet their demand.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an instruction to assign to <var id=totalQuantity>totalQuantity</var> the value of <var id=totalQuantity>totalQuantity</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=percentage>percentage</var> the value of <var id=percentage>percentage</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Replace the third question mark with an instruction to assign to <var id=percentage>percentage</var> the value of <var id=percentage>percentage</var> divided by 100.</li><li class=code-item>Replace the fourth question mark with a new variable named <var id=numberOfExercises>numberOfExercises</var> and assign it the value of <var id=totalQuantity>totalQuantity</var> multiplied by <var id=percentage>percentage</var>.</li></ol>",
          "boilerplate"   : "var totalQuantity = prompt(\"How many exercises are there in total?\");\nvar percentage = prompt(\"What percentage of exercises must be completed? (1 to 100)\");\n\n?\n?\n\n?\n\n?\n\nconsole.log(\"You must complete \" + numberOfExercises + \" exercises\");",
          "solution"      : "var totalQuantity = prompt(\"How many exercises are there in total?\");\nvar percentage = prompt(\"What percentage of exercises must be completed? (1 to 100)\");\n\ntotalQuantity = Number(totalQuantity);\npercentage = Number(percentage);\n\npercentage = percentage / 100;\n\nvar numberOfExercises = totalQuantity * percentage;\n\nconsole.log(\"You must complete \" + numberOfExercises + \" exercises\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>\n<h3 class=\"title\" ref=\"Number()\">Using the Number() Instruction</h3>\n<div class=\"text\">The Number() instruction converts a string into a <concept ref=\"number\">number</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. The parameter should be a <concept ref=\"string\">string</concept> or a <concept ref=\"variable\">variable</concept> with a string <concept ref=\"variable value\">value</concept>. In either case, the string should represent a number.</div><div class=\"text\">The instruction returns the string parameter as a number. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later. If the string cannot be converted to a number, the instruction returns <concept ref=\"not a number\">NaN</concept> (Not a Number).</div><div class=\"text\">Note that the &quot;N&quot; of Number() must be in uppercase.</div>\n<div class=\"code-sample-title\">Example of Number()</div><pre class=\"codeBlock\">var first = Number(\"10\"); // first receives the converted value of 10\n\nvar userInput = prompt(\"Enter a number\"); // user enters: 42\nuserInput = Number(userInput); // userInput receives the converted value of 42\n\nvar second = number(\"6\"); // invalid, \"n\" should be in uppercase\nvar third = Number(\"a\"); // invalid, returns NaN (Not a Number)</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-229",
          "name"          : "How Much Paint?",
          "normalizedName": "how much paint",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to determine how many cans of paint we'll need to paint a wall. Our program will ask the user to enter the width and height of the wall. Then, our program will calculate the area of the wall so that we can estimate how many cans of paint will be required. One can of paint can cover 14 square meters.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Convert <var id=width>width</var> and <var id=height>height</var> to numbers. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Create a new variable named <var id=wallArea>wallArea</var> and assign it the product of <var id=width>width</var> multiplied by <var id=height>height</var>.</li><li class=code-item>Create a new variable named <var id=squareMetersPerCan>squareMetersPerCan</var> and assign it the value 14.</li><li class=code-item>Create a new variable named <var id=cansOfPaint>cansOfPaint</var> and assign it the quotient of <var id=wallArea>wallArea</var> divided by <var id=squareMetersPerCan>squareMetersPerCan</var>.</li></ol>",
          "boilerplate"   : "var width = prompt(\"Enter the width of the wall (in meters)\");\nvar height = prompt(\"Enter the height of the wall (in meters)\");\n\n// Convert width and height to numbers\n?\n\n// Calculate wallArea\n?\n\n// Create squareMetersPerCan variable\n?\n\n// Calculate cansOfPaint\n?\n\nconsole.log(\"It will take \" + Math.ceil(cansOfPaint) + \" cans of paint to paint the wall.\");",
          "solution"      : "var width = prompt(\"Enter the width of the wall (in meters)\");\nvar height = prompt(\"Enter the height of the wall (in meters)\");\n\n// Convert width and height to numbers\nvar width = Number(width);\nvar height = Number(height);\n\n// Calculate wallArea\nvar wallArea = width * height;\n\n// Create squareMetersPerCan variable\nvar squareMetersPerCan = 14;\n\n// Calculate cansOfPaint\nvar cansOfPaint = wallArea / squareMetersPerCan;\n\nconsole.log(\"It will take \" + Math.ceil(cansOfPaint) + \" cans of paint to paint the wall.\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"Number()\">Using the Number() Instruction</h3>\n<div class=\"text\">The Number() instruction converts a string into a <concept ref=\"number\">number</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. The parameter should be a <concept ref=\"string\">string</concept> or a <concept ref=\"variable\">variable</concept> with a string <concept ref=\"variable value\">value</concept>. In either case, the string should represent a number.</div><div class=\"text\">The instruction returns the string parameter as a number. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later. If the string cannot be converted to a number, the instruction returns <concept ref=\"not a number\">NaN</concept> (Not a Number).</div><div class=\"text\">Note that the &quot;N&quot; of Number() must be in uppercase.</div>\n<div class=\"code-sample-title\">Example of Number()</div><pre class=\"codeBlock\">var first = Number(\"10\"); // first receives the converted value of 10\n\nvar userInput = prompt(\"Enter a number\"); // user enters: 42\nuserInput = Number(userInput); // userInput receives the converted value of 42\n\nvar second = number(\"6\"); // invalid, \"n\" should be in uppercase\nvar third = Number(\"a\"); // invalid, returns NaN (Not a Number)</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Mathematical Operators</h3>\n<div class=\"text\">There are 4 basic mathematical operators: addition (+), subtraction (-), multiplication (*) and division (/). Note that the multiplication and division operators are written with symbols that are different than in math.</div><div class=\"text\">Additionally, the <concept ref=\"pedmas\">order of operations</concept> (PEDMAS) is respected.</div>\n<div class=\"code-sample-title\">Example of mathematical operators</div><pre class=\"codeBlock\">var sum = 10 + 5; // 10 plus 5 is equal to 15\nvar difference = 10 - 5; // 10 minus 5 is equal to 5\nvar product = 10 * 5; // 10 multiplied by 5 is equal to 50\nvar quotient = 10 / 5; // 10 divided by 5 is equal to 2</pre>\n<div class=\"text\">All the operators can also be used with a variable that has a <concept ref=\"number\">number</concept> value.</div>\n<div class=\"code-sample-title\">Example of mathematical operators with variables</div><pre class=\"codeBlock\">var firstNumber = 10;\nvar secondNumber = 5;\nvar result = firstNumber * secondNumber; // is equal to 50 (10 multiplied by 5)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-004",
          "name"          : "Quiz 4",
          "description"   : "Data Types",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-004_q-01",
              "question": "<div>In programming, what is a <em>string</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-01_a-01",
                  "value" : 0,
                  "answer": "<div>An input</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-004_q-01_a-02",
                  "value"      : 2,
                  "answer"     : "<div>Text surrounded by quotation marks</div>",
                  "explanation": "A <em>string</em> is text that is surrounded by quotation marks. If it does not have quotations marks, it is an instruction or a variable."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-01_a-03",
                  "value" : 0,
                  "answer": "<div>A piece of fabric</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-01_a-04",
                  "value" : 0,
                  "answer": "<div>An instruction</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-004_q-02",
              "question": "<div>Which of the following statements is true?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-004_q-02_a-01",
                  "value"      : 2,
                  "answer"     : "<div>The value returned by a <code>prompt()</code> instruction is always a string.</div>",
                  "explanation": "All values returned by a <code>prompt()</code> are strings, including numbers."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-02_a-02",
                  "value" : 0,
                  "answer": "<div>The sum of two strings is a number (ex: <string>\"5\"</string> + <string>\"3\"</string> = 8).</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-02_a-03",
                  "value" : 0,
                  "answer": "<div>Data can never be converted to another type.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-02_a-04",
                  "value" : 0,
                  "answer": "<div>The <code>Number()</code> instruction returns a random number.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-004_q-03",
              "question": "<div>Select the two valid data types in the following list:</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-004_q-03_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Numbers</div>",
                  "explanation": "Numbers are a data type. They can be used in calculations."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>Colors</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-004_q-03_a-03",
                  "value"      : 1,
                  "answer"     : "<div>Strings</div>",
                  "explanation": "Strings are a data type. They can be used to represent text."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>Size</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-004_q-04",
              "question": "<div>True or false. A number entered in a <code>prompt()</code> should always be converted to a number type before being used in a mathematical operation.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-004_q-04_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "Numbers entered in a <code>prompt()</code> are returned as strings, which can cause strange results when used in mathematical operations."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-004_q-05",
              "question": "<div>What is the final value of the variable <var>result</var>?</div>\n<pre class=\"language-javascript\"><code>var first = \"7\";\nvar second = \"3\";\nvar result = first + second;</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>10</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>37</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-004_q-05_a-03",
                  "value"      : 2,
                  "answer"     : "<div>73</div>",
                  "explanation": "Since both values are strings and not numbers, the program will add the two strings together to create the string <string>\"73\"</string>."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-05_a-04",
                  "value" : 0,
                  "answer": "<div>NaN</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-004_q-06",
              "question": "<div>What is the final value of the variable <var>result</var>?</div>\n<pre class=\"language-javascript\"><code>var first = 4;\nvar second = \"2\";\nsecond = Number(second);\nvar result = first + second;</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-06_a-01",
                  "value" : 0,
                  "answer": "<div>42</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-004_q-06_a-02",
                  "value"      : 2,
                  "answer"     : "<div>6</div>",
                  "explanation": "The string <string>\"2\"</string> is converted to a number, so the program adds the two numbers together."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>24</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>NaN</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-004_q-07",
              "question": "<div>True or false. The <code>Number()</code> instruction can also be written with a lowercase \"n\" (ex: <code>number()</code>).</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-004_q-07_a-01",
                  "value" : 0,
                  "answer": "<div>True</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-004_q-07_a-02",
                  "value"      : 1,
                  "answer"     : "<div>False</div>",
                  "explanation": "The <code>Number()</code> instruction must <strong>always</strong> be written with an uppercase \"N\"."
                }
              ]
            }
          ],
          "normalizedName": "quiz 4",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_en-CA_exercise-262",
          "name"          : "Booleans and If Statements",
          "normalizedName": "booleans and if statements",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-262_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-262_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-09",
          "name"          : "Project 9 - True or False?",
          "normalizedName": "project 9 - true or false",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-081",
          "name"          : "True or False?",
          "normalizedName": "true or false",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-081_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-081_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=myBool>myBool</var>. Assign to it the Boolean value returned by the comparison of <strong>5 less than 10</strong>.</li><li class=code-item>Replace the second question mark with the variable <var id=myBool>myBool</var>.</li></ol>",
          "boilerplate"   : "?\n\nbooleanBall(\"Is 5 less than 10?\", ?);",
          "solution"      : "var myBool = (5 < 10);\n\nbooleanBall(\"Is 5 less than 10?\", myBool);",
          "tips"          : "<h3 class=\"title\" ref=\"boolean\">Booleans</h3>\n<div class=\"text\">Booleans are a <concept ref=\"data type\">data type</concept> with only two possible values: true or false.</div><div class=\"text\">Any expression using a <concept ref=\"relational operators\">relational operator</concept> will return a Boolean value.</div>\n<div class=\"code-sample-title\">Example of Boolean values</div><pre class=\"codeBlock\">var iLikeCereals = true;\nvar isGreaterThan18 = 10 > 18; // isGreaterThan18 will be false\nvar age = 19;\nvar ageIsGreaterThan18 = age > 18; // ageIsGreaterThan18 will be true</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-082",
          "name"          : "Differents Kinds of Logic",
          "normalizedName": "differents kinds of logic",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's try to use more relational operators to understand how they work.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an instruction to assign to <var id=myBool>myBool</var> the Boolean value returned by the comparison of <strong>5 less than or equal to 5</strong>. <strong>Hint:</strong> the less than or equal to operator is &lt;=</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=myBool>myBool</var> the Boolean value returned by the comparison of <strong>9 greater than or equal to 4</strong>. <strong>Hint:</strong> the greater than or equal to operator is &gt;=</li></ol>",
          "boilerplate"   : "var myBool = (5 < 10);\nbooleanBall(\"Is 5 less than 10?\", myBool);\n\n// Check if 5 is less than\n// or equal to 5\nmyBool = ?\nbooleanBall(\"Is 5 less than or equal to 5?\", myBool);\n\n// Check if 9 is greater than\n// or equal to 4\nmyBool = ?\nbooleanBall(\"Is 9 greater than or equal to 4?\", myBool);",
          "solution"      : "var myBool = (5 < 10);\nbooleanBall(\"Is 5 less than 10?\", myBool);\n\n// Check if 5 is less than\n// or equal to 5\nmyBool = (5 <= 5);\nbooleanBall(\"Is 5 less than or equal to 5?\", myBool);\n\n// Check if 9 is greater than\n// or equal to 4\nmyBool = (9 >= 4);\nbooleanBall(\"Is 9 greater than or equal to 4?\", myBool);",
          "tips"          : "<h3 class=\"title\" ref=\"boolean\">Booleans</h3>\n<div class=\"text\">Booleans are a <concept ref=\"data type\">data type</concept> with only two possible values: true or false.</div><div class=\"text\">Any expression using a <concept ref=\"relational operators\">relational operator</concept> will return a Boolean value.</div>\n<div class=\"code-sample-title\">Example of Boolean values</div><pre class=\"codeBlock\">var iLikeCereals = true;\nvar isGreaterThan18 = 10 > 18; // isGreaterThan18 will be false\nvar age = 19;\nvar ageIsGreaterThan18 = age > 18; // ageIsGreaterThan18 will be true</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-083",
          "name"          : "Equal or Not Equal?",
          "normalizedName": "equal or not equal",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-083_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-083_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=myBool>myBool</var>. Assign to it the Boolean value returned by the comparison of <strong>5 equal to 5</strong>.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=myBool>myBool</var> the Boolean value returned by the comparison of <strong>7 equal to 5</strong>.</li></ol>",
          "boilerplate"   : "?\n\nbooleanBall(\"Is 5 equal to 5?\", myBool);\n\n?\n\nbooleanBall(\"Is 7 equal to 5?\", myBool);",
          "solution"      : "var myBool = (5 == 5);\n\nbooleanBall(\"Is 5 equal to 5?\", myBool);\n\nmyBool = (7 == 5);\n\nbooleanBall(\"Is 7 equal to 5?\", myBool);",
          "tips"          : "<h3 class=\"title\" ref=\"string compare\">Strings and the Equal/Not Equal Operators</h3>\n<div class=\"text\">The <concept ref=\"relational operators\">relational operators</concept> equal and not equal can be used to compare <concept ref=\"string\">strings</concept>.</div><div class=\"text\">The equal operator (==) will return <concept ref=\"boolean\">true</concept> if both strings are identical, including the case of each letter.</div><div class=\"text\">The not equal operator (!=) will return <concept ref=\"boolean\">true</concept> if the two strings are different by at least one letter, including the case of each letter.</div>\n<div class=\"code-sample-title\">Example of string comparison</div><pre class=\"codeBlock\">var result = \"EduCode\" == \"EduCode\"; // true\nresult = \"Coding\" == \"Programming\"; // false\nresult = \"EduCode\" == \"Educode\"; // false, uppercase \"C\" is different\nresult = \"EduCode\" != \"EduCode\"; // false, both strings identical\nresult = \"EduCode\" != \"Educode\"; // true, uppercase \"C\" is different</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"accidental assignment\">Using the Assignment Operator (=) Instead of the Equal Operator (==)</h3>\n<div class=\"text\">A common mistake when using the <concept ref=\"relational operators\">equal operator (==)</concept> is to use only one &quot;=&quot; symbol. Instead of comparing the two values, we will be doing an <concept ref=\"variable value\">assignment</concept> operation.</div>\n<div class=\"code-sample-title\">Example of using the assignment operator instead of the equal operator</div><pre class=\"codeBlock\">var x = 10;\nconsole.log(x = 15); // instead of checking if x is equal to 15, x will take the value 15</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-084",
          "name"          : "Is It NOT Equal?",
          "normalizedName": "is it not equal",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Sometimes instead of checking if two values are equal, we must check if they are not equal (or different). To do so, we can use the <strong>not equal</strong> operator (!=). Try using it in this exercise.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=myBool>myBool</var>. Assign it the Boolean value returned by the comparison of <strong>5 not equal to 5</strong>. <strong>Hint:</strong> the not equal operator is !=</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=myBool>myBool</var> the Boolean value returned by the comparison of <strong>7 not equal to 5</strong>.</li></ol>",
          "boilerplate"   : "// Check if 5 is not equal to 5\n?\n\nbooleanBall(\"Is 5 NOT equal to 5?\", myBool);\n\n// Check if 7 is not equal to 5\n?\n\nbooleanBall(\"Is 7 NOT equal to 5?\", myBool);",
          "solution"      : "// Check if 5 is not equal to 5\nvar myBool = (5 != 5);\n\nbooleanBall(\"Is 5 NOT equal to 5?\", myBool);\n\n// Check if 7 is not equal to 5\nmyBool = (7 != 5);\n\nbooleanBall(\"Is 7 NOT equal to 5?\", myBool);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"accidental assignment\">Using the Assignment Operator (=) Instead of the Equal Operator (==)</h3>\n<div class=\"text\">A common mistake when using the <concept ref=\"relational operators\">equal operator (==)</concept> is to use only one &quot;=&quot; symbol. Instead of comparing the two values, we will be doing an <concept ref=\"variable value\">assignment</concept> operation.</div>\n<div class=\"code-sample-title\">Example of using the assignment operator instead of the equal operator</div><pre class=\"codeBlock\">var x = 10;\nconsole.log(x = 15); // instead of checking if x is equal to 15, x will take the value 15</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-085",
          "name"          : "Comparing Text",
          "normalizedName": "comparing text",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-085_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-085_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=firstWord>firstWord</var>. Assign to it the response from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"Enter a first word\"</string>.</li><li class=code-item>Replace the second question mark with a new variable named <var id=secondWord>secondWord</var>. Assign to it the response from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"Enter a second word\"</string>.</li><li class=code-item>Replace the third question mark with a new variable named <var id=stringCompare>stringCompare</var>. Assign to it the Boolean value returned by the comparison of <var id=firstWord>firstWord</var> <strong>equal to</strong> <var id=secondWord>secondWord</var>.</li></ol>",
          "boilerplate"   : "?\n?\n\n?\n\nbooleanBall(\"Is \" + firstWord + \" equal to \" + secondWord + \"?\", stringCompare);",
          "solution"      : "var firstWord = prompt(\"Enter a first word\");\nvar secondWord = prompt(\"Enter a second word\");\n\nvar stringCompare = firstWord == secondWord;\n\nbooleanBall(\"Is \" + firstWord + \" equal to \" + secondWord + \"?\", stringCompare);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-086",
          "name"          : "Password Please",
          "normalizedName": "password please",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's create a password system that will check if the user entered the correct password.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=userPassword>userPassword</var>. Assign it the response from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"What is the password?\"</string>.</li><li class=code-item>Replace the second question mark with a new variable named <var id=validLogin>validLogin</var>. Assign it the Boolean value returned by the comparison of <var id=validPassword>validPassword</var> <strong>equal to</strong> <var id=userPassword>userPassword</var>.</li><li class=code-item>Replace the third question mark with the variable <var id=validLogin>validLogin</var>.</li></ol>",
          "boilerplate"   : "var validPassword = \"EduCode\";\n?\n\n// Check if validPassword\n// is equal to userPassword\n?\n\nbooleanBall(\"Is the login valid?\", ?);",
          "solution"      : "var validPassword = \"EduCode\";\nvar userPassword = prompt(\"What is the password?\");\n\n// Check if validPassword\n// is equal to userPassword\nvar validLogin = (validPassword == userPassword);\n\nbooleanBall(\"Is the login valid?\", validLogin);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-087",
          "name"          : "Did I Win the Lottery?",
          "normalizedName": "did i win the lottery",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to check if we won the lottery.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=userNumber>userNumber</var>. Assign it the response from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"What is your lottery number?\"</string>.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=userNumber>userNumber</var> the value of <var id=userNumber>userNumber</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Replace the third question mark with a new variable named <var id=answer>answer</var>. Assign it the Boolean value returned by the comparison of <var id=winningNumber>winningNumber</var> <strong>equal to</strong> <var id=userNumber>userNumber</var>.</li><li class=code-item>Replace the fourth question mark with the variable <var id=answer>answer</var>.</li></ol>",
          "boilerplate"   : "var winningNumber = 19700101;\n?\n\n// Convert userNumber to\n// a number using Number()\n?\n\n// Check if winningNumber\n// is equal to userNumber\n?\n\nbooleanBall(\"Did you win the lottery?\", ?);",
          "solution"      : "var winningNumber = 19700101;\nvar userNumber = prompt(\"What is your lottery number?\");\n\n// Convert userNumber to\n// a number using Number()\nuserNumber = Number(userNumber);\n\n// Check if winningNumber\n// is equal to userNumber\nvar answer = (winningNumber == userNumber);\n\nbooleanBall(\"Did you win the lottery?\", answer);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"Number()\">Using the Number() Instruction</h3>\n<div class=\"text\">The Number() instruction converts a string into a <concept ref=\"number\">number</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. The parameter should be a <concept ref=\"string\">string</concept> or a <concept ref=\"variable\">variable</concept> with a string <concept ref=\"variable value\">value</concept>. In either case, the string should represent a number.</div><div class=\"text\">The instruction returns the string parameter as a number. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later. If the string cannot be converted to a number, the instruction returns <concept ref=\"not a number\">NaN</concept> (Not a Number).</div><div class=\"text\">Note that the &quot;N&quot; of Number() must be in uppercase.</div>\n<div class=\"code-sample-title\">Example of Number()</div><pre class=\"codeBlock\">var first = Number(\"10\"); // first receives the converted value of 10\n\nvar userInput = prompt(\"Enter a number\"); // user enters: 42\nuserInput = Number(userInput); // userInput receives the converted value of 42\n\nvar second = number(\"6\"); // invalid, \"n\" should be in uppercase\nvar third = Number(\"a\"); // invalid, returns NaN (Not a Number)</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_project-10",
          "name"          : "Project 10 - Taking a Decision",
          "normalizedName": "project 10 - taking a decision",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-088",
          "name"          : "A Special Machine",
          "normalizedName": "a special machine",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-088_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-088_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Assign to the variable <var id=packageWeight>packageWeight</var> a number greater than 8.</li></ol>",
          "boilerplate"   : "var packageWeight = ?;\n\nif(packageWeight > 8)\n{\n  console.log(\"The package weighs more than 8 kilograms!\");\n}",
          "solution"      : "var packageWeight = 9;\n\nif(packageWeight > 8)\n{\n  console.log(\"The package weighs more than 8 kilograms!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"condition\">Conditions</h3>\n<div class=\"text\">A condition is like a question that can be answered with only <concept ref=\"boolean\">true or false</concept>. We use conditions to control various pieces of code such as <concept ref=\"conditional statements\">conditional statements</concept> or <concept ref=\"loops\">loops</concept>. A condition always returns true or false.</div><div class=\"text\">To make a condition, we use any <concept ref=\"relational operators\">relational operators</concept>.</div>\n<div class=\"code-sample-title\">Example of using a condition</div><pre class=\"codeBlock\">if(myVariable > 10) // myVariable is greater than 10 is the condition\n{\n  console.log(\"myVariable is greater than 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-089",
          "name"          : "Learning to Control the Machine",
          "normalizedName": "learning to control the machine",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Learning to create conditions is an important part of learning how to control an if statement. This if statement should display a message for packages under a weight of 5 kilograms. Can you create the condition to control this if statement?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a condition to check if the value of <var id=packageWeight>packageWeight</var> is less than 5. <strong>Hint:</strong> the less than operator is &lt;</li></ol>",
          "boilerplate"   : "var packageWeight = 3;\n\nif(?)\n{\n  console.log(\"The package weighs less than 5 kilograms!\");\n}",
          "solution"      : "var packageWeight = 3;\n\nif(packageWeight < 5)\n{\n  console.log(\"The package weighs less than 5 kilograms!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-090",
          "name"          : "Grouping Our Ideas",
          "normalizedName": "grouping our ideas",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-090_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-090_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an opening curly brace ({).</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=shippingPrice>shippingPrice</var> the result of <var id=shippingPrice>shippingPrice</var> plus 5.</li><li class=code-item>Replace the third question mark with a <concept ref=console-log>console.log()</concept> instruction that displays to the user the message <string>\"Package overweight, adding shipping surcharge!\"</string>.</li><li class=code-item>Replace the fourth question mark with a closing curly brace (}).</li></ol>",
          "boilerplate"   : "var packageWeight = prompt(\"How much does the package weigh?\");\nvar shippingPrice = 10;\n\npackageWeight = Number(packageWeight);\n\n// Remember, when creating a code block\n// it is critical to use the curly braces { }\nif(packageWeight > 8)\n?\n?\n?\n?",
          "solution"      : "var packageWeight = prompt(\"How much does the package weigh?\");\nvar shippingPrice = 10;\n\npackageWeight = Number(packageWeight);\n\n// Remember, when creating a code block\n// it is critical to use the curly braces { }\nif(packageWeight > 8)\n{\n  shippingPrice = shippingPrice + 5;\n  console.log(\"Package overweight, adding shipping surcharge!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"console.log()\">Using the console.log() Instruction</h3>\n<div class=\"text\">The console.log() <concept ref=\"instruction\">instruction</concept> allows us to create a text <concept ref=\"output\">output</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be outputted to the program's console.</div><div class=\"text\">Note that the string given as a parameter can be a <concept ref=\"concatenation\">concatenated</concept> string.</div>\n<div class=\"code-sample-title\">Example of console.log()</div><pre class=\"codeBlock\">console.log(\"Hello!\"); // displays: Hello!\nconsole.log(\"Hello \" + \"world!\"); // displays the concatenated string: Hello world!\nconsole.log(Hello!); // invalid, missing quotation marks (\" \")</pre>\n<h3 class=\"title\" ref=\"code block\">Code Block</h3>\n<div class=\"text\">A code block is a special tool used to regroup one or multiple <concept ref=\"instruction\">instructions</concept>. The purpose of a code block is to regroup instructions to execute under a certain <concept ref=\"condition\">condition</concept>.</div><div class=\"text\">In the case of an <concept ref=\"if statement\">if statement</concept>, the code inside a code block is only executed if the condition of the if statement is <concept ref=\"boolean\">true</concept>.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-091",
          "name"          : "The Code After the Code Block",
          "normalizedName": "the code after the code block",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-091_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-091_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a <concept ref=console-log>console.log()</concept> instruction that displays to the user the message <string>\"The final shipping price is: \"</string> followed by the value of <var id=shippingPrice>shippingPrice</var>.</li></ol>",
          "boilerplate"   : "var packageWeight = prompt(\"How much does the package weigh?\");\nvar shippingPrice = 10;\n\npackageWeight = Number(packageWeight);\n\nif(packageWeight > 8)\n{\n  shippingPrice = shippingPrice + 5;\n  console.log(\"Package overweight, adding shipping surcharge!\");\n}\n\n// Create the console.log message here\n?",
          "solution"      : "var packageWeight = prompt(\"How much does the package weigh?\");\nvar shippingPrice = 10;\n\npackageWeight = Number(packageWeight);\n\nif(packageWeight > 8)\n{\n  shippingPrice = shippingPrice + 5;\n  console.log(\"Package overweight, adding shipping surcharge!\");\n}\n\n// Create the console.log message here\nconsole.log(\"The final shipping price is: \" + shippingPrice);",
          "tips"          : "<h3 class=\"title\" ref=\"code after code block\">Code after a Code Block</h3>\n<div class=\"text\">Any code after a <concept ref=\"code block\">code block</concept> is executed, even if a code block is ignored due to a condition being evaluated to <concept ref=\"boolean\">false</concept>.</div>\n<div class=\"code-sample-title\">Example of code after an if statement</div><pre class=\"codeBlock\">var price = 4;\nvar weight = 7;\nif(weight > 5)\n{\n  // this code is only executed if weight is greater than 5\n  console.log(\"Package overweight, adding $5 surcharge\");\n  price = price + 5;\n}\nconsole.log(\"Final price: $\" + price); // this code is always executed</pre>\n<h3 class=\"title\" ref=\"console.log() concatenation\">Combining a String and a variable in a console.log()</h3>\n<div class=\"text\">We can combine a <concept ref=\"string\">string</concept> and a variable's <concept ref=\"variable value\">value</concept> between the parentheses of the console.log() to create a complex <concept ref=\"output\">output</concept>.</div><div class=\"text\">To do this, we must use the <concept ref=\"concatenation\">concatenation (+)</concept> operator between every element.</div>\n<div class=\"code-sample-title\">Example of console.log() with a variable and a string</div><pre class=\"codeBlock\">var myName = \"EduCode\";\nconsole.log(\"My name is \" + myName); // displays the concatenated string: My name is EduCode\nvar myAge = 16;\nconsole.log(\"I am \" + myAge + \" years old\"); // displays the concatenated string: I am 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-092",
          "name"          : "A Discount for Light Travellers",
          "normalizedName": "a discount for light travellers",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Byte Mail has a special discount for packages that are light. Any package that weighs under 4 kilograms gets a $2 discount on their shipping price. Can you help Byte Mail build their system?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=packageWeight>packageWeight</var> <strong>is less than 4</strong>.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=shippingPrice>shippingPrice</var> the result of <var id=shippingPrice>shippingPrice</var> <strong>minus 2</strong>.</li><li class=code-item>Replace the third question mark with a <concept ref=console-log>console.log()</concept> instruction that displays to the user the message: <string>\"Package under 4kg, applying discount\"</string>.</li></ol>",
          "boilerplate"   : "var packageWeight = prompt(\"How much does the package weigh?\");\nvar shippingPrice = 10;\n\npackageWeight = Number(packageWeight);\n\nif(?)\n{\n  ?\n  ?\n}\n\nconsole.log(\"The final shipping price is: \" + shippingPrice);",
          "solution"      : "var packageWeight = prompt(\"How much does the package weigh?\");\nvar shippingPrice = 10;\n\npackageWeight = Number(packageWeight);\n\nif(packageWeight < 4)\n{\n  shippingPrice = shippingPrice - 2;\n  console.log(\"Package under 4kg, applying discount\");\n}\n\nconsole.log(\"The final shipping price is: \" + shippingPrice);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"console.log()\">Using the console.log() Instruction</h3>\n<div class=\"text\">The console.log() <concept ref=\"instruction\">instruction</concept> allows us to create a text <concept ref=\"output\">output</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be outputted to the program's console.</div><div class=\"text\">Note that the string given as a parameter can be a <concept ref=\"concatenation\">concatenated</concept> string.</div>\n<div class=\"code-sample-title\">Example of console.log()</div><pre class=\"codeBlock\">console.log(\"Hello!\"); // displays: Hello!\nconsole.log(\"Hello \" + \"world!\"); // displays the concatenated string: Hello world!\nconsole.log(Hello!); // invalid, missing quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-093",
          "name"          : "Unable to Ship",
          "normalizedName": "unable to ship",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-093_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-093_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Remove the semicolon after the condition of the if statement.</li></ol>",
          "boilerplate"   : "var packageWeight = prompt(\"How much does the package weigh?\");\n\npackageWeight = Number(packageWeight);\n\nif(packageWeight > 8);\n{\n  console.log(\"The weight of the package is greater than 8 kilograms!\");\n}",
          "solution"      : "var packageWeight = prompt(\"How much does the package weigh?\");\n\npackageWeight = Number(packageWeight);\n\nif(packageWeight > 8)\n{\n  console.log(\"The weight of the package is greater than 8 kilograms!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"semicolon after if\">Semicolon after the Condition of an If Statement</h3>\n<div class=\"text\">Placing a semicolon (;) after the <concept ref=\"condition\">condition</concept> of an <concept ref=\"if statement\">if statement</concept> will cause the condition to be ignored and the <concept ref=\"code block\">code block</concept> to always be executed.</div>\n<div class=\"code-sample-title\">Example of a semicolon after an if statement</div><pre class=\"codeBlock\">var money = 4;\nif(money > 5); // note the semicolon here\n{\n  console.log(\"You have more than $5\"); // this message is always displayed\n}</pre>\n<div class=\"text\">In the above example, the message &quot;You have more than $5&quot; is always displayed, even if the user has less than $5. To fix the issue, simply remove the semicolon after the condition.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-094",
          "name"          : "Using Two Machines",
          "normalizedName": "using two machines",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-094_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-094_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with an if statement. The condition of this if statement should check if the value of <var id=packageWeight>packageWeight</var> <strong>is greater than 16</strong>.</li><li class=code-item>Inside the code block of your new if statement, assign to <var id=shippingPrice>shippingPrice</var> the result of <var id=shippingPrice>shippingPrice</var> <strong>plus 10</strong>.</li></ol>",
          "boilerplate"   : "var packageWeight = prompt(\"How much does the package weigh?\");\nvar shippingPrice = 10;\n\npackageWeight = Number(packageWeight);\n\nif(packageWeight > 8)\n{\n  shippingPrice = shippingPrice + 5;\n}\n\n// Add the new if statement here\n?\n\nconsole.log(\"The final shipping price is: \" + shippingPrice);",
          "solution"      : "var packageWeight = prompt(\"How much does the package weigh?\");\nvar shippingPrice = 10;\n\npackageWeight = Number(packageWeight);\n\nif(packageWeight > 8)\n{\n  shippingPrice = shippingPrice + 5;\n}\n\n// Add the new if statement here\nif(packageWeight > 16)\n{\n  shippingPrice = shippingPrice + 10;\n}\n\nconsole.log(\"The final shipping price is: \" + shippingPrice);",
          "tips"          : "<h3 class=\"title\" ref=\"multiple if\">Multiple If Statements in a Program</h3>\n<div class=\"text\">Multiple <concept ref=\"if statement\">if statements</concept> can be used in a single program. When we use multiple if statements, the result of a first if statement will not affect a second if statement.</div>\n<div class=\"code-sample-title\">Example of multiple if statements</div><pre class=\"codeBlock\">if(myVariable > 8)\n{\n  console.log(\"myVariable is greater than 8!\");\n}\nif(myVariable > 16)\n{\n  console.log(\"myVariable is greater than 16!\");\n}</pre>\n<div class=\"text\">In the above code, the <concept ref=\"code block\">code block</concept> of the second if statement can be executed even if the first code block is not executed. For example, if the <concept ref=\"variable value\">value</concept> of myVariable is 17, we will get both messages: &quot;myVariable is greater than 8!&quot; and &quot;myVariable is greater than 16!&quot;.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-095",
          "name"          : "Don't Be Negative!",
          "normalizedName": "dont be negative!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program that will tell us if a number is either: positive (greater than zero), negative (less than zero) or equal to zero. Can you write the three conditions to make this program work?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=myNumber>myNumber</var> <strong>is greater than 0</strong>.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=myNumber>myNumber</var> <strong>is less than 0</strong>.</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=myNumber>myNumber</var> <strong>is equal to 0</strong>.</li></ol>",
          "boilerplate"   : "var myNumber = prompt(\"Enter a number\");\n\nmyNumber = Number(myNumber);\n\n// Check if myNumber is greater than 0\nif(?)\n{\n  console.log(myNumber + \" is a positive number.\");\n}\n// Check if myNumber is less than 0\nif(?)\n{\n  console.log(myNumber + \" is a negative number.\");\n}\n// Check if myNumber is equal to 0\nif(?)\n{\n  console.log(myNumber + \" is zero.\");\n}",
          "solution"      : "var myNumber = prompt(\"Enter a number\");\n\nmyNumber = Number(myNumber);\n\n// Check if myNumber is greater than 0\nif(myNumber > 0)\n{\n  console.log(myNumber + \" is a positive number.\");\n}\n// Check if myNumber is less than 0\nif(myNumber < 0)\n{\n  console.log(myNumber + \" is a negative number.\");\n}\n// Check if myNumber is equal to 0\nif(myNumber == 0)\n{\n  console.log(myNumber + \" is zero.\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-096",
          "name"          : "Welcome Admin!",
          "normalizedName": "welcome admin!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a password system that will check if our user entered the correct password. Can you complete the conditions to this system?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition that checks if <var id=myAttempt>myAttempt</var> is equal to <var id=password>password</var>. <strong>Hint:</strong> the equality operator is ==</li><li class=code-item>Replace the second question mark with a condition that checks if <var id=myAttempt>myAttempt</var> is <strong>not equal</strong> to <var id=password>password</var>. <strong>Hint:</strong> the not equal operator is !=</li></ol>",
          "boilerplate"   : "var myAttempt = prompt(\"Enter the password\");\nvar password = \"12345\";\n\n// Verify if myAttempt is equal to password\nif(?)\n{\n  console.log(\"Welcome Admin!\");\n}\n\n// Verify if myAttempt is NOT equal to password\nif(?)\n{\n  console.log(\"Invalid password!\");\n}",
          "solution"      : "var myAttempt = prompt(\"Enter the password\");\nvar password = \"12345\";\n\n// Verify if myAttempt is equal to password\nif(myAttempt == password)\n{\n  console.log(\"Welcome Admin!\");\n}\n\n// Verify if myAttempt is NOT equal to password\nif(myAttempt != password)\n{\n  console.log(\"Invalid password!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-097",
          "name"          : "A New Cost",
          "normalizedName": "a new cost",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's help Byte Mail build another sorting program. This one must assign the proper shipping price to each package. Here is the pricing structure:</div><ul class=algorithm><li>Packages travelling a distance of less than or equal to 1000 kilometers have a shipping price of $10.</li><li>Packages travelling a distance greater than 1000 kilometers have a shipping price of $20.</li><li>Packages travelling a distance greater than 2500 kilometers have a shipping price of $50.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=distance>distance</var> is greater than 1000. Inside the code block of this if statement, assign to <var id=shippingPrice>shippingPrice</var> the number 20.</li><li class=code-item>Replace the second question mark with another if statement. The condition of this if statement should check if the value of <var id=distance>distance</var> is greater than 2500. Inside the code block of this if statement, assign to <var id=shippingPrice>shippingPrice</var> the number 50.</li></ol>",
          "boilerplate"   : "var distance = prompt(\"How far does the package have to travel?\");\nvar shippingPrice;\n\ndistance = Number(distance);\n\nif(distance <= 1000)\n{\n  shippingPrice = 10;\n}\n\n// If distance is greater than 1000,\n// shippingPrice must be $20\n?\n\n// If distance is greater than 2500,\n// shippingPrice must be $50\n?\n\nconsole.log(\"The shipping price is \" + shippingPrice + \"$\");",
          "solution"      : "var distance = prompt(\"How far does the package have to travel?\");\nvar shippingPrice;\n\ndistance = Number(distance);\n\nif(distance <= 1000)\n{\n  shippingPrice = 10;\n}\n\n// If distance is greater than 1000,\n// shippingPrice must be $20\nif(distance > 1000)\n{\n  shippingPrice = 20;\n}\n\n// If distance is greater than 2500,\n// shippingPrice must be $50\nif(distance > 2500)\n{\n  shippingPrice = 50;\n}\n\nconsole.log(\"The shipping price is \" + shippingPrice + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-098",
          "name"          : "Guess the Shape",
          "normalizedName": "guess the shape",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to help us identify a shape according to how many sides it has. Our program will be able to recognize shapes of up to 6 sides.</div><ul class=algorithm><li>A shape cannot have 2 or less sides.</li><li>If a shape has 3 sides, then it is a triangle.</li><li>If a shape has 4 sides, then it is a quadrilateral (square, rectangle, etc.).</li><li>If a shape has 5 sides, then it is a pentagon.</li><li>If a shape has 6 sides, then it is a hexagon.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=numberOfSides>numberOfSides</var> is equal to 4. Inside the code block of this if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"The shape is a quadrilateral!\"</string>.</li><li class=code-item>Replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=numberOfSides>numberOfSides</var> is equal to 5. Inside the code block of this if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"The shape is a pentagon!\"</string>.</li><li class=code-item>Replace the third question mark with an if statement. The condition of this if statement should check if the value of <var id=numberOfSides>numberOfSides</var> is equal to 6. Inside the code block of this if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"The shape is an hexagon!\"</string>.</li><li class=code-item>Replace the fourth question mark with an if statement. The condition of this if statement should check if <var id=numberOfSides>numberOfSides</var> is greater than 6. Inside the code block of this if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"I don't know this shape!\"</string>.</li></ol>",
          "boilerplate"   : "var numberOfSides = prompt(\"How many sides does this shape have?\");\nnumberOfSides = Number(numberOfSides);\n\nif(numberOfSides <= 2)\n{\n  console.log(\"That's not a valid shape!\");\n}\nif(numberOfSides == 3)\n{\n  console.log(\"The shape is a triangle!\");\n}\n// Check if the shape is a quadrilateral\n?\n\n// Check if the shape is a pentagon\n?\n\n// Check if the shape is an hexagon\n?\n\n// Display a message that says\n// the program doesn't know this shape\n?",
          "solution"      : "var numberOfSides = prompt(\"How many sides does this shape have?\");\nnumberOfSides = Number(numberOfSides);\n\nif(numberOfSides <= 2)\n{\n  console.log(\"That's not a valid shape!\");\n}\nif(numberOfSides == 3)\n{\n  console.log(\"The shape is a triangle!\");\n}\n// Check if the shape is a quadrilateral\nif(numberOfSides == 4)\n{\n  console.log(\"The shape is a quadrilateral!\");\n}\n// Check if the shape is a pentagon\nif(numberOfSides == 5)\n{\n  console.log(\"The shape is a pentagon!\");\n}\n// Check if the shape is an hexagon\nif(numberOfSides == 6)\n{\n  console.log(\"The shape is an hexagon!\");\n}\n// Display a message that says\n// the program doesn't know this shape\nif(numberOfSides > 6)\n{\n    console.log(\"I don't know this shape!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-099",
          "name"          : "Running Out of Gas",
          "normalizedName": "running out of gas",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to help the driver of a car know how much fuel they have in their car. The program should display one of the following 4 messages, depending on the user's current fuel level:</div><ul class=algorithm><li>If the level of fuel is less than 5 liters, display \"Quick! Get to the gas station!\".</li><li>If the level of fuel is greater than or equal to 20 liters, display \"The tank is half full!\".</li><li>If the level of fuel is equal to 40 liters, display \"You have a full tank!\".</li><li>If the level of fuel is greater than 40 liters, display \"Your tank is overflowing!\".</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the 3 missing if statements. The code block of each if statement should assign to the variable <var id=message>message</var> the appropriate message.</li></ol>",
          "boilerplate"   : "var gasLevel = prompt(\"How much gas is left in your car? (in litres)\");\nvar message = \"There's still gas in the tank\";\n\ngasLevel = Number(gasLevel);\n\nif(gasLevel < 5)\n{\n  message = \"Quick! Get to the gas station!\";\n}\n\n// Check if gasLevel is greater than or equal to 20\n?\n\n// Check if gasLevel is equal to 40\n?\n\n// Check if gasLevel is greater than 40\n?\n\nconsole.log(message);",
          "solution"      : "var gasLevel = prompt(\"How much gas is left in your car? (in litres)\");\nvar message = \"There's still gas in the tank\";\n\ngasLevel = Number(gasLevel);\n\nif(gasLevel < 5)\n{\n  message = \"Quick! Get to the gas station!\";\n}\n\n// Check if gasLevel is greater than or equal to 20\nif(gasLevel >= 20)\n{\n  message = \"The tank is half full!\";\n}\n\n// Check if gasLevel is equal to 40\nif(gasLevel == 40)\n{\n  message = \"You have a full tank!\";\n}\n\n// Check if gasLevel is greater than 40\nif (gasLevel > 40)\n{\n  message = \"Your tank is overflowing!\";\n}\n\nconsole.log(message);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-100",
          "name"          : "Did I Pass?",
          "normalizedName": "did i pass",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to grade a user's test result. Here is the grading chart:</div><ul class=algorithm><li>If the user's score is less than 60, give them a grade of D.</li><li>If the user's score is greater than or equal to 60, give them a grade of C.</li><li>If the user's score is greater than or equal to 75, give them a grade of B.</li><li>If the user's score is greater than or equal to 90, give them a grade of A.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the 4 if statements required to make this program work. The code block of each if statement should assign to the variable <var id=grade>grade</var> the appropriate grade as a string (ex: <string>\"A\"</string>). <strong>Hint:</strong> For this program to function correctly, the first if statement must check for the lowest grade, the second for the second worse grade and so on. The last if statement should check for the best grade.</li></ol>",
          "boilerplate"   : "var score = prompt(\"What is your test score? (0 - 100)\");\nscore = Number(score);\n// This variable will hold the final grade\nvar grade;\n\n// Code your four if statements here\n\nconsole.log(\"Your final grade is: \" + grade);",
          "solution"      : "var score = prompt(\"What is your test score? (0 - 100)\");\nscore = Number(score);\n// This variable will hold the final grade\nvar grade;\n\n// Code your four if statements here\nif(score < 60)\n{\n  grade = \"D\";\n}\nif(score >= 60)\n{\n  grade = \"C\";\n}\nif(score >= 75)\n{\n  grade = \"B\";\n}\nif(score >= 90)\n{\n  grade = \"A\";\n}\n\nconsole.log(\"Your final grade is: \" + grade);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-101",
          "name"          : "Who's the Greatest?",
          "normalizedName": "whos the greatest",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to compare 3 numbers and find which is the greatest. To do so, we can use a special mathematical property known as the transitive relation of numbers. Here is the algorithm:</div><ol class=algorithm><li>Create a variable named greatestNumber. Assign it the value of the first number.</li><li>Compare the second number with the variable greatestNumber. If the second number is greater, assign its value to greatestNumber.</li><li>Compare the third number with the variable greatestNumber. If the third number is greater, assign its value to greatestNumber.</li><li>The final value of greatestNumber is the number with the greatest value.</li></ol><div class=text>Can you build a program to apply this algorithm?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use an if statement to create step (b) of the algorithm.</li><li class=code-item>Use another if statement to create step (c) of the algorithm.</li></ol>",
          "boilerplate"   : "var firstNumber = 12;\nvar secondNumber = 7;\nvar thirdNumber = 9;\n\nvar greatestNumber = firstNumber;\n\n// Check if secondNumber is\n// greater than greatestNumber\n?\n\n// Check if thirdNumber is\n// greater than greatestNumber\n?\n\nconsole.log(\"The greatest number is \" + greatestNumber);",
          "solution"      : "var firstNumber = 12;\nvar secondNumber = 7;\nvar thirdNumber = 9;\n\nvar greatestNumber = firstNumber;\n\n// Check if secondNumber is\n// greater than greatestNumber\nif(secondNumber > greatestNumber)\n{\n  greatestNumber = secondNumber;\n}\n\n// Check if thirdNumber is\n// greater than greatestNumber\nif(thirdNumber > greatestNumber)\n{\n  greatestNumber = thirdNumber;\n}\n\nconsole.log(\"The greatest number is \" + greatestNumber);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-005",
          "name"          : "Quiz 5",
          "description"   : "Booleans and If Statements",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-005_q-01",
              "question": "<div>True or false. Booleans only have two possible values.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-005_q-01_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "<code>true</code> and <code>false</code> are the only two possible Boolean values."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-005_q-02",
              "question": "<div>What is the final value of the variable <var>result</var>?</div>\n<pre class=\"language-javascript\"><code>var first = 4;\nvar second = 2;\nvar result = first &gt; second;</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>6</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-005_q-02_a-02",
                  "value"      : 2,
                  "answer"     : "<div><code>true</code></div>",
                  "explanation": "The greater than operator (&gt;) returns a Boolean value: <code>true</code> if the left value is greater than the right, <code>false</code> otherwise."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-02_a-03",
                  "value" : 0,
                  "answer": "<div>2</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-02_a-04",
                  "value" : 0,
                  "answer": "<div><code>false</code></div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-005_q-03",
              "question": "<div>What is the final value of the variable <var>result</var>?</div>\n<pre class=\"language-javascript\"><code>var first = \"EduCode\";\nvar second = \"educode\";\nvar result = first == second;</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-03_a-01",
                  "value" : 0,
                  "answer": "<div><code>true</code></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>EduCodeeducode</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-005_q-03_a-03",
                  "value"      : 2,
                  "answer"     : "<div><code>false</code></div>",
                  "explanation": "The equality operator (==) returns a Boolean value: <code>true</code> if both values are equal, <code>false</code> if they are different. Uppercase and lowercase letters are considered."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>educodeEduCode</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-005_q-04",
              "question": "<div>Select all the expressions that return a Boolean result.</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-005_q-04_a-01",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>4 &lt; 5</code></pre>",
                  "explanation": "The less than operator (&lt;) is used to compare two values, returning a Boolean value."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-04_a-02",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>2 + 5</code></pre>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-005_q-04_a-03",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>5 == 3</code></pre>",
                  "explanation": "The equality operator (==) is used to compare two values, returning a Boolean value."
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-005_q-04_a-04",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>(7 + 2) != (3 - 1)</code></pre>",
                  "explanation": "The inequality operator (!=) is used to compare two values, returning a Boolean value."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-04_a-05",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>1 * 3</code></pre>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-005_q-05",
              "question": "<div>What is the output of this program?</div>\n<pre class=\"language-javascript\"><code>var myVariable = 5;\n\nif(myVariable &gt; 4)\n{\n  myVariable = myVariable + 1;\n  console.log(\"myVariable is equal to \" + myVariable);\n}\n\nconsole.log(\"myVariable is equal to \" + myVariable);</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>One message: <samp>myVariable is equal to 5</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>One message: <samp>myVariable is equal to 6</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-05_a-03",
                  "value" : 0,
                  "answer": "<div>Two messages: <samp>myVariable is equal to 5</samp> and <samp>myVariable is equal to 6</samp></div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-005_q-05_a-04",
                  "value"      : 2,
                  "answer"     : "<div>Two messages: <samp>myVariable is equal to 6</samp> and <samp>myVariable is equal to 6</samp></div>",
                  "explanation": "The message in the if statement is shown, since <code>myVariable &gt; 4</code> is true. The message after the if statement is always shown."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-005_q-06",
              "question": "<div>What is the output of this program?</div>\n<pre class=\"language-javascript\"><code>var myVariable = 9;\n\nif(myVariable &gt; 4)\n{\n  console.log(\"myVariable is greater than 4\");\n}\nif(myVariable &gt; 8)\n{\n  console.log(\"myVariable is greater than 8\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-005_q-06_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Two messages: <samp>myVariable is greater than 4</samp> and <samp>myVariable is greater than 8</samp></div>",
                  "explanation": "The message in the first if statement is shown since <code>myVariable &gt; 4</code> is true. The message in the second if statement is also shown since <code>myVariable &gt; 8</code> is also true."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>One message: <samp>myVariable is greater than 4</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>One message: <samp>myVariable is greater than 8</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>No message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-005_q-07",
              "question": "<div>What happens if a semicolon is placed immediately after the condition of an if statement? ex: <code>if(myVariable &gt; 5);</code></div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-07_a-01",
                  "value" : 0,
                  "answer": "<div>The code block is ignored.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-005_q-07_a-02",
                  "value"      : 2,
                  "answer"     : "<div>The code block is always executed, no matter the result of the condition.</div>",
                  "explanation": "The semicolon will cause the if statement to execute an \"empty\" code block. The if statement's code block is always executed, instead of only being executed when the if statement is true."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>The if statement works as intended.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-005_q-07_a-04",
                  "value" : 0,
                  "answer": "<div>The program crashes.</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 5",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_en-CA_exercise-263",
          "name"          : "Else and Else If Statements",
          "normalizedName": "else and else if statements",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-263_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-263_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-11",
          "name"          : "Project 11 - Offering an Alternative",
          "normalizedName": "project 11 - offering an alternative",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-102",
          "name"          : "The Heaviest Package",
          "normalizedName": "the heaviest package",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-102_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-102_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=package1>package1</var> is greater than the value of <var id=package2>package2</var>. Inside the code block of this if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"package1 is heavier than package2\"</string>.</li><li class=code-item>Replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=package1>package1</var> is less than the value of <var id=package2>package2</var>. Inside the code block of this if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"package2 is heavier than package1\"</string>.</li></ol>",
          "boilerplate"   : "var package1 = prompt(\"What is the weight of the first package?\");\nvar package2 = prompt(\"What is the weight of the second package?\");\n\npackage1 = Number(package1);\npackage2 = Number(package2);\n\n// Check if package 1 is\n// heavier than package 2\n?\n\n// Check if package 1 is\n// lighter than package 2\n?",
          "solution"      : "var package1 = prompt(\"What is the weight of the first package?\");\nvar package2 = prompt(\"What is the weight of the second package?\");\n\npackage1 = Number(package1);\npackage2 = Number(package2);\n\n// Check if package 1 is\n// heavier than package 2\nif(package1 > package2)\n{\n  console.log(\"package1 is heavier than package2\");\n}\n\n// Check if package 1 is\n// lighter than package 2\nif(package1 < package2)\n{\n  console.log(\"package2 is heavier than package1\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-103",
          "name"          : "Offering an Alternative",
          "normalizedName": "offering an alternative",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-103_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-103_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the second if statement by an else statement.</li></ol>",
          "boilerplate"   : "var package1 = prompt(\"What is the weight of the first package?\");\nvar package2 = prompt(\"What is the weight of the second package?\");\n\npackage1 = Number(package1);\npackage2 = Number(package2);\n\nif(package1 > package2)\n{\n  console.log(\"package1 is heavier than package2\");\n}\nif(package1 < package2)\n{\n  console.log(\"package2 is heavier than package1\");\n}",
          "solution"      : "var package1 = prompt(\"What is the weight of the first package?\");\nvar package2 = prompt(\"What is the weight of the second package?\");\n\npackage1 = Number(package1);\npackage2 = Number(package2);\n\nif(package1 > package2)\n{\n  console.log(\"package1 is heavier than package2\");\n}\nelse\n{\n  console.log(\"package2 is heavier than package1\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-104",
          "name"          : "Adding an Else Statement",
          "normalizedName": "adding an else statement",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=packageWeight>packageWeight</var> is greater than 8.</li><li class=code-item>Replace the second question mark with an else statement. Remember, else statements have no conditions!</li></ol>",
          "boilerplate"   : "var packageWeight = prompt(\"What is the weight of the package?\");\n\npackageWeight = Number(packageWeight);\n\n?\n{\n  console.log(\"The package is heavier than 8 kilograms\");\n}\n?\n{\n  console.log(\"The package is not heavier than 8 kilograms\");\n}",
          "solution"      : "var packageWeight = prompt(\"What is the weight of the package?\");\n\npackageWeight = Number(packageWeight);\n\nif(packageWeight > 8)\n{\n  console.log(\"The package is heavier than 8 kilograms\");\n}\nelse\n{\n  console.log(\"The package is not heavier than 8 kilograms\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-105",
          "name"          : "A Machine With Three Conditions",
          "normalizedName": "a machine with three conditions",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-105_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-105_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first else statement with an if statement. The condition of this if statement should check if the value of <var id=package1>package1</var> is less than the value of <var id=package2>package2</var>. You do not need to change the code block of this if statement.</li><li class=code-item>Replace the second else statement with another if statement. The condition of this if statement should check if the value of <var id=package1>package1</var> is equal to the value of <var id=package2>package2</var>. You do not need to change the code block of this if statement.</li></ol>",
          "boilerplate"   : "var package1 = prompt(\"What is the weight of the first package?\");\nvar package2 = prompt(\"What is the weight of the second package?\");\n\npackage1 = Number(package1);\npackage2 = Number(package2);\n\nif(package1 > package2)\n{\n  console.log(\"The first package is heavier!\");\n}\nelse\n{\n  console.log(\"The second package is heavier!\");\n}\nelse\n{\n  console.log(\"Both packages have the same weight!\");\n}",
          "solution"      : "var package1 = prompt(\"What is the weight of the first package?\");\nvar package2 = prompt(\"What is the weight of the second package?\");\n\npackage1 = Number(package1);\npackage2 = Number(package2);\n\nif(package1 > package2)\n{\n  console.log(\"The first package is heavier!\");\n}\nif(package1 < package2)\n{\n  console.log(\"The second package is heavier!\");\n}\nif(package1 == package2)\n{\n  console.log(\"Both packages have the same weight!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>\n<h3 class=\"title\" ref=\"else statement restrictions\">Else Statement Restrictions</h3>\n<div class=\"text\">Since an else statement is dependant on the <concept ref=\"condition\">condition</concept> of an <concept ref=\"if statement\">if statement</concept> and the condition can only have two values, we are limited to a single <concept ref=\"else statement\">else statement</concept> for each if statement.</div>\n<div class=\"code-sample-title\">Example of incorrect else statement</div><pre class=\"codeBlock\">var packageWeight = 8;\nif(packageWeight > 8)\n{\n  // will only execute if the condition if true\n  console.log(\"That's a heavy package!\");\n}\nelse\n{\n  // will only execute if the condition if false\n  console.log(\"That package is light!\");\n}\nelse // invalid, this code block cannot be controlled\n{\n  console.log(\"That package is super light!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-106",
          "name"          : "It's Going to Snow!",
          "normalizedName": "its going to snow!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program that can detect when it's going to snow. To do so, the program will ask the user to enter a temperature, in degrees Celsius. If the temperature is less than or equal to 0, then it is snowing.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=temperature>temperature</var> is less than or equal to 0. <strong>Hint:</strong> the less than or equal to operator is &lt;=</li><li class=code-item>Replace the second question mark with an else statement. Remember, else statements have no conditions!</li></ol>",
          "boilerplate"   : "var temperature = prompt(\"What is the temperature outside? (in Celsius)\");\n\ntemperature = Number(temperature);\n\n?\n{\n  console.log(\"It's snowing!\");\n}\n?\n{\n  console.log(\"No snow in sight!\");\n}",
          "solution"      : "var temperature = prompt(\"What is the temperature outside? (in Celsius)\");\n\ntemperature = Number(temperature);\n\nif(temperature <= 0)\n{\n  console.log(\"It's snowing!\");\n}\nelse\n{\n  console.log(\"No snow in sight!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-107",
          "name"          : "Detecting an Error",
          "normalizedName": "detecting an error",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>This program converts pounds (lbs) to kilograms (kg). Currently, if a negative number is entered, the program produces an invalid result. Let's use an if statement and else statement to protect our program for invalid user input.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=pounds>pounds</var> is greater than or equal to 0.</li><li class=code-item>Replace the second question mark with an else statement. Inside the code block of this else statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"You can't have a negative weight!\"</string>.</li></ol>",
          "boilerplate"   : "var pounds = prompt(\"How many pounds? (lbs)\");\nvar kilograms;\n\npounds = Number(pounds);\n\n// Check if pounds is\n// greater than or equal to 0\n?\n{\n  kilograms = pounds / 2.2;\n  console.log(pounds + \"lbs is equal to \" + kilograms + \"kg.\");\n}\n// Write the else statement here\n?",
          "solution"      : "var pounds = prompt(\"How many pounds? (lbs)\");\nvar kilograms;\n\npounds = Number(pounds);\n\n// Check if pounds is\n// greater than or equal to 0\nif(pounds >= 0)\n{\n  kilograms = pounds / 2.2;\n  console.log(pounds + \"lbs is equal to \" + kilograms + \"kg.\");\n}\n// Write the else statement here\nelse\n{\n  console.log(\"You can't have a negative weight!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-108",
          "name"          : "High Score!",
          "normalizedName": "high score!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Games often use if statements to check for various things such as winning conditions, hit detections and much more. Let's code an if statement to check if the user beat the highscore of a game.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=currentScore>currentScore</var> is greater than the value of <var id=highScore>highScore</var>. Inside the code block of this if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"You beat the high score!\"</string>.</li><li class=code-item>Replace the second question mark with an else statement. Inside the code block of this else statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"You did not beat the high score!\"</string>.</li></ol>",
          "boilerplate"   : "var currentScore = prompt(\"What is your current score?\");\ncurrentScore = Number(currentScore);\nvar highScore = 1000;\n\n// Create the if statement here\n?\n\n// Create the else statement here\n?",
          "solution"      : "var currentScore = prompt(\"What is your current score?\");\ncurrentScore = Number(currentScore);\nvar highScore = 1000;\n\n// Create the if statement here\nif(currentScore > highScore)\n{\n  console.log(\"You beat the high score!\");\n}\n// Create the else statement here\nelse\n{\n  console.log(\"You did not beat the high score!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-109",
          "name"          : "Is It a Triangle?",
          "normalizedName": "is it a triangle",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to help us see if three angles make a valid triangle. As a reminder, a triangle is only valid if the sum of the three angles is equal to 180.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first three question marks with instructions to assign to <var id=firstAngle>firstAngle</var>, <var id=secondAngle>secondAngle</var> and <var id=thirdAngle>thirdAngle</var> their value converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Replace the fourth question mark with a new variable named <var id=sum>sum</var> and assign it the sum of <var id=firstAngle>firstAngle</var>, <var id=secondAngle>secondAngle</var> and <var id=thirdAngle>thirdAngle</var>.</li><li class=code-item>Replace the fifth question mark with an if statement. The condition of this if statement should check if the value of <var id=sum>sum</var> is equal to 180. Inside the code block of this if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"It's a valid triangle!\"</string>.</li><li class=code-item>Replace the last question mark with an else statement. Inside the code block of this else statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"You can't create a triangle with those angles!\"</string>.</li></ol>",
          "boilerplate"   : "var firstAngle = prompt(\"What is the first angle?\");\nvar secondAngle = prompt(\"What is the second angle?\");\nvar thirdAngle = prompt(\"What is the third angle?\");\n\n// Convert firstAngle, secondAngle\n// and thirdAngle to numbers\n?\n?\n?\n\n// Calculate the sum\n?\n\n// Write the if statement here\n?\n\n// Write the else statement here\n?",
          "solution"      : "var firstAngle = prompt(\"What is the first angle?\");\nvar secondAngle = prompt(\"What is the second angle?\");\nvar thirdAngle = prompt(\"What is the third angle?\");\n\n// Convert firstAngle, secondAngle\n// and thirdAngle to numbers\nfirstAngle = Number(firstAngle);\nsecondAngle = Number(secondAngle);\nthirdAngle = Number(thirdAngle);\n\n// Calculate the sum\nvar sum = firstAngle + secondAngle + thirdAngle;\n\n// Write the if statement here\nif(sum == 180)\n{\n  console.log(\"It's a valid triangle!\");\n}\n// Write the else statement here\nelse\n{\n  console.log(\"You can't create a triangle with those angles!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>\n<h3 class=\"title\" ref=\"console.log()\">Using the console.log() Instruction</h3>\n<div class=\"text\">The console.log() <concept ref=\"instruction\">instruction</concept> allows us to create a text <concept ref=\"output\">output</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be outputted to the program's console.</div><div class=\"text\">Note that the string given as a parameter can be a <concept ref=\"concatenation\">concatenated</concept> string.</div>\n<div class=\"code-sample-title\">Example of console.log()</div><pre class=\"codeBlock\">console.log(\"Hello!\"); // displays: Hello!\nconsole.log(\"Hello \" + \"world!\"); // displays the concatenated string: Hello world!\nconsole.log(Hello!); // invalid, missing quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-110",
          "name"          : "The Next Number Is...",
          "normalizedName": "the next number is...",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to guess the fourth number in a sequence of 3 numbers. For example, if the user enters the numbers 2, 4 and 6, the program will say that the next number is 8. To do so, we can use the following algorithm:</div><ol class=algorithm><li>If the second number minus the first number is equal to the third minus the second, then the fourth number is equal to the third number plus the second minus the first.</li><li>If step (a) is false, then the fourth number is equal to the third number divided by the result of the first number divided by the second.</li></ol><div class=text>Try executing your program with the following values:</div><div class=text>If firstNumber is 1, secondNumber is 2 and thirdNumber is 3, then the program should say \"The next number in the sequence is: 4\"</div><div class=text>If firstNumber is 3, secondNumber is 6 and thirdNumber is 9, then the program should say \"The next number in the sequence is: 12\"</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of the if statement should check if (<var id=secondNumber>secondNumber</var> - <var id=firstNumber>firstNumber</var>) is equal to (<var id=thirdNumber>thirdNumber</var> - <var id=secondNumber>secondNumber</var>). The code block of this if statement should assign to the variable <var id=fourthNumber>fourthNumber</var> the result of the equation: <var id=thirdNumber>thirdNumber</var> + (<var id=secondNumber>secondNumber</var> - <var id=firstNumber>firstNumber</var>).</li><li class=code-item>Replace the second question mark with an else statement. The code block of this else statement should assign to the variable <var id=fourthNumber>fourthNumber</var> the result of the equation: <var id=thirdNumber>thirdNumber</var> / (<var id=firstNumber>firstNumber</var> / <var id=secondNumber>secondNumber</var>).</li><li class=code-item>PEDMAS is critical to succeeding this exercise!</li></ol>",
          "boilerplate"   : "var firstNumber = prompt(\"What is the first number in the sequence?\");\nvar secondNumber = prompt(\"What is the second number in the sequence?\");\nvar thirdNumber = prompt(\"What is the third number in the sequence?\");\nvar fourthNumber;\n\nfirstNumber = Number(firstNumber);\nsecondNumber = Number(secondNumber);\nthirdNumber = Number(thirdNumber);\n\n// Write the if statement here\n?\n\n// Write the else statement here\n?\n\nconsole.log(\"The fourth number in the sequence is: \" + fourthNumber);",
          "solution"      : "var firstNumber = prompt(\"What is the first number in the sequence?\");\nvar secondNumber = prompt(\"What is the second number in the sequence?\");\nvar thirdNumber = prompt(\"What is the third number in the sequence?\");\nvar fourthNumber;\n\nfirstNumber = Number(firstNumber);\nsecondNumber = Number(secondNumber);\nthirdNumber = Number(thirdNumber);\n\n// Write the if statement here\nif((secondNumber - firstNumber) == (thirdNumber - secondNumber))\n{\n  fourthNumber = thirdNumber + (secondNumber - firstNumber);\n}\n// Write the else statement here\nelse\n{\n  fourthNumber = thirdNumber / (firstNumber / secondNumber);\n}\n\nconsole.log(\"The fourth number in the sequence is: \" + fourthNumber);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_project-12",
          "name"          : "Project 12 - Adding More Options",
          "normalizedName": "project 12 - adding more options",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-111",
          "name"          : "A New Type of Machine",
          "normalizedName": "a new type of machine",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-111_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-111_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a condition that checks if <var id=package1>package1</var> is less than <var id=package2>package2</var>.</li></ol>",
          "boilerplate"   : "var package1 = prompt(\"What is the weight of the first package?\");\nvar package2  = prompt(\"What is the weight of the second package?\");\n\npackage1 = Number(package1);\npackage2 = Number(package2);\n\nif(package1 > package2)\n{\n  console.log(\"The first package is heavier!\");\n}\nelse if(?)\n{\n  console.log(\"The second package is heavier!\");\n}\nelse\n{\n  console.log(\"Both packages have the same weight!\");\n}",
          "solution"      : "var package1 = prompt(\"What is the weight of the first package?\");\nvar package2  = prompt(\"What is the weight of the second package?\");\n\npackage1 = Number(package1);\npackage2 = Number(package2);\n\nif(package1 > package2)\n{\n  console.log(\"The first package is heavier!\");\n}\nelse if(package1 < package2)\n{\n  console.log(\"The second package is heavier!\");\n}\nelse\n{\n  console.log(\"Both packages have the same weight!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-112",
          "name"          : "Speedy Arrival",
          "normalizedName": "speedy arrival",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's help Byte Mail build a shipping time estimator. The distance that a package has to travel will impact its shipping time.</div><ul class=algorithm><li>Packages that travel <strong>under 1000 km</strong> take <strong>1 day</strong> to arrive.</li><li>Packages that travel <strong>over 1000 km but under 2000 km</strong> take <strong>2 days</strong> to arrive.</li><li>Packages that travel <strong>over 2000 km but under 5000 km</strong> take <strong>1 week</strong> to arrive.</li><li>Packages that travel <strong>over 5000 km</strong> take <strong>2 or more weeks</strong> to arrive.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition that checks if <var id=distance>distance</var> is less than 1000.</li><li class=code-item>Replace the second question mark with a condition that checks if <var id=distance>distance</var> is less than 2000.</li><li class=code-item>Replace the third question mark with a condition that checks if <var id=distance>distance</var> is less than 5000.</li></ol>",
          "boilerplate"   : "var distance = prompt(\"What's the distance to the destination (in km)\");\n\ndistance = Number(distance);\n\nif(?)\n{\n  console.log(\"The package will arrive tomorrow.\");\n}\nelse if(?)\n{\n  console.log(\"The package will arrive in 2 days.\");\n}\nelse if(?)\n{\n  console.log(\"The package will arrive in 1 week.\");\n}\nelse\n{\n  console.log(\"The package will arrive in 2 or more weeks.\");\n}",
          "solution"      : "var distance = prompt(\"What's the distance to the destination (in km)\");\n\ndistance = Number(distance);\n\nif(distance < 1000)\n{\n  console.log(\"The package will arrive tomorrow.\");\n}\nelse if(distance < 2000)\n{\n  console.log(\"The package will arrive in 2 days.\");\n}\nelse if(distance < 5000)\n{\n  console.log(\"The package will arrive in 1 week.\");\n}\nelse\n{\n  console.log(\"The package will arrive in 2 or more weeks.\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-113",
          "name"          : "Too Many Messages!",
          "normalizedName": "too many messages!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-113_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-113_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the second if statement with an else if statement. You do not need to change the condition.</li></ol>",
          "boilerplate"   : "var packageWeight = prompt(\"How much does the package weigh?\");\n\npackageWeight = Number(packageWeight);\n\nif(packageWeight > 8)\n{\n  console.log(\"The weight of the package is greater than 8 kilograms!\");\n}\nif(packageWeight > 4)\n{\n  console.log(\"The weight of the package is greater than 4 kilograms!\");\n}",
          "solution"      : "var packageWeight = prompt(\"How much does the package weigh?\");\n\npackageWeight = Number(packageWeight);\n\nif(packageWeight > 8)\n{\n  console.log(\"The weight of the package is greater than 8 kilograms!\");\n}\nelse if(packageWeight > 4)\n{\n  console.log(\"The weight of the package is greater than 4 kilograms!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"comparing if and else if\">Comparing Else If Statements and Multiple If Statements</h3>\n<div class=\"text\">The <concept ref=\"if statement\">if statement</concept> and <concept ref=\"else if statement\">else if statement</concept> are similar in purpose, however, there is one key difference. With multiple if statements, we can control multiple <concept ref=\"code block\">code blocks</concept> independently, where the result of each if statement does not affect the other if statements. With else if statements, each code block is dependant, meaning that only one code block will be executed.</div>\n<div class=\"code-sample-title\">Example with multiple if statements</div><pre class=\"codeBlock\">var weight = 17;\n\nif(weight > 4)\n{\n  // this code block is executed\n  console.log(\"weight is greater than 4!\");\n}\nif(weight > 8)\n{\n  // this code block is also executed\n  console.log(\"weight is greater than 8!\");\n}\nif(weight > 16)\n{\n  // this code block is also executed\n  console.log(\"weight is greater than 16!\");\n}</pre>\n<div class=\"text\">In the above example, we get three messages: &quot;weight is greater than 4!&quot;, &quot;weight is greater than 8!&quot; and &quot;weight is greater than 16!&quot;. This is because even if the first if statement is <concept ref=\"boolean\">true</concept>, the second and third if statements are still executed.</div>\n<div class=\"code-sample-title\">Example with else if statements</div><pre class=\"codeBlock\">var weight = 17;\n\nif(weight > 4)\n{\n  // this code block is executed\n  console.log(\"weight is greater than 4!\");\n}\nelse if(weight > 8)\n{\n  // this code block is not executed, because the first one was executed\n  console.log(\"weight is greater than 8!\");\n}\nelse if(weight > 16)\n{\n  // this code block is not executed, because the first one was executed\n  console.log(\"weight is greater than 16!\");\n}</pre>\n<div class=\"text\">If we replace the second and third if statements by else if statements, like in the code above, we only get one message: &quot;weight is greater than 4!&quot;. This is because as soon as one condition is true, we don't check the other statements.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-114",
          "name"          : "The Order of Packages",
          "normalizedName": "the order of packages",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>If you run the program in the code editor, you'll notice that you always get the message \"The weight of the package is between 32 and 64 kilograms!\". This is because we check the condition \"packageWeight is less than 64\" before we check \"packageWeight is less than 16\". If a package weighs less than 16 kg, then it also weighs less than 64 kg. Can you fix the program by flipping the conditions?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the condition of the if statement by a condition that checks if <var id=packageWeight>packageWeight</var> is less than 16. Replace the <concept ref=console-log>console.log()</concept> of the if statement so that it displays <string>\"The weight of the package is less than 16 kilograms!\"</string></li><li class=code-item>Replace the condition of the <strong>last</strong> else if statement by a condition that checks if <var id=packageWeight>packageWeight</var> is less than 64. Replace the <concept ref=console-log>console.log()</concept> of this else if statement so that it displays <string>\"The weight of the package is between 32 and 64 kilograms!\"</string></li></ol>",
          "boilerplate"   : "var packageWeight = prompt(\"Enter a package weight of less than 64 kg.\");\n\npackageWeight = Number(packageWeight);\n\nif(packageWeight < 64)\n{\n  console.log(\"The weight of the package is between 32 and 64 kilograms!\");\n}\nelse if(packageWeight < 32)\n{\n  console.log(\"The weight of the package is between 16 and 31 kilograms!\");\n}\nelse if(packageWeight < 16)\n{\n  console.log(\"The weight of the package is less than 16 kilograms!\");\n}",
          "solution"      : "var packageWeight = prompt(\"Enter a package weight of less than 64 kg.\");\n\npackageWeight = Number(packageWeight);\n\nif(packageWeight < 16)\n{\n  console.log(\"The weight of the package is less than 16 kilograms!\");\n}\nelse if(packageWeight < 32)\n{\n  console.log(\"The weight of the package is between 16 and 31 kilograms!\");\n}\nelse if(packageWeight < 64)\n{\n  console.log(\"The weight of the package is between 32 and 64 kilograms!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-115",
          "name"          : "Going International",
          "normalizedName": "going international",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-115_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-115_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an else if statement. The condition of this else if statement should check if the value of <var id=destination>destination</var> is equal to <string>\"France\"</string>. Inside the code block of this else if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"Package for France!\"</string>.</li><li class=code-item>Replace the second question mark with an else statement. Inside the code block of this else statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"The package destination is unknown!\"</string>.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"What is the destination of the package?\");\n\nif(destination == \"Canada\")\n{\n  console.log(\"Package for Canada!\");\n}\n// Create an else if statement here\n?\n\n// Create an else statement here\n?",
          "solution"      : "var destination = prompt(\"What is the destination of the package?\");\n\nif(destination == \"Canada\")\n{\n  console.log(\"Package for Canada!\");\n}\n// Create an else if statement here\nelse if(destination == \"France\")\n{\n  console.log(\"Package for France!\");\n}\n// Create an else statement here\nelse\n{\n  console.log(\"The package destination is unknown!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-116",
          "name"          : "A Global Reach",
          "normalizedName": "a global reach",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-116_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-116_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an else if statement. The condition of this else if statement should check if the value of <var id=destination>destination</var> is equal to <string>\"United States\"</string>. Inside the code block of this else if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"Package for the United States!\"</string>.</li><li class=code-item>Replace the second question mark with another else if statement. The condition of this else if statement should check if the value of <var id=destination>destination</var> is equal to <string>\"China\"</string>. Inside the code block of this else if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"Package for China!\"</string>.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"What is the destination of the package?\");\n\nif(destination == \"Canada\")\n{\n  console.log(\"Package for Canada!\");\n}\nelse if(destination == \"France\")\n{\n  console.log(\"Package for France!\");\n}\n// Check if the destination is \"United States\"\n?\n\n// Check if the destination is \"China\"\n?\n\nelse\n{\n  console.log(\"The package destination is unknown!\");\n}",
          "solution"      : "var destination = prompt(\"What is the destination of the package?\");\n\nif(destination == \"Canada\")\n{\n  console.log(\"Package for Canada!\");\n}\nelse if(destination == \"France\")\n{\n  console.log(\"Package for France!\");\n}\n// Check if the destination is \"United States\"\nelse if(destination == \"United States\")\n{\n  console.log(\"Package for the United States!\");\n}\n// Check if the destination is \"China\"\nelse if(destination == \"China\")\n{\n  console.log(\"Package for China!\");\n}\nelse\n{\n  console.log(\"The package destination is unknown!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"conditional statement restrictions\">Conditional Statement Restrictions</h3>\n<div class=\"text\"><concept ref=\"conditional statements\">Conditional statements</concept> have 3 key restrictions:</div><div class=\"text\">1- A conditional statement always starts with an <concept ref=\"if statement\">if statement</concept>.</div><div class=\"text\">2- A conditional statement can have any number of <concept ref=\"else if statement\">else if statements</concept>.</div><div class=\"text\">3- A conditional statement can have an <concept ref=\"else statement\">else statement</concept> but it must be the last statement.</div>\n<div class=\"code-sample-title\">Example of a complex conditional statement</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15) // the if statement must be first\n{\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10) // followed by one else if statement\n{\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5) // and another else if statement\n{\n  console.log(\"myVariable is greater than 5!\");\n}\nelse // the else statement must be last\n{\n  console.log(\"myVariable is less than or equal to 5!\");\n}</pre>\n<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-117",
          "name"          : "Airport Security",
          "normalizedName": "airport security",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build an airport baggage scale. Here are the requirements for this scale.</div><ul class=algorithm><li>Baggage <strong>under 50 kilograms</strong> has no additional cost.</li><li>Baggage that weighs <strong>more than 50 kilograms</strong> triggers a $10 overage fee.</li><li>Baggage with a weight of <strong>more than 120 kilograms</strong> is refused.</li></ul><div class=text>Can you complete the program?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=baggageWeight>baggageWeight</var> is greater than 120.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=baggageWeight>baggageWeight</var> is greater than 50.</li></ol>",
          "boilerplate"   : "var baggageWeight = prompt(\"What is the weight of your baggage? (in kg)\");\n\nbaggageWeight = Number(baggageWeight);\n\nif(?)\n{\n  console.log(\"This baggage is too heavy!\");\n}\nelse if(?)\n{\n  console.log(\"This baggage is over the 50 kg limit, there is a $10 overweight fee.\");\n}\nelse\n{\n  console.log(\"There are no additional fees for this baggage.\");\n}",
          "solution"      : "var baggageWeight = prompt(\"What is the weight of your baggage? (in kg)\");\n\nbaggageWeight = Number(baggageWeight);\n\nif(baggageWeight > 120)\n{\n  console.log(\"This baggage is too heavy!\");\n}\nelse if(baggageWeight > 50)\n{\n  console.log(\"This baggage is over the 50 kg limit, there is a $10 overweight fee.\");\n}\nelse\n{\n  console.log(\"There are no additional fees for this baggage.\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-118",
          "name"          : "Hello, World!",
          "normalizedName": "hello world!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to translate the phrase \"Hello, world!\" in various languages. We'll use an if statement with multiple else if statements to detect which language the user wants to select.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an else if statement. The condition of this else if statement should check if the value of <var id=lang>lang</var> is equal to <string>\"es\"</string>. Inside the code block of this else if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"¡Hola Mundo!\"</string>.</li><li class=code-item>Replace the second question mark with an else if statement. The condition of this else if statement should check if the value of <var id=lang>lang</var> is equal to <string>\"jp\"</string>. Inside the code block of this else if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"Kon'nichiwa sekai!\"</string>.</li></ol>",
          "boilerplate"   : "var lang = prompt(\"Select a language (fr, es, jp, en)\");\n\n// Check if French (fr) was detected\nif(lang == \"fr\")\n{\n  console.log(\"Bonjour, le monde!\");\n}\n// Check if Spanish (es) was detected\n?\n\n// Check if Japanese (jp) was detected\n?\n\n// Check if English (en) was detected\nelse\n{\n  console.log(\"Hello, world!\");\n}",
          "solution"      : "var lang = prompt(\"Select a language (fr, es, jp, en)\");\n\n// Check if French (fr) was detected\nif(lang == \"fr\")\n{\n  console.log(\"Bonjour, le monde!\");\n}\n// Check if Spanish (es) was detected\nelse if(lang == \"es\")\n{\n  console.log(\"¡Hola Mundo!\");\n}\n// Check if Japanese (jp) was detected\nelse if(lang == \"jp\")\n{\n  console.log(\"Kon'nichiwa sekai!\");\n}\n// Check if English (en) was detected\nelse\n{\n  console.log(\"Hello, world!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-119",
          "name"          : "Speed Trap",
          "normalizedName": "speed trap",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to help the police know who is speeding. The program should show a different message depending on how much over the speed limit the driver is going.</div><ul class=algorithm><li>If the driver is going <strong>20 km/h or more</strong> over the limit, display the message <string>\"You are 20 km/h over the limit. Please pull over.\"</string></li><li>If the driver is going <strong>10 km/h or more</strong> over the limit, display the message <string>\"You are 10 km/h over the limit. Slow down or you will receive a fine.\"</string></li><li>If the driver is going <strong>1 km/h or more</strong> over the limit, display the message <string>\"You are 1 km/h over the limit. Please slow down.\"</string></li><li>If the driver is <strong>under the limit</strong>, display the message <string>\"Thank you for traveling at a safe speed.\"</string></li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=overLimit>overLimit</var> is greater than or equal to 20. Inside the code block of this if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message: <string>\"You are 20 km/h or more over the limit. Please pull over.\"</string>.</li><li class=code-item>Replace the second question mark with an else if statement. The condition of this else if statement should check if the value of <var id=overLimit>overLimit</var> is greater than or equal to 10. Inside the code block of this else if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message: <string>\"You are 10 km/h or more over the limit. Slow down or you will receive a fine.\"</string>.</li><li class=code-item>Replace the third question mark with an else if statement. The condition of this else if statement should check if the value of <var id=overLimit>overLimit</var> is greater than or equal to 1. Inside the code block of this else if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message: <string>\"You are 1 km/h or more over the limit. Please slow down.\"</string>.</li><li class=code-item>Replace the last question mark with an else statement. Inside the code block of this else statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message: <string>\"Thank you for traveling at a safe speed.\"</string>.</li></ol>",
          "boilerplate"   : "var driverSpeed = prompt(\"What is the driver's current speed? (in km/h)\");\nvar speedLimit = 50;\n\ndriverSpeed = Number(driverSpeed);\n\nvar overLimit = driverSpeed - speedLimit;\n\n// Create the if statement here\n?\n\n// Create the first else if statement here\n?\n\n// Create the second else if statement here\n?\n\n// Create the else statement here\n?",
          "solution"      : "var driverSpeed = prompt(\"What is the driver's current speed? (in km/h)\");\nvar speedLimit = 50;\n\ndriverSpeed = Number(driverSpeed);\n\nvar overLimit = driverSpeed - speedLimit;\n\n// Create the if statement here\nif(overLimit >= 20)\n{\n  console.log(\"You are 20 km/h or more over the limit. Please pull over.\");\n}\n// Create the first else if statement here\nelse if(overLimit >= 10)\n{\n  console.log(\"You are 10 km/h or more over the limit. Slow down or you will receive a fine.\");\n}\n// Create the second else if statement here\nelse if(overLimit >= 1)\n{\n  console.log(\"You are 1 km/h or more over the limit. Please slow down.\");\n}\n// Create the else statement here\nelse\n{\n  console.log(\"Thank you for traveling at a safe speed.\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>\n<h3 class=\"title\" ref=\"console.log()\">Using the console.log() Instruction</h3>\n<div class=\"text\">The console.log() <concept ref=\"instruction\">instruction</concept> allows us to create a text <concept ref=\"output\">output</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be outputted to the program's console.</div><div class=\"text\">Note that the string given as a parameter can be a <concept ref=\"concatenation\">concatenated</concept> string.</div>\n<div class=\"code-sample-title\">Example of console.log()</div><pre class=\"codeBlock\">console.log(\"Hello!\"); // displays: Hello!\nconsole.log(\"Hello \" + \"world!\"); // displays the concatenated string: Hello world!\nconsole.log(Hello!); // invalid, missing quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-120",
          "name"          : "A Number-Guessing Game",
          "normalizedName": "a number-guessing game",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a number-guessing game! The user will have one chance to guess the number generated by the computer. The number will always be between 1 and 10. Your program must determine:</div><ul class=algorithm><li>If myGuess is <strong>greater than</strong> randomNumber, then the user's guess was too big.</li><li>If myGuess is <strong>less than</strong> randomNumber, then the user's guess was too small.</li><li>If myGuess is <strong>exactly equal to</strong> randomNumber, then the user guessed correctly.</li></ul><div class=text>Can you complete the program?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if <var id=myGuess>myGuess</var> is greater than <var id=randomNumber>randomNumber</var>. Inside the code block of this if statement, use the instruction <concept ref=displayGuess>displayGuess(<string>\"over\"</string>)</concept>.</li><li class=code-item>Replace the second question mark with an else if statement. The condition of this else if statement should check if <var id=myGuess>myGuess</var> is less than <var id=randomNumber>randomNumber</var>. Inside the code block of this else if statement, use the instruction <concept ref=displayGuess>displayGuess(<string>\"under\"</string>)</concept>.</li><li class=code-item>Replace the third question mark with an else statement. Inside the code block of this else statement, use the instruction <concept ref=displayGuess>displayGuess(<string>\"correct\"</string>)</concept>.</li></ol>",
          "boilerplate"   : "var randomNumber = getOneToTen();\nvar myGuess = prompt(\"Try to guess the number! (1 to 10)\");\n\nmyGuess = Number(myGuess);\n\n// Use an if statement to\n// check if myGuess is greater than randomNumber\n?\n\n// Use an else if statement to\n// check if myGuess is less than randomNumber\n?\n\n// Use an else statement for\n// the correct guess\n?",
          "solution"      : "var randomNumber = getOneToTen();\nvar myGuess = prompt(\"Try to guess the number! (1 to 10)\");\n\nmyGuess = Number(myGuess);\n\n// Use an if statement to\n// check if myGuess is greater than randomNumber\nif(myGuess > randomNumber)\n{\n  displayGuess(\"over\");\n}\n// Use an else if statement to\n// check if myGuess is less than randomNumber\nelse if(myGuess < randomNumber)\n{\n  displayGuess(\"under\");\n}\n// Use an else statement for\n// the correct guess\nelse\n{\n  displayGuess(\"correct\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-121",
          "name"          : "Building a Converter",
          "normalizedName": "building a converter",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to convert kilometers into other units. Our program must be able to convert kilometers into meters, centimeters and millimeters. Here are the conversions:</div><ul class=algorithm><li>1 kilometer is equal to 1000 meters.</li><li>1 meter is equal to 100 centimeters.</li><li>1 centimeter is equal to 10 millimeters.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Add the two missing else if statements. Each else if statement should check for one unit (either <string>\"cm\"</string> for centimeters or <string>\"mm\"</string> for millimeters). Inside the code block of the else if statements, convert the number of kilometers entered by the user into the requested unit and then display the value using a <concept ref=console-log>console.log()</concept> instruction.</li><li class=code-item>Add an else statement to catch invalid user input. Inside the code block of this else statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"Invalid unit choice\"</string>.</li></ol>",
          "boilerplate"   : "var kilometers = prompt(\"How many kilometers?\");\nvar unit = prompt(\"To what unit would you like to convert? (m, cm, mm)\");\n\nkilometers = Number(kilometers);\n\nconsole.log(kilometers + \" kilometers is equal to:\");\n\nif(unit == \"m\")\n{\n  var meters = kilometers * 1000;\n  console.log(meters + \" meters\");\n}\n// Use an else if statement to\n// check if unit is \"cm\" (centimeters)\n?\n\n// Use an else if statement to\n// check if unit is \"mm\" (millimeters)\n?\n\n// Use an else statement to\n// catch any invalid choices\n?",
          "solution"      : "var kilometers = prompt(\"How many kilometers?\");\nvar unit = prompt(\"To what unit would you like to convert? (m, cm, mm)\");\n\nkilometers = Number(kilometers);\n\nconsole.log(kilometers + \" kilometers is equal to:\");\n\nif(unit == \"m\")\n{\n  var meters = kilometers * 1000;\n  console.log(meters + \" meters\");\n}\n// Use an else if statement to\n// check if unit is \"cm\" (centimeters)\nelse if(unit == \"cm\")\n{\n  var centimeters = kilometers * 100000;\n  console.log(centimeters + \" centimeters\");\n}\n// Use an else if statement to\n// check if unit is \"mm\" (millimeters)\nelse if(unit == \"mm\")\n{\n  var millimeters = kilometers * 1000000;\n  console.log(millimeters + \" millimeters\");\n}\n// Use an else statement to\n// catch any invalid choices\nelse\n{\n  console.log(\"Invalid unit choice\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-006",
          "name"          : "Quiz 6",
          "description"   : "Else and Else If Statements",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-006_q-01",
              "question": "<div>True or false. An <code>if</code> statement can have multiple <code>else</code> statements.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-01_a-01",
                  "value" : 0,
                  "answer": "<div>True</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-006_q-01_a-02",
                  "value"      : 1,
                  "answer"     : "<div>False</div>",
                  "explanation": "Each <code>if</code> statement can only have a single <code>else</code> statement."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-006_q-02",
              "question": "<div>How many <code>else if</code> statements can a single <code>if</code> statement have?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>None</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-02_a-02",
                  "value" : 0,
                  "answer": "<div>One</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-006_q-02_a-03",
                  "value"      : 2,
                  "answer"     : "<div>As many as we'd like</div>",
                  "explanation": "There is no limit to the number of <code>else if</code> statements a single <code>if</code> statement can have."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-02_a-04",
                  "value" : 0,
                  "answer": "<div>Two</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-006_q-03",
              "question": "<div>Which of these statements is true?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-006_q-03_a-01",
                  "value"      : 2,
                  "answer"     : "<div>An <code>else if</code> statement always requires a condition.</div>",
                  "explanation": "<code>if</code> and <code>else if</code> statements always require a condition. <code>else</code> statements never need a condition."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>An <code>else</code> statement always requires a condition.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-03_a-03",
                  "value" : 0,
                  "answer": "<div>An <code>else if</code> statement never requires a condition.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>Both the <code>else</code> and <code>else if</code> statements never require a condition.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-006_q-04",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var myVariable = 2;\n\nif(myVariable &gt; 3)\n{\n  console.log(\"myVariable is greater than 3\");\n}\nelse\n{\n  console.log(\"myVariable is less than 3\");  \n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-006_q-04_a-01",
                  "value"      : 2,
                  "answer"     : "<div>One message: <samp>myVariable is less than 3</samp></div>",
                  "explanation": "Since <code>myVariable &gt; 3</code> is false, the code block of the <code>else</code> statement is executed."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>One message: <samp>myVariable is greater than 3</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-04_a-03",
                  "value" : 0,
                  "answer": "<div>Two messages: <samp>myVariable is greater than 3</samp> and <samp>myVariable is less than 3</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-04_a-04",
                  "value" : 0,
                  "answer": "<div>No message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-006_q-05",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var myVariable = 5;\n\nif(myVariable &gt; 5)\n{\n  console.log(\"myVariable is greater than 5\");\n}\nelse if(myVariable &lt; 5)\n{\n  console.log(\"myVariable is less than 5\");  \n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>One message: <samp>myVariable is less than 5</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>One message: <samp>myVariable is greater than 5</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-05_a-03",
                  "value" : 0,
                  "answer": "<div>Two messages: <samp>myVariable is greater than 5</samp> and <samp>myVariable is less than 5</samp></div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-006_q-05_a-04",
                  "value"      : 2,
                  "answer"     : "<div>No message</div>",
                  "explanation": "Since <code>myVariable &gt; 5</code> is false, and <code>myVariable &lt; 5</code> is also false, no message appears."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-006_q-06",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var animal = \"dog\";\n\nif(animal == \"dog\")\n{\n  console.log(\"The animal is a dog\");\n}\nelse if(animal == \"cat\")\n{\n  console.log(\"The animal is a cat\");  \n}\nelse\n{\n  console.log(\"I don't know that animal\");  \n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-006_q-06_a-01",
                  "value"      : 2,
                  "answer"     : "<div>One message: <samp>The animal is a dog</samp></div>",
                  "explanation": "Since the variable <var>animal</var> is equal to <string>\"dog\"</string>, <code>\"dog\" == \"dog\"</code> is true."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>One message: <samp>The animal is a cat</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>One message: <samp>I don't know that animal</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>No message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-006_q-07",
              "question": "<div>Select all the statements that are true.</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-006_q-07_a-01",
                  "value"      : 1,
                  "answer"     : "<div>An <code>if</code> statement must always be the first statement of a conditional statement.</div>",
                  "explanation": "An <code>if</code> statement starts a conditional statement."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-07_a-02",
                  "value" : 0,
                  "answer": "<div>If we use an <code>else</code> statement, it does not have to be the last statement of a conditional statement.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-006_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>If we use an <code>else if</code> statement, we must have an <code>else</code> statement.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-006_q-07_a-04",
                  "value"      : 1,
                  "answer"     : "<div>We can use an <code>if</code> statement without having <code>else</code> or <code>else if</code> statements.</div>",
                  "explanation": "An <code>if</code> statement is the only required statement to create a conditional statement."
                }
              ]
            }
          ],
          "normalizedName": "quiz 6",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_en-CA_exercise-264",
          "name"          : "Nested If Statements",
          "normalizedName": "nested if statements",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-264_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-264_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-13",
          "name"          : "Project 13 - An If Inside an If",
          "normalizedName": "project 13 - an if inside an if",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-122",
          "name"          : "What's the Destination?",
          "normalizedName": "whats the destination",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-122_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-122_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a condition to check if the value of <var id=weight>weight</var> is less than 10.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"What is the destination of the package? (ex: Canada)\");\nvar weight = prompt(\"What is the weight of the package? (in kg)\");\nvar shippingPrice = 50;\n\nweight = Number(weight);\n\nif(destination == \"Canada\")\n{\n  if(?)\n  {\n    shippingPrice = 7;\n  }\n}\n\nconsole.log(\"Package weight: \" + weight + \" kg\");\nconsole.log(\"Package destination: \" + destination);\nconsole.log(\"Shipping price: \" + shippingPrice.toFixed(2) + \"$\");",
          "solution"      : "var destination = prompt(\"What is the destination of the package? (ex: Canada)\");\nvar weight = prompt(\"What is the weight of the package? (in kg)\");\nvar shippingPrice = 50;\n\nweight = Number(weight);\n\nif(destination == \"Canada\")\n{\n  if(weight < 10)\n  {\n    shippingPrice = 7;\n  }\n}\n\nconsole.log(\"Package weight: \" + weight + \" kg\");\nconsole.log(\"Package destination: \" + destination);\nconsole.log(\"Shipping price: \" + shippingPrice.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-123",
          "name"          : "To the United States",
          "normalizedName": "to the united states",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's add another destination to Byte Mail's international shipping machine. The new destination is the United States. Packages going to that destination with a weight of less than 10 kilograms receive a discounted price of $11.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with an if statement. The condition of this if statement should check if the value of <var id=weight>weight</var> is less than 10. Inside the code block of this if statement, assign to <var id=shippingPrice>shippingPrice</var> a value of 11.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Is the package for Canada or the United States?\");\nvar weight = prompt(\"What is the weight of the package? (in kg)\");\nvar shippingPrice = 50;\n\nweight = Number(weight);\n\nif(destination == \"Canada\")\n{\n  if(weight < 10)\n  {\n    shippingPrice = 7;\n  }\n}\nelse if(destination == \"United States\")\n{\n  ?\n  \n}\n\nconsole.log(\"Package weight: \" + weight + \" kg\");\nconsole.log(\"Package destination: \" + destination);\nconsole.log(\"Shipping price: \" + shippingPrice.toFixed(2) + \"$\");",
          "solution"      : "var destination = prompt(\"Is the package for Canada or the United States?\");\nvar weight = prompt(\"What is the weight of the package? (in kg)\");\nvar shippingPrice = 50;\n\nweight = Number(weight);\n\nif(destination == \"Canada\")\n{\n  if(weight < 10)\n  {\n    shippingPrice = 7;\n  }\n}\nelse if(destination == \"United States\")\n{\n  if(weight < 10)\n  {\n    shippingPrice = 11;\n  }\n}\n\nconsole.log(\"Package weight: \" + weight + \" kg\");\nconsole.log(\"Package destination: \" + destination);\nconsole.log(\"Shipping price: \" + shippingPrice.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-124",
          "name"          : "To Europe We Go",
          "normalizedName": "to europe we go",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-124_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-124_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an else if statement. The condition of this else if statement should check if the value of <var id=destination>destination</var> is equal to <string>\"France\"</string>.</li><li class=code-item>Replace the second question mark with an if statement. This if statement should be inside the code block of the previous else if statement. The condition of this if statement should check if the value of <var id=weight>weight</var> is less than 10. Inside the code block of this if statement, assign to <var id=shippingPrice>shippingPrice</var> a value of 20.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Is the package for Canada, the United States or France?\");\nvar weight = prompt(\"What is the weight of the package? (in kg)\");\nvar shippingPrice = 50;\n\nweight = Number(weight);\n\nif(destination == \"Canada\")\n{\n  if(weight < 10)\n  {\n    shippingPrice = 7;\n  }\n}\nelse if(destination == \"United States\")\n{\n  if(weight < 10)\n  {\n    shippingPrice = 11;\n  }\n}\n// Create the outer else if statement here\n// to check if the destination is France\n?\n\n// Create the inner if statement here\n?\n\nconsole.log(\"Package weight: \" + weight + \" kg\");\nconsole.log(\"Package destination: \" + destination);\nconsole.log(\"Shipping price: \" + shippingPrice.toFixed(2) + \"$\");",
          "solution"      : "var destination = prompt(\"Is the package for Canada, the United States or France?\");\nvar weight = prompt(\"What is the weight of the package? (in kg)\");\nvar shippingPrice = 50;\n\nweight = Number(weight);\n\nif(destination == \"Canada\")\n{\n  if(weight < 10)\n  {\n    shippingPrice = 7;\n  }\n}\nelse if(destination == \"United States\")\n{\n  if(weight < 10)\n  {\n    shippingPrice = 11;\n  }\n}\n// Create the outer else if statement here\n// to check if the destination is France\nelse if(destination == \"France\")\n{\n  // Create the inner if statement here\n  if(weight < 10)\n  {\n    shippingPrice = 20;\n  }\n}\n\nconsole.log(\"Package weight: \" + weight + \" kg\");\nconsole.log(\"Package destination: \" + destination);\nconsole.log(\"Shipping price: \" + shippingPrice.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-125",
          "name"          : "A Label for the Destination",
          "normalizedName": "a label for the destination",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>We're going to add a message to each destination to help the user know the destination of each package as it's being processed.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a <concept ref=console-log>console.log()</concept> instruction. It should display the message <string>\"The destination is Canada!\"</string>.</li><li class=code-item>Replace the second question mark with a <concept ref=console-log>console.log()</concept> instruction. It should display the message <string>\"The destination is the United States!\"</string>.</li><li class=code-item>Replace the third question mark with a <concept ref=console-log>console.log()</concept> instruction. It should display the message <string>\"The destination is France\"</string>.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Is the package for Canada, the United States or France?\");\nvar weight = prompt(\"What is the weight of the package? (in kg)\");\nvar shippingPrice = 50;\n\nweight = Number(weight);\n\nif(destination == \"Canada\")\n{\n  ?\n\n  if(weight < 10)\n  {\n    shippingPrice = 7;\n  }\n}\nelse if(destination == \"United States\")\n{\n  ?\n\n  if(weight < 10)\n  {\n    shippingPrice = 11;\n  }\n}\nelse if(destination == \"France\")\n{\n  ?\n\n  if(weight < 10)\n  {\n    shippingPrice = 20;\n  }\n}\n\nconsole.log(\"Package weight: \" + weight + \" kg\");\nconsole.log(\"Package destination: \" + destination);\nconsole.log(\"Shipping price: \" + shippingPrice.toFixed(2) + \"$\");",
          "solution"      : "var destination = prompt(\"Is the package for Canada, the United States or France?\");\nvar weight = prompt(\"What is the weight of the package? (in kg)\");\nvar shippingPrice = 50;\n\nweight = Number(weight);\n\nif(destination == \"Canada\")\n{\n  console.log(\"The destination is Canada!\");\n\n  if(weight < 10)\n  {\n    shippingPrice = 7;\n  }\n}\nelse if(destination == \"United States\")\n{\n  console.log(\"The destination is the United States!\");\n\n  if(weight < 10)\n  {\n    shippingPrice = 11;\n  }\n}\nelse if(destination == \"France\")\n{\n  console.log(\"The destination is France!\");\n\n  if(weight < 10)\n  {\n    shippingPrice = 20;\n  }\n}\n\nconsole.log(\"Package weight: \" + weight + \" kg\");\nconsole.log(\"Package destination: \" + destination);\nconsole.log(\"Shipping price: \" + shippingPrice.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"console.log()\">Using the console.log() Instruction</h3>\n<div class=\"text\">The console.log() <concept ref=\"instruction\">instruction</concept> allows us to create a text <concept ref=\"output\">output</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be outputted to the program's console.</div><div class=\"text\">Note that the string given as a parameter can be a <concept ref=\"concatenation\">concatenated</concept> string.</div>\n<div class=\"code-sample-title\">Example of console.log()</div><pre class=\"codeBlock\">console.log(\"Hello!\"); // displays: Hello!\nconsole.log(\"Hello \" + \"world!\"); // displays the concatenated string: Hello world!\nconsole.log(Hello!); // invalid, missing quotation marks (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-126",
          "name"          : "A Different Pricing Structure",
          "normalizedName": "a different pricing structure",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-126_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-126_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an else statement. Inside the code block of this else statement, assign to <var id=shippingPrice>shippingPrice</var> a value of 35.</li><li class=code-item>Replace the second question mark with another else statement. Inside the code block of this else statement, assign to <var id=shippingPrice>shippingPrice</var> a value of 55.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Is the package for Canada, the United States or France?\");\nvar weight = prompt(\"What is the weight of the package? (in kg)\");\nvar shippingPrice = 50;\n\nweight = Number(weight);\n\nif(destination == \"Canada\")\n{\n  console.log(\"The destination is Canada!\");\n\n  if(weight < 10)\n  {\n    shippingPrice = 7;\n  }\n  else\n  {\n    shippingPrice = 25;\n  }\n}\nelse if(destination == \"United States\")\n{\n  console.log(\"The destination is the United States!\");\n\n  if(weight < 10)\n  {\n    shippingPrice = 11;\n  }\n  // Add the else statement here for\n  // the United States\n  ?\n  \n}\nelse if(destination == \"France\")\n{\n  console.log(\"The destination is France!\");\n\n  if(weight < 10)\n  {\n    shippingPrice = 20;\n  }\n  // Add the else statement\n  // here for France\n  ?\n  \n}\n\nconsole.log(\"Package weight: \" + weight + \" kg\");\nconsole.log(\"Package destination: \" + destination);\nconsole.log(\"Shipping price: \" + shippingPrice.toFixed(2) + \"$\");",
          "solution"      : "var destination = prompt(\"Is the package for Canada, the United States or France?\");\nvar weight = prompt(\"What is the weight of the package? (in kg)\");\nvar shippingPrice = 50;\n\nweight = Number(weight);\n\nif(destination == \"Canada\")\n{\n  console.log(\"The destination is Canada!\");\n\n  if(weight < 10)\n  {\n    shippingPrice = 7;\n  }\n  else\n  {\n    shippingPrice = 25;\n  }\n}\nelse if(destination == \"United States\")\n{\n  console.log(\"The destination is the United States!\");\n\n  if(weight < 10)\n  {\n    shippingPrice = 11;\n  }\n  // Add the else statement here for\n  // the United States\n  else\n  {\n    shippingPrice = 35;\n  }\n}\nelse if(destination == \"France\")\n{\n  console.log(\"The destination is France!\");\n\n  if(weight < 10)\n  {\n    shippingPrice = 20;\n  }\n  // Add the else statement\n  // here for France\n  else\n  {\n    shippingPrice = 55;\n  }\n}\n\nconsole.log(\"Package weight: \" + weight + \" kg\");\nconsole.log(\"Package destination: \" + destination);\nconsole.log(\"Shipping price: \" + shippingPrice.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"nested code blocks\">Else and Else If Statements in a Nested If Statement</h3>\n<div class=\"text\"><concept ref=\"nested statements\">Nested if statements</concept> can have <concept ref=\"else statement\">else</concept> and <concept ref=\"else if statement\">else if</concept> statements.</div><div class=\"text\">Aligning the <concept ref=\"code block\">code blocks</concept> can help us see which statement belong in the inner or outer statement.</div>\n<div class=\"code-sample-title\">Example of a complex nested conditional statement</div><pre class=\"codeBlock\">if(lives > 0) // outer if statement\n{\n  if(score > 100) // inner if statement\n  {\n    console.log(\"You won!\");\n  }\n  else if // this else if statement is tied to the inner if statement\n  {\n    console.log(\"Your score is not high enough!\");\n  }\n}\nelse // this else statement is tied to the outer if statement\n{\n  console.log(\"Game Over!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-127",
          "name"          : "The Richter Scale",
          "normalizedName": "the richter scale",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>The Richter Scale is a scale used to determine the strength of earthquakes. Each earthquake is measured on a scale of 1 to 10, where 1 is a minor disturbance and 10 is a catastrophic event. Let's build a program to determine if a town should evacuate according to the strength of an earthquake.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with an if statement. The condition of this if statement should check if the value of <var id=richterValue>richterValue</var> is greater than 7. Inside the code block of this if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"Evacuate the town immediately.\"</string>.</li></ol>",
          "boilerplate"   : "var richterValue = prompt(\"What is the strength of the earthquake? (1-10)\");\nrichterValue = Number(richterValue);\n\nif(richterValue > 5)\n{\n  console.log(\"The earthquake is dangerous.\");\n\n  ?\n  \n}\nelse\n{\n  console.log(\"The earthquake is minor.\");\n}",
          "solution"      : "var richterValue = prompt(\"What is the strength of the earthquake? (1-10)\");\nrichterValue = Number(richterValue);\n\nif(richterValue > 5)\n{\n  console.log(\"The earthquake is dangerous.\");\n\n  if(richterValue > 7)\n  {\n    console.log(\"Evacuate the town immediately.\");\n  }\n}\nelse\n{\n  console.log(\"The earthquake is minor.\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-128",
          "name"          : "A Better Login System",
          "normalizedName": "a better login system",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's improve an existing login system. This new system should be able to tell the user if their password or username is wrong. The username for the system is \"admin\" and the password is \"12345\".</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=inputPassword>inputPassword</var> is equal to <var id=password>password</var>. Inside the code block of this if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"Welcome Admin!\"</string>.</li><li class=code-item>Replace the second question mark with an else statement. Inside the code block of this else statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"Invalid password!\"</string>.</li></ol>",
          "boilerplate"   : "var inputUsername = prompt(\"Enter your username:\");\nvar inputPassword = prompt(\"Enter your password:\");\n\nvar username = \"admin\";\nvar password = \"12345\";\n\nif(inputUsername == username)\n{\n  // Add an if statement here\n  // to check for valid password\n  ?\n  \n  // Add an else statement here\n  // to check for invalid password\n  ?\n  \n}\nelse\n{\n  console.log(\"Invalid username!\");\n}",
          "solution"      : "var inputUsername = prompt(\"Enter your username:\");\nvar inputPassword = prompt(\"Enter your password:\");\n\nvar username = \"admin\";\nvar password = \"12345\";\n\nif(inputUsername == username)\n{\n  // Add an if statement here\n  // to check for valid password\n  if(inputPassword == password)\n  {\n    console.log(\"Welcome Admin!\");\n  }\n  // Add an else statement here\n  // to check for invalid password\n  else\n  {\n    console.log(\"Invalid password!\");\n  }\n}\nelse\n{\n  console.log(\"Invalid username!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-129",
          "name"          : "A Money Scanner",
          "normalizedName": "a money scanner",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Banknotes are often used to showcase a nation's history. In Canada and the United States, important historical figures can be found on the banknotes. Let's create a program to analyze a $5, $10 and $20 bill from either Canada or the United States and output the person on the face of the bill.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=billType>billType</var> is equal to <string>\"$5\"</string>. Inside the code block of this if statement, use the <concept ref=showPerson>showPerson()</concept> instruction with the parameter <string>\"Abraham Lincoln\"</string>.</li><li class=code-item>Replace the second question mark with an else if statement. The condition of this else if statement should check if the value of <var id=billType>billType</var> is equal to <string>\"$10\"</string>. Inside the code block of this else if statement, use the <concept ref=showPerson>showPerson()</concept> instruction with the parameter <string>\"Alexander Hamilton\"</string>.</li><li class=code-item>Replace the third question mark with an else if statement. The condition of this else if statement should check if the value of <var id=billType>billType</var> is equal to <string>\"$20\"</string>. Inside the code block of this else if statement, use the <concept ref=showPerson>showPerson()</concept> instruction with the parameter <string>\"Andrew Jackson\"</string>.</li></ol>",
          "boilerplate"   : "var countryOfOrigin = getCountryOfOrigin();\nvar billType = getMoneyValue();\n\nif(countryOfOrigin == \"USD\")\n{\n  // Check for $5\n  ?\n  \n  // Check for $10\n  ?\n  \n  // Check for $20\n  ?\n  \n}\nelse if(countryOfOrigin == \"CAD\")\n{\n  if(billType == \"$5\")\n  {\n    showPerson(\"Sir Wilfrid Laurier\");\n  }\n  else if(billType == \"$10\")\n  {\n    showPerson(\"Viola Desmond\");\n  }\n  else if(billType == \"$20\")\n  {\n    showPerson(\"Queen Elizabeth II\");\n  }\n}",
          "solution"      : "var countryOfOrigin = getCountryOfOrigin();\nvar billType = getMoneyValue();\n\nif(countryOfOrigin == \"USD\")\n{\n  // Check for $5\n  if(billType == \"$5\")\n  {\n    showPerson(\"Abraham Lincoln\");\n  }\n  // Check for $10\n  else if(billType == \"$10\")\n  {\n    showPerson(\"Alexander Hamilton\");\n  }\n  // Check for $20\n  else if(billType == \"$20\")\n  {\n    showPerson(\"Andrew Jackson\");\n  }\n}\nelse if(countryOfOrigin == \"CAD\")\n{\n  if(billType == \"$5\")\n  {\n    showPerson(\"Sir Wilfrid Laurier\");\n  }\n  else if(billType == \"$10\")\n  {\n    showPerson(\"Viola Desmond\");\n  }\n  else if(billType == \"$20\")\n  {\n    showPerson(\"Queen Elizabeth II\");\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-130",
          "name"          : "Rock, Paper, Scissors!",
          "normalizedName": "rock paper scissors!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a game of rock, paper, scissors! To play, the player and the computer both choose one of three possible plays: rock, paper or scissors. The winner is decided with the following rules:</div><ul class=algorithm><li>If the player picked <string>\"rock\"</string> and the computer picked <string>\"scissors\"</string>, the player wins.</li><li>If the player picked <string>\"scissors\"</string> and the computer picked <string>\"paper\"</string>, the player wins.</li><li>If the player picked <string>\"paper\"</string> and the computer picked <string>\"rock\"</string>, the player wins.</li><li>If the player and the computer picked the same thing, it's a tie.</li><li>In all the other cases, the player loses.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an else if statement. The condition of this else if statement should check if the value of <var id=playerChoice>playerChoice</var> is equal to <string>\"rock\"</string>.</li><li class=code-item>Inside the code block of the else if statement created in the first step, replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=computerChoice>computerChoice</var> is equal to <string>\"scissors\"</string>. Inside the code block of this if statement use the instruction <concept ref=setGameState>setGameState()</concept> with the parameter <string>\"win\"</string>.</li><li class=code-item>Still inside the code block of the else if statement created in the first step, replace the third question mark with an else statement. Inside the code block of this else statement, use the instruction <concept ref=setGameState>setGameState()</concept> with the parameter <string>\"lose\"</string>.</li></ol>",
          "boilerplate"   : "var playerChoice = prompt(\"rock, paper or scissors?\");\nvar computerChoice = getRockPaperScissors();\n\ndisplayChoices(playerChoice, computerChoice);\n\nif(playerChoice == computerChoice)\n{\n  setGameState(\"tie\");\n}\n// Check if playerChoice is equal to rock\n?\n\n// Check if computerChoice is equal to scissors\n?\n\n// Add an else statement here\n// (computerChoice is not equal to scissors)\n?\n\nelse if(playerChoice == \"paper\")\n{\n  if(computerChoice == \"rock\")\n  {\n    setGameState(\"win\");\n  }\n  else\n  {\n    setGameState(\"lose\");\n  }\n}\nelse if(playerChoice == \"scissors\")\n{\n  if(computerChoice == \"paper\")\n  {\n    setGameState(\"win\");\n  }\n  else\n  {\n    setGameState(\"lose\");\n  }\n}",
          "solution"      : "var playerChoice = prompt(\"rock, paper or scissors?\");\nvar computerChoice = getRockPaperScissors();\n\ndisplayChoices(playerChoice, computerChoice);\n\nif(playerChoice == computerChoice)\n{\n  setGameState(\"tie\");\n}\n// Check if playerChoice is equal to rock\nelse if(playerChoice == \"rock\")\n{\n  // Check if computerChoice is equal to scissors\n  if(computerChoice == \"scissors\")\n  {\n    setGameState(\"win\");\n  }\n  // Add an else statement here\n  // (computerChoice is not equal to scissors)\n  else\n  {\n    setGameState(\"lose\");\n  }\n}\nelse if(playerChoice == \"paper\")\n{\n  if(computerChoice == \"rock\")\n  {\n    setGameState(\"win\");\n  }\n  else\n  {\n    setGameState(\"lose\");\n  }\n}\nelse if(playerChoice == \"scissors\")\n{\n  if(computerChoice == \"paper\")\n  {\n    setGameState(\"win\");\n  }\n  else\n  {\n    setGameState(\"lose\");\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_project-14",
          "name"          : "Project 14 - Building a Translator",
          "normalizedName": "project 14 - building a translator",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-132",
          "name"          : "Learning Some French",
          "normalizedName": "learning some french",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-132_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-132_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=lang>lang</var> is equal to <string>\"FR\"</string>.</li><li class=code-item>Replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=word>word</var> is equal to <string>\"is\"</string>. Inside the code block of this if statement, assign to the variable <var id=translatedWord>translatedWord</var> the value <string>\"est\"</string>.</li><li class=code-item>Replace the third question mark with an if statement. The condition of this if statement should check if the value of <var id=word>word</var> is equal to <string>\"fun\"</string>. Inside the code block of this if statement, assign to the variable <var id=translatedWord>translatedWord</var> the value <string>\"amusant\"</string>.</li></ol>",
          "boilerplate"   : "var word = getNextWord();\nvar lang = getLanguage();\n\nvar translatedWord = word;\n\nif(?)\n{\n  if(word == \"programming\") { translatedWord = \"programmer\"; }\n  ?\n  ?\n}\n\nsetTranslation(translatedWord);",
          "solution"      : "var word = getNextWord();\nvar lang = getLanguage();\n\nvar translatedWord = word;\n\nif(lang == \"FR\")\n{\n  if(word == \"programming\") { translatedWord = \"programmer\"; }\n  if(word == \"is\") { translatedWord = \"est\"; }\n  if(word == \"fun\") { translatedWord = \"amusant\"; }\n}\n\nsetTranslation(translatedWord);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-133",
          "name"          : "More Words",
          "normalizedName": "more words",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's add two more words to our translator program so that it can translate the sentence \"I love programming\" into French.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=word>word</var> is equal to <string>\"i\"</string>. Inside the code block of this if statement, assign to the variable <var id=translatedWord>translatedWord</var> the value <string>\"je\"</string>.</li><li class=code-item>Replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=word>word</var> is equal to <string>\"love\"</string>. Inside the code block of this if statement, assign to the variable <var id=translatedWord>translatedWord</var> the value <string>\"aime\"</string>.</li></ol>",
          "boilerplate"   : "var word = getNextWord();\nvar lang = getLanguage();\n\nvar translatedWord = word;\n\nif(lang == \"FR\")\n{\n  if(word == \"programming\") { translatedWord = \"programmer\"; }\n  if(word == \"is\") { translatedWord = \"est\"; }\n  if(word == \"fun\") { translatedWord = \"amusant\"; }\n  ?\n  ?\n}\n\nsetTranslation(translatedWord);",
          "solution"      : "var word = getNextWord();\nvar lang = getLanguage();\n\nvar translatedWord = word;\n\nif(lang == \"FR\")\n{\n  if(word == \"programming\") { translatedWord = \"programmer\"; }\n  if(word == \"is\") { translatedWord = \"est\"; }\n  if(word == \"fun\") { translatedWord = \"amusant\"; }\n  if(word == \"i\") { translatedWord = \"je\"; }\n  if(word == \"love\") { translatedWord = \"aime\"; }\n}\n\nsetTranslation(translatedWord);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-134",
          "name"          : "Changing the Case",
          "normalizedName": "changing the case",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-134_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-134_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with an instruction to assign to <var id=word>word</var> the value of <var id=word>word</var> in lowercase. You will need to use the <concept ref=toLowerCase>.toLowerCase()</concept> instruction.</li></ol>",
          "boilerplate"   : "var word = getNextWord();\nvar lang = getLanguage();\n\nlang = lang.toUpperCase();\n?\n\nvar translatedWord = word;\n\nif(lang == \"FR\")\n{\n  if(word == \"programming\") { translatedWord = \"programmer\"; }\n  if(word == \"is\") { translatedWord = \"est\"; }\n  if(word == \"fun\") { translatedWord = \"amusant\"; }\n  if(word == \"i\") { translatedWord = \"je\"; }\n  if(word == \"love\") { translatedWord = \"aime\"; }\n}\n\nsetTranslation(translatedWord);",
          "solution"      : "var word = getNextWord();\nvar lang = getLanguage();\n\nlang = lang.toUpperCase();\nword = word.toLowerCase();\n\nvar translatedWord = word;\n\nif(lang == \"FR\")\n{\n  if(word == \"programming\") { translatedWord = \"programmer\"; }\n  if(word == \"is\") { translatedWord = \"est\"; }\n  if(word == \"fun\") { translatedWord = \"amusant\"; }\n  if(word == \"i\") { translatedWord = \"je\"; }\n  if(word == \"love\") { translatedWord = \"aime\"; }\n}\n\nsetTranslation(translatedWord);",
          "tips"          : "<h3 class=\"title\" ref=\"toLowerCase()\">.toLowerCase() Instruction</h3>\n<div class=\"text\">The .toLowerCase() <concept ref=\"string\">instruction</concept> can be used to transform uppercase letters in a <concept ref=\"string\">string</concept> to lowercase.</div><div class=\"text\">Note that letters already in lowercase are not affected by the .toLowerCase() instruction.</div>\n<div class=\"code-sample-title\">Example of a .toLowerCase() instruction</div><pre class=\"codeBlock\">var myString = \"Programming Is Fun!\";\nmyString = myString.toLowerCase();\nconsole.log(myString); // displays: programming is fun!</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-135",
          "name"          : "Another Sentence",
          "normalizedName": "another sentence",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Now that we've fixed our bug, let's add one last sentence to our translator before we add Spanish translation. This sentence is \"Programming is a good skill\".</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=word>word</var> is equal to <string>\"a\"</string>. Inside the code block of this if statement, assign to the variable <var id=translatedWord>translatedWord</var> the value <string>\"un\"</string>.</li><li class=code-item>Replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=word>word</var> is equal to <string>\"good\"</string>. Inside the code block of this if statement, assign to the variable <var id=translatedWord>translatedWord</var> the value <string>\"bon\"</string>.</li><li class=code-item>Replace the third question mark with an if statement. The condition of this if statement should check if the value of <var id=word>word</var> is equal to <string>\"skill\"</string>. Inside the code block of this if statement, assign to the variable <var id=translatedWord>translatedWord</var> the value <string>\"compétence\"</string>. <strong>Hint:</strong> if the accent on the \"e\" is giving you problems, try copy-pasting it.</li></ol>",
          "boilerplate"   : "var word = getNextWord();\nvar lang = getLanguage();\n\nlang = lang.toUpperCase();\nword = word.toLowerCase();\n\nvar translatedWord = word;\n\nif(lang == \"FR\")\n{\n  if(word == \"programming\") { translatedWord = \"programmer\"; }\n  if(word == \"is\") { translatedWord = \"est\"; }\n  if(word == \"fun\") { translatedWord = \"amusant\"; }\n  if(word == \"i\") { translatedWord = \"je\"; }\n  if(word == \"love\") { translatedWord = \"aime\"; }\n  ?\n  ?\n  ?\n}\n\nsetTranslation(translatedWord);",
          "solution"      : "var word = getNextWord();\nvar lang = getLanguage();\n\nlang = lang.toUpperCase();\nword = word.toLowerCase();\n\nvar translatedWord = word;\n\nif(lang == \"FR\")\n{\n  if(word == \"programming\") { translatedWord = \"programmer\"; }\n  if(word == \"is\") { translatedWord = \"est\"; }\n  if(word == \"fun\") { translatedWord = \"amusant\"; }\n  if(word == \"i\") { translatedWord = \"je\"; }\n  if(word == \"love\") { translatedWord = \"aime\"; }\n  if(word == \"a\") { translatedWord = \"un\"; }\n  if(word == \"good\") { translatedWord = \"bon\"; }\n  if(word == \"skill\") { translatedWord = \"compétence\"; }\n}\n\nsetTranslation(translatedWord);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-136",
          "name"          : "Learning Spanish",
          "normalizedName": "learning spanish",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-136_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-136_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an else if statement. The condition of this else if statement should check if the value of <var id=lang>lang</var> is equal to <string>\"ES\"</string>.</li><li class=code-item>Inside the code block of the else if statement, copy all the nested if statements that are used for the French translations, then replace each French word with its Spanish equivalent using the list below. (<strong>Hint: don't write every if statement manually, use the copy-paste function to save yourself some time!</strong>)</li></ol>\n<table><thead><tr><th>English</th><th>Spanish Equivalent</th></tr></thead><tbody><tr><td>programming</td><td>programar</td></tr><tr><td>is</td><td>es</td></tr><tr><td>fun</td><td>divertido</td></tr><tr><td>I</td><td>me</td></tr><tr><td>love</td><td>encanta</td></tr><tr><td>a</td><td>un</td></tr><tr><td>good</td><td>bueno</td></tr><tr><td>skill</td><td>habilidad</td></tr></tbody></table>",
          "boilerplate"   : "var word = getNextWord();\nvar lang = getLanguage();\n\nlang = lang.toUpperCase();\nword = word.toLowerCase();\n\nvar translatedWord = word;\n\nif(lang == \"FR\")\n{\n  if(word == \"programming\") { translatedWord = \"programmer\"; }\n  if(word == \"is\") { translatedWord = \"est\"; }\n  if(word == \"fun\") { translatedWord = \"amusant\"; }\n  if(word == \"i\") { translatedWord = \"je\"; }\n  if(word == \"love\") { translatedWord = \"aime\"; }\n  if(word == \"a\") { translatedWord = \"un\"; }\n  if(word == \"good\") { translatedWord = \"bon\"; }\n  if(word == \"skill\") { translatedWord = \"compétence\"; }\n}\n?\n\nsetTranslation(translatedWord);",
          "solution"      : "var word = getNextWord();\nvar lang = getLanguage();\n\nlang = lang.toUpperCase();\nword = word.toLowerCase();\n\nvar translatedWord = word;\n\nif(lang == \"FR\")\n{\n  if(word == \"programming\") { translatedWord = \"programmer\"; }\n  if(word == \"is\") { translatedWord = \"est\"; }\n  if(word == \"fun\") { translatedWord = \"amusant\"; }\n  if(word == \"i\") { translatedWord = \"je\"; }\n  if(word == \"love\") { translatedWord = \"aime\"; }\n  if(word == \"a\") { translatedWord = \"un\"; }\n  if(word == \"good\") { translatedWord = \"bon\"; }\n  if(word == \"skill\") { translatedWord = \"compétence\"; }\n}\nelse if(lang == \"ES\")\n{\n  if(word == \"programming\") { translatedWord = \"programar\"; }\n  if(word == \"is\") { translatedWord = \"es\"; }\n  if(word == \"fun\") { translatedWord = \"divertido\"; }\n  if(word == \"i\") { translatedWord = \"me\"; }\n  if(word == \"love\") { translatedWord = \"encanta\"; }\n  if(word == \"a\") { translatedWord = \"un\"; }\n  if(word == \"good\") { translatedWord = \"bueno\"; }\n  if(word == \"skill\") { translatedWord = \"habilidad\"; }\n}\n\nsetTranslation(translatedWord);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-137",
          "name"          : "Learning to Pluralize",
          "normalizedName": "learning to pluralize",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a part of an auto-corrector. This specific program will pluralize a noun as necessary. To do so, the program will receive a noun and a quantity. The program must then decide to either add an \"s\" or remove an \"s\", according to the quantity.</div><div class=text>Example:</div><div class=text>The word \"cats\" with the quantity 1 should return \"cat\", because there is a single cat.</div><div class=text>The word \"dog\" with the quantity 3 should return \"dogs\", because there are multiple dogs.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition that checks if the value of <var id=quantity>quantity</var> is equal to 1.</li><li class=code-item>Replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=lastLetter>lastLetter</var> is equal to <string>\"s\"</string>. Inside the code block of this if statement, assign to the variable <var id=word>word</var> the result of the instruction <concept ref=removePluralword>removePlural(<var id=word>word</var>)</concept>.</li></ol>",
          "boilerplate"   : "var word = getRandomWord();\nvar quantity = getRandomNumber();\n\n// Returns the last letter of the word\nvar lastLetter = getLastLetter(word);\n\n// Check if quantity is equal to 1\nif(?)\n{\n  // Add an if statement\n  // to check if lastLetter is \"s\"\n  ?\n  \n}\nelse\n{\n  if(lastLetter != \"s\")\n  {\n    word = word + \"s\";\n  }\n}\n\nconsole.log(\"I own \" + quantity + \" \" + word + \".\");",
          "solution"      : "var word = getRandomWord();\nvar quantity = getRandomNumber();\n\n// Returns the last letter of the word\nvar lastLetter = getLastLetter(word);\n\n// Check if quantity is equal to 1\nif(quantity == 1)\n{\n  // Add an if statement\n  // to check if lastLetter is \"s\"\n  if(lastLetter == \"s\")\n  {\n    word = removePlural(word);\n  }\n}\nelse\n{\n  if(lastLetter != \"s\")\n  {\n    word = word + \"s\";\n  }\n}\n\nconsole.log(\"I own \" + quantity + \" \" + word + \".\");",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-138",
          "name"          : "Putting in Some Overtime",
          "normalizedName": "putting in some overtime",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build an application to help a company calculate its employees' pay. To calculate an employee's pay, we simply multiply the number of hours they worked with their hourly wage. However, there are some exceptions. Any hour exceeding 40 a week must be paid at a rate of 1.5. Additionally, the company offers a bonus of $150 to employees who work over 44 hours in a week.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=overtime>overtime</var>. Assign it the result of <var id=hoursWorked>hoursWorked</var> minus 40.</li><li class=code-item>Replace the second question mark with a new variable named <var id=regularSalary>regularSalary</var>. Assign it the result of 40 multiplied by the value of <var id=hourlySalary>hourlySalary</var>.</li><li class=code-item>Replace the third question mark with a new variable named <var id=overtimeSalary>overtimeSalary</var>. Assign it the result of <var id=overtime>overtime</var> multiplied by the value of <var id=hourlySalary>hourlySalary</var> multiplied by 1.5.</li><li class=code-item>Replace the last question mark with an if statement. The condition of this if statement should check if the value of <var id=hoursWorked>hoursWorked</var> is greater than 44. Inside the code block of this if statement, increase the value of the variable <var id=grossSalary>grossSalary</var> by 150.</li></ol>",
          "boilerplate"   : "var hoursWorked = getWeeklyHours();\nvar hourlySalary = getSalary();\n\nvar grossSalary;\n\nconsole.log(\"The employee has worked for \" + hoursWorked + \" hours at a rate of \" + hourlySalary.toFixed(2) + \"$ per hour\");\n\nif(hoursWorked > 40)\n{\n  // Calculate the amount of overtime\n  ?\n\n  console.log(\"The employee has worked \" + overtime + \" hours of overtime\");\n\n  // Calculate the regular pay\n  ?\n  // Calculate the overtime pay\n  ?\n\n  grossSalary = regularSalary + overtimeSalary;\n\n  // Check if the employee worked for more than 44 hours\n  ?\n  \n}\nelse\n{\n  grossSalary = hoursWorked * hourlySalary;\n}\n\nconsole.log(\"The employee's gross salary is \" + grossSalary.toFixed(2) + \"$\");",
          "solution"      : "var hoursWorked = getWeeklyHours();\nvar hourlySalary = getSalary();\n\nvar grossSalary;\n\nconsole.log(\"The employee has worked for \" + hoursWorked + \" hours at a rate of \" + hourlySalary.toFixed(2) + \"$ per hour\");\n\nif(hoursWorked > 40)\n{\n  // Calculate the amount of overtime\n  var overtime = hoursWorked - 40;\n\n  console.log(\"The employee has worked \" + overtime + \" hours of overtime\");\n\n  // Calculate the regular pay\n  var regularSalary = 40 * hourlySalary;\n  // Calculate the overtime pay\n  var overtimeSalary = overtime * hourlySalary * 1.5;\n\n  grossSalary = regularSalary + overtimeSalary;\n\n  // Check if the employee worked for more than 44 hours\n  if(hoursWorked > 44)\n  {\n    grossSalary = grossSalary + 150;\n  }\n}\nelse\n{\n  grossSalary = hoursWorked * hourlySalary;\n}\n\nconsole.log(\"The employee's gross salary is \" + grossSalary.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-139",
          "name"          : "The Three States",
          "normalizedName": "the three states",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Substances have 3 common states: liquid, gas and solid. For example, water can be found in liquid form, in gas form as vapor and in solid form as ice. When a substance reaches a certain temperature, it changes states. Each state change has a name:</div><ul class=algorithm><li>When a substance goes from <strong>liquid</strong> to <strong>solid</strong>, it reached its <strong>freezing point</strong>.</li><li>When a substance goes from <strong>solid</strong> to <strong>liquid</strong>, it reached its <strong>melting point</strong>.</li><li>When a substance goes from <strong>liquid</strong> to <strong>gas</strong>, it reached its <strong>boiling point</strong>.</li></ul><div class=text>Let's build a program to analyze the freezing, melting and boiling points of water and mercury. Water freezes at temperatures under 0 degrees Celsius, melts between 0 and 100 and boils at over 100. Mercury freezes at temperatures under -38.8 degrees Celsius, melts between -38.8 and 356.73 and boils at over 356.73.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of <var id=temperature>temperature</var> is less than 0. Inside the code block of this if statement, use the <concept ref=displaySubstanceState>displaySubstanceState()</concept> instruction. The first parameter of this instruction should be the variable <var id=substance>substance</var>, the second should be the string <string>\"freezing\"</string>.</li><li class=code-item>Replace the second question mark with an else if statement. The condition of this else if statement should check if the value of <var id=temperature>temperature</var> is less than 100. Inside the code block of this else if statement, use the <concept ref=displaySubstanceState>displaySubstanceState()</concept> instruction. The first parameter of this instruction should be the variable <var id=substance>substance</var>, the second should be the string <string>\"melting\"</string>.</li><li class=code-item>Replace the third question mark with an else if statement. The condition of this else if statement should check if the value of <var id=temperature>temperature</var> is greater than or equal to 100. Inside the code block of this else if statement, use the <concept ref=displaySubstanceState>displaySubstanceState()</concept> instruction. The first parameter of this instruction should be the variable <var id=substance>substance</var>, the second should be the string <string>\"boiling\"</string>.</li></ol>",
          "boilerplate"   : "var substance = getSubstance();\nvar temperature = getSubstanceTemperature();\n\nif(substance == \"water\")\n{\n  // Check if temperature is less than 0\n  ?\n  \n  // Check if temperature is less than 100\n  ?\n  \n  // Check if temperature is greater than or equal to 100\n  ?\n  \n}\nelse if(substance == \"mercury\")\n{\n  if(temperature < -38.8)\n  {\n    displaySubstanceState(substance, \"freezing\");\n  }\n  else if(temperature < 356.73)\n  {\n    displaySubstanceState(substance, \"melting\");\n  }\n  else if(temperature >= 356.73)\n  {\n    displaySubstanceState(substance, \"boiling\");\n  }\n}",
          "solution"      : "var substance = getSubstance();\nvar temperature = getSubstanceTemperature();\n\nif(substance == \"water\")\n{\n  // Check if temperature is less than 0\n  if(temperature < 0)\n  {\n    displaySubstanceState(substance, \"freezing\");\n  }\n  // Check if temperature is less than 100\n  else if(temperature < 100)\n  {\n    displaySubstanceState(substance, \"melting\");\n  }\n  // Check if temperature is greater than or equal to 100\n  else if(temperature >= 100)\n  {\n    displaySubstanceState(substance, \"boiling\");\n  }\n}\nelse if(substance == \"mercury\")\n{\n  if(temperature < -38.8)\n  {\n    displaySubstanceState(substance, \"freezing\");\n  }\n  else if(temperature < 356.73)\n  {\n    displaySubstanceState(substance, \"melting\");\n  }\n  else if(temperature >= 356.73)\n  {\n    displaySubstanceState(substance, \"boiling\");\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-131",
          "name"          : "Leap Years",
          "normalizedName": "leap years",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Leap years are years with 366 days instead of the normal 365 days. A leap year is a year which can be evenly divided by 4 (with no remainder). If the year can also be divided evenly by 100, it is not a leap year, unless it can be evenly divided by 400. Can you implement the algorithm to determine if a year is a leap year?</div><div class=text>To test your program, use the following years:</div><div class=text>leap years: 2008, 1996, 1704, 2000, 2012</div><div class=text>not leap years: 2001, 1994, 1701, 1900, 2015</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an if statement. The condition of this if statement should check if the value of the variable <var id=isDividableBy100>isDividableBy100</var> is equal to true.</li><li class=code-item>Inside the code block of the if statement created in the first step, replace the second question mark with a new variable named <var id=isDividableBy400>isDividableBy400</var>. Assign it the result of the instruction <concept ref=\"isDividableByyear, 400\">isDividableBy(<var id=year>year</var>, 400)</concept>.</li><li class=code-item>Still inside the code block of the if statement created in the first step, replace the third question mark with an if statement. The condition of this if statement should check if the value of the variable <var id=isDividableBy400>isDividableBy400</var> is equal to true. Inside the code block of this if statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"a leap year\"</string>.</li><li class=code-item>Replace the fourth question mark with an else statement for the if statement created in the third step. Inside the code block of this else statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"not a leap year\"</string>.</li><li class=code-item>Replace the fifth question mark with an else statement for the if statement created in the first step. Inside the code block of this else statement, use a <concept ref=console-log>console.log()</concept> instruction to display the message <string>\"a leap year\"</string>.</li></ol>",
          "boilerplate"   : "var year = prompt(\"Enter a year (ex: 2000)\");\nyear = Number(year);\n\nconsole.log(\"The year \" + year + \" is...\");\n\nvar isDividableBy4 = isDividableBy(year, 4);\n\nif(isDividableBy4 == true)\n{\n  var isDividableBy100 = isDividableBy(year, 100);\n\n  // Check if year is dividable by 100\n  ?\n  \n  // Create the variable isDividableBy400\n  ?\n\n  // Check if year is dividable by 400\n  ?\n  \n  // Add an else statement (year is not dividable by 400)\n  ?\n  \n  // Add an else statement (year is not dividable by 100)\n  ?\n  \n}\nelse\n{\n  console.log(\"not a leap year\");\n}",
          "solution"      : "var year = prompt(\"Enter a year (ex: 2000)\");\nyear = Number(year);\n\nconsole.log(\"The year \" + year + \" is...\");\n\nvar isDividableBy4 = isDividableBy(year, 4);\n\nif(isDividableBy4 == true)\n{\n  var isDividableBy100 = isDividableBy(year, 100);\n\n  // Check if year is dividable by 100\n  if(isDividableBy100 == true)\n  {\n    // Create the variable isDividableBy400\n    var isDividableBy400 = isDividableBy(year, 400);\n\n    // Check if year is dividable by 400\n    if(isDividableBy400 == true)\n    {\n      console.log(\"a leap year\");\n    }\n    // Add an else statement (year is not dividable by 400)\n    else\n    {\n      console.log(\"not a leap year\");\n    }\n  }\n  // Add an else statement (year is not dividable by 100)\n  else\n  {\n    console.log(\"a leap year\");\n  }\n}\nelse\n{\n  console.log(\"not a leap year\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-007",
          "name"          : "Quiz 7",
          "description"   : "Nested If Statements",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-007_q-01",
              "question": "<div>True or false. An <code>if</code> statement can contain multiple <code>if</code> statements inside its code block.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-007_q-01_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "Code blocks are used to group instructions, and we can put any instruction inside of it."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-007_q-02",
              "question": "<div>Select all the statements that are true.</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>An <code>if</code> statement inside of another <code>if</code> statement's code block is always executed, even if the condition of the first <code>if</code> statement is false.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-007_q-02_a-02",
                  "value"      : 1,
                  "answer"     : "<div>An <code>if</code> statement inside of another <code>if</code> statement's code block will only be executed if the condition of the first <code>if</code> statement is true.</div>",
                  "explanation": "An <code>if</code> statement inside a code block will only be executed if the code block is executed."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-02_a-03",
                  "value" : 0,
                  "answer": "<div>An <code>if</code> statement inside of another <code>if</code> statement's code block cannot have an <code>else</code> statement.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-02_a-04",
                  "value" : 0,
                  "answer": "<div>An <code>if</code> statement inside of another <code>if</code> statement's code block cannot have an <code>else if</code> statement.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-007_q-03",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var temperature = 16;\n  \nif(temperature &gt; 10)\n{\n  console.log(\"Temperature is greater than 10\");\n\n  if(temperature &gt; 15)\n  {\n    console.log(\"Temperature is greater than 15\");\n  }\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-03_a-01",
                  "value" : 0,
                  "answer": "<div>One message: <samp>Temperature is greater than 10</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>One message: <samp>Temperature is greater than 15</samp></div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-007_q-03_a-03",
                  "value"      : 2,
                  "answer"     : "<div>Two messages: <samp>Temperature is greater than 10</samp> and <samp>Temperature is greater than 15</samp></div>",
                  "explanation": "Since <code>temperature &gt; 10</code> is true, the first message is displayed. Then, since the code block is executed and <code>temperature &gt; 15</code> is also true, the second message is also displayed."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>No message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-007_q-04",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var temperature = 2;\n\nif(temperature &gt; 10)\n{\n  console.log(\"Temperature is greater than 10\");\n\n  if(temperature &gt; 15)\n  {\n    console.log(\"Temperature is greater than 15\");\n  }\n}\nelse\n{\n  console.log(\"Temperature is less than 10\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-04_a-01",
                  "value" : 0,
                  "answer": "<div>One message: <samp>Temperature is greater than 10</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>One message: <samp>Temperature is greater than 15</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-04_a-03",
                  "value" : 0,
                  "answer": "<div>Two messages: <samp>Temperature is greater than 10</samp> and <samp>Temperature is greater than 15</samp></div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-007_q-04_a-04",
                  "value"      : 2,
                  "answer"     : "<div>One message: <samp>Temperature is less than 10</samp></div>",
                  "explanation": "Since <code>temperature &gt; 10</code> is false, the code block of the <code>else</code> statement is executed."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-04_a-05",
                  "value" : 0,
                  "answer": "<div>No message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-007_q-05",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var temperature = 11;\n\nif(temperature &gt; 10)\n{\n  if(temperature &gt; 15)\n  {\n    console.log(\"Temperature is greater than 15\");\n  }\n  else\n  {\n    console.log(\"Temperature is between 10 and 15\");\n  }\n}\nelse\n{\n  console.log(\"Temperature is less than 10\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>One message: <samp>Temperature is greater than 15</samp></div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-007_q-05_a-02",
                  "value"      : 2,
                  "answer"     : "<div>One message: <samp>Temperature is between 10 and 15</samp></div>",
                  "explanation": "Since <code>temperature &gt; 10</code> is true, the code block of the first <code>if</code> statement is executed. Then, since <code>temperature &gt; 15</code> is false, the code block of the first <code>else</code> is executed."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-05_a-03",
                  "value" : 0,
                  "answer": "<div>One message: <samp>Temperature is less than 10</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-05_a-04",
                  "value" : 0,
                  "answer": "<div>Two messages: <samp>Temperature is less than 10</samp> and <samp>Temperature is between 10 and 15</samp></div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-007_q-06",
              "question": "<div>What is the problem with the following program?</div>\n<pre class=\"language-javascript\"><code>var weight = 3;\n  \nif(weight &gt; 10)\n{\n  console.log(\"Weight is greater than 10\");\n\n  if(weight &lt; 5)\n  {\n    console.log(\"Weight is less than 5\");\n  }\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-007_q-06_a-01",
                  "value"      : 2,
                  "answer"     : "<div>The second <code>if</code> statement can never execute. A number cannot be both greater than 10 and less than 5.</div>",
                  "explanation": "The code is illogical. The inner <code>if</code> statement should be outside the code block of the first <code>if</code> statement."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>There is an <code>if</code> statement inside the code block of another <code>if</code> statement.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>The condition of the first and second <code>if</code> statements should be switched.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>There is nothing wrong.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-007_q-07",
              "question": "<div>What is the problem with the following program?</div>\n<pre class=\"language-javascript\"><code>var weight = 7;\n\nif(weight &lt; 15)\n{\n  console.log(\"Weight is less than 15\");\n\n  else\n  {\n    console.log(\"Weight is greater than 15\");\n  }\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-07_a-01",
                  "value" : 0,
                  "answer": "<div>The <code>else</code> statement should be replaced with an <code>if</code> statement to check if <var>weight</var> is greater than 15.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-07_a-02",
                  "value" : 0,
                  "answer": "<div>There are missing curly braces ({ }).</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-007_q-07_a-03",
                  "value"      : 2,
                  "answer"     : "<div>The <code>else</code> statement inside the code block of the first <code>if</code> statement should be moved after the <code>if</code> statement.</div>",
                  "explanation": "An <code>else</code> statement cannot be alone in a conditional statement. For this code to be valid, the <code>else</code> statement should be outside the code block, immediately after the last closing curly brace (})."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-007_q-07_a-04",
                  "value" : 0,
                  "answer": "<div>There is nothing wrong.</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 7",
          "trialMode"     : false
        }
      ],
      "created"                 : 1543060094510,
      "createdBy"               : "xavier.baudry",
      "normalizedCreatedBy"     : "xavier.baudry",
      "lastModified"            : 1543060094510,
      "lastModifiedBy"          : "xavier.baudry",
      "normalizedLastModifiedBy": "xavier.baudry"
    },
    {
      "_id"                     : "cs-1B_en-CA",
      "name"                    : "Introduction to Programming (Part 2)",
      "normalizedName"          : "introduction to programming part 2",
      "shortDescription"        : "This course continues and completes the first part by introducing more advanced programming concepts.",
      "longDescription"         : "You'll learn more advanced building blocks of a high-level programming language (JavaScript) by completing a variety of real-world STEM projects. You'll explore nested conditional statements, relational operators and looping structures. At the end of the course, you'll be able to solve complex problems with code.",
      "locale"                  : "en-CA",
      "grades"                  : ["6"],
      "allowLimited"            : false,
      "trialMode"               : true,
      "comingSoon"              : false,
      "enabled"                 : true,
      "units"                   : [
        {
          "_id"           : "cs-1_en-CA_exercise-265",
          "name"          : "The and Operator",
          "normalizedName": "the and operator",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-265_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-265_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-15",
          "name"          : "Project 15 - Predicting a Flood",
          "normalizedName": "project 15 - predicting a flood",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-140",
          "name"          : "A Rainy Day",
          "normalizedName": "a rainy day",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-140_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-140_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with two ampersand symbols (&amp;&amp;).</li></ol>",
          "boilerplate"   : "var rainfall = getRainFall();\n\nif(rainfall >= 0 ? rainfall < 50)\n{\n  floodingChance(\"none\");\n}\nelse\n{\n  floodingChance(\"guaranteed\");\n}",
          "solution"      : "var rainfall = getRainFall();\n\nif(rainfall >= 0 && rainfall < 50)\n{\n  floodingChance(\"none\");\n}\nelse\n{\n  floodingChance(\"guaranteed\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"and operator\">AND Operator (&amp;&amp;)</h3>\n<div class=\"text\">The AND operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if two or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the AND operator will only be true if all the conditions that make up the expression are true.</div><div class=\"text\">The operator is represented using two ampersand symbols (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Example of the AND operator</div><pre class=\"codeBlock\">var result = true && true; // result is true\nresult = false && true; // result is false\nresult = true && false; // result is false\nresult = false && false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-141",
          "name"          : "Get Your Boots and Umbrella!",
          "normalizedName": "get your boots and umbrella!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-141_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-141_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Change the condition of the else if statement. The condition should check that <var id=rainfall>rainfall</var> is greater than or equal to 50 <strong>and</strong> that <var id=rainfall>rainfall</var> <strong>is less than 100</strong>. <strong>Hint:</strong> You'll need to use the AND operator (&amp;&amp;) operator to do this.</li></ol>",
          "boilerplate"   : "var rainfall = getRainFall();\n\nif(rainfall >= 0 && rainfall < 50)\n{\n  floodingChance(\"none\");\n}\nelse if(rainfall >= 50 ?)\n{\n  floodingChance(\"low\");\n}\nelse\n{\n  floodingChance(\"guaranteed\");\n}",
          "solution"      : "var rainfall = getRainFall();\n\nif(rainfall >= 0 && rainfall < 50)\n{\n  floodingChance(\"none\");\n}\nelse if(rainfall >= 50 && rainfall < 100)\n{\n  floodingChance(\"low\");\n}\nelse\n{\n  floodingChance(\"guaranteed\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"and operator\">AND Operator (&amp;&amp;)</h3>\n<div class=\"text\">The AND operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if two or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the AND operator will only be true if all the conditions that make up the expression are true.</div><div class=\"text\">The operator is represented using two ampersand symbols (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Example of the AND operator</div><pre class=\"codeBlock\">var result = true && true; // result is true\nresult = false && true; // result is false\nresult = true && false; // result is false\nresult = false && false; // result is false</pre>\n<h3 class=\"title\" ref=\"and with if\">Using the AND Operator (&amp;&amp;) with an If Statement</h3>\n<div class=\"text\">The <concept ref=\"and operator\">AND operator</concept> is often used in an <concept ref=\"if statement\">if statement</concept> to check multiple <concept ref=\"condition\">conditions</concept> using a single if statement.</div><div class=\"text\">All conditions that make up the expression must be true for the code block to be executed.</div>\n<div class=\"code-sample-title\">Example of the AND operator in an if statement</div><pre class=\"codeBlock\">if(hungry == true && money > 5)\n{\n  console.log(\"You can buy some pizza!\");\n}</pre>\n<div class=\"text\">If the user is hungry and has more than $5, they can buy pizza.</div><div class=\"text\">If the user is not hungry but has more than $5, they cannot buy pizza.</div><div class=\"text\">If the user is hungry but does not have more than $5, they cannot buy pizza.</div><div class=\"text\">If the user is not hungry and does not have more than $5, they cannot buy pizza.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-142",
          "name"          : "Cloudy With a Chance of Flooding",
          "normalizedName": "cloudy with a chance of flooding",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's practice using the AND (&amp;&amp;) logical operator. Remember, to combine two conditions together, we write them in the following way:</div><div class=text>firstCondition &amp;&amp; secondCondition</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with an else if statement. The condition of this else if statement should check if the value of <var id=rainfall>rainfall</var> is greater than or equal to 100 <strong>and</strong> if <var id=rainfall>rainfall</var> is less than 150. Inside the code block of this else if statement, use the <concept ref=floodingChance>floodingChance(<string>\"high\"</string>)</concept> instruction. <strong>Hint:</strong> You'll need to use the AND operator (&amp;&amp;) operator to do this.</li></ol>",
          "boilerplate"   : "var rainfall = getRainFall();\n\nif(rainfall >= 0 && rainfall < 50)\n{\n  floodingChance(\"none\");\n}\nelse if(rainfall >= 50 && rainfall < 100)\n{\n  floodingChance(\"low\");\n}\n// Create the else if statement here\n?\n\nelse\n{\n  floodingChance(\"guaranteed\");\n}",
          "solution"      : "var rainfall = getRainFall();\n\nif(rainfall >= 0 && rainfall < 50)\n{\n  floodingChance(\"none\");\n}\nelse if(rainfall >= 50 && rainfall < 100)\n{\n  floodingChance(\"low\");\n}\n// Create the else if statement here\nelse if(rainfall >= 100 && rainfall < 150)\n{\n  floodingChance(\"high\");\n}\nelse\n{\n  floodingChance(\"guaranteed\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-143",
          "name"          : "And It's Snowing!",
          "normalizedName": "and its snowing!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-143_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-143_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition that checks if <var id=snow>snow</var> <strong>is less than 40</strong>.</li><li class=code-item>Replace the second question mark with a condition that checks if <var id=snow>snow</var> <strong>is less than 60</strong>.</li></ol>",
          "boilerplate"   : "var rainfall = getRainFall();\nvar snow = getSnowHeight();\n\nif(rainfall >= 0 && rainfall < 50 && snow < 20)\n{\n  floodingChance(\"none\");\n}\nelse if(rainfall >= 50 && rainfall < 100 && ?)\n{\n  floodingChance(\"low\");\n}\nelse if(rainfall >= 100 && rainfall < 150 && ?)\n{\n  floodingChance(\"high\");\n}\nelse\n{\n  floodingChance(\"guaranteed\");\n}",
          "solution"      : "var rainfall = getRainFall();\nvar snow = getSnowHeight();\n\nif(rainfall >= 0 && rainfall < 50 && snow < 20)\n{\n  floodingChance(\"none\");\n}\nelse if(rainfall >= 50 && rainfall < 100 && snow < 40)\n{\n  floodingChance(\"low\");\n}\nelse if(rainfall >= 100 && rainfall < 150 && snow < 60)\n{\n  floodingChance(\"high\");\n}\nelse\n{\n  floodingChance(\"guaranteed\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"multiple and\">Using Multiple AND Operators in an Expression</h3>\n<div class=\"text\">We can use more than one <concept ref=\"and operator\">AND operator</concept> to check multiple conditions in a single expression. For the expression to be <concept ref=\"boolean\">true</concept>, every condition needs to also be true. If even one condition is false, the overall expression will be false.</div>\n<div class=\"code-sample-title\">Example of multiple AND operators</div><pre class=\"codeBlock\">if(hungry == true && money > 5 && day == \"Tuesday\")\n{\n  console.log(\"You can buy some pizza!\");\n}</pre>\n<div class=\"text\">If the user is hungry, has more than $5 and it is Tuesday, they can buy pizza.</div><div class=\"text\">If the user is not hungry but has more than $5 and it is Tuesday, they cannot buy pizza.</div><div class=\"text\">If the user is hungry but does not have more than $5 and it is Tuesday, they cannot buy pizza.</div><div class=\"text\">If the user is hungry has more than $5 but it is not Tuesday, they cannot buy pizza.</div><div class=\"text\">If the user is not hungry, doesn't have more than $5 and it is not Tuesday, they cannot buy pizza.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-144",
          "name"          : "A Broken Thermometer",
          "normalizedName": "a broken thermometer",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's fix this simple thermometer program. It must display the message <string>\"What a beautiful day!\"</string> if the temperature is between 15 and 30 degrees Celsius. Otherwise, it must display the message <string>\"The weather is not so nice...\"</string>.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a condition that checks if the value of <var id=temperature>temperature</var> is greater than or equal to 15 <strong>and</strong> if the value of <var id=temperature>temperature</var> is less than or equal to 30. <strong>Hint:</strong> You'll need to use the AND operator (&amp;&amp;) operator to do this.</li></ol>",
          "boilerplate"   : "var temperature = getTemperature();\n\nif(?)\n{\n  console.log(\"What a beautiful day!\");\n}\nelse\n{\n  console.log(\"The weather is not so nice...\");\n}",
          "solution"      : "var temperature = getTemperature();\n\nif(temperature >= 15 && temperature <= 30)\n{\n  console.log(\"What a beautiful day!\");\n}\nelse\n{\n  console.log(\"The weather is not so nice...\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-145",
          "name"          : "Rock, Paper, Scissors V2",
          "normalizedName": "rock paper scissors v2",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's recreate the Rock, Paper, Scissors program. This time, we won't use nested if statements to create the program. Instead, we'll check multiple conditions at once with the help of the AND operator.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an instruction to assign to <var id=playerChoice>playerChoice</var> the value of <var id=playerChoice>playerChoice</var> in lowercase. You'll need to use the <concept ref=toLowerCase>.toLowerCase()</concept> instruction.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=playerChoice>playerChoice</var> is equal to <string>\"rock\"</string> <strong>and</strong> if the value of <var id=computerChoice>computerChoice</var> is equal to <string>\"scissors\"</string>. <strong>Hint:</strong> You'll need to use the AND operator (&amp;&amp;) operator to do this.</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=playerChoice>playerChoice</var> is equal to <string>\"paper\"</string> <strong>and</strong> if the value of <var id=computerChoice>computerChoice</var> is equal to <string>\"rock\"</string>.</li></ol>",
          "boilerplate"   : "var playerChoice = prompt(\"rock, paper or scissors?\");\nvar computerChoice = getRockPaperScissors();\n\n// Put the player's choice to lowercase\n?\ncomputerChoice = computerChoice.toLowerCase();\n\ndisplayChoices(playerChoice, computerChoice);\n\nif(playerChoice == computerChoice)\n{\n  setGameState(\"tie\");\n}\nelse if(?)\n{\n  setGameState(\"win\");\n}\nelse if(?)\n{\n  setGameState(\"win\");\n}\nelse if(playerChoice == \"scissors\" && computerChoice == \"paper\")\n{\n  setGameState(\"win\");\n}\nelse\n{\n  setGameState(\"lose\");\n}",
          "solution"      : "var playerChoice = prompt(\"rock, paper or scissors?\");\nvar computerChoice = getRockPaperScissors();\n\n// Put the player's choice to lowercase\nplayerChoice = playerChoice.toLowerCase();\ncomputerChoice = computerChoice.toLowerCase();\n\ndisplayChoices(playerChoice, computerChoice);\n\nif(playerChoice == computerChoice)\n{\n  setGameState(\"tie\");\n}\nelse if(playerChoice == \"rock\" && computerChoice == \"scissors\")\n{\n  setGameState(\"win\");\n}\nelse if(playerChoice == \"paper\" && computerChoice == \"rock\")\n{\n  setGameState(\"win\");\n}\nelse if(playerChoice == \"scissors\" && computerChoice == \"paper\")\n{\n  setGameState(\"win\");\n}\nelse\n{\n  setGameState(\"lose\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"toLowerCase()\">.toLowerCase() Instruction</h3>\n<div class=\"text\">The .toLowerCase() <concept ref=\"string\">instruction</concept> can be used to transform uppercase letters in a <concept ref=\"string\">string</concept> to lowercase.</div><div class=\"text\">Note that letters already in lowercase are not affected by the .toLowerCase() instruction.</div>\n<div class=\"code-sample-title\">Example of a .toLowerCase() instruction</div><pre class=\"codeBlock\">var myString = \"Programming Is Fun!\";\nmyString = myString.toLowerCase();\nconsole.log(myString); // displays: programming is fun!</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-146",
          "name"          : "The EduCode Fair",
          "normalizedName": "the educode fair",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>EduCode has launched a candy business. They are going to sell their new treats at a local fair. There's a twist to their business: certain treats are only available when the temperature is right! They need your help to make a program that determines which treat you can buy. You'll find below a list of the conditions for each treat:</div><ul class=algorithm><li><strong>Fluffles</strong> are only available if the temperature is <strong>less than or equal to 18 degrees Celsius</strong> and cost <strong>$2</strong>.</li><li><strong>Mr. Colds</strong> are only available if the temperature is <strong>between 18 degrees and 25 degrees</strong> and also cost <strong>$2</strong>.</li><li><strong>EduCools</strong> are only available if the temperature is <strong>greater than 25 degrees</strong> and cost <strong>$3</strong>.</li><li><strong>Sticky Codes</strong> are available to people who can't buy any other treats!</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition that checks if the value of <var id=temperature>temperature</var> is less than or equal to 18 <strong>and</strong> if the value of <var id=money>money</var> is greater than or equal to 2. <strong>Hint:</strong> You'll need to use the AND operator (&amp;&amp;) operator to do this.</li><li class=code-item>Replace the second question mark with a condition that checks if the value of <var id=temperature>temperature</var> is greater than 18 <strong>and</strong> if the value of <var id=temperature>temperature</var> is less than or equal to 25.</li><li class=code-item>Replace the third question mark with a condition that checks if the value of <var id=temperature>temperature</var> is greater than 25 <strong>and</strong> if the value of <var id=money>money</var> is greater than or equal to 3.</li></ol>",
          "boilerplate"   : "var temperature = getTemperature();\nvar money = prompt(\"How much money do you have?\");\n\nmoney = Number(money);\n\nif(?)\n{\n  displayTreat(\"Fluffle\");\n}\nelse if(? && money >= 2)\n{\n  displayTreat(\"Mr. Cold\");\n}\nelse if(?)\n{\n  displayTreat(\"EduCool\");\n}\nelse\n{\n  displayTreat(\"StickyCode\");\n}",
          "solution"      : "var temperature = getTemperature();\nvar money = prompt(\"How much money do you have?\");\n\nmoney = Number(money);\n\nif(temperature <= 18 && money >= 2)\n{\n  displayTreat(\"Fluffle\");\n}\nelse if(temperature > 18 && temperature <= 25 && money >= 2)\n{\n  displayTreat(\"Mr. Cold\");\n}\nelse if(temperature > 25 && money >= 3)\n{\n  displayTreat(\"EduCool\");\n}\nelse\n{\n  displayTreat(\"StickyCode\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-147",
          "name"          : "Light Wavelength",
          "normalizedName": "light wavelength",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Light has a wavelength that can be measured in nanometers (nm). It is commonly divided into 6 colors:</div><ul class=algorithm><li><strong>Violet:</strong> 400 nm or more, but less than 440 nm</li><li><strong>Blue:</strong> 440 nm or more, but less than 490 nm</li><li><strong>Green:</strong> 490 nm or more, but less than 570 nm</li><li><strong>Yellow:</strong> 570 nm or more, but less than 585 nm</li><li><strong>Orange:</strong> 585 nm or more, but less than 620 nm</li><li><strong>Red:</strong> 620 nm or more, but less than 780 nm</li></ul><div class=text>Let's build a program to analyze the wavelength of light and determine its color!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an else if statement. The condition of this else if statement should check if the value of <var id=wavelength>wavelength</var> is greater than or equal to 440 <strong>and</strong> if the value of <var id=wavelength>wavelength</var> is less than 490. Inside the code block of this else if statement, use the <concept ref=showColor>showColor(<string>\"blue\"</string>)</concept> instruction.</li><li class=code-item>Replace the second question mark with an else if statement. The condition of this else if statement should check if the value of <var id=wavelength>wavelength</var> is greater than or equal to 490 <strong>and</strong> if the value of <var id=wavelength>wavelength</var> is less than 570. Inside the code block of this else if statement, use the <concept ref=showColor>showColor(<string>\"green\"</string>)</concept> instruction.</li><li class=code-item>Replace the third question mark with an else if statement. The condition of this else if statement should check if the value of <var id=wavelength>wavelength</var> is greater than or equal to 570 <strong>and</strong> if the value of <var id=wavelength>wavelength</var> is less than 585. Inside the code block of this else if statement, use the <concept ref=showColor>showColor(<string>\"yellow\"</string>)</concept> instruction.</li></ol>",
          "boilerplate"   : "var wavelength = getWavelength();\n\nif(wavelength >= 400 && wavelength < 440)\n{\n  showColor(\"violet\");\n}\n// Add an else if statement for the color blue\n?\n\n// Add an else if statement for the color green\n?\n\n// Add an else if statement for the color yellow\n?\n\nelse if(wavelength >= 585 && wavelength < 620)\n{\n  showColor(\"orange\");\n}\nelse if(wavelength >= 620 && wavelength < 780)\n{\n  showColor(\"red\");\n}",
          "solution"      : "var wavelength = getWavelength();\n\nif(wavelength >= 400 && wavelength < 440)\n{\n  showColor(\"violet\");\n}\n// Add an else if statement for the color blue\nelse if(wavelength >= 440 && wavelength < 490)\n{\n  showColor(\"blue\");\n}\n// Add an else if statement for the color green\nelse if(wavelength >= 490 && wavelength < 570)\n{\n  showColor(\"green\");\n}\n// Add an else if statement for the color yellow\nelse if(wavelength >= 570 && wavelength < 585)\n{\n  showColor(\"yellow\");\n}\nelse if(wavelength >= 585 && wavelength < 620)\n{\n  showColor(\"orange\");\n}\nelse if(wavelength >= 620 && wavelength < 780)\n{\n  showColor(\"red\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-148",
          "name"          : "Is It Safe to Drink?",
          "normalizedName": "is it safe to drink",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>The EPA is a governmental agency in the United States that manages all the rules and regulations related to the environment. One of their tasks is to establish when water is safe to drink. Water is often contaminated with all sorts of particles (known as pollutants). Two conditions required for water to be safe to drink are the following: the pH of the water must be between 5 and 9 and the water cannot contain more than 50 micrograms of fluorene. Let's build a program to test if water is drinkable.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition that checks if the value of <var id=phLevel>phLevel</var> is between 5 and 9 (<strong>including 5 and 9</strong>).</li><li class=code-item>Replace the second question mark with an if statement. This if statement should be inside the code block of the other if statement. The condition of this new if statement should check if the value of <var id=fluoreneQuantity>fluoreneQuantity</var> is less than or equal to 50. Inside the code block of this if statement, use the <concept ref=waterQuality>waterQuality(<string>\"safe\"</string>)</concept> instruction.</li><li class=code-item>Replace the third question mark with an else statement for the if statement that you created in the previous step. Inside the code block of this else statement, use the <concept ref=waterQuality>waterQuality(<string>\"dangerous</string>\")</concept> instruction.</li></ol>",
          "boilerplate"   : "var phLevel = getPhLevel();\nvar fluoreneQuantity = getFluoreneQuantity();\n\nif(?)\n{\n  // Add an if statement here\n  ?\n  \n  // Add an else statement here\n  ?\n  \n}\nelse\n{\n  waterQuality(\"bad\");\n}",
          "solution"      : "var phLevel = getPhLevel();\nvar fluoreneQuantity = getFluoreneQuantity();\n\nif(phLevel >= 5 && phLevel <= 9)\n{\n  // Add an if statement here\n  if(fluoreneQuantity <= 50)\n  {\n    waterQuality(\"safe\");\n  }\n  // Add an else statement here\n  else\n  {\n    waterQuality(\"dangerous\");\n  }\n}\nelse\n{\n  waterQuality(\"bad\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_project-16",
          "name"          : "Project 16 - Treetionary",
          "normalizedName": "project 16 - treetionary",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-149",
          "name"          : "That's a Gray Pine!",
          "normalizedName": "thats a gray pine!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-149_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-149_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=height>height</var> is greater than or equal to 9 <strong>and</strong> if the value of <var id=height>height</var> is less than or equal to 22.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=height>height</var> is greater than or equal to 14 <strong>and</strong> if the value of <var id=height>height</var> is less than or equal to 20.</li></ol>",
          "boilerplate"   : "var height = getTreeHeight();\n\nif(?)\n{\n  displayTree(\"gray pine\");\n}\nelse if(?)\n{\n  displayTree(\"balsam fir\");\n}\nelse\n{\n  displayTree(\"rare tree\");\n}",
          "solution"      : "var height = getTreeHeight();\n\nif(height >= 9 && height <= 22)\n{\n  displayTree(\"gray pine\");\n}\nelse if(height >= 14 && height <= 20)\n{\n  displayTree(\"balsam fir\");\n}\nelse\n{\n  displayTree(\"rare tree\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-150",
          "name"          : "A Real Treetionary",
          "normalizedName": "a real treetionary",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's add 3 more trees to our application.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=height>height</var> is greater than or equal to 18 <strong>and</strong> if the value of <var id=height>height</var> is less than or equal to 40.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=height>height</var> is greater than or equal to 20 <strong>and</strong> if the value of <var id=height>height</var> is less than or equal to 35.</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=height>height</var> is greater than or equal to 50 <strong>and</strong> if the value of <var id=height>height</var> is less than or equal to 58.</li></ol>",
          "boilerplate"   : "var height = getTreeHeight();\n\nif(height >= 9 && height <= 22)\n{\n  displayTree(\"gray pine\");\n}\nelse if(height >= 14 && height <= 20)\n{\n  displayTree(\"balsam fir\");\n}\nelse if(?)\n{\n  displayTree(\"red spruce\");\n}\nelse if(?)\n{\n  displayTree(\"red pine\");\n}\nelse if(?)\n{\n  displayTree(\"white pine\");\n}\nelse\n{\n  displayTree(\"rare tree\");\n}",
          "solution"      : "var height = getTreeHeight();\n\nif(height >= 9 && height <= 22)\n{\n  displayTree(\"gray pine\");\n}\nelse if(height >= 14 && height <= 20)\n{\n  displayTree(\"balsam fir\");\n}\nelse if(height >= 18 && height <= 40)\n{\n  displayTree(\"red spruce\");\n}\nelse if(height >= 20 && height <= 35)\n{\n  displayTree(\"red pine\");\n}\nelse if(height >= 50 && height <= 58)\n{\n  displayTree(\"white pine\");\n}\nelse\n{\n  displayTree(\"rare tree\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-151",
          "name"          : "How Many Needles?",
          "normalizedName": "how many needles",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-151_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-151_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=needleCount>needleCount</var> is equal to 4. Do not forgoet to put an AND operator (&amp;&amp;) before this condition!</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=needleCount>needleCount</var> is equal to 1. Do not forgoet to put an AND operator (&amp;&amp;) before this condition!</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=needleCount>needleCount</var> is equal to 1. Do not forgoet to put an AND operator (&amp;&amp;) before this condition!</li><li class=code-item>Replace the fourth question mark with a condition to check if the value of <var id=needleCount>needleCount</var> is equal to 2. Do not forgoet to put an AND operator (&amp;&amp;) before this condition!</li><li class=code-item>Replace the fifth question mark with a condition to check if the value of <var id=needleCount>needleCount</var> is equal to 5. Do not forgoet to put an AND operator (&amp;&amp;) before this condition!</li></ol>",
          "boilerplate"   : "var height = getTreeHeight();\nvar needleCount = getNeedleCount();\n\nif((height >= 9 && height <= 22) ?)\n{\n  displayTree(\"gray pine\");\n}\nelse if((height >= 14 && height <= 20) ?)\n{\n  displayTree(\"balsam fir\");\n}\nelse if((height >= 18 && height <= 40) ?)\n{\n  displayTree(\"red spruce\");\n}\nelse if((height >= 20 && height <= 35) ?)\n{\n  displayTree(\"red pine\");\n}\nelse if((height >= 50 && height <= 58) ?)\n{\n  displayTree(\"white pine\");\n}\nelse\n{\n  displayTree(\"rare tree\");\n}",
          "solution"      : "var height = getTreeHeight();\nvar needleCount = getNeedleCount();\n\nif((height >= 9 && height <= 22) && (needleCount == 4))\n{\n  displayTree(\"gray pine\");\n}\nelse if((height >= 14 && height <= 20) && (needleCount == 1))\n{\n  displayTree(\"balsam fir\");\n}\nelse if((height >= 18 && height <= 40) && (needleCount == 1))\n{\n  displayTree(\"red spruce\");\n}\nelse if((height >= 20 && height <= 35) && (needleCount == 2))\n{\n  displayTree(\"red pine\");\n}\nelse if((height >= 50 && height <= 58) && (needleCount == 5))\n{\n  displayTree(\"white pine\");\n}\nelse\n{\n  displayTree(\"rare tree\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-152",
          "name"          : "What's the Needle's Shape?",
          "normalizedName": "whats the needles shape",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-152_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-152_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=needleShape>needleShape</var> is equal to <string>\"round\"</string>. Do not forgoet to put an AND operator (&amp;&amp;) before this condition!</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=needleShape>needleShape</var> is equal to <string>\"flat\"</string>. Do not forgoet to put an AND operator (&amp;&amp;) before this condition!</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=needleShape>needleShape</var> is equal to <string>\"round\"</string>. Do not forgoet to put an AND operator (&amp;&amp;) before this condition!</li><li class=code-item>Replace the fourth question mark with a condition to check if the value of <var id=needleShape>needleShape</var> is equal to <string>\"round\"</string>. Do not forgoet to put an AND operator (&amp;&amp;) before this condition!</li><li class=code-item>Replace the fifth question mark with a condition to check if the value of <var id=needleShape>needleShape</var> is equal to <string>\"round\"</string>. Do not forgoet to put an AND operator (&amp;&amp;) before this condition!</li></ol>",
          "boilerplate"   : "var height = getTreeHeight();\nvar needleCount = getNeedleCount();\nvar needleShape = getNeedleShape();\n\nif((height >= 9 && height <= 22) && (needleCount == 4) ?)\n{\n  displayTree(\"gray pine\");\n}\nelse if((height >= 14 && height <= 20) && (needleCount == 1) ?)\n{\n  displayTree(\"balsam fir\");\n}\nelse if((height >= 18 && height <= 40) && (needleCount == 1) ?)\n{\n  displayTree(\"red spruce\");\n}\nelse if((height >= 20 && height <= 35) && (needleCount == 2) ?)\n{\n  displayTree(\"red pine\");\n}\nelse if((height >= 50 && height <= 58) && (needleCount == 5) ?)\n{\n  displayTree(\"white pine\");\n}\nelse\n{\n  displayTree(\"rare tree\");\n}",
          "solution"      : "var height = getTreeHeight();\nvar needleCount = getNeedleCount();\nvar needleShape = getNeedleShape();\n\nif((height >= 9 && height <= 22) && (needleCount == 4) && (needleShape == \"round\"))\n{\n  displayTree(\"gray pine\");\n}\nelse if((height >= 14 && height <= 20) && (needleCount == 1) && (needleShape == \"flat\"))\n{\n  displayTree(\"balsam fir\");\n}\nelse if((height >= 18 && height <= 40) && (needleCount == 1) && (needleShape == \"round\"))\n{\n  displayTree(\"red spruce\");\n}\nelse if((height >= 20 && height <= 35) && (needleCount == 2) && (needleShape == \"round\"))\n{\n  displayTree(\"red pine\");\n}\nelse if((height >= 50 && height <= 58) && (needleCount == 5) && (needleShape == \"round\"))\n{\n  displayTree(\"white pine\");\n}\nelse\n{\n  displayTree(\"rare tree\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-153",
          "name"          : "What's the Needle's Length?",
          "normalizedName": "whats the needles length",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's add one last parameter to our tree identification app. We're going to look at the length of the fascicle. However, since there is a lot of variation in length, we'll use a string to represent two classes of fascicles: \"short\" and \"long\".</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=needleLength>needleLength</var> is equal to <string>\"long\"</string>. Do not forget to put an AND operator (&amp;&amp;) before this condition!</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=needleLength>needleLength</var> is equal to <string>\"short\"</string>. Do not forget to put an AND operator (&amp;&amp;) before this condition!</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=needleLength>needleLength</var> is equal to <string>\"short\"</string>. Do not forget to put an AND operator (&amp;&amp;) before this condition!</li><li class=code-item>Replace the fourth question mark with a condition to check if the value of <var id=needleLength>needleLength</var> is equal to <string>\"long\"</string>. Do not forget to put an AND operator (&amp;&amp;) before this condition!</li><li class=code-item>Replace the fifth question mark with a condition to check if the value of <var id=needleLength>needleLength</var> is equal to <string>\"long\"</string>. Do not forget to put an AND operator (&amp;&amp;) before this condition!</li></ol>",
          "boilerplate"   : "var height = getTreeHeight();\nvar needleCount = getNeedleCount();\nvar needleShape = getNeedleShape();\nvar needleLength = getNeedleLength();\n\nif((height >= 9 && height <= 22) && (needleCount == 4) && (needleShape == \"round\") ?)\n{\n  displayTree(\"gray pine\");\n}\nelse if((height >= 14 && height <= 20) && (needleCount == 1) && (needleShape == \"flat\") ?)\n{\n  displayTree(\"balsam fir\");\n}\nelse if((height >= 18 && height <= 40) && (needleCount == 1) && (needleShape == \"round\") ?)\n{\n  displayTree(\"red spruce\");\n}\nelse if((height >= 20 && height <= 35) && (needleCount == 2) && (needleShape == \"round\") ?)\n{\n  displayTree(\"red pine\");\n}\nelse if((height >= 50 && height <= 58) && (needleCount == 5) && (needleShape == \"round\") ?)\n{\n  displayTree(\"white pine\");\n}\nelse\n{\n  displayTree(\"rare tree\");\n}",
          "solution"      : "var height = getTreeHeight();\nvar needleCount = getNeedleCount();\nvar needleShape = getNeedleShape();\nvar needleLength = getNeedleLength();\n\nif((height >= 9 && height <= 22) && (needleCount == 4) && (needleShape == \"round\") && (needleLength == \"long\"))\n{\n  displayTree(\"gray pine\");\n}\nelse if((height >= 14 && height <= 20) && (needleCount == 1) && (needleShape == \"flat\") && (needleLength == \"short\"))\n{\n  displayTree(\"balsam fir\");\n}\nelse if((height >= 18 && height <= 40) && (needleCount == 1) && (needleShape == \"round\") && (needleLength == \"short\"))\n{\n  displayTree(\"red spruce\");\n}\nelse if((height >= 20 && height <= 35) && (needleCount == 2) && (needleShape == \"round\") && (needleLength == \"long\"))\n{\n  displayTree(\"red pine\");\n}\nelse if((height >= 50 && height <= 58) && (needleCount == 5) && (needleShape == \"round\") && (needleLength == \"long\"))\n{\n  displayTree(\"white pine\");\n}\nelse\n{\n  displayTree(\"rare tree\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-154",
          "name"          : "Spot the Invertebrate",
          "normalizedName": "spot the invertebrate",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>A biology professor requires our help to create an application that can identify types of invertebrates. Invertebrates are creatures with no backbones. Can you complete the program?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=legs>legs</var> is equal to 8 <strong>and</strong> if the value of <var id=antennae>antennae</var> is false.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=legs>legs</var> is equal to 10 <strong>and</strong> if the value of <var id=antennae>antennae</var> is true.</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=legs>legs</var> is equal to 0 (zero) <strong>and</strong> if the value of <var id=antennae>antennae</var> is false.</li></ol>",
          "boilerplate"   : "var antennae = hasAntennae();\nvar legs = getLegs();\n\nif(legs == 6 && antennae == true)\n{\n  displayInvertebrate(\"insect\");\n}\nelse if(?)\n{\n  displayInvertebrate(\"arachnid\");\n}\nelse if(?)\n{\n  displayInvertebrate(\"crustacean\");\n}\nelse if(?)\n{\n  displayInvertebrate(\"mollusk\");\n}\nelse\n{\n  displayInvertebrate(\"unknown\");\n}",
          "solution"      : "var antennae = hasAntennae();\nvar legs = getLegs();\n\nif(legs == 6 && antennae == true)\n{\n  displayInvertebrate(\"insect\");\n}\nelse if(legs == 8 && antennae == false)\n{\n  displayInvertebrate(\"arachnid\");\n}\nelse if(legs == 10 && antennae == true)\n{\n  displayInvertebrate(\"crustacean\");\n}\nelse if(legs == 0 && antennae == false)\n{\n  displayInvertebrate(\"mollusk\");\n}\nelse\n{\n  displayInvertebrate(\"unknown\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<h3 class=\"title\" ref=\"boolean\">Booleans</h3>\n<div class=\"text\">Booleans are a <concept ref=\"data type\">data type</concept> with only two possible values: true or false.</div><div class=\"text\">Any expression using a <concept ref=\"relational operators\">relational operator</concept> will return a Boolean value.</div>\n<div class=\"code-sample-title\">Example of Boolean values</div><pre class=\"codeBlock\">var iLikeCereals = true;\nvar isGreaterThan18 = 10 > 18; // isGreaterThan18 will be false\nvar age = 19;\nvar ageIsGreaterThan18 = age > 18; // ageIsGreaterThan18 will be true</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-155",
          "name"          : "Building a Tuner",
          "normalizedName": "building a tuner",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a tuner that can recognize musical notes. Tuners work by looking at the frequency of a note, which is calculated in hertz.</div><div class=text>For example, the note C4 has a frequency of 261.63 hertz. Because it is hard to tune an instrument to a precise frequency, we allow notes to be one hertz higher or lower. For example, our C4 note can be anywhere between 260.63 and 262.63 hertz. Below is the list of notes we would like our tuner to recognize.</div><ul class=algorithm><li>The note <strong>C4</strong> is <strong>261.63 hertz</strong>.</li><li>The note <strong>D4</strong> is <strong>293.66 hertz</strong>.</li><li>The note <strong>E4</strong> is <strong>329.63 hertz</strong>.</li><li>The note <strong>F4</strong> is <strong>349.23 hertz</strong>.</li><li>The note <strong>G4</strong> is <strong>392.00 hertz</strong>.</li><li>The note <strong>A4</strong> is <strong>440.00 hertz</strong>.</li><li>The note <strong>B4</strong> is <strong>493.88 hertz</strong>.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=noteFrequency>noteFrequency</var> is greater than or equal to 328.63 <strong>and</strong> if the value of <var id=noteFrequency>noteFrequency</var> is less than or equal to 330.63.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=noteFrequency>noteFrequency</var> is greater than or equal to 348.23 <strong>and</strong> if the value of <var id=noteFrequency>noteFrequency</var> is less than or equal to 350.23.</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=noteFrequency>noteFrequency</var> is greater than or equal to 391.00 <strong>and</strong> if the value of <var id=noteFrequency>noteFrequency</var> is less than or equal to 393.00.</li><li class=code-item>Replace the fourth question mark with a condition to check if the value of <var id=noteFrequency>noteFrequency</var> is greater than or equal to 439.00 <strong>and</strong> if the value of <var id=noteFrequency>noteFrequency</var> is less than or equal to 441.00.</li><li class=code-item>Replace the fifth question mark with a condition to check if the value of <var id=noteFrequency>noteFrequency</var> is greater than or equal to 492.88 <strong>and</strong> if the value of <var id=noteFrequency>noteFrequency</var> is less than or equal to 494.88.</li></ol>",
          "boilerplate"   : "var noteFrequency = getNoteFrequency();\n\nif(noteFrequency >= 260.63 && noteFrequency <= 262.63)\n{\n  identifyNote(\"C4\");\n}\nelse if(noteFrequency >= 292.66 && noteFrequency <= 294.66)\n{\n  identifyNote(\"D4\");\n}\nelse if(?)\n{\n  identifyNote(\"E4\");\n}\nelse if(?)\n{\n  identifyNote(\"F4\");\n}\nelse if(?)\n{\n  identifyNote(\"G4\");\n}\nelse if(?)\n{\n  identifyNote(\"A4\");\n}\nelse if(?)\n{\n  identifyNote(\"B4\");\n}\nelse\n{\n  identifyNote(\"unknown\");\n}",
          "solution"      : "var noteFrequency = getNoteFrequency();\n\nif(noteFrequency >= 260.63 && noteFrequency <= 262.63)\n{\n  identifyNote(\"C4\");\n}\nelse if(noteFrequency >= 292.66 && noteFrequency <= 294.66)\n{\n  identifyNote(\"D4\");\n}\nelse if(noteFrequency >= 328.63 && noteFrequency <= 330.63)\n{\n  identifyNote(\"E4\");\n}\nelse if(noteFrequency >= 348.23 && noteFrequency <= 350.23)\n{\n  identifyNote(\"F4\");\n}\nelse if(noteFrequency >= 391.00 && noteFrequency <= 393.00)\n{\n  identifyNote(\"G4\");\n}\nelse if(noteFrequency >= 439.00 && noteFrequency <= 441.00)\n{\n  identifyNote(\"A4\");\n}\nelse if(noteFrequency >= 492.88 && noteFrequency <= 494.88)\n{\n  identifyNote(\"B4\");\n}\nelse\n{\n  identifyNote(\"unknown\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-156",
          "name"          : "Straight to the Moon",
          "normalizedName": "straight to the moon",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program that can identify a planet just by looking at its type and at how many moons it has. There are 8 planets in our solar system, but we'll only identify 5 to keep our program simple. Below are the details of the planets we must identify.</div><ul class=algorithm><li><strong>Mercury</strong> is a <string>\"terrestrial\"</string> planet with <strong>0</strong> moons.</li><li><strong>Earth</strong> is a <string>\"terrestrial\"</string> planet with <strong>1</strong> moon.</li><li><strong>Mars</strong> is a <string>\"terrestrial\"</string> planet with <strong>2</strong> moons.</li><li><strong>Saturn</strong> is a <string>\"gas giant\"</string> planet with <strong>62</strong> moons.</li><li><strong>Neptune</strong> is a <string>\"ice giant\"</string> planet with <strong>14</strong> moons.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=planetType>planetType</var> is equal to <string>\"terrestrial\"</string> <strong>and</strong> if the value of <var id=moons>moons</var> is equal to 0.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=planetType>planetType</var> is equal to <string>\"terrestrial\"</string> <strong>and</strong> if the value of <var id=moons>moons</var> is equal to 1.</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=planetType>planetType</var> is equal to <string>\"terrestrial\"</string> <strong>and</strong> if the value of <var id=moons>moons</var> is equal to 2.</li><li class=code-item>Replace the fourth question mark with a condition to check if the value of <var id=planetType>planetType</var> is equal to <string>\"gas giant\"</string> <strong>and</strong> if the value of <var id=moons>moons</var> is equal to 62.</li><li class=code-item>Replace the fifth question mark with a condition to check if the value of <var id=planetType>planetType</var> is equal to <string>\"ice giant\"</string> <strong>and</strong> if the value of <var id=moons>moons</var> is equal to 14.</li></ol>",
          "boilerplate"   : "var moons = getMoonCount();\nvar planetType = getPlanetType();\n\nif(?)\n{\n  displayPlanet(\"Mercury\");\n}\nelse if(?)\n{\n  displayPlanet(\"Earth\");\n}\nelse if(?)\n{\n  displayPlanet(\"Mars\");\n}\nelse if(?)\n{\n  displayPlanet(\"Saturn\");\n}\nelse if(?)\n{\n  displayPlanet(\"Neptune\");\n}\nelse\n{\n  displayPlanet(\"unknown\");\n}",
          "solution"      : "var moons = getMoonCount();\nvar planetType = getPlanetType();\n\nif(planetType == \"terrestrial\" && moons == 0)\n{\n  displayPlanet(\"Mercury\");\n}\nelse if(planetType == \"terrestrial\" && moons == 1)\n{\n  displayPlanet(\"Earth\");\n}\nelse if(planetType == \"terrestrial\" && moons == 2)\n{\n  displayPlanet(\"Mars\");\n}\nelse if(planetType == \"gas giant\" && moons == 62)\n{\n  displayPlanet(\"Saturn\");\n}\nelse if(planetType == \"ice giant\" && moons == 14)\n{\n  displayPlanet(\"Neptune\");\n}\nelse\n{\n  displayPlanet(\"unknown\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-157",
          "name"          : "A Cloudy Day",
          "normalizedName": "a cloudy day",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to identify clouds. Clouds can be identified by their shape and by how high they are in the sky (also called altitude). Here are some common clouds we want to identify:</div><ul class=algorithm><li><strong>Stratus</strong> clouds have a <string>\"flat\"</string> shape with an altitude of <strong>less than 2000 m</strong>.</li><li><strong>Stratocumulus</strong> clouds have a <string>\"patches\"</string> shape with an altitude of <strong>less than 2000 m</strong>.</li><li><strong>Altocumulus</strong> clouds have a <string>\"patches\"</string> shape with an altitude of <strong>2000 m to 7000 m</strong>.</li><li><strong>Altostratus</strong> clouds have a <string>\"sheet\"</string> shape with an altitude of <strong>2000 m to 7000 m</strong>.</li><li><strong>Cirrus</strong> clouds have a <string>\"thin\"</string> shape with an altitude of <strong>more than 5000 m</strong>.</li><li><strong>Cumulonimbus</strong> clouds have a <string>\"tower\"</string> shape with any altitude.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an else if statement. This else if statement should be used to check if the cloud is a <strong>stratocumulus</strong>. Inside the code block of this else if statement, use the <concept ref=displayCloud>displayCloud(<string>\"stratocumulus\"</string>)</concept> instruction.</li><li class=code-item>Replace the second question mark with an else if statement. This else if statement should be used to check if the cloud is an <strong>altocumulus</strong>. Inside the code block of this else if statement, use the <concept ref=displayCloud>displayCloud(<string>\"altocumulus\"</string>)</concept> instruction.</li><li class=code-item>Replace the third question mark with an else if statement. This else if statement should be used to check if the cloud is an <strong>altostratus</strong>. Inside the code block of this else if statement, use the <concept ref=displayCloud>displayCloud(<string>\"altostratus\"</string>)</concept> instruction.</li><li class=code-item>Replace the fourth question mark with an else if statement. This else if statement should be used to check if the cloud is a <strong>cirrus</strong>. Inside the code block of this else if statement, use the <concept ref=displayCloud>displayCloud(<string>\"cirrus\"</string>)</concept> instruction.</li></ol>",
          "boilerplate"   : "var altitude = getCloudAltitude();\nvar shape = getCloudShape();\n\nif(altitude < 2000 && shape == \"flat\")\n{\n  displayCloud(\"stratus\");\n}\n// Check if cloud is a stratocumulus\n?\n\n// Check if cloud is a altocumulus\n?\n\n// Check if cloud is a altostratus\n?\n\n// Check if cloud is a cirrus\n?\n\nelse if(shape == \"tower\")\n{\n  displayCloud(\"cumulonimbus\");\n}\nelse\n{\n  displayCloud(\"unknown\");\n}",
          "solution"      : "var altitude = getCloudAltitude();\nvar shape = getCloudShape();\n\nif(altitude < 2000 && shape == \"flat\")\n{\n  displayCloud(\"stratus\");\n}\n// Check if cloud is a stratocumulus\nelse if(altitude < 2000 && shape == \"patches\")\n{\n  displayCloud(\"stratocumulus\");\n}\n// Check if cloud is a altocumulus\nelse if(altitude >= 2000 && altitude <= 7000 && shape == \"patches\")\n{\n  displayCloud(\"altocumulus\");\n}\n// Check if cloud is a altostratus\nelse if(altitude >= 2000 && altitude <= 7000 && shape == \"sheet\")\n{\n  displayCloud(\"altostratus\");\n}\n// Check if cloud is a cirrus\nelse if(altitude > 5000 && shape == \"thin\")\n{\n  displayCloud(\"cirrus\");\n}\nelse if(shape == \"tower\")\n{\n  displayCloud(\"cumulonimbus\");\n}\nelse\n{\n  displayCloud(\"unknown\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<h3 class=\"title\" ref=\"multiple and\">Using Multiple AND Operators in an Expression</h3>\n<div class=\"text\">We can use more than one <concept ref=\"and operator\">AND operator</concept> to check multiple conditions in a single expression. For the expression to be <concept ref=\"boolean\">true</concept>, every condition needs to also be true. If even one condition is false, the overall expression will be false.</div>\n<div class=\"code-sample-title\">Example of multiple AND operators</div><pre class=\"codeBlock\">if(hungry == true && money > 5 && day == \"Tuesday\")\n{\n  console.log(\"You can buy some pizza!\");\n}</pre>\n<div class=\"text\">If the user is hungry, has more than $5 and it is Tuesday, they can buy pizza.</div><div class=\"text\">If the user is not hungry but has more than $5 and it is Tuesday, they cannot buy pizza.</div><div class=\"text\">If the user is hungry but does not have more than $5 and it is Tuesday, they cannot buy pizza.</div><div class=\"text\">If the user is hungry has more than $5 but it is not Tuesday, they cannot buy pizza.</div><div class=\"text\">If the user is not hungry, doesn't have more than $5 and it is not Tuesday, they cannot buy pizza.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-008",
          "name"          : "Quiz 8",
          "description"   : "The AND Operator",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-008_q-01",
              "question": "<div>True or false. The double ampersands (<code>&amp;&amp;</code>) are called the <em>AND operator</em>.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-008_q-01_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "The double ampersands are used as the <em>AND operator</em>."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-008_q-02",
              "question": "<div>True or false. We can use nested <code>if</code> statements or the AND operator to check multiple conditions.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-008_q-02_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "Both nested <code>if</code> statements and the AND operator can be used to check multiple conditions."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-02_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-008_q-03",
              "question": "<div>Select the condition that represents the statement: \"The value of <var>myNumber</var> is greater than or equal to 5 and less than 10\".</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-03_a-01",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>(myNumber &lt;= 5 &amp;&amp; myNumber &lt; 10)</code></pre>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-008_q-03_a-02",
                  "value"      : 2,
                  "answer"     : "<pre class=\"language-javascript\"><code>(myNumber &gt;= 5 &amp;&amp; myNumber &lt; 10)</code></pre>",
                  "explanation": "This condition checks if <var>myNumber</var> is greater than or equal to 5 AND if <var>myNumber</var> is less than 10."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-03_a-03",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>(5 &lt;= myNumber &lt; 10)</code></pre>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-03_a-04",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>(5 &lt; myNumber &lt; 10)</code></pre>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-008_q-04",
              "question": "<div>What is the problem with the following condition of an <code>if</code> statement?</div>\n<pre class=\"language-javascript\"><code>if(favoriteFood == \"pizza\" &amp;&amp; money &gt; 3 &amp;&amp;)</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-04_a-01",
                  "value" : 0,
                  "answer": "<div>The AND operator cannot be used with a condition that checks two different variables.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>The AND operator cannot be used with a condition that checks for a string.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-008_q-04_a-03",
                  "value"      : 2,
                  "answer"     : "<div>A condition cannot end with an AND operator.</div>",
                  "explanation": "The AND operator is used to join multiple conditions and should have a condition on each side."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-04_a-04",
                  "value" : 0,
                  "answer": "<div>There is no problem.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-008_q-05",
              "question": "<div>What is the problem with the following condition?</div>\n<pre class=\"language-javascript\"><code>(myNumber &gt; 5 &amp;&amp; myNumber &lt; 5)</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>The AND operator cannot be used to check two conditions.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>The AND operator should be placed at the end of the condition.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-008_q-05_a-03",
                  "value"      : 2,
                  "answer"     : "<div>This condition can never be true.</div>",
                  "explanation": "The variable <var>myNumber</var> cannot be both greater and less than 5."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-05_a-04",
                  "value" : 0,
                  "answer": "<div>There is no problem.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-008_q-06",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var temperature = 11;\n\nif(temperature &gt;= 10 &amp;&amp; temperature &lt;= 20)\n{\n  console.log(\"Temperature is between 10 and 20\");\n}\nelse\n{\n  console.log(\"Temperature is less than 10 or greater than 20\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-008_q-06_a-01",
                  "value"      : 2,
                  "answer"     : "<div>One message: <samp>Temperature is between 10 and 20</samp></div>",
                  "explanation": "Since <code>temperature &gt;= 10</code> is true and <code>temperature &lt;= 20</code> is also true, the code block of the <code>if</code> statement is executed."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>One message: <samp>Temperature is less than 10 or greater than 20</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>Two messages: <samp>Temperature is between 10 and 20</samp> and <samp>Temperature is less than 10 or greater than 20</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>No message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-008_q-07",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var height = 12\nvar type = \"pine\";\n\nif(type == \"pine\" &amp;&amp; height &lt; 10)\n{\n  console.log(\"The tree is a pine of less than 10 meters\");\n}\nelse if(type == \"pine\" &amp;&amp; height &gt;= 10)\n{\n  console.log(\"The tree is a pine of 10 or more meters\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-07_a-01",
                  "value" : 0,
                  "answer": "<div>One message: <samp>The tree is a pine of less than 10 meters</samp></div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-008_q-07_a-02",
                  "value"      : 2,
                  "answer"     : "<div>One message: <samp>The tree is a pine of 10 or more meters</samp></div>",
                  "explanation": "Since <code>type == \"pine\"</code> is true and <code>height &gt;= 10</code> is also true, the code block of the <code>else if</code> statement is executed."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>Two messages: <samp>The tree is a pine of less than 10 meters</samp> and <samp>The tree is a pine of 10 or more meters</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-008_q-07_a-04",
                  "value" : 0,
                  "answer": "<div>No message</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 8",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_en-CA_exercise-266",
          "name"          : "The or Operator",
          "normalizedName": "the or operator",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-266_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-266_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-17",
          "name"          : "Project 17 - Helping the Teacher",
          "normalizedName": "project 17 - helping the teacher",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-158",
          "name"          : "Studying for the Test",
          "normalizedName": "studying for the test",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-158_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-158_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with the OR operator (||).</li></ol>",
          "boilerplate"   : "var classMark = getClassMark();\nvar examMark = getExamMark();\n\nif(classMark >= 90 ? examMark >= 90)\n{\n  displayMark(\"A\");\n}\nelse\n{\n  displayMark(\"E\");\n}",
          "solution"      : "var classMark = getClassMark();\nvar examMark = getExamMark();\n\nif(classMark >= 90 || examMark >= 90)\n{\n  displayMark(\"A\");\n}\nelse\n{\n  displayMark(\"E\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or operator\">Using the OR Operator (||)</h3>\n<div class=\"text\">The OR operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if at least one or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the OR operator will be true if at least one condition that makes up the expression is true.</div><div class=\"text\">The operator is represented using two vertical bars (||).</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">var result = true || true; // result is true\nresult = false || true; // result is true\nresult = true || false; // result is true\nresult = false || false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-159",
          "name"          : "Hey, That's Pretty Good!",
          "normalizedName": "hey thats pretty good!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-159_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-159_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Change the condition of the else if statement. The condition should check that <var id=classMark>classMark</var> is greater than or equal to 80 <strong>or</strong> that <var id=examMark>examMark</var> <strong>is greater than or equal to 80</strong>. <strong>Hint:</strong> You'll need to use the OR operator (||) operator to do this.</li></ol>",
          "boilerplate"   : "var classMark = getClassMark();\nvar examMark = getExamMark();\n\nif(classMark >= 90 || examMark >= 90)\n{\n  displayMark(\"A\");\n}\nelse if(classMark >= 80 ?)\n{\n  displayMark(\"B\");\n}\nelse\n{\n  displayMark(\"E\");\n}",
          "solution"      : "var classMark = getClassMark();\nvar examMark = getExamMark();\n\nif(classMark >= 90 || examMark >= 90)\n{\n  displayMark(\"A\");\n}\nelse if(classMark >= 80 || examMark >= 80)\n{\n  displayMark(\"B\");\n}\nelse\n{\n  displayMark(\"E\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or operator\">Using the OR Operator (||)</h3>\n<div class=\"text\">The OR operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if at least one or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the OR operator will be true if at least one condition that makes up the expression is true.</div><div class=\"text\">The operator is represented using two vertical bars (||).</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">var result = true || true; // result is true\nresult = false || true; // result is true\nresult = true || false; // result is true\nresult = false || false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-160",
          "name"          : "Or We Should Study More...",
          "normalizedName": "or we should study more...",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's add 2 more marks to our grading program.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=classMark>classMark</var> is greater than or equal to 70 <strong>or</strong> if the value of <var id=examMark>examMark</var> is greater than or equal to 70.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=classMark>classMark</var> is greater than or equal to 60 <strong>or</strong> if the value of <var id=examMark>examMark</var> is greater than or equal to 60.</li></ol>",
          "boilerplate"   : "var classMark = getClassMark();\nvar examMark = getExamMark();\n\nif(classMark >= 90 || examMark >= 90)\n{\n  displayMark(\"A\");\n}\nelse if(classMark >= 80 || examMark >= 80)\n{\n  displayMark(\"B\");\n}\nelse if(?)\n{\n  displayMark(\"C\");\n}\nelse if(?)\n{\n  displayMark(\"D\");\n}\nelse\n{\n  displayMark(\"E\");\n}",
          "solution"      : "var classMark = getClassMark();\nvar examMark = getExamMark();\n\nif(classMark >= 90 || examMark >= 90)\n{\n  displayMark(\"A\");\n}\nelse if(classMark >= 80 || examMark >= 80)\n{\n  displayMark(\"B\");\n}\nelse if(classMark >= 70 || examMark >= 70)\n{\n  displayMark(\"C\");\n}\nelse if(classMark >= 60 || examMark >= 60)\n{\n  displayMark(\"D\");\n}\nelse\n{\n  displayMark(\"E\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or operator\">Using the OR Operator (||)</h3>\n<div class=\"text\">The OR operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if at least one or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the OR operator will be true if at least one condition that makes up the expression is true.</div><div class=\"text\">The operator is represented using two vertical bars (||).</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">var result = true || true; // result is true\nresult = false || true; // result is true\nresult = true || false; // result is true\nresult = false || false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-161",
          "name"          : "An Alternative Way",
          "normalizedName": "an alternative way",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-161_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-161_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition that checks if <var id=projectMark>projectMark</var> is greater than or equal to 90. Do not forget to put an OR operator (||) before this condition!</li><li class=code-item>Replace the second question mark with a condition that checks if <var id=projectMark>projectMark</var> is greater than or equal to 80. Do not forget to put an OR operator (||) before this condition!</li><li class=code-item>Replace the third question mark with a condition that checks if <var id=projectMark>projectMark</var> is greater than or equal to 70. Do not forget to put an OR operator (||) before this condition!</li></ol>",
          "boilerplate"   : "var classMark = getClassMark();\nvar examMark = getExamMark();\nvar projectMark = getProjectMark();\n\nif(classMark >= 90 || examMark >= 90 ?)\n{\n  displayMark(\"A\");\n}\nelse if(classMark >= 80 || examMark >= 80 ?)\n{\n  displayMark(\"B\");\n}\nelse if(classMark >= 70 || examMark >= 70 ?)\n{\n  displayMark(\"C\");\n}\nelse if(classMark >= 60 || examMark >= 60 || projectMark >= 60)\n{\n  displayMark(\"D\");\n}\nelse\n{\n  displayMark(\"E\");\n}",
          "solution"      : "var classMark = getClassMark();\nvar examMark = getExamMark();\nvar projectMark = getProjectMark();\n\nif(classMark >= 90 || examMark >= 90 || projectMark >= 90)\n{\n  displayMark(\"A\");\n}\nelse if(classMark >= 80 || examMark >= 80 || projectMark >= 80)\n{\n  displayMark(\"B\");\n}\nelse if(classMark >= 70 || examMark >= 70 || projectMark >= 70)\n{\n  displayMark(\"C\");\n}\nelse if(classMark >= 60 || examMark >= 60 || projectMark >= 60)\n{\n  displayMark(\"D\");\n}\nelse\n{\n  displayMark(\"E\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"multiple or\">Using Multiple OR Operators in an Expression</h3>\n<div class=\"text\">We can use more than one <concept ref=\"or operator\">OR operator</concept> to check multiple conditions in a single expression. For the expression to be <concept ref=\"boolean\">true</concept>, at least one condition needs to also be true. If even one condition is true, the overall expression will be true.</div>\n<div class=\"code-sample-title\">Example of multiple OR operators</div><pre class=\"codeBlock\">if(holiday == true || temperature < -40 || weekend == true)\n{\n  console.log(\"School is closed!\");\n}</pre>\n<div class=\"text\">If it is a holiday and the temperature is less than -40 and it is the weekend, then the school is closed</div><div class=\"text\">If it is not a holiday, but the temperature is less than -40 and it is the weekend, then the school is still closed</div><div class=\"text\">If it is a holiday, but the temperature is not less than -40 and it is the weekend, then the school is still closed</div><div class=\"text\">If it is a holiday, but the temperature is not less than -40 and it is not the weekend, then the school is still closed</div><div class=\"text\">If it is not a holiday and the temperature is not less than -40 and it is not the weekend, then the school is open</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-162",
          "name"          : "Selling Some Popcorn",
          "normalizedName": "selling some popcorn",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to handle the sales of popcorn at a theater. During a limited-time offer, customers can buy a large or extra-large popcorn for $25, a medium popcorn for $20, and a small or extra-small popcorn for $15.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition that checks if the value of <var id=popcornSize>popcornSize</var> is equal to <string>\"L\"</string> <strong>or</strong> if the value of <var id=popcornSize>popcornSize</var> is equal to <string>\"XL\"</string>. <strong>Hint:</strong> You'll need to use the OR operator (||) to do this.</li><li class=code-item>Replace the second question mark with a condition that checks if the value of <var id=popcornSize>popcornSize</var> is equal to <string>\"S\"</string> <strong>or</strong> if the value of <var id=popcornSize>popcornSize</var> is equal to <string>\"XS\"</string>.</li></ol>",
          "boilerplate"   : "var popcornSize = getPopcornSize();\n\nif(?)\n{\n  displayCost(\"$25\");\n}\nelse if(popcornSize == \"M\")\n{\n  displayCost(\"$20\");\n}\nelse if(?)\n{\n  displayCost(\"$10\");\n}",
          "solution"      : "var popcornSize = getPopcornSize();\n\nif(popcornSize == \"L\" || popcornSize == \"XL\")\n{\n  displayCost(\"$25\");\n}\nelse if(popcornSize == \"M\")\n{\n  displayCost(\"$20\");\n}\nelse if(popcornSize == \"S\" || popcornSize == \"XS\")\n{\n  displayCost(\"$10\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or with if\">Using the OR Operator (||) with an If Statement</h3>\n<div class=\"text\">The <concept ref=\"or operator\">OR operator</concept> is often used with <concept ref=\"if statement\">if statements</concept> to check multiple <concept ref=\"condition\">conditions</concept> using a single if statement.</div><div class=\"text\">If at least one condition is <concept ref=\"boolean\">true</concept>, the code block will be executed.</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">if(holiday == true || temperature < -40)\n{\n  console.log(\"School is closed!\");\n}</pre>\n<div class=\"text\">If it is a holiday and the temperature is less than -40, then the school is closed</div><div class=\"text\">If it is a holiday but the temperature is not less than -40, the school is still closed</div><div class=\"text\">If it is not a holiday but the temperature is less than -40, the school is still closed</div><div class=\"text\">If it is not a holiday and the temperature is not less than -40, then the school is open</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-163",
          "name"          : "2, 4, 6 or 1, 3, 5",
          "normalizedName": "2 4 6 or 1 3 5",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to determine if the value on the face of a 6-sided dice is either odd (1, 3, 5) or even (2, 4, 6).</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition that checks if the value of <var id=numberOnDice>numberOnDice</var> is equal to 1 <strong>or</strong> if the value of <var id=numberOnDice>numberOnDice</var> is equal to 3 <strong>or</strong> if the value of <var id=numberOnDice>numberOnDice</var> is equal to 5. <strong>Hint:</strong> You'll need to use the OR operator (||) to do this.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=numberOnDice>numberOnDice</var> is equal to 2 <strong>or</strong> if the value of <var id=numberOnDice>numberOnDice</var> is equal to 4 <strong>or</strong> if the value of <var id=numberOnDice>numberOnDice</var> is equal to 6.</li></ol>",
          "boilerplate"   : "var numberOnDice = rollDice();\n\nif(?)\n{\n  displayDiceResult(\"odd\");\n}\nelse if(?)\n{\n  displayDiceResult(\"even\");\n}",
          "solution"      : "var numberOnDice = rollDice();\n\nif(numberOnDice == 1 || numberOnDice == 3 || numberOnDice == 5)\n{\n  displayDiceResult(\"odd\");\n}\nelse if(numberOnDice == 2 || numberOnDice == 4 || numberOnDice == 6)\n{\n  displayDiceResult(\"even\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or with if\">Using the OR Operator (||) with an If Statement</h3>\n<div class=\"text\">The <concept ref=\"or operator\">OR operator</concept> is often used with <concept ref=\"if statement\">if statements</concept> to check multiple <concept ref=\"condition\">conditions</concept> using a single if statement.</div><div class=\"text\">If at least one condition is <concept ref=\"boolean\">true</concept>, the code block will be executed.</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">if(holiday == true || temperature < -40)\n{\n  console.log(\"School is closed!\");\n}</pre>\n<div class=\"text\">If it is a holiday and the temperature is less than -40, then the school is closed</div><div class=\"text\">If it is a holiday but the temperature is not less than -40, the school is still closed</div><div class=\"text\">If it is not a holiday but the temperature is less than -40, the school is still closed</div><div class=\"text\">If it is not a holiday and the temperature is not less than -40, then the school is open</div>\n<h3 class=\"title\" ref=\"multiple or\">Using Multiple OR Operators in an Expression</h3>\n<div class=\"text\">We can use more than one <concept ref=\"or operator\">OR operator</concept> to check multiple conditions in a single expression. For the expression to be <concept ref=\"boolean\">true</concept>, at least one condition needs to also be true. If even one condition is true, the overall expression will be true.</div>\n<div class=\"code-sample-title\">Example of multiple OR operators</div><pre class=\"codeBlock\">if(holiday == true || temperature < -40 || weekend == true)\n{\n  console.log(\"School is closed!\");\n}</pre>\n<div class=\"text\">If it is a holiday and the temperature is less than -40 and it is the weekend, then the school is closed</div><div class=\"text\">If it is not a holiday, but the temperature is less than -40 and it is the weekend, then the school is still closed</div><div class=\"text\">If it is a holiday, but the temperature is not less than -40 and it is the weekend, then the school is still closed</div><div class=\"text\">If it is a holiday, but the temperature is not less than -40 and it is not the weekend, then the school is still closed</div><div class=\"text\">If it is not a holiday and the temperature is not less than -40 and it is not the weekend, then the school is open</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-164",
          "name"          : "Our Business Hours",
          "normalizedName": "our business hours",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to manage a store's business hours. The store is closed if it's earlier than 9am or later than 6pm. Also, the store is closed if it's Saturday or Sunday. To simplify the program, we'll represent the hours on a 24-hour time format. For example, 6pm will be represented by 18:00.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=timeOfDay>timeOfDay</var> is less than 9 <strong>or</strong> if the value of <var id=timeOfDay>timeOfDay</var> is greater than 18. <strong>Hint:</strong> You'll need to use the OR operator (||) to do this.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=dayOfWeek>dayOfWeek</var> is equal to <string>\"Saturday\"</string> <strong>or</strong> if the value of <var id=dayOfWeek>dayOfWeek</var> is equal to <string>\"Sunday\"</string>.</li></ol>",
          "boilerplate"   : "var timeOfDay = getHourOfDay();\nvar dayOfWeek = getWeekDay();\n\nif((?) || (?))\n{\n  storeStatus(\"closed\");\n}\nelse\n{\n  storeStatus(\"open\");\n}",
          "solution"      : "var timeOfDay = getHourOfDay();\nvar dayOfWeek = getWeekDay();\n\nif((timeOfDay < 9 || timeOfDay > 18) || (dayOfWeek == \"Saturday\" || dayOfWeek == \"Sunday\"))\n{\n  storeStatus(\"closed\");\n}\nelse\n{\n  storeStatus(\"open\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or with if\">Using the OR Operator (||) with an If Statement</h3>\n<div class=\"text\">The <concept ref=\"or operator\">OR operator</concept> is often used with <concept ref=\"if statement\">if statements</concept> to check multiple <concept ref=\"condition\">conditions</concept> using a single if statement.</div><div class=\"text\">If at least one condition is <concept ref=\"boolean\">true</concept>, the code block will be executed.</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">if(holiday == true || temperature < -40)\n{\n  console.log(\"School is closed!\");\n}</pre>\n<div class=\"text\">If it is a holiday and the temperature is less than -40, then the school is closed</div><div class=\"text\">If it is a holiday but the temperature is not less than -40, the school is still closed</div><div class=\"text\">If it is not a holiday but the temperature is less than -40, the school is still closed</div><div class=\"text\">If it is not a holiday and the temperature is not less than -40, then the school is open</div>\n<h3 class=\"title\" ref=\"multiple or\">Using Multiple OR Operators in an Expression</h3>\n<div class=\"text\">We can use more than one <concept ref=\"or operator\">OR operator</concept> to check multiple conditions in a single expression. For the expression to be <concept ref=\"boolean\">true</concept>, at least one condition needs to also be true. If even one condition is true, the overall expression will be true.</div>\n<div class=\"code-sample-title\">Example of multiple OR operators</div><pre class=\"codeBlock\">if(holiday == true || temperature < -40 || weekend == true)\n{\n  console.log(\"School is closed!\");\n}</pre>\n<div class=\"text\">If it is a holiday and the temperature is less than -40 and it is the weekend, then the school is closed</div><div class=\"text\">If it is not a holiday, but the temperature is less than -40 and it is the weekend, then the school is still closed</div><div class=\"text\">If it is a holiday, but the temperature is not less than -40 and it is the weekend, then the school is still closed</div><div class=\"text\">If it is a holiday, but the temperature is not less than -40 and it is not the weekend, then the school is still closed</div><div class=\"text\">If it is not a holiday and the temperature is not less than -40 and it is not the weekend, then the school is open</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-165",
          "name"          : "Root of All Languages",
          "normalizedName": "root of all languages",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Languages are very old and often have a long and complex history. Modern languages, such as English, come from an older language, often called the root of a language. Let's create a program that can take a language and inform us of its root.</div><ul class=algorithm><li><strong>German, English and Dutch</strong> share a <strong>West Germanic</strong> root.</li><li><strong>Danish, Swedish and Norwegian</strong> share a <strong>North Germanic</strong> root.</li><li><strong>French, Italian, Portuguese and Spanish</strong> share a <strong>Italic Romance</strong> root.</li><li><strong>Russian, Polish, Czech and Slovak</strong> share a <strong>Slavic</strong> root.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an else if statement. The condition of this else if statement should check if the value of <var id=language>language</var> is equal to <string>\"Danish\"</string> <strong>or</strong> <string>\"Swedish\"</string> <strong>or</strong> <string>\"Norwegian\"</string>. Inside the code block of this else if statement, use the <concept ref=displayLanguageRoot>displayLanguageRoot(<string>\"North Germanic\"</string>)</concept> instruction.</li><li class=code-item>Replace the second question mark with an else if statement. The condition of this else if statement should check if the value of <var id=language>language</var> is equal to <string>\"French\"</string> <strong>or</strong> <string>\"Italian\"</string> <strong>or</strong> <string>\"Portuguese\"</string> <strong>or</strong> <string>\"Spanish\"</string>. Inside the code block of this else if statement, use the <concept ref=displayLanguageRoot>displayLanguageRoot(<string>\"Italic Romance\"</string>)</concept> instruction.</li><li class=code-item>Replace the third question mark with an else if statement. The condition of this else if statement should check if the value of <var id=language>language</var> is equal to <string>\"Russian\"</string> <strong>or</strong> <string>\"Polish\"</string> <strong>or</strong> <string>\"Czech\"</string> <strong>or</strong> <string>\"Slovak\"</string>. Inside the code block of this else if statement, use the <concept ref=displayLanguageRoot>displayLanguageRoot(<string>\"Slavic\"</string>)</concept> instruction.</li></ol>",
          "boilerplate"   : "var language = getRandomLanguage();\n\nif (language == \"German\" || language == \"English\" || language == \"Dutch\")\n{\n  displayLanguageRoot(\"West Germanic\");\n}\n// Check if the language is Danish, Swedish or Norwegian\n?\n\n// Check if the language is French, Italian, Portuguese or Spanish\n?\n\n// Check if the language is Russian, Polish, Czech or Slovak\n?",
          "solution"      : "var language = getRandomLanguage();\n\nif (language == \"German\" || language == \"English\" || language == \"Dutch\")\n{\n  displayLanguageRoot(\"West Germanic\");\n}\n// Check if the language is Danish, Swedish or Norwegian\nelse if (language == \"Danish\" || language == \"Swedish\" || language == \"Norwegian\")\n{\n  displayLanguageRoot(\"North Germanic\");\n}\n// Check if the language is French, Italian, Portuguese or Spanish\nelse if (language == \"French\" || language == \"Italian\" || language == \"Portuguese\" || language == \"Spanish\")\n{\n  displayLanguageRoot(\"Italic Romance\");\n}\n// Check if the language is Russian, Polish, Czech or Slovak\nelse if (language == \"Russian\" || language == \"Polish\" || language == \"Czech\" || language == \"Slovak\")\n{\n  displayLanguageRoot(\"Slavic\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or with if\">Using the OR Operator (||) with an If Statement</h3>\n<div class=\"text\">The <concept ref=\"or operator\">OR operator</concept> is often used with <concept ref=\"if statement\">if statements</concept> to check multiple <concept ref=\"condition\">conditions</concept> using a single if statement.</div><div class=\"text\">If at least one condition is <concept ref=\"boolean\">true</concept>, the code block will be executed.</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">if(holiday == true || temperature < -40)\n{\n  console.log(\"School is closed!\");\n}</pre>\n<div class=\"text\">If it is a holiday and the temperature is less than -40, then the school is closed</div><div class=\"text\">If it is a holiday but the temperature is not less than -40, the school is still closed</div><div class=\"text\">If it is not a holiday but the temperature is less than -40, the school is still closed</div><div class=\"text\">If it is not a holiday and the temperature is not less than -40, then the school is open</div>\n<h3 class=\"title\" ref=\"multiple or\">Using Multiple OR Operators in an Expression</h3>\n<div class=\"text\">We can use more than one <concept ref=\"or operator\">OR operator</concept> to check multiple conditions in a single expression. For the expression to be <concept ref=\"boolean\">true</concept>, at least one condition needs to also be true. If even one condition is true, the overall expression will be true.</div>\n<div class=\"code-sample-title\">Example of multiple OR operators</div><pre class=\"codeBlock\">if(holiday == true || temperature < -40 || weekend == true)\n{\n  console.log(\"School is closed!\");\n}</pre>\n<div class=\"text\">If it is a holiday and the temperature is less than -40 and it is the weekend, then the school is closed</div><div class=\"text\">If it is not a holiday, but the temperature is less than -40 and it is the weekend, then the school is still closed</div><div class=\"text\">If it is a holiday, but the temperature is not less than -40 and it is the weekend, then the school is still closed</div><div class=\"text\">If it is a holiday, but the temperature is not less than -40 and it is not the weekend, then the school is still closed</div><div class=\"text\">If it is not a holiday and the temperature is not less than -40 and it is not the weekend, then the school is open</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-166",
          "name"          : "Please, Close the School!",
          "normalizedName": "please close the school!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>This program helps school administrators make a decision whether school should be closed or not. Currently, the program uses 3 if statements to check 3 different conditions. This program can be simplified by combining all the conditions into a single condition. Can you simplify the program so that there are no more than one if statement in the code?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Simplify the program by combining all three conditions into a single condition. Your program should contain no more than one if statement and one else statement!</li></ol>",
          "boilerplate"   : "var isProfessionalLearningDay = getIsProfessionalLearningDay();\nvar isSnowing = getIsSnowing();\nvar isFreezingTemperature = getIsFreezingTemperature();\n\nif(isProfessionalLearningDay == true)\n{\n  schoolStatus(\"closed\");\n}\nelse if(isSnowing == true)\n{\n  schoolStatus(\"closed\");\n}\nelse if(isFreezingTemperature == true)\n{\n  schoolStatus(\"closed\");\n}\nelse\n{\n  schoolStatus(\"open\");\n}",
          "solution"      : "var isProfessionalLearningDay = getIsProfessionalLearningDay();\nvar isSnowing = getIsSnowing();\nvar isFreezingTemperature = getIsFreezingTemperature();\n\nif(isProfessionalLearningDay == true || isSnowing == true || isFreezingTemperature == true)\n{\n  schoolStatus(\"closed\");\n}\n\nelse\n{\n  schoolStatus(\"open\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or with if\">Using the OR Operator (||) with an If Statement</h3>\n<div class=\"text\">The <concept ref=\"or operator\">OR operator</concept> is often used with <concept ref=\"if statement\">if statements</concept> to check multiple <concept ref=\"condition\">conditions</concept> using a single if statement.</div><div class=\"text\">If at least one condition is <concept ref=\"boolean\">true</concept>, the code block will be executed.</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">if(holiday == true || temperature < -40)\n{\n  console.log(\"School is closed!\");\n}</pre>\n<div class=\"text\">If it is a holiday and the temperature is less than -40, then the school is closed</div><div class=\"text\">If it is a holiday but the temperature is not less than -40, the school is still closed</div><div class=\"text\">If it is not a holiday but the temperature is less than -40, the school is still closed</div><div class=\"text\">If it is not a holiday and the temperature is not less than -40, then the school is open</div>\n<h3 class=\"title\" ref=\"boolean\">Booleans</h3>\n<div class=\"text\">Booleans are a <concept ref=\"data type\">data type</concept> with only two possible values: true or false.</div><div class=\"text\">Any expression using a <concept ref=\"relational operators\">relational operator</concept> will return a Boolean value.</div>\n<div class=\"code-sample-title\">Example of Boolean values</div><pre class=\"codeBlock\">var iLikeCereals = true;\nvar isGreaterThan18 = 10 > 18; // isGreaterThan18 will be false\nvar age = 19;\nvar ageIsGreaterThan18 = age > 18; // ageIsGreaterThan18 will be true</pre>\n<h3 class=\"title\" ref=\"multiple or\">Using Multiple OR Operators in an Expression</h3>\n<div class=\"text\">We can use more than one <concept ref=\"or operator\">OR operator</concept> to check multiple conditions in a single expression. For the expression to be <concept ref=\"boolean\">true</concept>, at least one condition needs to also be true. If even one condition is true, the overall expression will be true.</div>\n<div class=\"code-sample-title\">Example of multiple OR operators</div><pre class=\"codeBlock\">if(holiday == true || temperature < -40 || weekend == true)\n{\n  console.log(\"School is closed!\");\n}</pre>\n<div class=\"text\">If it is a holiday and the temperature is less than -40 and it is the weekend, then the school is closed</div><div class=\"text\">If it is not a holiday, but the temperature is less than -40 and it is the weekend, then the school is still closed</div><div class=\"text\">If it is a holiday, but the temperature is not less than -40 and it is the weekend, then the school is still closed</div><div class=\"text\">If it is a holiday, but the temperature is not less than -40 and it is not the weekend, then the school is still closed</div><div class=\"text\">If it is not a holiday and the temperature is not less than -40 and it is not the weekend, then the school is open</div>"
        },
        {
          "_id"           : "cs-1_en-CA_project-18",
          "name"          : "Project 18 - That's a Strange Triangle",
          "normalizedName": "project 18 - thats a strange triangle",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-167",
          "name"          : "What Are the Angles?",
          "normalizedName": "what are the angles",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-167_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-167_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first three question marks with three new variables, <var id=A>A</var>, <var id=B>B</var>, and <var id=C>C</var>. Assign to each of these variables the value returned by the instructions <concept ref=getAngle>getAngle(<string>\"A\"</string>)</concept>, <concept ref=getAngle>getAngle(<string>\"B\"</string>)</concept>, and <concept ref=getAngle>getAngle(<string>\"C\"</string>)</concept>.</li><li class=code-item>Replace the fourth question mark with an if statement. The condition of this if statement should check if the sum of <var id=A>A</var> plus <var id=B>B</var> plus <var id=C>C</var> is <strong>NOT equal</strong> to 180. Inside the code block of this if statement, use the <concept ref=identifyTriangle>identifyTriangle(<string>\"invalid\"</string>)</concept> instruction.</li></ol>",
          "boilerplate"   : "// Get the angles\n?\n?\n?\n\n// Check if the sum of the angles is NOT equal to 180\n?",
          "solution"      : "// Get the angles\nvar A = getAngle(\"A\");\nvar B = getAngle(\"B\");\nvar C = getAngle(\"C\");\n\n// Check if the sum of the angles is NOT equal to 180\nif(A + B + C != 180)\n{\n  identifyTriangle(\"invalid\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-168",
          "name"          : "It's an Equilateral Triangle",
          "normalizedName": "its an equilateral triangle",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-168_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-168_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Add an else if statement to the existing if statement. The condition of this else if statement should verify if the value of <var id=A>A</var> is equal to the value of B <strong>AND</strong> if the value of <var id=B>B</var> is equal to the value of <var id=C>C</var>. Inside the code block of this else if statement, use the <concept ref=identifyTriangle>identifyTriangle(<string>\"equilateral\"</string>)</concept> instruction.</li></ol>",
          "boilerplate"   : "var A = getAngle(\"A\");\nvar B = getAngle(\"B\");\nvar C = getAngle(\"C\");\n\nif(A + B + C != 180)\n{\n  identifyTriangle(\"invalid\");\n}\n// Check if the triangle is equilateral\n?",
          "solution"      : "var A = getAngle(\"A\");\nvar B = getAngle(\"B\");\nvar C = getAngle(\"C\");\n\nif(A + B + C != 180)\n{\n  identifyTriangle(\"invalid\");\n}\n// Check if the triangle is equilateral\nelse if((A == B) && (B == C))\n{\n  identifyTriangle(\"equilateral\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"and operator\">AND Operator (&amp;&amp;)</h3>\n<div class=\"text\">The AND operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if two or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the AND operator will only be true if all the conditions that make up the expression are true.</div><div class=\"text\">The operator is represented using two ampersand symbols (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Example of the AND operator</div><pre class=\"codeBlock\">var result = true && true; // result is true\nresult = false && true; // result is false\nresult = true && false; // result is false\nresult = false && false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-169",
          "name"          : "It's an Isosceles Triangle",
          "normalizedName": "its an isosceles triangle",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Add an else if statement to the existing if statement. The condition for this else if statement should verify if the value of <var id=A>A</var> is equal to the value of <var id=B>B</var> <strong>OR</strong> if the value of <var id=A>A</var> is equal to the value of <var id=C>C</var> <strong>OR</strong> if the value of <var id=B>B</var> is equal to the value of <var id=C>C</var>. Inside the code block of this else if statement, use the <concept ref=identifyTriangle>identifyTriangle(<string>\"isosceles\"</string>)</concept> instruction.</li></ol>",
          "boilerplate"   : "var A = getAngle(\"A\");\nvar B = getAngle(\"B\");\nvar C = getAngle(\"C\");\n\nif(A + B + C != 180)\n{\n  identifyTriangle(\"invalid\");\n}\nelse if((A == B) && (B == C))\n{\n  identifyTriangle(\"equilateral\");\n}\n// Check if the triangle is isosceles\n?",
          "solution"      : "var A = getAngle(\"A\");\nvar B = getAngle(\"B\");\nvar C = getAngle(\"C\");\n\nif(A + B + C != 180)\n{\n  identifyTriangle(\"invalid\");\n}\nelse if((A == B) && (B == C))\n{\n  identifyTriangle(\"equilateral\");\n}\n// Check if the triangle is isosceles\nelse if ((A == B) || (A == C) || (B == C))\n{\n  identifyTriangle(\"isosceles\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>\n<h3 class=\"title\" ref=\"or operator\">Using the OR Operator (||)</h3>\n<div class=\"text\">The OR operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if at least one or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the OR operator will be true if at least one condition that makes up the expression is true.</div><div class=\"text\">The operator is represented using two vertical bars (||).</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">var result = true || true; // result is true\nresult = false || true; // result is true\nresult = true || false; // result is true\nresult = false || false; // result is false</pre>\n<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-170",
          "name"          : "It's a Scalene Triangle",
          "normalizedName": "its a scalene triangle",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-170_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-170_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Add an else statement to the existing if statement. Inside the code block of this else statement, use the <concept ref=identifyTriangle>identifyTriangle(<string>\"scalene\"</string>)</concept> instruction.</li></ol>",
          "boilerplate"   : "var A = getAngle(\"A\");\nvar B = getAngle(\"B\");\nvar C = getAngle(\"C\");\n\nif(A + B + C != 180)\n{\n  identifyTriangle(\"invalid\");\n}\nelse if((A == B) && (B == C))\n{\n  identifyTriangle(\"equilateral\");\n}\nelse if ((A == B) || (A == C) || (B == C))\n{\n  identifyTriangle(\"isosceles\");\n}\n// Add an else statement here\n?",
          "solution"      : "var A = getAngle(\"A\");\nvar B = getAngle(\"B\");\nvar C = getAngle(\"C\");\n\nif(A + B + C != 180)\n{\n  identifyTriangle(\"invalid\");\n}\nelse if((A == B) && (B == C))\n{\n  identifyTriangle(\"equilateral\");\n}\nelse if ((A == B) || (A == C) || (B == C))\n{\n  identifyTriangle(\"isosceles\");\n}\n// Add an else statement here\nelse\n{\n  identifyTriangle(\"scalene\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else statement\">Else Statement</h3>\n<div class=\"text\">An else statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add an additional <concept ref=\"code block\">code block</concept>. The code block controlled by the else statement is only executed if the <concept ref=\"condition\">condition</concept> of the if statement is <concept ref=\"boolean\">false</concept>.</div><div class=\"text\">Note that the else statement does not have a condition of its own, and cannot be used without an if statement.</div>\n<div class=\"code-sample-title\">Example of an else statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // this condition will control both code blocks\n{\n  // will only execute if money is greater than 5\n  console.log(\"You can buy the game!\");\n}\nelse // notice that there is no condition here\n{\n  // will only execute if money is NOT greater than 5\n  console.log(\"You don't have enough money to buy the game!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-171",
          "name"          : "Sorting Some Lobsters",
          "normalizedName": "sorting some lobsters",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Lobsters are large crustaceans that are enjoyed throughout the world as a delicacy. To be sold, a lobster's shell must be of a specific size. Lobsters that are less than 8.255 cm in length or more than 12.70 cm cannot be sold in stores. Let's build a program to control the quality of lobsters.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with an if statement. The condition of this if statement should check if the value of <var id=lobsterSize>lobsterSize</var> is less than 8.255 <strong>or</strong> if the value of <var id=lobsterSize>lobsterSize</var> is greater than 12.70. Inside the code block of this if statement, use the <concept ref=lobsterQuality>lobsterQuality(<string>\"bad\"</string>)</concept> instruction.</li></ol>",
          "boilerplate"   : "var lobsterSize = getLobsterSize();\n\n?\n\nelse\n{\n  lobsterQuality(\"good\");\n}",
          "solution"      : "var lobsterSize = getLobsterSize();\n\nif(lobsterSize < 8.255 || lobsterSize > 12.70)\n{\n  lobsterQuality(\"bad\");\n}\nelse\n{\n  lobsterQuality(\"good\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or operator\">Using the OR Operator (||)</h3>\n<div class=\"text\">The OR operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if at least one or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the OR operator will be true if at least one condition that makes up the expression is true.</div><div class=\"text\">The operator is represented using two vertical bars (||).</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">var result = true || true; // result is true\nresult = false || true; // result is true\nresult = true || false; // result is true\nresult = false || false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-172",
          "name"          : "We Require More Minerals!",
          "normalizedName": "we require more minerals!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Almahna Industries is a company that runs a mining industry. They want us to help them program one of their safety systems. When mining, a common problem is the rising level of underground water. To solve this problem, pumps can siphon out the water. However, the pumps cannot always be activated because they release toxins in the air. To solve this other problem, an air exchanger is also installed in the mines. These two systems can never be active at the same time and for this reason, we must use an algorithm to determine which system should be active. Below are the conditions for when each device is activated:</div><ul class=algorithm><li>If the level of toxins in the air is over 60%, the air exchanger activates.</li><li>If the water level is over 3 meters, the water pump activates.</li></ul><div class=text>Can you complete the program?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=airToxinsLevel>airToxinsLevel</var> is less than or equal to 60 <strong>and</strong> if the value of <var id=waterLevel>waterLevel</var> is greater than 3.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=airToxinsLevel>airToxinsLevel</var> is greater than 60 <strong>or</strong> if the value of <var id=waterLevel>waterLevel</var> is less than 1.</li></ol>",
          "boilerplate"   : "var airToxinsLevel = getToxinsLevel();\nvar waterLevel = getWaterLevel();\n\nif(airToxinsLevel > 60)\n{\n  airExchanger(\"on\");\n}\nelse\n{\n  airExchanger(\"off\");\n}\n\n// Add a condition to check when the pump\n// should be turned ON\nif(?)\n{\n  waterPump(\"on\");\n}\n\n// Add a condition to check when the pump\n// should be turned OFF\nif(?)\n{\n  waterPump(\"off\");\n}",
          "solution"      : "var airToxinsLevel = getToxinsLevel();\nvar waterLevel = getWaterLevel();\n\nif(airToxinsLevel > 60)\n{\n  airExchanger(\"on\");\n}\nelse\n{\n  airExchanger(\"off\");\n}\n\n// Add a condition to check when the pump\n// should be turned ON\nif(airToxinsLevel <= 60 && waterLevel > 3)\n{\n  waterPump(\"on\");\n}\n\n// Add a condition to check when the pump\n// should be turned OFF\nif(airToxinsLevel > 60 || waterLevel < 1)\n{\n  waterPump(\"off\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Using the AND Operator to Represent an Interval</h3>\n<div class=\"text\">We cannot represent intervals in a program in the same way we would in mathematics. Instead, we have to break down the interval in two parts and combine them with the <concept ref=\"and operator\">AND operator</concept>.</div><div class=\"text\">The following example is the correct way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of a valid interval with the AND operator</div><pre class=\"codeBlock\">if(1 <= myNumber && myNumber <= 10) // valid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<div class=\"text\">The following example is an incorrect way to represent an interval in a program.</div>\n<div class=\"code-sample-title\">Example of an invalid representation of an interval in a program</div><pre class=\"codeBlock\">if(1 <= myNumber <= 10) // invalid\n{\n  console.log(\"The number is between 1 and 10\");\n}</pre>\n<h3 class=\"title\" ref=\"or operator\">Using the OR Operator (||)</h3>\n<div class=\"text\">The OR operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if at least one or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the OR operator will be true if at least one condition that makes up the expression is true.</div><div class=\"text\">The operator is represented using two vertical bars (||).</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">var result = true || true; // result is true\nresult = false || true; // result is true\nresult = true || false; // result is true\nresult = false || false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-173",
          "name"          : "How Many Days Are In...",
          "normalizedName": "how many days are in...",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Months can have either 31 days or 30 days, with the exception of February which has 28 days (or 29 on a leap year). Let's build a program to help us remember how many days are in each month.</div><ul class=algorithm><li>The months with <strong>31 days</strong> are: January, March, May, July, August, October, December.</li><li>The months with <strong>30 days</strong> are: April, June, September, November.</li><li>The only month with <strong>28 days</strong> is February.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=month>month</var> is equal to <string>\"January\"</string> <strong>or</strong> <string>\"March\"</string> <strong>or</strong> <string>\"May\"</string> <strong>or</strong> <string>\"July\"</string> <strong>or</strong> <string>\"August\"</string> <strong>or</strong> <string>\"October\"</string> <strong>or</strong> <string>\"December\"</string>.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=month>month</var> is equal to <string>\"April\"</string> <strong>or</strong> <string>\"June\"</string> <strong>or</strong> <string>\"September\"</string> <strong>or</strong> <string>\"November\"</string>.</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=month>month</var> is equal to <string>\"February\"</string>.</li><li class=code-item>Don't forget to use uppercase letters at the beginning of the name of each month!</li></ol>",
          "boilerplate"   : "var month = getMonth();\n\nif(?)\n{\n  daysPerMonth(month, 31);\n}\nelse if(?)\n{\n  daysPerMonth(month, 30);\n}\nelse if(?)\n{\n  daysPerMonth(month, 28);\n}",
          "solution"      : "var month = getMonth();\n\nif(month == \"January\" || month == \"March\" || month == \"May\" || month == \"July\" || month == \"August\" || month == \"October\" || month == \"December\")\n{\n  daysPerMonth(month, 31);\n}\nelse if(month == \"April\" || month == \"June\" || month == \"September\" || month == \"November\")\n{\n  daysPerMonth(month, 30);\n}\nelse if(month == \"February\")\n{\n  daysPerMonth(month, 28);\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"or operator\">Using the OR Operator (||)</h3>\n<div class=\"text\">The OR operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if at least one or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the OR operator will be true if at least one condition that makes up the expression is true.</div><div class=\"text\">The operator is represented using two vertical bars (||).</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">var result = true || true; // result is true\nresult = false || true; // result is true\nresult = true || false; // result is true\nresult = false || false; // result is false</pre>\n<h3 class=\"title\" ref=\"multiple or\">Using Multiple OR Operators in an Expression</h3>\n<div class=\"text\">We can use more than one <concept ref=\"or operator\">OR operator</concept> to check multiple conditions in a single expression. For the expression to be <concept ref=\"boolean\">true</concept>, at least one condition needs to also be true. If even one condition is true, the overall expression will be true.</div>\n<div class=\"code-sample-title\">Example of multiple OR operators</div><pre class=\"codeBlock\">if(holiday == true || temperature < -40 || weekend == true)\n{\n  console.log(\"School is closed!\");\n}</pre>\n<div class=\"text\">If it is a holiday and the temperature is less than -40 and it is the weekend, then the school is closed</div><div class=\"text\">If it is not a holiday, but the temperature is less than -40 and it is the weekend, then the school is still closed</div><div class=\"text\">If it is a holiday, but the temperature is not less than -40 and it is the weekend, then the school is still closed</div><div class=\"text\">If it is a holiday, but the temperature is not less than -40 and it is not the weekend, then the school is still closed</div><div class=\"text\">If it is not a holiday and the temperature is not less than -40 and it is not the weekend, then the school is open</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-174",
          "name"          : "Spot the Vertebrate",
          "normalizedName": "spot the vertebrate",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's help a biology professor by creating an application that can identify various vertebrates. Vertebrates are creatures with a backbone. Here is the classification that we'll be using.</div><ul class=algorithm><li><strong>Mammals</strong> have a <string>\"hairy\"</string> skin, <strong>4</strong> legs and <strong>no</strong> fins.</li><li><strong>Birds</strong> have <string>\"feathers\"</string> for skin, <strong>2</strong> legs and <strong>no</strong> fins.</li><li><strong>Reptiles</strong> have <string>\"scales\"</string> for skin, <strong>0 or 4</strong> legs and <strong>no</strong> fins.</li><li><strong>Amphibians</strong> have <string>\"naked\"</string> skin, <strong>4</strong> legs and <strong>no</strong> fins.</li><li><strong>Fishes</strong> have <string>\"scales\"</string> for skin, <strong>0</strong> legs and <strong>have</strong> fins.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=skin>skin</var> is equal to <string>\"feathers\"</string> <strong>and</strong> if the value of <var id=legs>legs</var> is equal to 2 <strong>and</strong> if the value of <var id=fins>fins</var> is equal to <strong>false</strong>.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=skin>skin</var> is equal to <string>\"scales\"</string> <strong>and</strong> if the value of <var id=legs>legs</var> is equal to 0 or 4 <strong>and</strong> if the value of <var id=fins>fins</var> is equal to <strong>false</strong>.</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=skin>skin</var> is equal to <string>\"naked\"</string> <strong>and</strong> if the value of <var id=legs>legs</var> is equal to 4 <strong>and</strong> if the value of <var id=fins>fins</var> is equal to <strong>false</strong>.</li><li class=code-item>Replace the fourth question mark with a condition to check if the value of <var id=skin>skin</var> is equal to <string>\"scales\"</string> <strong>and</strong> if the value of <var id=legs>legs</var> is equal to 0 <strong>and</strong> if the value of <var id=fins>fins</var> is equal to <strong>true</strong>.</li></ol>",
          "boilerplate"   : "var skin = getSkinType();\nvar legs = getCreatureLegs();\nvar fins = hasFins();\n\nif(skin == \"hairy\" && legs == 4 && fins == false)\n{\n  identifyCreature(\"mammal\");\n}\nelse if(?)\n{\n  identifyCreature(\"bird\");\n}\nelse if(?)\n{\n  identifyCreature(\"reptile\");\n}\nelse if(?)\n{\n  identifyCreature(\"amphibian\");\n}\nelse if(?)\n{\n  identifyCreature(\"fish\");\n}\nelse\n{\n  identifyCreature(\"strange creature\");\n}",
          "solution"      : "var skin = getSkinType();\nvar legs = getCreatureLegs();\nvar fins = hasFins();\n\nif(skin == \"hairy\" && legs == 4 && fins == false)\n{\n  identifyCreature(\"mammal\");\n}\nelse if(skin == \"feathers\" && legs == 2 && fins == false)\n{\n  identifyCreature(\"bird\");\n}\nelse if(skin == \"scales\" && (legs == 0 || legs == 4) && fins == false)\n{\n  identifyCreature(\"reptile\");\n}\nelse if(skin == \"naked\" && legs == 4 && fins == false)\n{\n  identifyCreature(\"amphibian\");\n}\nelse if(skin == \"scales\" && legs == 0 && fins == true)\n{\n  identifyCreature(\"fish\");\n}\nelse\n{\n  identifyCreature(\"strange creature\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"and operator\">AND Operator (&amp;&amp;)</h3>\n<div class=\"text\">The AND operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if two or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the AND operator will only be true if all the conditions that make up the expression are true.</div><div class=\"text\">The operator is represented using two ampersand symbols (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Example of the AND operator</div><pre class=\"codeBlock\">var result = true && true; // result is true\nresult = false && true; // result is false\nresult = true && false; // result is false\nresult = false && false; // result is false</pre>\n<h3 class=\"title\" ref=\"or operator\">Using the OR Operator (||)</h3>\n<div class=\"text\">The OR operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if at least one or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the OR operator will be true if at least one condition that makes up the expression is true.</div><div class=\"text\">The operator is represented using two vertical bars (||).</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">var result = true || true; // result is true\nresult = false || true; // result is true\nresult = true || false; // result is true\nresult = false || false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-175",
          "name"          : "Your Horoscope",
          "normalizedName": "your horoscope",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Horoscopes are forecasts of people's future using their astrological sign. Astrological signs are based on the day a person is born. Let's build a program to display the user their astrological sign based on their birthday. Use the following table to determine the sign of a user:</div><table><thead><tr><th>Astrological Sign</th><th>Date Range</th></tr></thead><tbody><tr><td>Capricorn</td><td>December 22 to January 19</td></tr><tr><td>Aquarius</td><td>January 20 to February 18</td></tr><tr><td>Pisces</td><td>February 19 to March 20</td></tr><tr><td>Aries</td><td>March 21 to April 19</td></tr><tr><td>Taurus</td><td>April 20 to May 20</td></tr><tr><td>Gemini</td><td>May 21 to June 20</td></tr><tr><td>Cancer</td><td>June 21 to July 22</td></tr><tr><td>Leo</td><td>July 23 to August 22</td></tr><tr><td>Virgo</td><td>August 23 to September 22</td></tr><tr><td>Libra</td><td>September 23 to October 22</td></tr><tr><td>Scorpio</td><td>October 23 to November 21</td></tr><tr><td>Sagittarius</td><td>November 22 to December 21</td></tr></tbody></table></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the user's birth date is between January 20 and February 18.</li><li class=code-item>Replace the second question mark with a condition to check if the user's birth date is between February 19 and March 20.</li><li class=code-item>Replace the third question mark with a condition to check if the user's birth date is between March 21 and April 19.</li><li class=code-item>Replace the fourth question mark with a condition to check if the user's birth date is between April 20 and May 20.</li><li class=code-item>Replace the fifth question mark with a condition to check if the user's birth date is between May 21 and June 20.</li><li class=code-item>Replace the sixth question mark with a condition to check if the user's birth date is between June 21 and July 22.</li><li class=code-item>Don't forget to use uppercase letters at the beginning of the name of each month!</li></ol>",
          "boilerplate"   : "var month = getMonth();\nvar day = getDayOfMonth();\n\nif((month == \"December\" && day >= 22) || (month == \"January\" && day <= 19))\n{\n  displayHoroscope(\"Capricorn\");\n}\nelse if(?)\n{\n  displayHoroscope(\"Aquarius\");\n}\nelse if(?)\n{\n  displayHoroscope(\"Pisces\");\n}\nelse if(?)\n{\n  displayHoroscope(\"Aries\");\n}\nelse if(?)\n{\n  displayHoroscope(\"Taurus\");\n}\nelse if(?)\n{\n  displayHoroscope(\"Gemini\");\n}\nelse if(?)\n{\n  displayHoroscope(\"Cancer\");\n}\nelse if((month == \"July\" && day >= 23) || (month == \"August\" && day <= 22))\n{\n  displayHoroscope(\"Leo\");\n}\nelse if((month == \"August\" && day >= 23) || (month == \"September\" && day <= 22))\n{\n  displayHoroscope(\"Virgo\");\n}\nelse if((month == \"September\" && day >= 23) || (month == \"October\" && day <= 22))\n{\n  displayHoroscope(\"Libra\");\n}\nelse if((month == \"October\" && day >= 23) || (month == \"November\" && day <= 21))\n{\n  displayHoroscope(\"Scorpio\");\n}\nelse if((month == \"November\" && day >= 22) || (month == \"December\" && day <= 21))\n{\n  displayHoroscope(\"Sagittarius\");\n}",
          "solution"      : "var month = getMonth();\nvar day = getDayOfMonth();\n\nif((month == \"December\" && day >= 22) || (month == \"January\" && day <= 19))\n{\n  displayHoroscope(\"Capricorn\");\n}\nelse if((month == \"January\" && day >= 20) || (month == \"February\" && day <= 18))\n{\n  displayHoroscope(\"Aquarius\");\n}\nelse if((month == \"February\" && day >= 19) || (month == \"March\" && day <= 20))\n{\n  displayHoroscope(\"Pisces\");\n}\nelse if((month == \"March\" && day >= 21) || (month == \"April\" && day <= 19))\n{\n  displayHoroscope(\"Aries\");\n}\nelse if((month == \"April\" && day >= 20) || (month == \"May\" && day <= 20))\n{\n  displayHoroscope(\"Taurus\");\n}\nelse if((month == \"May\" && day >= 21) || (month == \"June\" && day <= 20))\n{\n  displayHoroscope(\"Gemini\");\n}\nelse if((month == \"June\" && day >= 21) || (month == \"July\" && day <= 22))\n{\n  displayHoroscope(\"Cancer\");\n}\nelse if((month == \"July\" && day >= 23) || (month == \"August\" && day <= 22))\n{\n  displayHoroscope(\"Leo\");\n}\nelse if((month == \"August\" && day >= 23) || (month == \"September\" && day <= 22))\n{\n  displayHoroscope(\"Virgo\");\n}\nelse if((month == \"September\" && day >= 23) || (month == \"October\" && day <= 22))\n{\n  displayHoroscope(\"Libra\");\n}\nelse if((month == \"October\" && day >= 23) || (month == \"November\" && day <= 21))\n{\n  displayHoroscope(\"Scorpio\");\n}\nelse if((month == \"November\" && day >= 22) || (month == \"December\" && day <= 21))\n{\n  displayHoroscope(\"Sagittarius\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"and operator\">AND Operator (&amp;&amp;)</h3>\n<div class=\"text\">The AND operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if two or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the AND operator will only be true if all the conditions that make up the expression are true.</div><div class=\"text\">The operator is represented using two ampersand symbols (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Example of the AND operator</div><pre class=\"codeBlock\">var result = true && true; // result is true\nresult = false && true; // result is false\nresult = true && false; // result is false\nresult = false && false; // result is false</pre>\n<h3 class=\"title\" ref=\"or operator\">Using the OR Operator (||)</h3>\n<div class=\"text\">The OR operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if at least one or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the OR operator will be true if at least one condition that makes up the expression is true.</div><div class=\"text\">The operator is represented using two vertical bars (||).</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">var result = true || true; // result is true\nresult = false || true; // result is true\nresult = true || false; // result is true\nresult = false || false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-009",
          "name"          : "Quiz 9",
          "description"   : "The OR Operator",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-009_q-01",
              "question": "<div>True or false. The double vertical bars (<code>||</code>) are called the <em>OR operator</em>.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-009_q-01_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "The double vertical bars are used as the <em>OR operator</em>."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-009_q-02",
              "question": "<div>Select all conditions that are evaluated to true, when <var>x</var> is equal to 5 and <var>y</var> is equal to 7.</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-009_q-02_a-01",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>x &gt; 0 &amp;&amp; x &lt; 10</code></pre>",
                  "explanation": "<code>x &gt; 0</code> is true, <code>x &lt; 10</code> is true. Since both are true, the overall expression is true."
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-009_q-02_a-02",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>x &gt; 0 || x &lt; 10</code></pre>",
                  "explanation": "<code>x &gt; 0</code> is true, <code>x &lt; 10</code> is true. Since at least one is true, the overall expression is true."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-02_a-03",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>y &gt; 5 &amp;&amp; y &gt; 10</code></pre>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-009_q-02_a-04",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>x &lt; 5 || y &gt; 5</code></pre>",
                  "explanation": "<code>x &lt; 5</code> is false, <code>y &gt; 5</code> is true. Since at least one is true, the overall expression is true."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-02_a-05",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>x != 5 || y != 7</code></pre>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-009_q-03",
              "question": "<div>Select the condition the represents the statement: \"The value of <var>myNumber</var> is less than 5, or greater than 15\".</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-03_a-01",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>(myNumber &gt; 5 || myNumber &lt; 15)</code></pre>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-03_a-02",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>(myNumber &lt; 5 &amp;&amp; myNumber &gt; 15)</code></pre>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-009_q-03_a-03",
                  "value"      : 2,
                  "answer"     : "<pre class=\"language-javascript\"><code>(myNumber &lt; 5 || myNumber &gt; 15)</code></pre>",
                  "explanation": "This condition checks if <var>myNumber</var> is less than 5 OR if <var>myNumber</var> is greater than 15."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-03_a-04",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>(myNumber &gt; 5 &amp;&amp; myNumber &lt; 15)</code></pre>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-009_q-04",
              "question": "<div>True or false. The AND operator and the OR operator can both be used in the same condition, like in the following example:</div>\n<pre class=\"language-javascript\"><code>((x &lt; 5 &amp;&amp; x &gt; 0) || (y &lt; 5 &amp;&amp; y &gt; 0))</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-009_q-04_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "A condition can contain any number of OR and AND operators. They can also be mixed within the same condition."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-009_q-05",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var temperature = 11;\n\nif(temperature &lt; 0 || temperature &gt; 35)\n{\n  console.log(\"The temperature is extreme\");\n}\nelse\n{\n  console.log(\"The temperature is normal\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>One message: <samp>The temperature is extreme</samp></div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-009_q-05_a-02",
                  "value"      : 2,
                  "answer"     : "<div>One message: <samp>The temperature is normal</samp></div>",
                  "explanation": "Since <code>temperature &lt; 0</code> is false and <code>temperature &gt; 35</code> is also false, the overall expression is false. The code block of the <code>else</code> statement is executed."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-05_a-03",
                  "value" : 0,
                  "answer": "<div>Two messages: <samp>The temperature is extreme</samp> and <samp>The temperature is normal</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-05_a-04",
                  "value" : 0,
                  "answer": "<div>No message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-009_q-06",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var money = 2.50;\nvar giftCard = 10.00;\n\nif(money &gt; 5 || giftCard &gt; 5)\n{\n  console.log(\"You can buy a slice of pizza\");\n}\nelse\n{\n  console.log(\"Sorry, you cannot buy a slice of pizza\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-009_q-06_a-01",
                  "value"      : 2,
                  "answer"     : "<div>One message: <samp>You can buy a slice of pizza</samp></div>",
                  "explanation": "Since <code>money &gt; 0</code> is false and <code>giftCard &gt; 5</code> is true, the overall expression is true. The code block of the <code>if</code> statement is executed."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>One message: <samp>Sorry, you cannot buy a slice of pizza</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>Two messages: <samp>You can buy a slice of pizza</samp> and <samp>Sorry, you cannot buy a slice of pizza</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>No message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-009_q-07",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var rainFall = 20;\nvar snowFall = 15;\n\nif((rainFall &gt; 0 &amp;&amp; rainFall &lt; 30) &amp;&amp; (snowFall &gt; 0 &amp;&amp; snowFall &lt; 20))\n{\n  console.log(\"It is safe to go outside today\");\n}\nelse\n{\n  console.log(\"Today is a good day to stay inside\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-009_q-07_a-01",
                  "value"      : 2,
                  "answer"     : "<div>One message: <samp>It is safe to go outside today</samp></div>",
                  "explanation": "Since <code>rainFall &gt; 0</code> and <code>rainFall &lt; 30</code> are true AND <code>snowFall &gt; 0</code> and <code>snowFall &lt; 20</code> are also true, the overall expression is true. The code block of the <code>if</code> statement is executed."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-07_a-02",
                  "value" : 0,
                  "answer": "<div>One message: <samp>Today is a good day to stay inside</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>Two messages: <samp>It is safe to go outside today</samp> and <samp>Today is a good day to stay inside</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-009_q-07_a-04",
                  "value" : 0,
                  "answer": "<div>No message</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 9",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_en-CA_exercise-267",
          "name"          : "While Loops",
          "normalizedName": "while loops",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-267_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-267_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-19",
          "name"          : "Project 19 - 3... 2... 1... Liftoff!",
          "normalizedName": "project 19 - 3... 2... 1... liftoff!",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-176",
          "name"          : "Ten… Nine… Eight…",
          "normalizedName": "ten nine eight",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-176_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-176_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Assign to the variable <var id=countdown>countdown</var> the value of 10.</li></ol>",
          "boilerplate"   : "var countdown = ?;\n\nwhile(countdown >= 1)\n{\n  displayCount(countdown);\n  countdown = countdown - 1;\n}\n\nliftOff();",
          "solution"      : "var countdown = 10;\n\nwhile(countdown >= 1)\n{\n  displayCount(countdown);\n  countdown = countdown - 1;\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-177",
          "name"          : "Start the Countdown!",
          "normalizedName": "start the countdown!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-177_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-177_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=countdown>countdown</var>. Assign to it the response from a <concept ref=prompt>prompt()</concept> asking the user: <string>\"How long is the countdown?\"</string>.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=countdown>countdown</var> the value of <var id=countdown>countdown</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=countdown>countdown</var> is greater than 0.</li></ol>",
          "boilerplate"   : "// Prompt the user for the duration of the countdown\n?\n// Convert countdown to a number\n?\n\nwhile(?)\n{\n  displayCount(countdown);\n  countdown = countdown - 1;\n}\n\nliftOff();",
          "solution"      : "// Prompt the user for the duration of the countdown\nvar countdown = prompt(\"How long is the countdown?\");\n// Convert countdown to a number\ncountdown = Number(countdown);\n\nwhile(countdown > 0)\n{\n  displayCount(countdown);\n  countdown = countdown - 1;\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"control variable\">Control Variables</h3>\n<div class=\"text\">Loops are controlled by a <concept ref=\"loops\">Boolean</concept> condition. We often refer to the <concept ref=\"variable\">variable</concept> used in the <concept ref=\"condition\">condition</concept> as the control variable.</div>\n<div class=\"code-sample-title\">Example of a control variable</div><pre class=\"codeBlock\">var count = 3;\nwhile(count > 0) // Here the control variable is named count\n{\n  console.log(count);\n  count = count - 1;\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-178",
          "name"          : "Reversing the Countdown",
          "normalizedName": "reversing the countdown",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's modify the countdown program so that it counts up instead of down. To do so, we'll use a while loop to count up to the value specified by the user.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=currentCount>currentCount</var> is less than or equal to the value of <var id=countLimit>countLimit</var>.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=currentCount>currentCount</var> the result of <var id=currentCount>currentCount</var> plus 1.</li></ol>",
          "boilerplate"   : "var countLimit = prompt(\"How long is the count?\");\ncountLimit = Number(countLimit);\n\nvar currentCount = 1;\n\nwhile(?)\n{\n  displayCount(currentCount);\n  ?\n}\n\nliftOff();",
          "solution"      : "var countLimit = prompt(\"How long is the count?\");\ncountLimit = Number(countLimit);\n\nvar currentCount = 1;\n\nwhile(currentCount <= countLimit)\n{\n  displayCount(currentCount);\n  currentCount = currentCount + 1;\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-179",
          "name"          : "Houston, We Have a Problem!",
          "normalizedName": "houston we have a problem!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-179_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-179_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Inside the code block of the while loop, and after the <concept ref=displayCount>displayCount()</concept> instruction, add an instruction to decrease the value of <var id=countdown>countdown</var> by 1. This instruction should be the last instruction of the code block.</li></ol>",
          "boilerplate"   : "var countdown = prompt(\"How long is the countdown?\");\ncountdown = Number(countdown);\n\nwhile(countdown > 0)\n{\n  displayCount(countdown);\n  \n}\n\nliftOff();",
          "solution"      : "var countdown = prompt(\"How long is the countdown?\");\ncountdown = Number(countdown);\n\nwhile(countdown > 0)\n{\n  displayCount(countdown);\n  countdown = countdown - 1;\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"infinite loop\">Infinite Loops</h3>\n<div class=\"text\">Infinite <concept ref=\"loops\">loops</concept> are a type of bug that happen when the <concept ref=\"condition\">condition</concept> of a loop can never be <concept ref=\"boolean\">false</concept>.</div>\n<div class=\"code-sample-title\">Example of an infinite loop</div><pre class=\"codeBlock\">var count = 3;\nwhile(count > 0)\n{\n  console.log(count);\n  // we are missing an instruction here to decrease\n  // the value of count (ex: count = count - 1;)\n}</pre>\n<div class=\"text\">In the above example, the value of the <concept ref=\"control variable\">control variable</concept> never changes and therefore the condition &quot;count &gt; 0&quot; is always true. This causes the loop to display the number 3 over and over.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-180",
          "name"          : "Stuck in a Countdown",
          "normalizedName": "stuck in a countdown",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-180_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-180_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Remove the semicolon after the Boolean condition of the while loop.</li></ol>",
          "boilerplate"   : "var countdown = prompt(\"How long is the countdown?\");\ncountdown = Number(countdown);\n\nwhile(countdown > 0);\n{\n  displayCount(countdown);\n  countdown = countdown - 1;\n}\n\nliftOff();",
          "solution"      : "var countdown = prompt(\"How long is the countdown?\");\ncountdown = Number(countdown);\n\nwhile(countdown > 0)\n{\n  displayCount(countdown);\n  countdown = countdown - 1;\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"infinite while loops semicolon\">Infinite While Loops Caused by Semicolons</h3>\n<div class=\"text\">Placing a semicolon after the <concept ref=\"boolean\">condition</concept> of a <concept ref=\"while loop\">while loop</concept> will cause an <concept ref=\"infinite loop\">infinite loop</concept>.</div><div class=\"text\">The computer will think the <concept ref=\"code block\">code block</concept> is empty, meaning that the value of the <concept ref=\"control variable\">control variable</concept> will never change.</div><div class=\"text\">For example, if you write the following code:</div>\n<div class=\"code-sample-title\">Example of an infinite loop caused by a semicolon</div><pre class=\"codeBlock\">var count = 3;\nwhile(count > 0); // notice the semicolon here\n{\n  console.log(count);\n  count = count - 1;\n}</pre>\n<div class=\"text\">The computer will understand the above code as follows:</div>\n<div class=\"code-sample-title\">Example of an infinite loop caused by a semicolon</div><pre class=\"codeBlock\">var count = 3;\nwhile(count > 0)\n{\n\n}\nconsole.log(count);\n// notice how the value of the control\n// variable changes outside of the loop\ncount = count - 1;</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-181",
          "name"          : "A Strange Countdown",
          "normalizedName": "a strange countdown",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>This countdown program is supposed to make the rocket take off once it reaches a count of 0. However, a bug is causing the counter to go up instead of down, leaving the program in an infinite loop. Can you fix the bug?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the instruction that increases the value of <var id=countdown>countdown</var> by 1 with an instruction that decreases the value of <var id=countdown>countdown</var> by 1.</li></ol>",
          "boilerplate"   : "var countdown = 10;\n\nwhile(countdown > 0)\n{\n  displayCount(countdown);\n  countdown = countdown + 1;\n}\n\nliftOff();",
          "solution"      : "var countdown = 10;\n\nwhile(countdown > 0)\n{\n  displayCount(countdown);\n  countdown = countdown - 1;\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"infinite loop\">Infinite Loops</h3>\n<div class=\"text\">Infinite <concept ref=\"loops\">loops</concept> are a type of bug that happen when the <concept ref=\"condition\">condition</concept> of a loop can never be <concept ref=\"boolean\">false</concept>.</div>\n<div class=\"code-sample-title\">Example of an infinite loop</div><pre class=\"codeBlock\">var count = 3;\nwhile(count > 0)\n{\n  console.log(count);\n  // we are missing an instruction here to decrease\n  // the value of count (ex: count = count - 1;)\n}</pre>\n<div class=\"text\">In the above example, the value of the <concept ref=\"control variable\">control variable</concept> never changes and therefore the condition &quot;count &gt; 0&quot; is always true. This causes the loop to display the number 3 over and over.</div>\n<h3 class=\"title\" ref=\"control variable\">Control Variables</h3>\n<div class=\"text\">Loops are controlled by a <concept ref=\"loops\">Boolean</concept> condition. We often refer to the <concept ref=\"variable\">variable</concept> used in the <concept ref=\"condition\">condition</concept> as the control variable.</div>\n<div class=\"code-sample-title\">Example of a control variable</div><pre class=\"codeBlock\">var count = 3;\nwhile(count > 0) // Here the control variable is named count\n{\n  console.log(count);\n  count = count - 1;\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-182",
          "name"          : "From Scratch",
          "normalizedName": "from scratch",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-182_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-182_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=countdown>countdown</var>. Assign to it the value 15.</li><li class=code-item>Replace the second question mark with a while loop. The condition of this while loop should check if the value of <var id=countdown>countdown</var> is greater than or equal to 1.</li><li class=code-item>Inside the code block of the while loop, replace the third question mark with the <concept ref=displayCount>displayCount(<var id=countdown>countdown</var>)</concept> instruction.</li><li class=code-item>Still inside the code block of the while loop, replace the last question mark with an instruction to assign to <var id=countdown>countdown</var> the value of <var id=countdown>countdown</var> minus 1.</li></ol>",
          "boilerplate"   : "// Create the control variable here\n?\n\n// Create the while loop here\n?\n\n// Display the countdown\n?\n\n// Decrease the value of countdown\n?\n\nliftOff();",
          "solution"      : "// Create the control variable here\nvar countdown = 15;\n\n// Create the while loop here\nwhile(countdown >= 1)\n{\n  // Display the countdown\n  displayCount(countdown);\n\n  // Decrease the value of countdown\n  countdown = countdown - 1;\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"iteration\">Iteration</h3>\n<div class=\"text\">When a <concept ref=\"loops\">loop</concept> completes all the instructions inside of its <concept ref=\"code block\">code block</concept> once, we say the loop completed an iteration.</div>\n<div class=\"code-sample-title\">Example of an iteration</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, we say that an iteration was completed after the the program increases the value of x. In total this program does 2 iterations which displays the following messages: &quot;x is equal to 0&quot; and &quot;x is equal to 1&quot;.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-183",
          "name"          : "Is There a Simpler Way?",
          "normalizedName": "is there a simpler way",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-183_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-183_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Simplify the countdown program by using a while loop. The countdown should display every number from 5 to 1. The program should contain no more than one <concept ref=displayCount>displayCount(<var id=countdown>countdown</var>)</concept> instruction.</li></ol>",
          "boilerplate"   : "var countdown = 5;\n\ndisplayCount(countdown);\ncountdown = countdown - 1;\ndisplayCount(countdown);\ncountdown = countdown - 1;\ndisplayCount(countdown);\ncountdown = countdown - 1;\ndisplayCount(countdown);\ncountdown = countdown - 1;\ndisplayCount(countdown);\n\nliftOff();",
          "solution"      : "var countdown = 5;\n\nwhile(countdown >= 1)\n{\n  displayCount(countdown);\n  countdown = countdown - 1;\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"Loops Simplify Code\">Using Loops to Simplify Repetitive Code</h3>\n<div class=\"text\"><concept ref=\"loops\">Loops</concept> can be used to simplify repetitive code. The trick is to find a pattern in the code.</div>\n<div class=\"code-sample-title\">Example of repetitive code</div><pre class=\"codeBlock\">console.log(\"count is 10\");\nconsole.log(\"count is 9\");\nconsole.log(\"count is 8\");\nconsole.log(\"count is 7\");\nconsole.log(\"count is 6\");\nconsole.log(\"count is 5\");\nconsole.log(\"count is 4\");\nconsole.log(\"count is 3\");\nconsole.log(\"count is 2\");\nconsole.log(\"count is 1\");</pre>\n<div class=\"text\">The example above can be simplified with the following code:</div>\n<div class=\"code-sample-title\">Example of simplified code</div><pre class=\"codeBlock\">var count = 10;\nwhile(count > 0)\n{\n  console.log(\"count is \" + count);\n  count = count - 1;\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-184",
          "name"          : "The First 10 Multiples",
          "normalizedName": "the first 10 multiples",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program capable of displaying the first 10 multiples of a number entered by the user.</div><div class=text>For example, if the user enters 5, the program will display:</div><div class=text>1 x 5 = 5</div><div class=text>2 x 5 = 10</div><div class=text>3 x 5 = 15</div><div class=text>4 x 5 = 20</div><div class=text>5 x 5 = 25</div><div class=text>6 x 5 = 30</div><div class=text>7 x 5 = 35</div><div class=text>8 x 5 = 40</div><div class=text>9 x 5 = 45</div><div class=text>10 x 5 = 50</div><div class=text>Can you complete the program?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=currentMultiplier>currentMultiplier</var> is less than or equal to 10.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=currentMultiplier>currentMultiplier</var> the result of <var id=currentMultiplier>currentMultiplier</var> plus 1.</li></ol>",
          "boilerplate"   : "var myNumber = prompt(\"Enter a number between 1 and 10:\");\nmyNumber = Number(myNumber);\n\nvar currentMultiplier = 1;\n\nwhile(?)\n{\n  console.log(currentMultiplier + \" x \" + myNumber + \" = \" + (currentMultiplier * myNumber));\n  ?\n}",
          "solution"      : "var myNumber = prompt(\"Enter a number between 1 and 10:\");\nmyNumber = Number(myNumber);\n\nvar currentMultiplier = 1;\n\nwhile(currentMultiplier <= 10)\n{\n  console.log(currentMultiplier + \" x \" + myNumber + \" = \" + (currentMultiplier * myNumber));\n  currentMultiplier = currentMultiplier + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-185",
          "name"          : "Making Some Savings",
          "normalizedName": "making some savings",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Interest is money earned by simply keeping money in a savings account. This program is a compound interest calculator. Compound interest is calculated by taking in consideration the previous interest earned. For example, imagine you place $100 in a savings account and have 1% interest every year. This is how much money you would have after 5 years:</div><pre><samp>Year 1 -- $100.00 x 1.01 = $101.00\nYear 2 -- $101.00 x 1.01 = $102.01\nYear 3 -- $102.01 x 1.01 = $103.03\nYear 4 -- $103.03 x 1.01 = $104.06\nYear 5 -- $104.06 x 1.01 = $105.10</samp></pre><div class=text>Let's build a program to calculate compound interest on a sum of money.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=currentYear>currentYear</var>. Assign it a value of 1.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=currentYear>currentYear</var> is less than or equal to <var id=years>years</var>.</li><li class=code-item>Replace the third question mark with an instruction to assign to <var id=currentYear>currentYear</var> the value of <var id=currentYear>currentYear</var> plus 1.</li></ol>",
          "boilerplate"   : "var money = prompt(\"How much is the initial investment?\");\nvar years = prompt(\"For how many years are you saving?\");\nvar rate = getInterestRate();\n?\n\nmoney = Number(money);\nyears = Number(years);\n\nconsole.log(\"Initial investment: \" + money + \"$\");\n\nwhile(?)\n{\n  money = money * rate;\n\n  displayEarnings(currentYear, rate, money);\n\n  ?\n}\n\nconsole.log(\"Final sum: \" + money.toFixed(2) + \"$\");",
          "solution"      : "var money = prompt(\"How much is the initial investment?\");\nvar years = prompt(\"For how many years are you saving?\");\nvar rate = getInterestRate();\nvar currentYear = 1;\n\nmoney = Number(money);\nyears = Number(years);\n\nconsole.log(\"Initial investment: \" + money + \"$\");\n\nwhile(currentYear <= years)\n{\n  money = money * rate;\n\n  displayEarnings(currentYear, rate, money);\n\n  currentYear = currentYear + 1;\n}\n\nconsole.log(\"Final sum: \" + money.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-186",
          "name"          : "Heads or Tails?",
          "normalizedName": "heads or tails",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a simple game. The game will begin by asking the user to choose which side of a coin (heads or tails) they think will come up more often. Then, the computer will flip a coin 100 times and count each result. If the user properly predicted which side appeared more often, they win. If they predicted incorrectly or if both sides came up equal, the user loses!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=numberOfFlips>numberOfFlips</var>. Assign it a value of 0.</li><li class=code-item>Replace the second question mark with a while loop. The condition of this while loop should check if the value of <var id=numberOfFlips>numberOfFlips</var> is less than 100. The code block of this while loop should contain the if statement and the instruction to increase the value of <var id=numberOfFlips>numberOfFlips</var>.</li><li class=code-item>Replace the third question mark with an instruction to assign to <var id=numberOfFlips>numberOfFlips</var> the value of <var id=numberOfFlips>numberOfFlips</var> plus 1. This instruction must be inside the code block of the while loop.</li></ol>",
          "boilerplate"   : "var userChoice = prompt(\"Which side will the coin land more often on? (heads or tails)\");\nuserChoice = userChoice.toLowerCase();\n\nvar heads = 0;\nvar tails = 0;\n\nvar currentFlipFace;\n?\n\n?\n\ncurrentFlipFace = flipCoin();\n\nif(currentFlipFace == \"heads\")\n{\n  heads = heads + 1;\n}\nelse\n{\n  tails = tails + 1;\n}\n\n// Increase the value of numberOfFlips by one\n?\n\ndisplayCoinFlipResults(heads, tails);\n\n// Check if the player won the game\nif(userChoice == \"heads\" && heads > tails) { setGame(\"win\"); }\nelse if(userChoice == \"tails\" && tails > heads) { setGame(\"win\"); }\nelse { setGame(\"lose\"); }",
          "solution"      : "var userChoice = prompt(\"Which side will the coin land more often on? (heads or tails)\");\nuserChoice = userChoice.toLowerCase();\n\nvar heads = 0;\nvar tails = 0;\n\nvar currentFlipFace;\nvar numberOfFlips = 0;\n\nwhile(numberOfFlips < 100)\n{\n  currentFlipFace = flipCoin();\n\n  if(currentFlipFace == \"heads\")\n  {\n    heads = heads + 1;\n  }\n  else\n  {\n    tails = tails + 1;\n  }\n\n  // Increase the value of numberOfFlips by one\n  numberOfFlips = numberOfFlips + 1;\n}\n\ndisplayCoinFlipResults(heads, tails);\n\n// Check if the player won the game\nif(userChoice == \"heads\" && heads > tails) { setGame(\"win\"); }\nelse if(userChoice == \"tails\" && tails > heads) { setGame(\"win\"); }\nelse { setGame(\"lose\"); }",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-187",
          "name"          : "A Loaded Dice",
          "normalizedName": "a loaded dice",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to analyze a 4-sided dice and determine if it is weighted. A weighted dice is a dice that falls more constantly on a single face (normally the best outcome for the player). To determine if a 4-sided dice is weighted, we will simulate 100 rolls and count the result of each. Then, we will look at how many times the dice landed on each side. If a side was rolled too often, we will assume the dice is weighted.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition that checks if the value of <var id=diceRolls>diceRolls</var> is less than 100.</li><li class=code-item>Replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=currentRoll>currentRoll</var> is equal to 3. Inside the code block of this if statement, assign to <var id=side3>side3</var> the value of <var id=side3>side3</var> plus 1.</li><li class=code-item>Replace the third question mark with an if statement. The condition of this if statement should check if the value of <var id=currentRoll>currentRoll</var> is equal to 4. Inside the code block of this if statement, assign to <var id=side4>side4</var> the value of <var id=side4>side4</var> plus 1.</li><li class=code-item>Replace the fourth question mark with an instruction to assign to <var id=diceRolls>diceRolls</var> the value of <var id=diceRolls>diceRolls</var> plus 1.</li></ol>",
          "boilerplate"   : "var diceRolls = 0;\nvar currentRoll;\n\n// Variables to keep track of how many times\n// the dice landed on each side\nvar side1 = 0;\nvar side2 = 0;\nvar side3 = 0;\nvar side4 = 0;\n\nwhile(?)\n{\n  currentRoll = getD4Roll();\n\n  // Check on which side the dice landed\n  if(currentRoll == 1) { side1 = side1 + 1; }\n  if(currentRoll == 2) { side2 = side2 + 1; }\n  ?\n  ?\n\n  ?\n}\n\ncheckIfDiceWeighted(side1, side2, side3, side4);",
          "solution"      : "var diceRolls = 0;\nvar currentRoll;\n\n// Variables to keep track of how many times\n// the dice landed on each side\nvar side1 = 0;\nvar side2 = 0;\nvar side3 = 0;\nvar side4 = 0;\n\nwhile(diceRolls < 100)\n{\n  currentRoll = getD4Roll();\n\n  // Check on which side the dice landed\n  if(currentRoll == 1) { side1 = side1 + 1; }\n  if(currentRoll == 2) { side2 = side2 + 1; }\n  if(currentRoll == 3) { side3 = side3 + 1; }\n  if(currentRoll == 4) { side4 = side4 + 1; }\n\n  diceRolls = diceRolls + 1;\n}\n\ncheckIfDiceWeighted(side1, side2, side3, side4);",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-188",
          "name"          : "The Sum of the First 100",
          "normalizedName": "the sum of the first 100",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>In the late 1700's, a student named Carl Friedrich Gauss was tasked by his teacher to come up with the sum of the first 100 whole numbers (every number from 1 to 100). Gauss figured out that if he split the numbers into two groups, from 1 to 50 and from 51 to 100, he could rapidly calculate the result by adding the first number of the first group and the last number of the second group. Repeating this with the second number for the first group and the second last number of the second group, he observed that it would always be equal to 101. Therefore, all he had to do was to multiply 101 by 50 to get the result. Let's use our programming knowledge to create a program that can calculate the sum of the first 100 whole numbers. Run your program, the result should be 5050.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=sum>sum</var>. Assign it the value 0.</li><li class=code-item>Replace the second question mark with a new variable named <var id=currentNumber>currentNumber</var>. Assign it the value 1.</li><li class=code-item>Replace the third question mark with a while loop. The condition of this while loop should check if the value of <var id=currentNumber>currentNumber</var> is less than or equal to 100. Inside the code block of the while loop, assign to the variable <var id=sum>sum</var> the value of <var id=sum>sum</var> plus <var id=currentNumber>currentNumber</var>. Then, still inside the code block, assign to <var id=currentNumber>currentNumber</var> the value of <var id=currentNumber>currentNumber</var> plus 1.</li></ol>",
          "boilerplate"   : "// Create the variable sum\n?\n\n// Create the variable currentNumber\n?\n\n// Create the while loop here\n?\n\nconsole.log(\"The sum of the first 100 numbers is: \" + sum);",
          "solution"      : "// Create the variable sum\nvar sum = 0;\n\n// Create the variable currentNumber\nvar currentNumber = 1;\n\n// Create the while loop here\nwhile(currentNumber <= 100)\n{\n  sum = sum + currentNumber;\n  currentNumber = currentNumber + 1;\n}\n\nconsole.log(\"The sum of the first 100 numbers is: \" + sum);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_project-20",
          "name"          : "Project 20 - An Upgraded Robot",
          "normalizedName": "project 20 - an upgraded robot",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-189",
          "name"          : "Shifting Into High Gear",
          "normalizedName": "shifting into high gear",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-189_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-189_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=step>step</var> is less than 6.</li><li class=code-item>Replace the second question mark with the <concept ref=robot-forward>robot.forward()</concept> instruction.</li><li class=code-item>Replace the third question mark with an instruction to assign to <var id=step>step</var> the result of <var id=step>step</var> plus 1.</li><li class=code-item>The robot cannot leave the designated path. Also, you cannot use <concept ref=robot-forward>robot.forward()</concept> with a number (ex: <concept ref=robot-forward>robot.forward(2)</concept>).</li></ol>",
          "boilerplate"   : "var step = 0;\n\nwhile(?)\n{\n  ?\n  ?\n}",
          "solution"      : "var step = 0;\n\nwhile(step < 6)\n{\n  robot.forward();\n  step = step + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-190",
          "name"          : "A Creative Solution",
          "normalizedName": "a creative solution",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Use what you've seen so far about loops to get the robot to the goal.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a while loop to get the robot to the goal. Your final code should contain no more than <strong>2</strong> <concept ref=robot-forward>robot.forward()</concept> instructions. Also, you <strong>cannot</strong> use <concept ref=robot-forward>robot.forward()</concept> with a number (ex: <concept ref=robot-forward6>robot.forward(6)</concept>).</li><li class=code-item>The robot cannot leave the designated path. Don't forget the increase the value of <var id=step>step</var> at the end of your loop, else you'll get an infinite loop.</li></ol>",
          "boilerplate"   : "var step = 0;\n\nwhile(step < 3)\n{\n  robot.forward();\n  step = step + 1;\n}\n\nrobot.right();\n\nstep = 0;\n\n?",
          "solution"      : "var step = 0;\n\nwhile(step < 3)\n{\n  robot.forward();\n  step = step + 1;\n}\n\nrobot.right();\n\nstep = 0;\n\nwhile(step < 4)\n{\n  robot.forward();\n  step = step + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"robot.forward()\">Using the robot.forward() instruction</h3>\n<div class=\"text\">The robot.forward() <concept ref=\"instruction\">instruction</concept> is used to make the robot move forward by one square. Like any other <concept ref=\"programming languages\">JavaScript</concept> instruction, robot.forward() is <concept ref=\"case sensitive\">case sensitive</concept> and requires <concept ref=\"forgetting parentheses\">precise spelling</concept>.</div>\n<div class=\"code-sample-title\">Example of robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // moves the robot forward by one square</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-191",
          "name"          : "Around We Go!",
          "normalizedName": "around we go!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-191_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-191_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=step>step</var> is less than 4.</li><li class=code-item>Replace the second question mark with the <concept ref=robot-forward>robot.forward(3)</concept> instruction.</li><li class=code-item>Replace the third question mark with the <concept ref=robot-right>robot.right()</concept> instruction.</li><li class=code-item>Replace the fourth question mark with an instruction to assign to <var id=step>step</var> the result of <var id=step>step</var> plus 1.</li><li class=code-item>The robot cannot leave the designated path. Also, your code cannot contain more than one <concept ref=robot-forward>robot.forward(3)</concept> and one <concept ref=robot-right>robot.right()</concept> instructions.</li></ol>",
          "boilerplate"   : "var step = 0;\n\nwhile(?)\n{\n  ?\n  ?\n  ?\n}",
          "solution"      : "var step = 0;\n\nwhile(step < 4)\n{\n  robot.forward(3);\n  robot.right();\n  step = step + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-192",
          "name"          : "Do I Have to Write All That Code?",
          "normalizedName": "do i have to write all that code",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use a while loop to get the robot to the goal. Your code can contain <strong>1</strong> <concept ref=robot-forward>robot.forward(4)</concept>, <strong>1</strong> <concept ref=robot-right>robot.right()</concept>, <strong>1</strong> <concept ref=robot-forward>robot.forward()</concept>, and <strong>1</strong> <concept ref=robot-left>robot.left()</concept> instruction.</li><li class=code-item>The robot cannot leave the designated path. Don't forget the increase the value of <var id=step>step</var>  at the end of your loop, else you'll get an infinite loop.</li></ol>",
          "boilerplate"   : "var step = 0;\n\nwhile(step < 3)\n{\n  ?\n  \n  step = step + 1;\n}",
          "solution"      : "var step = 0;\n\nwhile(step < 3)\n{\n  robot.forward(4);\n  robot.right();\n  robot.forward();\n  robot.left();\n\n  step = step + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Using the robot.left() Instruction</h3>\n<div class=\"text\">The robot.left() instruction is used to make the robot turn on itself 90 degrees counterclockwise. Note that it does not make the robot move in any direction. To complete a left turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.left() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-193",
          "name"          : "Follow the Steps",
          "normalizedName": "follow the steps",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-193_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-193_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=step>step</var> is <strong>less than or equal to</strong> 5.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=step>step</var> is equal to 1 <strong>or</strong> 3 <strong>or</strong> 5.</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=step>step</var> is equal to 2.</li><li class=code-item>Replace the fourth question mark with a condition to check if the value of <var id=step>step</var> is equal to 4.</li><li class=code-item>The robot cannot leave the designated path. Also, your code cannot contain more than one <concept ref=robot-forward>robot.forward()</concept>, one <concept ref=robot-right>robot.right()</concept> and one <concept ref=robot-left>robot.left()</concept> instructions.</li></ol>",
          "boilerplate"   : "var step = 1;\n\nwhile(?)\n{\n  if(?)\n  {\n    robot.forward();\n  }\n  else if(?)\n  {\n    robot.right();\n  }\n  else if(?)\n  {\n    robot.left();\n  }\n\n  step = step + 1;\n}",
          "solution"      : "var step = 1;\n\nwhile(step <= 5)\n{\n  if(step == 1 || step == 3 || step == 5)\n  {\n    robot.forward();\n  }\n  else if(step == 2)\n  {\n    robot.right();\n  }\n  else if(step == 4)\n  {\n    robot.left();\n  }\n\n  step = step + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or operator\">Using the OR Operator (||)</h3>\n<div class=\"text\">The OR operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if at least one or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the OR operator will be true if at least one condition that makes up the expression is true.</div><div class=\"text\">The operator is represented using two vertical bars (||).</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">var result = true || true; // result is true\nresult = false || true; // result is true\nresult = true || false; // result is true\nresult = false || false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-194",
          "name"          : "The Power of the Loop",
          "normalizedName": "the power of the loop",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's help the robot get to the goal using our knowledge of while loops.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the program so that the robot gets to the goal. Your final code should contain no more than <strong>3</strong> <concept ref=robot-forward>robot.forward()</concept> instructions. Also, you <strong>cannot</strong> use <concept ref=robot-forward>robot.forward()</concept> with a number (ex: <concept ref=robot-forward>robot.forward(6)</concept>).</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "var step = 0;\n\nwhile(step < 3)\n{\n  robot.forward();\n  ?\n}\n\nstep = 0;\nrobot.right();\n\nwhile(?)\n{\n  robot.forward();\n  ?\n}\n\nstep = 0;\nrobot.left();\n\nwhile(?)\n{\n  robot.forward();\n  step = step + 1;\n}",
          "solution"      : "var step = 0;\n\nwhile(step < 3)\n{\n  robot.forward();\n  step = step + 1;\n}\n\nstep = 0;\nrobot.right();\n\nwhile(step < 3)\n{\n  robot.forward();\n  step = step + 1;\n}\n\nstep = 0;\nrobot.left();\n\nwhile(step < 4)\n{\n  robot.forward();\n  step = step + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-195",
          "name"          : "A Repeating Pattern",
          "normalizedName": "a repeating pattern",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's help the robot get to the goal using our knowledge of while loops.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the program so that the robot gets to the goal. Your final code should contain no more than <strong>2</strong> <concept ref=robot-forward>robot.forward()</concept> instructions, <strong>1</strong> <concept ref=robot-right>robot.right()</concept> instruction, and <strong>1</strong> <concept ref=robot-left>robot.left()</concept> instruction.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "var step = ?;\n\nwhile(?)\n{\n  ?\n  \n  step = step + 1;\n}",
          "solution"      : "var step = 0;\n\nwhile(step < 4)\n{\n  robot.left();\n  robot.forward();\n  robot.right();\n  robot.forward();\n\n  step = step + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Using the robot.left() Instruction</h3>\n<div class=\"text\">The robot.left() instruction is used to make the robot turn on itself 90 degrees counterclockwise. Note that it does not make the robot move in any direction. To complete a left turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.left() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-196",
          "name"          : "I've Seen This Before...",
          "normalizedName": "ive seen this before...",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's help the robot get to the goal using our knowledge of while loops.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the program so that the robot gets to the goal. Your final code should contain no more than <strong>5</strong> <concept ref=robot-forward>robot.forward()</concept> instructions, <strong>2</strong> <concept ref=robot-right>robot.right()</concept> instructions, and <strong>2</strong> <concept ref=robot-left>robot.left()</concept> instructions. For this exercise, you <strong>are</strong> allowed to use a number in the <concept ref=robot-forward>robot.forward()</concept> instruction (ex: <concept ref=robot-forward>robot.forward(6)</concept>).</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "var step = 0;\n\nwhile(?)\n{\n  ?\n  \n}",
          "solution"      : "var step = 0;\n\nwhile(step < 2)\n{\n  robot.forward();\n  robot.left();\n  robot.forward();\n  robot.right();\n  robot.forward(2);\n  robot.right();\n  robot.forward();\n  robot.left();\n  robot.forward();\n\n  step = step + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Using the robot.left() Instruction</h3>\n<div class=\"text\">The robot.left() instruction is used to make the robot turn on itself 90 degrees counterclockwise. Note that it does not make the robot move in any direction. To complete a left turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.left() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-197",
          "name"          : "Thinking in Steps",
          "normalizedName": "thinking in steps",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's help the robot get to the goal using our knowledge of while loops.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the program so that the robot gets to the goal. For this program, you can only use <strong>1</strong> <concept ref=robot-forward>robot.forward()</concept> instruction, <strong>1</strong> <concept ref=robot-right>robot.right()</concept> instruction, and <strong>1</strong> <concept ref=robot-left>robot.left()</concept> instruction. You will have to break down the program into steps and use the <var id=step>step</var> variable to control which instruction is used.</li></ol>",
          "boilerplate"   : "var step = ?;\n\nwhile(?)\n{\n  if(?)\n  {\n    ?\n  }\n\n  if(?)\n  {\n    ?\n  }\n\n  if(?)\n  {\n    ?\n  }\n\n  step = step + 1;\n}",
          "solution"      : "var step = 1;\n\nwhile(step <= 7)\n{\n  if(step == 1 || step == 3 || step == 5 || step == 7)\n  {\n    robot.forward();\n  }\n\n  if(step == 2 || step == 6)\n  {\n    robot.right();\n  }\n\n  if(step == 4)\n  {\n    robot.left();\n  }\n\n  step = step + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"or operator\">Using the OR Operator (||)</h3>\n<div class=\"text\">The OR operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if at least one or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the OR operator will be true if at least one condition that makes up the expression is true.</div><div class=\"text\">The operator is represented using two vertical bars (||).</div>\n<div class=\"code-sample-title\">Example of the OR operator</div><pre class=\"codeBlock\">var result = true || true; // result is true\nresult = false || true; // result is true\nresult = true || false; // result is true\nresult = false || false; // result is false</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Using the robot.left() Instruction</h3>\n<div class=\"text\">The robot.left() instruction is used to make the robot turn on itself 90 degrees counterclockwise. Note that it does not make the robot move in any direction. To complete a left turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.left() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-010",
          "name"          : "Quiz 10",
          "description"   : "While Loops",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-010_q-01",
              "question": "<div>True or false. A <code>while</code> loop must be controlled by a Boolean condition.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-010_q-01_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "A <code>while</code> loop can only do two things: continue looping or stop looping. To control this, we use <code>true</code> to continue and <code>false</code> to stop. Therefore, all loops are controlled by Boolean conditions."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-010_q-02",
              "question": "<div>What is an <em>iteration</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>The condition that controls a loop</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-02_a-02",
                  "value" : 0,
                  "answer": "<div>The instruction that increases the value of the control variable of a loop (ex: <code>x = x + 1;</code>)</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-010_q-02_a-03",
                  "value"      : 2,
                  "answer"     : "<div>A single execution of the instructions in the code block of a loop</div>",
                  "explanation": "An <em>iteration</em> is the full completion of the code block of the loop."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-02_a-04",
                  "value" : 0,
                  "answer": "<div>None of the above</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-010_q-03",
              "question": "<div>Which of the following statements is true?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-03_a-01",
                  "value" : 0,
                  "answer": "<div>A <code>while</code> loop calculates how many times it must execute the instructions in its code block. This means that the loop \"knows\" how many times it must iterate.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-010_q-03_a-02",
                  "value"      : 2,
                  "answer"     : "<div>A <code>while</code> loop checks its condition at every iteration. This means that the loop never \"knows\" how many iterations it must complete, it will only stop once the condition is false.</div>",
                  "explanation": "As long as the condition is true, the loop will continue to iterate. The <code>while</code> loop doesn't \"know\" how many times it must iterate."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-03_a-03",
                  "value" : 0,
                  "answer": "<div>We must give a number to the <code>while</code> loop to tell it to iterate that many times (ex: <code>while(10)</code>)</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-010_q-04",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var countdown = 3;\n\nwhile(countdown &gt;= 0)\n{\n  console.log(countdown);\n  countdown = countdown - 1;\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-04_a-01",
                  "value" : 0,
                  "answer": "<div><samp>0 1 2 3</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-04_a-02",
                  "value" : 0,
                  "answer": "<div><samp>3 2 1</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-04_a-03",
                  "value" : 0,
                  "answer": "<div><samp>1 2 3</samp></div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-010_q-04_a-04",
                  "value"      : 2,
                  "answer"     : "<div><samp>3 2 1 0</samp></div>",
                  "explanation": "The variable <var>countdown</var> begins at 3, so the first output will be 3. It then goes down by one until it reaches 0. Since the condition checks if <var>countdown</var> is also equal to 0, the loop does one last iteration."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-010_q-05",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>var money = 10;\nvar year = 0;\n\nwhile(year &lt; 3)\n{\n  console.log(money);\n  money = money + 10;\n  year = year + 1;\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-05_a-01",
                  "value" : 0,
                  "answer": "<div><samp>20 30 40</samp></div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-010_q-05_a-02",
                  "value"      : 2,
                  "answer"     : "<div><samp>10 20 30</samp></div>",
                  "explanation": "The order of the instructions is important here: <code>console.log()</code> is executed before the value of <var>money</var> is increased, so the output is: <samp>10, 20, 30</samp>. After <var>money</var> is set to 30, the variable <var>year</var> is increased to 3, which will stop the loop."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-05_a-03",
                  "value" : 0,
                  "answer": "<div><samp>0 1 2</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-05_a-04",
                  "value" : 0,
                  "answer": "<div><samp>10 20 30 40</samp></div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-010_q-06",
              "question": "<div>Is the following program stuck in an infinite loop?</div>\n<pre class=\"language-javascript\"><code>var countdown = 3;\n\nwhile(countdown &gt;= 0)\n{\n  console.log(countdown);\n  countdown = countdown + 1;\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-010_q-06_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Yes, the <code>while</code> loop will never end.</div>",
                  "explanation": "The variable <var>countdown</var> begins at 3 and increases at every iteration of the loop. The loop stops once <var>countdown</var> is less than 0, which can never happen."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>No, the <code>while</code> loop will end after a few iterations.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-010_q-07",
              "question": "<div>Why is the following program stuck in an infinite loop?</div>\n<pre class=\"language-javascript\"><code>var countdown = 10;\n\nwhile(countdown &gt; 0)\n{\n  console.log(countdown);\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-07_a-01",
                  "value" : 0,
                  "answer": "<div>The condition of the loop is not a Boolean condition.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-010_q-07_a-02",
                  "value"      : 2,
                  "answer"     : "<div>The value of the control variable never changes.</div>",
                  "explanation": "The value of <var>countdown</var> begins at 10 and never changes. Therefore, the condition <code>countdown &gt; 0</code> never becomes false."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>The name of the variable causes an infinite loop.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-010_q-07_a-04",
                  "value" : 0,
                  "answer": "<div>There should be a semicolon after the while instruction: <code>while(countdown &gt; 0);</code></div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 10",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_en-CA_exercise-268",
          "name"          : "Sentinel Values",
          "normalizedName": "sentinel values",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-268_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-268_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-21",
          "name"          : "Project 21 - An Odd Mix",
          "normalizedName": "project 21 - an odd mix",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-198",
          "name"          : "The First Element",
          "normalizedName": "the first element",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-198_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-198_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a condition to check if the value of <var id=userChoice>userChoice</var> is not equal to <string>\"Q\"</string>.</li></ol>",
          "boilerplate"   : "var userChoice = \"\";\n\nwhile(?)\n{\n  userChoice = prompt(\"Select an element or enter Q to quit. C:carbon\");\n\n  userChoice = userChoice.toUpperCase();\n\n  if(userChoice == \"C\")\n  {\n    addElement(\"carbon\");\n  }\n}\n\nmixCompound();",
          "solution"      : "var userChoice = \"\";\n\nwhile(userChoice != \"Q\")\n{\n  userChoice = prompt(\"Select an element or enter Q to quit. C:carbon\");\n\n  userChoice = userChoice.toUpperCase();\n\n  if(userChoice == \"C\")\n  {\n    addElement(\"carbon\");\n  }\n}\n\nmixCompound();",
          "tips"          : "<h3 class=\"title\" ref=\"sentinel value\">Using a Sentinel Value to Control A Loop</h3>\n<div class=\"text\">A sentinel value is a special value that is used to stop a <concept ref=\"loops\">loop</concept>. Typically, the loop will not end until the sentinel value is entered. This is often used to create menus.</div>\n<div class=\"code-sample-title\">Example of sentinel value</div><pre class=\"codeBlock\">var userChoice = \"\";\nwhile(userChoice != \"Q\")\n{\n  userChoice = prompt(\"Please enter an option (or Q to quit)\");\n}</pre>\n<div class=\"text\">In the above example, the loop keeps asking the user to pick an option in the menu, until they enter the letter &quot;Q&quot;.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-200",
          "name"          : "More Options",
          "normalizedName": "more options",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's add two more elements to the mixing machine. We are going to add the options to add oxygen (O) and nitrogen (N). Once you finish your program, see if you can mix something new!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with an else if statement. The condition of this else if statement should check if the value of <var id=userChoice>userChoice</var> is equal to <string>\"O\"</string>. Inside the code block of this else if statement, use the <concept ref=addElement>addElement(<string>\"oxygen\"</string>)</concept> instruction.</li><li class=code-item>Replace the second question mark with an else if statement. The condition of this else if statement should check if the value of <var id=userChoice>userChoice</var> is equal to <string>\"N\"</string>. Inside the code block of this else if statement, use the <concept ref=addElement>addElement(<string>\"nitrogen\"</string>)</concept> instruction.</li></ol>",
          "boilerplate"   : "var userChoice = \"\";\n\nwhile(userChoice != \"Q\")\n{\n  userChoice = prompt(\"Select an element or enter Q to quit. C:carbon, O:oxygen, N:nitrogen\");\n\n  userChoice = userChoice.toUpperCase();\n\n  if(userChoice == \"C\")\n  {\n    addElement(\"carbon\");\n  }\n  // Add an else if statement to check for oxygen (O)\n  ?\n  \n  // Add an else if statement to check for nitrogen (N)\n  ?\n  \n}\n\nmixCompound();",
          "solution"      : "var userChoice = \"\";\n\nwhile(userChoice != \"Q\")\n{\n  userChoice = prompt(\"Select an element or enter Q to quit. C:carbon, O:oxygen, N:nitrogen\");\n\n  userChoice = userChoice.toUpperCase();\n\n  if(userChoice == \"C\")\n  {\n    addElement(\"carbon\");\n  }\n  // Add an else if statement to check for oxygen (O)\n  else if(userChoice == \"O\")\n  {\n    addElement(\"oxygen\");\n  }\n  // Add an else if statement to check for nitrogen (N)\n  else if(userChoice == \"N\")\n  {\n    addElement(\"nitrogen\");\n  }\n}\n\nmixCompound();",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-201",
          "name"          : "Mixing a Bug",
          "normalizedName": "mixing a bug",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-201_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-201_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the instruction that assigns to the variable <var id=userChoice>userChoice</var> the value <string>\"Q\"</string> with an instruction that assigns to the variable <var id=userChoice>userChoice</var> the value <string>\"\"</string> (empty string).</li><li class=code-item>Replace the question mark with an else if statement. The condition of this else if statement should check if the value of <var id=userChoice>userChoice</var> is equal to <string>\"H\"</string>. Inside the code block of this else if statement, use the <concept ref=addElement>addElement(<string>\"hydrogen\"</string>)</concept> instruction.</li></ol>",
          "boilerplate"   : "var userChoice = \"Q\";\n\nwhile(userChoice != \"Q\")\n{\n  userChoice = prompt(\"Select an element or enter Q to quit. C:carbon, O:oxygen, N:nitrogen, H:hydrogen\");\n\n  userChoice = userChoice.toUpperCase();\n\n  if(userChoice == \"C\")\n  {\n    addElement(\"carbon\");\n  }\n  else if(userChoice == \"O\")\n  {\n    addElement(\"oxygen\");\n  }\n  else if(userChoice == \"N\")\n  {\n    addElement(\"nitrogen\");\n  }\n  // Add an else if statement to check for hydrogen (H)\n  ?\n  \n}\n\nmixCompound();",
          "solution"      : "var userChoice = \"\";\n\nwhile(userChoice != \"Q\")\n{\n  userChoice = prompt(\"Select an element or enter Q to quit. C:carbon, O:oxygen, N:nitrogen, H:hydrogen\");\n\n  userChoice = userChoice.toUpperCase();\n\n  if(userChoice == \"C\")\n  {\n    addElement(\"carbon\");\n  }\n  else if(userChoice == \"O\")\n  {\n    addElement(\"oxygen\");\n  }\n  else if(userChoice == \"N\")\n  {\n    addElement(\"nitrogen\");\n  }\n  // Add an else if statement to check for hydrogen (H)\n  else if(userChoice == \"H\")\n  {\n    addElement(\"hydrogen\");\n  }\n}\n\nmixCompound();",
          "tips"          : "<h3 class=\"title\" ref=\"sentinel initial\">Choosing an Initial Value for a Control Variable when Using a Sentinel Value</h3>\n<div class=\"text\">When using a <concept ref=\"sentinel value\">sentinel value</concept>, it is important to be careful with the initial value of the <concept ref=\"control variable\">control variable</concept>.</div><div class=\"text\">For example, if we decide that our sentinel value is going to be &quot;Q&quot;, it is important that we don't accidentally set the initial value of the control variable to &quot;Q&quot;, as this would stop the loop from even doing a single <concept ref=\"iteration\">iteration</concept>.</div>\n<div class=\"code-sample-title\">Example of incorrect initial value for a control variable</div><pre class=\"codeBlock\">var userChoice = \"Q\"; // notice that this is equal to the sentinel value!\nwhile(userChoice != \"Q\") // the condition is already false\n{\n  userChoice = prompt(\"Please enter an option (or Q to quit)\");\n}</pre>\n<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-202",
          "name"          : "Perfecting Our Technique",
          "normalizedName": "perfecting our technique",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-202_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-202_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=numberOfElements>numberOfElements</var> and assign to it the value of 0.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=numberOfElements>numberOfElements</var> is less than 5. Do not forget to use the AND (&amp;&amp;) operator to combine both conditions!</li><li class=code-item>Replace the third question mark with an instruction to assign to <var id=numberOfElements>numberOfElements</var> the value of <var id=numberOfElements>numberOfElements</var> plus 1.</li></ol>",
          "boilerplate"   : "var userChoice = \"\";\n?\n\nwhile(userChoice != \"Q\" ?)\n{\n  userChoice = prompt(\"Select an element or enter Q to quit. C:carbon, O:oxygen, N:nitrogen, H:hydrogen\");\n\n  userChoice = userChoice.toUpperCase();\n\n  if(userChoice == \"C\")\n  {\n    addElement(\"carbon\");\n  }\n  else if(userChoice == \"O\")\n  {\n    addElement(\"oxygen\");\n  }\n  else if(userChoice == \"N\")\n  {\n    addElement(\"nitrogen\");\n  }\n  else if(userChoice == \"H\")\n  {\n    addElement(\"hydrogen\");\n  }\n\n  ?\n}\n\nmixCompound();",
          "solution"      : "var userChoice = \"\";\nvar numberOfElements = 0;\n\nwhile(userChoice != \"Q\" && numberOfElements < 5)\n{\n  userChoice = prompt(\"Select an element or enter Q to quit. C:carbon, O:oxygen, N:nitrogen, H:hydrogen\");\n\n  userChoice = userChoice.toUpperCase();\n\n  if(userChoice == \"C\")\n  {\n    addElement(\"carbon\");\n  }\n  else if(userChoice == \"O\")\n  {\n    addElement(\"oxygen\");\n  }\n  else if(userChoice == \"N\")\n  {\n    addElement(\"nitrogen\");\n  }\n  else if(userChoice == \"H\")\n  {\n    addElement(\"hydrogen\");\n  }\n\n  numberOfElements = numberOfElements + 1;\n}\n\nmixCompound();",
          "tips"          : "<h3 class=\"title\" ref=\"multi condition while loop\">Loops with more than One Condition</h3>\n<div class=\"text\">A <concept ref=\"loops\">loop</concept> can be controlled by multiple <concept ref=\"condition\">conditions</concept>, even if the loop is controlled by a <concept ref=\"sentinel value\">sentinel value</concept>.</div><div class=\"text\">To do so, we can use a <concept ref=\"logical operators\">logical operator</concept> to combine multiple conditions into a single expression.</div>\n<div class=\"code-sample-title\">Example of multiple conditions in a loop</div><pre class=\"codeBlock\">var userChoice = \"\";\nvar attempts = 0;\nwhile(userChoice != \"Q\" && attempts < 3)\n{\n  userChoice = prompt(\"Please enter an option (or Q to quit)\");\n  attempts = attempts + 1;\n}</pre>\n<div class=\"text\">The above loop will continue to execute as long as the user choice is different than &quot;Q&quot; and that less than 3 attempts have been made. This means that if the user enters the letter &quot;Q&quot; or makes more than 3 attempts, the loop will end.</div><div class=\"text\">Notice that only one of two conditions need to be false to end the loop, because the overall expression then becomes false.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-230",
          "name"          : "Fill in the Blanks",
          "normalizedName": "fill in the blanks",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to create a story with holes (sometimes known as Mad Libs™). The user must enter nouns to complete the sentence. When there are no more \"holes\" in the story, the program ends by displaying to the user their complete story.</div><div class=text>To find the holes in the story, the program uses the following line of code:</div><div class=text>var position = sentence.indexOf(\"_\");</div><div class=text>This instruction tells the computer to search the text stored in the <var id=sentence>sentence</var> variable for the first occurrence of <string>\"_\"</string>. When there are no more <string>\"_\"</string> in the text, the instruction returns -1. Complete the program by using the variable <var id=position>position</var> as a sentinel value.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a condition to check if <var id=position>position</var> is <strong>not equal</strong> to -1. <strong>Reminder:</strong> you will need to use the not equal operator (!=).</li></ol>",
          "boilerplate"   : "var sentence = \"While I was cleaning my _, I found a _. This will make a nice addition to my collection of _. Perhaps one day I will find a _ to add to my collection.\";\n\nvar position = sentence.indexOf(\"_\");\nvar word;\n\nwhile(?)\n{\n  word = prompt(sentence + \"\\n\\n\" + \"Enter the next noun:\");\n  sentence = sentence.replace(\"_\", word);\n  position = sentence.indexOf(\"_\");\n}\n\nconsole.log(sentence);",
          "solution"      : "var sentence = \"While I was cleaning my _, I found a _. This will make a nice addition to my collection of _. Perhaps one day I will find a _ to add to my collection.\";\n\nvar position = sentence.indexOf(\"_\");\nvar word;\n\nwhile(position != -1)\n{\n  word = prompt(sentence + \"\\n\\n\" + \"Enter the next noun:\");\n  sentence = sentence.replace(\"_\", word);\n  position = sentence.indexOf(\"_\");\n}\n\nconsole.log(sentence);",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-231",
          "name"          : "Guess the Number",
          "normalizedName": "guess the number",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's modify the guessing game program. The program will continue asking the user to guess the number as long as they don't guess the correct number. In this program, the hidden number that the user must guess will work like a sentinel value.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=myGuess>myGuess</var> is <strong>not equal</strong> to the value of <var id=answer>answer</var>.</li><li class=code-item>Replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=myGuess>myGuess</var> is equal to the value of <var id=answer>answer</var>. You do not need to add a code block, since there is already one in the default code.</li><li class=code-item>Replace the third question mark with an else if statement. The condition of this else if statement should check if the value of <var id=myGuess>myGuess</var> is greater than the value of <var id=answer>answer</var>. You do not need to add a code block, since there is already one in the default code.</li></ol>",
          "boilerplate"   : "var myGuess = -1;\nvar answer = getSecretNumber();\nvar attempts = 0;\n\nwhile(?)\n{\n  myGuess = prompt(\"Guess the number (0 to 100)\");\n\n  myGuess = Number(myGuess);\n\n  ?\n  {\n    console.log(\"You guessed the number! You win!\");\n  }\n  ?\n  {\n    console.log(\"Your guess is over the number!\");\n  }\n  else\n  {\n    console.log(\"Your guess is under the number!\");\n  }\n\n  attempts = attempts + 1;\n}\n\nconsole.log(\"It took \" + attempts + \" attempts to guess the correct number.\");",
          "solution"      : "var myGuess = -1;\nvar answer = getSecretNumber();\nvar attempts = 0;\n\nwhile(myGuess != answer)\n{\n  myGuess = prompt(\"Guess the number (0 to 100)\");\n\n  myGuess = Number(myGuess);\n\n  if(myGuess == answer)\n  {\n    console.log(\"You guessed the number! You win!\");\n  }\n  else if(myGuess > answer)\n  {\n    console.log(\"Your guess is over the number!\");\n  }\n  else\n  {\n    console.log(\"Your guess is under the number!\");\n  }\n\n  attempts = attempts + 1;\n}\n\nconsole.log(\"It took \" + attempts + \" attempts to guess the correct number.\");",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-232",
          "name"          : "You're Invited!",
          "normalizedName": "youre invited!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's create a program to manage the guests to a party. The program will continue asking the user to enter the name of a guest until the user enters the letter \"Q\" to stop the program.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition. This condition should check if the value of <var id=guest>guest</var> is <strong>not equal</strong> to <string>\"Q\"</string>. <strong>Reminder:</strong> you will need to use the not equal operator (!=).</li><li class=code-item>Replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=guest>guest</var> is <strong>not equal</strong> to <string>\"Q\"</string> and <strong>not equal</strong> to <string>\"\"</string> (empty string). You do not need to add a code block, since it is already in the default code.</li></ol>",
          "boilerplate"   : "var guest = \"\";\n\nwhile(?)\n{\n  guest = prompt(\"Enter guest's name, or 'Q' to finish the list\");\n\n  ?\n  {\n    addToInviteList(guest);\n  }\n}\n\ndisplayInviteList();",
          "solution"      : "var guest = \"\";\n\nwhile(guest != \"Q\")\n{\n  guest = prompt(\"Enter guest's name, or 'Q' to finish the list\");\n\n  if(guest != \"Q\" && guest != \"\")\n  {\n    addToInviteList(guest);\n  }\n}\n\ndisplayInviteList();",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Else If Statement</h3>\n<div class=\"text\">An else if statement is another conditional statement that we can add to an existing <concept ref=\"if statement\">if statement</concept> to add one or more <concept ref=\"code block\">code blocks</concept> controlled by <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Note that no matter how many else if statements are added to a single if statement, only one code block will be executed. The conditions are checked in order from top to bottom and as soon as one condition is met, the code block is executed and the other conditions are ignored.</div>\n<div class=\"code-sample-title\">Example of multiple else if statements</div><pre class=\"codeBlock\">var myVariable = 11;\n\nif(myVariable > 15)\n{\n  // not executed, condition is false\n  console.log(\"myVariable is greater than 15!\");\n}\nelse if(myVariable > 10)\n{\n  // executed, condition is true\n  console.log(\"myVariable is greater than 10!\");\n}\nelse if(myVariable > 5)\n{\n  // not executed, another code block has been executed\n  console.log(\"myVariable is greater than 5!\");\n}</pre>\n<div class=\"text\">In the above example, because the <concept ref=\"variable\">variable</concept> myVariable has a value of 11, the message &quot;myVariable is greater than 10!&quot; is displayed. The first code block is ignored because myVariable is not greater than 15 and the last code block is also ignored because the second code block has already been executed.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"and operator\">AND Operator (&amp;&amp;)</h3>\n<div class=\"text\">The AND operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if two or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the AND operator will only be true if all the conditions that make up the expression are true.</div><div class=\"text\">The operator is represented using two ampersand symbols (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Example of the AND operator</div><pre class=\"codeBlock\">var result = true && true; // result is true\nresult = false && true; // result is false\nresult = true && false; // result is false\nresult = false && false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-233",
          "name"          : "Login Please",
          "normalizedName": "login please",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's modify a login system. Currently, the system continues asking the user for their credentials as long as they enter an invalid username or password. Let's add an attempt counter so that if the user fails to enter valid credentials 3 times, the system locks them out.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=attempts>attempts</var> and assign it an initial value of 0.</li><li class=code-item>Replace the second question mark with a condition. This condition should check if the value of <var id=attempts>attempts</var> is less than 3. Do not remove the parentheses around the first two conditions.</li><li class=code-item>Replace the third question mark with an instruction to assign to the variable <var id=attempts>attempts</var> the value of <var id=attempts>attempts</var> plus one.</li></ol>",
          "boilerplate"   : "var username = \"\";\nvar password = \"\";\n\nvar correctUsername = \"admin\";\nvar correctPassword = \"12345\";\n?\n\nwhile((password != correctPassword || username != correctUsername) && ?)\n{\n  username = prompt(\"Enter your username:\");\n  password = prompt(\"Enter your password:\");\n\n  if(password != correctPassword || username != correctUsername)\n  {\n    console.log(\"Invalid username or password. Please try again!\");\n    ?\n  }\n  else\n  {\n    console.log(\"Welcome \" + correctUsername + \"!\");\n  }\n}",
          "solution"      : "var username = \"\";\nvar password = \"\";\n\nvar correctUsername = \"admin\";\nvar correctPassword = \"12345\";\nvar attempts = 0;\n\nwhile((password != correctPassword || username != correctUsername) && attempts < 3)\n{\n  username = prompt(\"Enter your username:\");\n  password = prompt(\"Enter your password:\");\n\n  if(password != correctPassword || username != correctUsername)\n  {\n    console.log(\"Invalid username or password. Please try again!\");\n    attempts = attempts + 1;\n  }\n  else\n  {\n    console.log(\"Welcome \" + correctUsername + \"!\");\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-234",
          "name"          : "Shopkeeper",
          "normalizedName": "shopkeeper",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to manage the interactions between a player and a shopkeeper in an adventure game. The player will be able to sell various items to the shopkeeper. Once the player wants to stop talking to the shopkeeper, they will enter the word \"leave\".</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the while loop. It should continue looping as long as the user does not enter the value <string>\"leave\"</string> for the variable <var id=itemName>itemName</var>.</li><li class=code-item>Complete the if statement. The condition of this if statement should make sure that the value of <var id=itemName>itemName</var> is not the sentinel value.</li></ol>",
          "boilerplate"   : "var itemName = \"\";\nvar totalGold = 0;\nvar currentItemValue = 0;\n\nopenStore();\n\n?\n{\n  itemName = prompt(\"Enter the name of the item to sell (sword, shield, artifact). To leave, enter the word 'leave'.\");\n\n  itemName = itemName.toLowerCase();\n\n  ?\n  {\n    currentItemValue = sellItem(itemName);\n    totalGold = totalGold + currentItemValue;\n  }\n}\n\ncloseStore(totalGold);",
          "solution"      : "var itemName = \"\";\nvar totalGold = 0;\nvar currentItemValue = 0;\n\nopenStore();\n\nwhile(itemName != \"leave\")\n{\n  itemName = prompt(\"Enter the name of the item to sell (sword, shield, artifact). To leave, enter the word 'leave'.\");\n\n  itemName = itemName.toLowerCase();\n\n  if(itemName != \"leave\")\n  {\n    currentItemValue = sellItem(itemName);\n    totalGold = totalGold + currentItemValue;\n  }\n}\n\ncloseStore(totalGold);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_project-22",
          "name"          : "Project 22 - We Need More Minerals!",
          "normalizedName": "project 22 - we need more minerals!",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-203",
          "name"          : "Preparing Our Pickaxes",
          "normalizedName": "preparing our pickaxes",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-203_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-203_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=miningDuration>miningDuration</var> and assign to it a value of 1.</li><li class=code-item>Replace the second question mark with a while loop. The condition of this while loop should check if the value of <var id=miningDuration>miningDuration</var> is greater than 0. <strong>Note:</strong> Do not add a code block, there is already one in default code.</li><li class=code-item>Replace the third question mark with an instruction to assign to <var id=miningDuration>miningDuration</var> the value returned by a <concept ref=prompt>prompt()</concept> asking the user <string>\"For how many minutes would you like to mine? (-1 to exit)\"</string>.</li><li class=code-item>Replace the fourth question mark with an instruction to assign to <var id=miningDuration>miningDuration</var> the value of <var id=miningDuration>miningDuration</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li></ol>",
          "boilerplate"   : "?\nvar currentMineralsGathered = 0;\n\n?\n{\n  ?\n\n  ?\n\n  currentMineralsGathered = mineAsteroid(miningDuration);\n}\n\ndisplayMinerals();",
          "solution"      : "var miningDuration = 1;\nvar currentMineralsGathered = 0;\n\nwhile(miningDuration > 0)\n{\n  miningDuration = prompt(\"For how many minutes would you like to mine? (-1 to exit)\");\n\n  miningDuration = Number(miningDuration);\n\n  currentMineralsGathered = mineAsteroid(miningDuration);\n}\n\ndisplayMinerals();",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-204",
          "name"          : "We Need More Oxygen!",
          "normalizedName": "we need more oxygen!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Before the mining program can be used, we must modify it to add an oxygen counter. Every time an hamstronaut goes out to mine, their quantity of oxygen is reduced.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=currentOxygenLevel>currentOxygenLevel</var>. Assign it an initial value of 100.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=currentOxygenLevel>currentOxygenLevel</var> is greater than 0. Don't forget to use the AND (&amp;&amp;) operator.</li><li class=code-item>Replace the third question mark with an instruction to assign to <var id=currentOxygenLevel>currentOxygenLevel</var> the result of the instruction <concept ref=consumeOxygen>consumeOxygen(<var id=currentOxygenLevel>currentOxygenLevel</var>, <var id=miningDuration>miningDuration</var>)</concept>.</li></ol>",
          "boilerplate"   : "var miningDuration = 1;\nvar currentMineralsGathered = 0;\n?\n\nwhile(miningDuration > 0 ?)\n{\n  miningDuration = prompt(\"For how many minutes would you like to mine? (-1 to exit)\");\n\n  miningDuration = Number(miningDuration);\n\n  currentMineralsGathered = mineAsteroid(miningDuration);\n\n  ?\n}\n\ndisplayMinerals(currentOxygenLevel);",
          "solution"      : "var miningDuration = 1;\nvar currentMineralsGathered = 0;\nvar currentOxygenLevel = 100;\n\nwhile(miningDuration > 0 && currentOxygenLevel > 0)\n{\n  miningDuration = prompt(\"For how many minutes would you like to mine? (-1 to exit)\");\n\n  miningDuration = Number(miningDuration);\n\n  currentMineralsGathered = mineAsteroid(miningDuration);\n\n  currentOxygenLevel = consumeOxygen(currentOxygenLevel, miningDuration);\n}\n\ndisplayMinerals(currentOxygenLevel);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-205",
          "name"          : "A Short Duration",
          "normalizedName": "a short duration",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-205_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-205_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with an if statement. The condition of this if statement should check if the value of <var id=miningDuration>miningDuration</var> is greater than 0. <strong>Note</strong>: Do not add a code block, there is already one in the default code.</li></ol>",
          "boilerplate"   : "var miningDuration = 1;\nvar currentMineralsGathered = 0;\nvar currentOxygenLevel = 100;\n\nwhile(miningDuration > 0 && currentOxygenLevel > 0)\n{\n  miningDuration = prompt(\"For how many minutes would you like to mine? (-1 to exit)\");\n\n  miningDuration = Number(miningDuration);\n\n  ?\n  {\n    currentMineralsGathered = mineAsteroid(miningDuration);\n\n    currentOxygenLevel = consumeOxygen(currentOxygenLevel, miningDuration);\n  }\n}\n\ndisplayMinerals(currentOxygenLevel);",
          "solution"      : "var miningDuration = 1;\nvar currentMineralsGathered = 0;\nvar currentOxygenLevel = 100;\n\nwhile(miningDuration > 0 && currentOxygenLevel > 0)\n{\n  miningDuration = prompt(\"For how many minutes would you like to mine? (-1 to exit)\");\n\n  miningDuration = Number(miningDuration);\n\n  if(miningDuration > 0)\n  {\n    currentMineralsGathered = mineAsteroid(miningDuration);\n\n    currentOxygenLevel = consumeOxygen(currentOxygenLevel, miningDuration);\n  }\n}\n\ndisplayMinerals(currentOxygenLevel);",
          "tips"          : "<h3 class=\"title\" ref=\"sorting sentinel\">Sorting out Sentinel Values from Inputs</h3>\n<div class=\"text\">When using a <concept ref=\"sentinel value\">sentinel value</concept> to control a <concept ref=\"loops\">loop</concept>, it is sometimes necessary to sort out the sentinel value from the other inputs, so that it is not used in other operations.</div>\n<div class=\"code-sample-title\">Example of sorting out a sentinel value</div><pre class=\"codeBlock\">var currentDuration = 0; // this is the control variable\nvar totalDuration = 0;\nwhile(currentDuration != -1)\n{\n  currentDuration = prompt(\"Please enter a duration (or -1 to quit)\");\n  currentDuration = Number(currentDuration);\n\n  if(currentDuration != -1) // if the user did not enter the sentinel value\n  {\n    // add the input to the total duration\n    totalDuration = totalDuration + currentDuration;\n  }\n}</pre>\n<div class=\"text\">In the above code, the <concept ref=\"if statement\">if statement</concept> inside the while loop ensures that the sentinel value is not added to the total duration. Without the if statement, the final total duration would always be one less than the result expected by the user.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-206",
          "name"          : "That's a Large Rock!",
          "normalizedName": "thats a large rock!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-206_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-206_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=largestMinerals>largestMinerals</var>. Assign to it an initial value of 0.</li><li class=code-item>Replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=currentMineralsGathered>currentMineralsGathered</var> is greater than the value of <var id=largestMinerals>largestMinerals</var>. Inside the code block of this if statement, assign to <var id=largestMinerals>largestMinerals</var> the value of <var id=currentMineralsGathered>currentMineralsGathered</var>.</li></ol>",
          "boilerplate"   : "var miningDuration = 1;\nvar currentMineralsGathered = 0;\nvar currentOxygenLevel = 100;\n?\n\nwhile(miningDuration > 0 && currentOxygenLevel > 0)\n{\n  miningDuration = prompt(\"For how many minutes would you like to mine? (-1 to exit)\");\n\n  miningDuration = Number(miningDuration);\n\n  if(miningDuration > 0)\n  {\n    currentMineralsGathered = mineAsteroid(miningDuration);\n\n    currentOxygenLevel = consumeOxygen(currentOxygenLevel, miningDuration);\n\n    ?\n    \n  }\n}\n\ndisplayMinerals(currentOxygenLevel, largestMinerals);",
          "solution"      : "var miningDuration = 1;\nvar currentMineralsGathered = 0;\nvar currentOxygenLevel = 100;\nvar largestMinerals = 0;\n\nwhile(miningDuration > 0 && currentOxygenLevel > 0)\n{\n  miningDuration = prompt(\"For how many minutes would you like to mine? (-1 to exit)\");\n\n  miningDuration = Number(miningDuration);\n\n  if(miningDuration > 0)\n  {\n    currentMineralsGathered = mineAsteroid(miningDuration);\n\n    currentOxygenLevel = consumeOxygen(currentOxygenLevel, miningDuration);\n\n    if(currentMineralsGathered > largestMinerals)\n    {\n      largestMinerals = currentMineralsGathered;\n    }\n  }\n}\n\ndisplayMinerals(currentOxygenLevel, largestMinerals);",
          "tips"          : "<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-235",
          "name"          : "Cracking the Safe",
          "normalizedName": "cracking the safe",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to guess the passcode to a safe. This safe's passcode can be any number from 1 to 1000. We're going to use a technique called \"brute-force attack\". The idea is simple, we'll try every number from 1 to 1000 until we find the correct passcode.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=currentKey>currentKey</var> is less than or equal to 1000 <strong>and</strong> if the value of <var id=keyFound>keyFound</var> is equal to false.</li><li class=code-item>Replace the second question mark with an instruction to assign to the variable <var id=currentKey>currentKey</var> the value of <var id=currentKey>currentKey</var> plus one.</li></ol>",
          "boilerplate"   : "var currentKey = 1;\nvar keyFound = false;\n\nwhile(?)\n{\n  keyFound = openLock(currentKey);\n  ?\n}",
          "solution"      : "var currentKey = 1;\nvar keyFound = false;\n\nwhile(currentKey <= 1000 && keyFound == false)\n{\n  keyFound = openLock(currentKey);\n  currentKey = currentKey + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>\n<h3 class=\"title\" ref=\"and operator\">AND Operator (&amp;&amp;)</h3>\n<div class=\"text\">The AND operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if two or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the AND operator will only be true if all the conditions that make up the expression are true.</div><div class=\"text\">The operator is represented using two ampersand symbols (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Example of the AND operator</div><pre class=\"codeBlock\">var result = true && true; // result is true\nresult = false && true; // result is false\nresult = true && false; // result is false\nresult = false && false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-236",
          "name"          : "Let's Go Shopping!",
          "normalizedName": "lets go shopping!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>We're going to help a local grocery business set up a shopping cart for their online store. Our program will handle the user's input and present them with the correct menu. When the user enters \"a\", we will present to them the add item menu. When they enter \"r\", we will present to them the remove menu. When they enter \"q\", the program will end, showing them all the items in the cart.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=userChoice>userChoice</var> and assign it an empty string (<string>\"\"</string>).</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=userChoice>userChoice</var> is <strong>not equal</strong> to <string>\"q\"</string>. <strong>Reminder</strong>: you will need to use the not equal operator (!=).</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=userChoice>userChoice</var> is equal to <string>\"a\"</string>.</li><li class=code-item>Replace the fourth question mark with a condition to check if the value of <var id=userChoice>userChoice</var> is equal to <string>\"r\"</string>.</li></ol>",
          "boilerplate"   : "?\n\nwhile(?)\n{\n  var userChoice = prompt(\"Please select a choice: 'a' to add an item, 'r' to remove an item, 'q' to quit\");\n\n  userChoice = userChoice.toLowerCase();\n\n  if(?)\n  {\n    openAddMenu();\n  }\n  else if(?)\n  {\n    openRemoveMenu();\n  }\n}\n\nshowCart();",
          "solution"      : "var userChoice = \"\";\n\nwhile(userChoice != \"q\")\n{\n  var userChoice = prompt(\"Please select a choice: 'a' to add an item, 'r' to remove an item, 'q' to quit\");\n\n  userChoice = userChoice.toLowerCase();\n\n  if(userChoice == \"a\")\n  {\n    openAddMenu();\n  }\n  else if(userChoice == \"r\")\n  {\n    openRemoveMenu();\n  }\n}\n\nshowCart();",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-237",
          "name"          : "A Reverse Guessing Game",
          "normalizedName": "a reverse guessing game",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a guessing game with a twist. Instead of us having to guess a number generated by the computer, let's see how quickly the computer can guess a number we pick. To simplify the program, we'll say that the user must pick a number between 1 and 1000.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=attempts>attempts</var>. Assign it an initial value of 0.</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=computerGuess>computerGuess</var> is <strong>not equal</strong> to the value of <var id=secretNumber>secretNumber</var>. <strong>Reminder</strong>: you will need to use the not equal operator (!=).</li><li class=code-item>Replace the third question mark with an instruction to assign to the variable <var id=attempts>attempts</var> the value of <var id=attempts>attempts</var> plus one.</li><li class=code-item>Replace the fourth question mark with a condition to check if the value of <var id=computerGuess>computerGuess</var> is equal to the value of <var id=secretNumber>secretNumber</var>.</li></ol>",
          "boilerplate"   : "var secretNumber = prompt(\"Enter a secret number (1 to 1000)\");\n\nsecretNumber = Number(secretNumber);\n\nvar computerGuess = 0;\n?\n\nwhile(?)\n{\n  computerGuess = getNextGuess();\n  ?\n\n  if(?)\n  {\n    numberGuessed(attempts);\n  }\n}",
          "solution"      : "var secretNumber = prompt(\"Enter a secret number (1 to 1000)\");\n\nsecretNumber = Number(secretNumber);\n\nvar computerGuess = 0;\nvar attempts = 0;\n\nwhile(computerGuess != secretNumber)\n{\n  computerGuess = getNextGuess();\n  attempts = attempts + 1;\n\n  if(computerGuess == secretNumber)\n  {\n    numberGuessed(attempts);\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-240",
          "name"          : "An Expert Musician",
          "normalizedName": "an expert musician",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to create music. The user will enter a series of notes in a while loop. Once they want to stop the program and play their song, they will enter the letter \"Q\".</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=userChoice>userChoice</var>. Assign it an initial value of <string>\"\"</string> (empty string).</li><li class=code-item>Replace the second question mark with a condition to check if the value of <var id=userChoice>userChoice</var> is <strong>not equal</strong> to <string>\"Q\"</string>.</li><li class=code-item>Replace the third question mark with a condition to check if the value of <var id=userChoice>userChoice</var> is <strong>not equal</strong> to <string>\"Q\"</string>.</li></ol>",
          "boilerplate"   : "?\n\nwhile(?)\n{\n  var userChoice = getNoteFromUser();\n\n  if(userChoice == \"P\")\n  {\n    playSong();\n  }\n  else if(?)\n  {\n    updateSong(userChoice);\n  }\n}\n\nplaySong();",
          "solution"      : "var userChoice = \"\";\n\nwhile(userChoice != \"Q\")\n{\n  var userChoice = getNoteFromUser();\n\n  if(userChoice == \"P\")\n  {\n    playSong();\n  }\n  else if(userChoice != \"Q\")\n  {\n    updateSong(userChoice);\n  }\n}\n\nplaySong();",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-239",
          "name"          : "A True Sentinel",
          "normalizedName": "a true sentinel",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's test our expertise of sentinel-controlled while loops. We're going to create a program that will sum up all the numbers entered by the user. The program will end once the user enters -1 and will display the total of all the numbers entered. Remember, the sentinel value must not be added to the total!</div><div class=text>To test your program, enter the following sequence: 10, 15, 10, -1. The program should output a total of 35. If the total comes out as 34, your program is adding the sentinel value to the total.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Create the while loop required to drive the program. It should continue looping as long as the user doesn't enter -1 for the value of <var id=currentNumber>currentNumber</var>. The code block of this while loop should wrap everything everything except variable declarations and the final <concept ref=console-log>console.log()</concept>.</li><li class=code-item>Inside the code block of the while loop, add an if statement to stop the sentinel value from being added to the value of <var id=total>total</var>. The code block of this if statement should contain an instruction to add the value of <var id=currentNumber>currentNumber</var> to the value of <var id=total>total</var>.</li></ol>",
          "boilerplate"   : "var currentNumber = 0;\nvar total = 0;\n\n?\n\ncurrentNumber = prompt(\"Enter a number, or -1 to quit\");\ncurrentNumber = Number(currentNumber);\n\n// Use an if statement so that the\n// sentinel is not added to the total\n?\n\nconsole.log(\"The total is: \" + total);",
          "solution"      : "var currentNumber = 0;\nvar total = 0;\n\nwhile(currentNumber != -1)\n{\n  currentNumber = prompt(\"Enter a number, or -1 to quit\");\n  currentNumber = Number(currentNumber);\n\n  // Use an if statement so that the\n  // sentinel is not added to the total\n  if(currentNumber != -1)\n  {\n    total = total + currentNumber;\n  }\n}\n\nconsole.log(\"The total is: \" + total);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-011",
          "name"          : "Quiz 11",
          "description"   : "Sentinel Values",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-011_q-01",
              "question": "<div>What is a <em>sentinel value</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-01_a-01",
                  "value" : 0,
                  "answer": "<div>A value that causes an infinite loop</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-011_q-01_a-02",
                  "value"      : 2,
                  "answer"     : "<div>A special value that tells a loop to stop</div>",
                  "explanation": "You can imagine a <em>sentinel value</em> as the exit button of a loop."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-01_a-03",
                  "value" : 0,
                  "answer": "<div>A special value used in <code>if</code> statements</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-01_a-04",
                  "value" : 0,
                  "answer": "<div>None of the above</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-011_q-02",
              "question": "<div>True or false. The following condition of a <code>while</code> loop, that uses a sentinel value, is a Boolean condition:</div>\n<pre class=\"language-javascript\"><code>while(userInput != -1)</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-011_q-02_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "A condition that checks for a sentinel value is still a Boolean condition (can be <code>true</code> or <code>false</code>)."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-02_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-011_q-03",
              "question": "<div>What is the sentinel value of this loop?</div>\n<pre class=\"language-javascript\"><code>var userInput = \"\";\n\nwhile(userInput != \"q\")\n{\n  userInput = prompt(\"Enter an option (q to exit)\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-011_q-03_a-01",
                  "value"      : 2,
                  "answer"     : "<div>The letter <string>\"q\"</string></div>",
                  "explanation": "The sentinel value is the value that we need to enter in order to exit the loop, which in this case is <string>\"q\"</string>."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>Any value</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-03_a-03",
                  "value" : 0,
                  "answer": "<div>Any number</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>The number -1</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-011_q-04",
              "question": "<div>What is the purpose of the <code>if</code> statement in the following code?</div>\n<pre class=\"language-javascript\"><code>var userInput = 0;\nvar money = 0;  \n\nwhile(userInput != -1)\n{\n  userInput = prompt(\"Enter an amount (-1 to exit)\");\n\n  userInput = Number(userInput);\n\n  if(userInput != -1)\n  {\n    money = money + userInput;\n  }\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-04_a-01",
                  "value" : 0,
                  "answer": "<div>The <code>if</code> statement stops the user from adding a negative number to the sum of money.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>The <code>if</code> statement is there to make the code longer.</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-04_a-03",
                  "value" : 0,
                  "answer": "<div>The <code>if</code> statement is there to make sure only numbers are added to the sum of money.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-011_q-04_a-04",
                  "value"      : 2,
                  "answer"     : "<div>The <code>if</code> statement is there to make sure the sentinel value is not added to the sum of money.</div>",
                  "explanation": "The <code>if</code> statement is needed because we do not want our sentinel value to be added to the sum of money."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-011_q-05",
              "question": "<div>Is the following program stuck in an infinite loop?</div>\n<pre class=\"language-javascript\"><code>var userInput = 0;\n\nwhile(userInput != -1)\n{\n  userInput = prompt(\"Enter a value (-1 to exit)\");\n  userInput = Number(userInput);\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>Yes, the <code>while</code> loop can never end.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-011_q-05_a-02",
                  "value"      : 1,
                  "answer"     : "<div>No, the <code>while</code> loop will end when the user enters the number -1.</div>",
                  "explanation": "No, it is not an infinite loop. Since we have a sentinel value, the loop will end once we give it the sentinel value."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-011_q-06",
              "question": "<div>This program lets a user deposit money in an ATM by entering an amount. What would make a good sentinel value for the following program?</div>\n<pre class=\"language-javascript\"><code>var currentDeposit = 0;\nvar totalMoney = 0;\n\nwhile(?)\n{\n  currentDeposit = prompt(\"Enter a value to deposit\");\n  currentDeposit = Number(currentDeposit);\n  totalMoney = totalMoney + currentDeposit;\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-06_a-01",
                  "value" : 0,
                  "answer": "<div>Any number (ex: -1, 0, 5)</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-011_q-06_a-02",
                  "value"      : 2,
                  "answer"     : "<div>Any negative number (ex: -1, -10, -42)</div>",
                  "explanation": "Since we are depositing money, the user should never have to use a negative number. Therefore, a negative number can be used to tell the program that we are done entering data."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>Any value</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>None of the above</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-011_q-07",
              "question": "<div>True or false. A condition that uses a sentinel value can use the AND operator or the OR operator to add more conditions, like the condition of this <code>while</code> loop:</div>\n<pre class=\"language-javascript\"><code>while(userInput != -1 &amp;&amp; money &lt; 100)</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-011_q-07_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "A condition that checks for a sentinel value is like all other Boolean conditions. Therefore, we can use any operator that we can normally use."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-011_q-07_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 11",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_en-CA_exercise-269",
          "name"          : "For Loops",
          "normalizedName": "for loops",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-269_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-269_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-23",
          "name"          : "Project 23 - A Different Countdown",
          "normalizedName": "project 23 - a different countdown",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-207",
          "name"          : "For the Second Time",
          "normalizedName": "for the second time",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-207_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-207_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark between the parentheses of the for loop with the number 10.</li></ol>",
          "boilerplate"   : "for(var countdown = ?; countdown >= 0; countdown = countdown - 1)\n{\n  displayCount(countdown);\n}\n\nliftOff();",
          "solution"      : "for(var countdown = 10; countdown >= 0; countdown = countdown - 1)\n{\n  displayCount(countdown);\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-208",
          "name"          : "All the Components in One Place",
          "normalizedName": "all the components in one place",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-208_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-208_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=countdown>countdown</var>. Assign to it an initial value of 10.</li><li class=code-item>Replace the second question mark with a condition to check if <var id=countdown>countdown</var> is greater than or equal to 0.</li><li class=code-item>Replace the third question mark with an instruction to assign to <var id=countdown>countdown</var> the value of <var id=countdown>countdown</var> minus 1.</li></ol>",
          "boilerplate"   : "for(?; ?; ?)\n{\n  displayCount(countdown);\n}\n\nliftOff();",
          "solution"      : "for(var countdown = 10; countdown >= 0; countdown = countdown - 1)\n{\n  displayCount(countdown);\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"for loop components\">Components of a For Loop</h3>\n<div class=\"text\">Like a <concept ref=\"while loop\">while loop</concept>, a <concept ref=\"for loop\">for loop</concept> requires a <concept ref=\"control variable\">control variable</concept>, a <concept ref=\"condition\">condition</concept> and an instruction to change value of the control variable.</div><div class=\"text\">Unlike a while loop, a for loop keeps these 3 components at the start of the loop.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">The first component, &quot;var x = 0&quot;, is called the initialization and it is only executed once at the beginning of the loop. This is where the initial value of the control variable is normally set.</div><div class=\"text\">The second component, &quot;x &lt; 2&quot;, is called the condition and it is executed before every <concept ref=\"iteration\">iteration</concept> of the loop. This is where we check if the loop should continue.</div><div class=\"text\">The third component, &quot;x = x + 1&quot;, is called the <concept ref=\"increment\">increment</concept> and it is executed after every iteration. This is where the value of the control variable normally changes.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-209",
          "name"          : "For Too Many Bugs",
          "normalizedName": "for too many bugs",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>One of the engineers of the Space Hamster Agency tried reversing our countdown program. They wanted the program to count from 0 to 10. Unfortunately, they don't quite understand how for loops work so instead they requested our help. Let's help them create this program.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a condition to check if the value of <var id=currentCount>currentCount</var> is less than or equal to 10.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=currentCount>currentCount</var> the value of <var id=currentCount>currentCount</var> plus 1.</li></ol>",
          "boilerplate"   : "for(var currentCount = 0; ?; ?)\n{\n  displayCount(currentCount);\n}\n\nliftOff();",
          "solution"      : "for(var currentCount = 0; currentCount <= 10; currentCount = currentCount + 1)\n{\n  displayCount(currentCount);\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"for loop components\">Components of a For Loop</h3>\n<div class=\"text\">Like a <concept ref=\"while loop\">while loop</concept>, a <concept ref=\"for loop\">for loop</concept> requires a <concept ref=\"control variable\">control variable</concept>, a <concept ref=\"condition\">condition</concept> and an instruction to change value of the control variable.</div><div class=\"text\">Unlike a while loop, a for loop keeps these 3 components at the start of the loop.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">The first component, &quot;var x = 0&quot;, is called the initialization and it is only executed once at the beginning of the loop. This is where the initial value of the control variable is normally set.</div><div class=\"text\">The second component, &quot;x &lt; 2&quot;, is called the condition and it is executed before every <concept ref=\"iteration\">iteration</concept> of the loop. This is where we check if the loop should continue.</div><div class=\"text\">The third component, &quot;x = x + 1&quot;, is called the <concept ref=\"increment\">increment</concept> and it is executed after every iteration. This is where the value of the control variable normally changes.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-210",
          "name"          : "An Empty Loop",
          "normalizedName": "an empty loop",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-210_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-210_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Remove the extra semicolon after the parentheses of the for loop that is causing the wrong output.</li></ol>",
          "boilerplate"   : "console.log(\"Door closing, begin locking routine.\");\n\nfor(var lockNumber = 0; lockNumber < 5; lockNumber = lockNumber + 1);\n{\n  console.log(\"Lock number \" + lockNumber + \" has engaged.\");\n}\n\nconsole.log(\"Locking routine complete. \" + lockNumber + \" locks successfully engaged.\");",
          "solution"      : "console.log(\"Door closing, begin locking routine.\");\n\nfor(var lockNumber = 0; lockNumber < 5; lockNumber = lockNumber + 1)\n{\n  console.log(\"Lock number \" + lockNumber + \" has engaged.\");\n}\n\nconsole.log(\"Locking routine complete. \" + lockNumber + \" locks successfully engaged.\");",
          "tips"          : "<h3 class=\"title\" ref=\"semicolon after for\">Putting a Semicolon after a For Loop</h3>\n<div class=\"text\">Unlike a <concept ref=\"infinite while loops semicolon\">while</concept> loop, placing a semicolon after the parentheses of a <concept ref=\"for loop\">for loop</concept> will NOT cause an <concept ref=\"infinite loop\">infinite loop</concept>.</div><div class=\"text\">This is because the <concept ref=\"for loop components\">iteration components</concept> of the for loop are part of the instruction itself and are not inside the <concept ref=\"code block\">code block</concept>.</div><div class=\"text\">Instead of an infinite loop, the program will <concept ref=\"iteration\">iterate</concept> over an empty code block and then execute the instruction inside the code block once after the loop.</div><div class=\"text\">For example, if you write the following code:</div>\n<div class=\"code-sample-title\">Example of using a semicolon after a for loop</div><pre class=\"codeBlock\">for(var myVar = 0; myVar < 3; myVar = myVar + 1); // notice the semicolon here\n{\n  console.log(\"Current value of myVar: \" + myVar);\n}</pre>\n<div class=\"text\">The computer will understand the above code as follows:</div>\n<div class=\"code-sample-title\">Iterating over empty code block due to semicolon</div><pre class=\"codeBlock\">for(var myVar = 0; myVar < 3; myVar = myVar + 1) // this will iterate as normal\n{\n  // but the code block of the loop is understood as being empty\n}\nconsole.log(\"Current value of myVar: \" + myVar); // executed only once</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-211",
          "name"          : "Two Semicolons and a Bug",
          "normalizedName": "two semicolons and a bug",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-211_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-211_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Correct the two semicolon errors in the for loop.</li></ol>",
          "boilerplate"   : "console.log(\"Door closing, begin locking routine.\");\n\nfor(var lockNumber = 0 lockNumber < 5; lockNumber = lockNumber + 1;)\n{\n  console.log(\"Lock number \" + lockNumber + \" has engaged.\");\n}\n\nconsole.log(\"Locking routine complete. \" + lockNumber + \" locks successfully engaged.\");",
          "solution"      : "console.log(\"Door closing, begin locking routine.\");\n\nfor(var lockNumber = 0; lockNumber < 5; lockNumber = lockNumber + 1)\n{\n  console.log(\"Lock number \" + lockNumber + \" has engaged.\");\n}\n\nconsole.log(\"Locking routine complete. \" + lockNumber + \" locks successfully engaged.\");",
          "tips"          : "<h3 class=\"title\" ref=\"wrong semicolon in for\">Improper Semicolon Usage in the Parentheses of a For Loop</h3>\n<div class=\"text\">Forgetting one of the semicolons separating the <concept ref=\"for loop components\">components of a for loop</concept> causes an error. It is also an error to add a semicolon after the increment operation.</div>\n<div class=\"code-sample-title\">Example of missing semicolon in a for loop</div><pre class=\"codeBlock\">for(var myVar = 0 myVar < 3; myVar = myVar + 1) // notice the missing semicolon\n{\n  console.log(\"Current value of myVar: \" + myVar);\n}</pre>\n<div class=\"text\">The above code does not work, because the semicolon is missing between the initialization and the <concept ref=\"condition\">condition</concept>.</div>\n<div class=\"code-sample-title\">Example of extra semicolon in a for loop</div><pre class=\"codeBlock\">for(var myVar = 0; myVar < 3; myVar = myVar + 1;) // notice the extra semicolon\n{\n  console.log(\"Current value of myVar: \" + myVar);\n}</pre>\n<div class=\"text\">The above code does not work, because there is a semicolon after the increment operation.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-241",
          "name"          : "Studying Bacterial Growth",
          "normalizedName": "studying bacterial growth",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to simulate the growth of a population of bacteria. In this simulation, the population of bacteria increases by 10% every hour. The program displays the size of the population of bacteria after every hour, for a 10-hour time span. Below is an example of the output with an initial population of 1000 bacteria.</div><pre><samp>Hour 1, bacteria population at 1100.\nHour 2, bacteria population at 1210.\n...\nHour 10, bacteria population at 2591.</samp></pre><div class=text>Can you complete the program?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark in the for loop with a new variable named <var id=hour>hour</var>. Assign it an initial value of 1.</li><li class=code-item>Replace the second question mark in the for loop with a condition to check if the value of the variable <var id=hour>hour</var> is less than or equal to 10.</li><li class=code-item>Replace the third question mark with an instruction to increment the value of <var id=hour>hour</var> by one.</li></ol>",
          "boilerplate"   : "var bacteriaPopulation = prompt(\"What is the size of the initial bacteria population?\");\n\nbacteriaPopulation = Number(bacteriaPopulation);\n\nfor(?; ?; ?)\n{\n  bacteriaPopulation = Math.floor(bacteriaPopulation + bacteriaPopulation * 0.1);\n  showBacteriaGrowth(hour, bacteriaPopulation);\n}",
          "solution"      : "var bacteriaPopulation = prompt(\"What is the size of the initial bacteria population?\");\n\nbacteriaPopulation = Number(bacteriaPopulation);\n\nfor(var hour = 1; hour <= 10; hour++)\n{\n  bacteriaPopulation = Math.floor(bacteriaPopulation + bacteriaPopulation * 0.1);\n  showBacteriaGrowth(hour, bacteriaPopulation);\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-242",
          "name"          : "One Big Byte",
          "normalizedName": "one big byte",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to display the name of common file sizes. File sizes on a computer are expressed in bytes. Since files can often be more than a million bytes large, we have special names for multiples of 1024 bytes. However, because it is difficult to express numbers with multiples of 1024, we often resort to using multiples of 1000, as it is close enough to stay accurate to multiples of 1024. Here are the names of the first 5 multiples of 1000.</div><ul class=algorithm><li>1000 bytes make a <strong>kilobyte</strong>.</li><li>1000 kilobytes make a <strong>megabyte</strong>. (1 million bytes)</li><li>1000 megabytes make a <strong>gigabyte</strong>. (1 billion bytes)</li><li>1000 gigabytes make a <strong>terabyte</strong>. (1 trillion bytes)</li><li>1000 terabytes make a <strong>petabyte</strong>. (1 quadrillion bytes)</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark in the for loop with a new variable named <var id=multiple>multiple</var>. Assign it an initial value of 1.</li><li class=code-item>Replace the second question mark in the for loop with a condition to check if the value of the variable <var id=multiple>multiple</var> is less than or equal to 5.</li><li class=code-item>Replace the third question mark in the for loop with an instruction to increment the value of the variable <var id=multiple>multiple</var> by one.</li><li class=code-item>Replace the fourth question mark with an instruction to assign to <var id=bytes>bytes</var> the value of <var id=bytes>bytes</var> multiplied by 1000.</li></ol>",
          "boilerplate"   : "var bytes = 1;\n\nfor(?; ?; ?)\n{\n  ?\n  displayByteName(bytes);\n}",
          "solution"      : "var bytes = 1;\n\nfor(var multiple = 1; multiple <= 5; multiple++)\n{\n  bytes = bytes * 1000;\n  displayByteName(bytes);\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-243",
          "name"          : "Spaceship Salesperson",
          "normalizedName": "spaceship salesperson",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to help a spaceship salesperson evaluate the value of a spaceship. To calculate the value of the spaceship, the salesperson takes the initial value of the spaceship and decreases it by 30% for every year it's been used. For example, let's say that a spaceship has an initial value of $1,000,000. This is what the program should output:</div><pre><samp>The initial value of the spaceship is $1000000.00\nYear 1, the spaceship value is $700000.00\nYear 2, the spaceship value is $490000.00\nYear 3, the spaceship value is $343000.00\n...\nYear 9, the spaceship value is $40353.61\nYear 10, the spaceship value is $28247.52</samp></pre></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with the 3 components required to complete the for loop. The control variable of the for loop should be named <var id=year>year</var> and have an initial value of 1. The condition of the for loop should check if the value of <var id=year>year</var> is less than or equal to 10. The increment should increase the value of <var id=year>year</var> by one. Remember, each component should be separated by a semicolon (;).</li></ol>",
          "boilerplate"   : "var spaceshipValue = prompt(\"What is the initial value of the spaceship?\");\n\nspaceshipValue = Number(spaceshipValue);\n\ndisplaySpaceshipValue(0, spaceshipValue);\n\nfor(?)\n{\n  spaceshipValue = spaceshipValue * 0.7;\n\n  displaySpaceshipValue(year, spaceshipValue);\n}",
          "solution"      : "var spaceshipValue = prompt(\"What is the initial value of the spaceship?\");\n\nspaceshipValue = Number(spaceshipValue);\n\ndisplaySpaceshipValue(0, spaceshipValue);\n\nfor(var year = 1; year <= 10; year++)\n{\n  spaceshipValue = spaceshipValue * 0.7;\n\n  displaySpaceshipValue(year, spaceshipValue);\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-244",
          "name"          : "You Are Very Tall!",
          "normalizedName": "you are very tall!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>A student in our class is doing a project on the height of humans. By doing some research on the Internet, the student figured out that the average height of a human is 167cm. Now, the student would like to know how many students in his class exceed this average. Let's create a program to check how many of the 20 students in the class exceed the average.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with the 3 components required to complete the for loop. The control variable of the for loop should be named <var id=studentNumber>studentNumber</var> and have an initial value of 1. The condition of the for loop should check if the value of <var id=studentNumber>studentNumber</var> is less than or equal to 20. The increment should increase the value of <var id=studentNumber>studentNumber</var> by one. Remember, each component should be separated by a semicolon (;).</li><li class=code-item>Replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=currentStudentHeight>currentStudentHeight</var> is greater than <var id=averageHeight>averageHeight</var>. Inside the code block of this if statement, increment the value of <var id=exceedAverage>exceedAverage</var> by one.</li></ol>",
          "boilerplate"   : "var averageHeight = 167;\nvar exceedAverage = 0;\nvar currentStudentHeight;\n\nfor(?)\n{\n  currentStudentHeight = getStudentHeight(studentNumber);\n\n  ?\n  \n}\n\nconsole.log(exceedAverage + \" students exceed the average height of \" + averageHeight + \"cm.\");",
          "solution"      : "var averageHeight = 167;\nvar exceedAverage = 0;\nvar currentStudentHeight;\n\nfor(var studentNumber = 1; studentNumber <= 20; studentNumber++)\n{\n  currentStudentHeight = getStudentHeight(studentNumber);\n\n  if(currentStudentHeight > averageHeight)\n  {\n    exceedAverage++;\n  }\n}\n\nconsole.log(exceedAverage + \" students exceed the average height of \" + averageHeight + \"cm.\");",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"nested statements\">Using Nested Conditional Statements</h3>\n<div class=\"text\">We can create a nested <concept ref=\"conditional statements\">conditional statement</concept> by putting an <concept ref=\"if statement\">if statement</concept> inside the <concept ref=\"code block\">code block</concept> of an another if statement.</div><div class=\"text\">This will allow us to check a first <concept ref=\"condition\">condition</concept> before checking a second condition. The first if statement is called the outer if statement, while the second if statement is called the inner if statement.</div>\n<div class=\"code-sample-title\">Example of a nested conditional statement</div><pre class=\"codeBlock\">// outer if statement\nif(lives > 0) // this condition is checked first\n{\n  // inner if statement\n  if(score > 100) // this condition is only checked if the first condition is true\n  {\n    console.log(\"You won!\");\n  }\n}</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-245",
          "name"          : "How Are My Crops?",
          "normalizedName": "how are my crops",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>A potato farmer requested our help analyzing the data from the last 20 years. Every year, the farmer logged the yield of his potato crops. Now, he would like to know the average crop yield and how many crops exceed the average yield.</div><div class=text>We're going to build a two-part program. The first part will calculate the average crop yield by summing up the 20 yields and then dividing the sum by 20. The second part of the program will iterate over each yield and count how many exceed the average.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the first for loop. Its control variable should be named <var id=year>year</var>. The loop should iterate from 1 to 20.</li><li class=code-item>Complete the second for loop. Its control variable should be named <var id=cropNo>cropNo</var>. The loop should iterate from 1 to 20.</li><li class=code-item>Replace the third question mark with an if statement. The condition of this if statement should check if the value of <var id=currentCropYield>currentCropYield</var> is greater than the value of <var id=averageCropYield>averageCropYield</var>. When this condition is true, increment the value of <var id=cropsExceedingAverage>cropsExceedingAverage</var> by one.</li></ol>",
          "boilerplate"   : "var totalCropYield = 0;\nvar currentCropYield;\n\nfor(?)\n{\n  currentCropYield = getCropYieldForYear(year);\n\n  console.log(\"Year \" + year + \" has a crop yield of \" + currentCropYield + \"kg.\");\n\n  totalCropYield = totalCropYield + currentCropYield;\n}\n\nvar averageCropYield = totalCropYield / 20;\nvar cropsExceedingAverage = 0;\n\nfor(?)\n{\n  currentCropYield = getCropYieldForYear(cropNo);\n\n  ?\n  \n}\n\nconsole.log(cropsExceedingAverage + \" crops exceed the average of \" + averageCropYield + \"kg.\");",
          "solution"      : "var totalCropYield = 0;\nvar currentCropYield;\n\nfor(var year = 1; year <= 20; year++)\n{\n  currentCropYield = getCropYieldForYear(year);\n\n  console.log(\"Year \" + year + \" has a crop yield of \" + currentCropYield + \"kg.\");\n\n  totalCropYield = totalCropYield + currentCropYield;\n}\n\nvar averageCropYield = totalCropYield / 20;\nvar cropsExceedingAverage = 0;\n\nfor(var cropNo = 1; cropNo <= 20; cropNo++)\n{\n  currentCropYield = getCropYieldForYear(cropNo);\n\n  if(currentCropYield > averageCropYield)\n  {\n    cropsExceedingAverage++;\n  }\n}\n\nconsole.log(cropsExceedingAverage + \" crops exceed the average of \" + averageCropYield + \"kg.\");",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"console.log() concatenation\">Combining a String and a variable in a console.log()</h3>\n<div class=\"text\">We can combine a <concept ref=\"string\">string</concept> and a variable's <concept ref=\"variable value\">value</concept> between the parentheses of the console.log() to create a complex <concept ref=\"output\">output</concept>.</div><div class=\"text\">To do this, we must use the <concept ref=\"concatenation\">concatenation (+)</concept> operator between every element.</div>\n<div class=\"code-sample-title\">Example of console.log() with a variable and a string</div><pre class=\"codeBlock\">var myName = \"EduCode\";\nconsole.log(\"My name is \" + myName); // displays the concatenated string: My name is EduCode\nvar myAge = 16;\nconsole.log(\"I am \" + myAge + \" years old\"); // displays the concatenated string: I am 16 years old</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_project-24",
          "name"          : "Project 24 - Games in Space",
          "normalizedName": "project 24 - games in space",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-212",
          "name"          : "Creating a Wall",
          "normalizedName": "creating a wall",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-212_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-212_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use a for loop to simplify the code. The <concept ref=obstacle-create>obstacle.create()</concept> instruction should only appear once in your code.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-212_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nobstacle.create(23, 6, \"square\");\n\nobstacle.create(23, 7, \"square\");\nobstacle.create(23, 8, \"square\");\nobstacle.create(23, 9, \"square\");\nobstacle.create(23, 10, \"square\");\nobstacle.create(23, 11, \"square\");\nobstacle.create(23, 12, \"square\");\nobstacle.create(23, 13, \"square\");\nobstacle.create(23, 14, \"square\");\nobstacle.create(23, 15, \"square\");\nobstacle.create(23, 16, \"square\");\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nfor(var y = 6; y <= 16; y = y + 1)\n{\n  obstacle.create(23, y, \"square\");\n}\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-213",
          "name"          : "Another One",
          "normalizedName": "another one",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's create a puzzle that uses two walls. To do so, let's add a second for loop to the existing program. The first obstacle of this horizontal wall should be at the coordinates (6, 6). The last obstacle of this wall should be at (24, 6). The wall should be made up of 19 obstacles.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the for loop. Replace the first question mark with a new variable named <var id=x>x</var> with an initial value of 6. Replace the second question mark with a condition to check if the value of <var id=x>x</var> is less than or equal to 24. Replace the third question mark with an instruction to assign to the variable <var id=x>x</var> the value of the variable <var id=x>x</var> plus 1.</li><li class=code-item>Complete the <concept ref=obstacle-create>obstacle.create()</concept> instruction. Replace the first question mark with the variable <var id=x>x</var>. Replace the second question mark with the number 6.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-213_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nfor(?; ?; ?)\n{\n  obstacle.create(?, ?, \"square\");\n}\n\nfor(var x = 6; x <= 24; x = x + 1)\n{\n  obstacle.create(x, 16, \"square\");\n}\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nfor(var x = 6; x <= 24; x = x + 1)\n{\n  obstacle.create(x, 6, \"square\");\n}\n\nfor(var x = 6; x <= 24; x = x + 1)\n{\n  obstacle.create(x, 16, \"square\");\n}\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"obstacle.create()\">Using the obstacle.create() Instruction</h3>\n<div class=\"text\">The obstacle.create() instruction is used to create the obstacles that stop the player's <concept ref=\"puck.create()\">puck</concept> from reaching the <concept ref=\"goal.create()\">goal</concept>. The obstacle.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: puck.create(x, y, shape, [modifier]). By default, the modifier will be &quot;normal&quot;.</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div><div class=\"text\">The modifier can be any of the following: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // creates a normal square obstacle at (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // creates a faster circle obstacle at (7,7)\nobstacle.create(1, \"triangle\", 17); // invalid, parameters out of order\nobstacle.create(4, 5); // invalid, missing shape\nobstacle.Create(3, 1); // invalid, uppercase C in create\nobstacle.create(6, 6, hexagon); // invalid, hexagon missing surrounding quotation marks (\" \")\nobstacle.create(4, 21, \"octagon\"); // invalid, octagon is not a valid shape</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-214",
          "name"          : "For Too Many Loops",
          "normalizedName": "for too many loops",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-214_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-214_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Combine both for loops so that the two walls of obstacles are created with a single for loop.</li><li class=code-item>Replace the instruction to increase the value of <var id=x>x</var> by one with the incrementation operator. <strong>Note</strong>: the incrementation operator is ++</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-214_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nfor(var x = 6; x <= 24; x = x + 1)\n{\n  obstacle.create(x, 6, \"square\");\n}\n\nfor(var x = 6; x <= 24; x = x + 1)\n{\n  obstacle.create(x, 16, \"square\");\n}\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nfor(var x = 6; x <= 24; x++)\n{\n  obstacle.create(x, 6, \"square\");\n  \n  obstacle.create(x, 16, \"square\");\n}\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"increment decrement\">Increment (++) and Decrement (--) Operators</h3>\n<div class=\"text\">A common operation in programming is to increase or decrease the value of a <concept ref=\"variable\">variable</concept> by one. For this reason, there are two operators that are shortcuts for these two operations.</div><div class=\"text\">The first is the increment operator, written with two plus symbols (++). It increases the <concept ref=\"variable value\">value</concept> of a variable by one.</div>\n<div class=\"code-sample-title\">Example of the increment operator</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  x++; // this is the same as writing: x = x + 1;\n}</pre>\n<div class=\"text\">The second one is the decrement operator, written with two minus symbols (--). It decreases the value of a variable by one.</div>\n<div class=\"code-sample-title\">Example of the decrement operator</div><pre class=\"codeBlock\">var x = 2;\nwhile(x > 0)\n{\n  x--; // this is the same as writing: x = x - 1;\n}</pre>\n<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-215",
          "name"          : "They Are Everywhere!",
          "normalizedName": "they are everywhere!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-215_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-215_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a for loop. The control variable of this for loop should be named <var id=y>y</var> and have an initial value of 7. The condition should check if the value of <var id=y>y</var> is less than or equal to 15. The increment should increase the value of <var id=y>y</var> by one. Inside the code block of the for loop, use the instruction <concept ref=obstacle-create>obstacle.create(15, <var id=y>y</var>, <string>\"circle\"</string>, <string>\"faster\"</string>, true)</concept>.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-215_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nfor(var x = 6; x <= 24; x++)\n{\n  obstacle.create(x, 6, \"square\");\n  obstacle.create(x, 16, \"square\");\n}\n\n?\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nfor(var x = 6; x <= 24; x++)\n{\n  obstacle.create(x, 6, \"square\");\n  obstacle.create(x, 16, \"square\");\n}\n\nfor(var y = 7; y <= 15; y++)\n{\n  obstacle.create(15, y, \"circle\", \"faster\", true);\n}\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"moveable obstacles\">Creating Moveable Obstacles</h3>\n<div class=\"text\">The obstacles created by the <concept ref=\"obstacle.create()\">obstacle.create()</concept> instruction can be modified so that they move when they are hit. To do so, we use a 5th <concept ref=\"parameter\">parameter</concept> that is a <concept ref=\"boolean\">Boolean</concept> value. This parameter is optional.</div>\n<div class=\"code-sample-title\">Example of moveable obstacles</div><pre class=\"codeBlock\">obstacle.create(11, 12, \"square\", \"normal\", true); // creates a square moveable obstacle\nobstacle.create(7, 1, \"circle\", \"change\", true); // creates a circle moveable obstacle\nobstacle.create(4, 4, true); // invalid, missing two parameters before moveable\nobstacle.create(14, 13, \"square\", true, \"faster\"); // invalid, parameters out of order</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-246",
          "name"          : "The Great Wall",
          "normalizedName": "the great wall",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's try to use a for loop to create a wall of obstacles like in the image below.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a for loop. The control variable of this for loop should be named <var id=y>y</var> and have an initial value of 5. The condition of the for loop should check if the value of <var id=y>y</var> is less than or equal to 17. The increment should increase the value of <var id=y>y</var> by one. Inside the code block of the for loop, use the instruction <concept ref=obstacle-create>obstacle.create(22, <var id=y>y</var>, <string>\"square\"</string>)</concept>.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-246_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\n?\n\nobstacle.create(6, 7, \"circle\", \"faster\");\nobstacle.create(12, 7, \"circle\", \"faster\");\nobstacle.create(18, 7, \"circle\", \"faster\");\nobstacle.create(6, 15, \"circle\", \"faster\");\nobstacle.create(12, 15, \"circle\", \"faster\");\nobstacle.create(18, 15, \"circle\", \"faster\");\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nfor(var y = 5; y <= 17; y++)\n{\n  obstacle.create(22, y, \"square\");\n}\n\nobstacle.create(6, 7, \"circle\", \"faster\");\nobstacle.create(12, 7, \"circle\", \"faster\");\nobstacle.create(18, 7, \"circle\", \"faster\");\nobstacle.create(6, 15, \"circle\", \"faster\");\nobstacle.create(12, 15, \"circle\", \"faster\");\nobstacle.create(18, 15, \"circle\", \"faster\");\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"obstacle.create()\">Using the obstacle.create() Instruction</h3>\n<div class=\"text\">The obstacle.create() instruction is used to create the obstacles that stop the player's <concept ref=\"puck.create()\">puck</concept> from reaching the <concept ref=\"goal.create()\">goal</concept>. The obstacle.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: puck.create(x, y, shape, [modifier]). By default, the modifier will be &quot;normal&quot;.</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div><div class=\"text\">The modifier can be any of the following: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // creates a normal square obstacle at (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // creates a faster circle obstacle at (7,7)\nobstacle.create(1, \"triangle\", 17); // invalid, parameters out of order\nobstacle.create(4, 5); // invalid, missing shape\nobstacle.Create(3, 1); // invalid, uppercase C in create\nobstacle.create(6, 6, hexagon); // invalid, hexagon missing surrounding quotation marks (\" \")\nobstacle.create(4, 21, \"octagon\"); // invalid, octagon is not a valid shape</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-247",
          "name"          : "Two Walls",
          "normalizedName": "two walls",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Now that we've mastered creating a wall of obstacles using a for loop, let's try creating two walls, like in the image below.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a for loop. The control variable of this for loop should be named <var id=firstY>firstY</var> and have an initial value of 0. The condition of the for loop should check if the value of <var id=firstY>firstY</var> is less than or equal to 11. The increment should increase the value of <var id=firstY>firstY</var> by one. Inside the code block of the for loop, use the instruction <concept ref=obstacle-create>obstacle.create(11, <var id=firstY>firstY</var>, <string>\"square\"</string>)</concept>.</li><li class=code-item>Replace the second question mark with another for loop. The control variable of this for loop should be named <var id=secondY>secondY</var> and have an initial value of 22. The condition of the for loop should check if the value of <var id=secondY>secondY</var> is greater than or equal to 11. The increment should decrease the value of <var id=secondY>secondY</var> by one. Inside the code block of the for loop, use the instruction <concept ref=obstacle-create>obstacle.create(17, <var id=secondY>secondY</var>, <string>\"square\"</string>)</concept>. Remember, to decrease the value of a variable by one, we can use the decrement operator (--).</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-247_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\n// This for loop should create a vertical\n// line of obstacles from (11,0) to (11,11)\n?\n\n// This for loop should create a vertical\n// line of obstacles from (17,22) to (17,11)\n?\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\n// This for loop should create a vertical\n// line of obstacles from (11,0) to (11,11)\nfor(var firstY = 0; firstY <= 11; firstY++)\n{\n  obstacle.create(11, firstY, \"square\");\n}\n\n// This for loop should create a vertical\n// line of obstacles from (17,22) to (17,11)\nfor(var secondY = 22; secondY >= 11; secondY--)\n{\n  obstacle.create(17, secondY, \"square\");\n}\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"obstacle.create()\">Using the obstacle.create() Instruction</h3>\n<div class=\"text\">The obstacle.create() instruction is used to create the obstacles that stop the player's <concept ref=\"puck.create()\">puck</concept> from reaching the <concept ref=\"goal.create()\">goal</concept>. The obstacle.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept> and 1 optional parameter. The parameters must be put in the following order: puck.create(x, y, shape, [modifier]). By default, the modifier will be &quot;normal&quot;.</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div><div class=\"text\">The modifier can be any of the following: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optional]</div>\n<div class=\"code-sample-title\">Example of obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // creates a normal square obstacle at (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // creates a faster circle obstacle at (7,7)\nobstacle.create(1, \"triangle\", 17); // invalid, parameters out of order\nobstacle.create(4, 5); // invalid, missing shape\nobstacle.Create(3, 1); // invalid, uppercase C in create\nobstacle.create(6, 6, hexagon); // invalid, hexagon missing surrounding quotation marks (\" \")\nobstacle.create(4, 21, \"octagon\"); // invalid, octagon is not a valid shape</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-248",
          "name"          : "A Pinball Machine",
          "normalizedName": "a pinball machine",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's create a pinball machine! Finish the for loop required to create the triangle obstacles, like in the image below.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the for loop. The control variable should be named <var id=x>x</var> and have an initial value of 5. The condition should check if the value of <var id=x>x</var> is less than or equal to 25. The increment should increase the value of <var id=x>x</var> by 5. <strong>Hint:</strong> you will not be able to use the increment operator (++).</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-248_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nfor(?)\n{\n  obstacle.create(x, 8, \"triangle\");\n  obstacle.create(x, 11, \"triangle\");\n  obstacle.create(x, 14, \"triangle\");\n}\n\n// Boundaries of the game\n// Do not change these\nfor(var x = 0; x <= 30; x++)\n{\n  obstacle.create(x, 5, \"square\", \"faster\");\n  obstacle.create(x, 17, \"square\", \"faster\");\n}\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nfor(var x = 5; x <= 25; x = x + 5)\n{\n  obstacle.create(x, 8, \"triangle\");\n  obstacle.create(x, 11, \"triangle\");\n  obstacle.create(x, 14, \"triangle\");\n}\n\n// Boundaries of the game\n// Do not change these\nfor(var x = 0; x <= 30; x++)\n{\n  obstacle.create(x, 5, \"square\", \"faster\");\n  obstacle.create(x, 17, \"square\", \"faster\");\n}\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-249",
          "name"          : "Think of the Angles",
          "normalizedName": "think of the angles",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>This program uses 4 for loops to create various diagonal lines (the circle obstacles). If you look closely, you'll notice that the 4 for loops have the exact same parameters and could be simplified with a single for loop. Let's try to recreate the same puzzle using only one for loop.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Move each of the <concept ref=obstacle-create>obstacle.create()</concept> instructions that are inside the code blocks of the three last for loops to the code block of the first loop.</li><li class=code-item>Delete the three for loops that are (now) empty.</li><li class=code-item>Your code should only contain one for loop with <strong>8</strong> <concept ref=obstacle-create>obstacle.create()</concept> instructions in its code block.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-249_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(0, 14, \"circle\");\n\ngoal.create(30, 14);\n\n// Keep this for loop\nfor(var x = 1; x <= 6; x++)\n{\n  obstacle.create(x, 12 - x, \"circle\");\n  obstacle.create(x, 18 - x, \"circle\");\n  ?\n  \n}\n\n// Delete this for loop after moving\n// the obstacle.create() instructions\nfor(var x = 1; x <= 6; x++)\n{\n  // Move these in the code block of the first loop\n  obstacle.create(x + 8, x + 5, \"circle\");\n  obstacle.create(x + 8, x + 11, \"circle\");\n}\n\n// Delete this for loop after moving\n// the obstacle.create() instructions\nfor(var x = 1; x <= 6; x++)\n{\n  // Move these in the code block of the first loop\n  obstacle.create(x + 16, 12 - x, \"circle\");\n  obstacle.create(x + 16, 18 - x, \"circle\");\n}\n\n// Delete this for loop after moving\n// the obstacle.create() instructions\nfor(var x = 1; x <= 6; x++)\n{\n  // Move these in the code block of the first loop\n  obstacle.create(x + 24, x + 5, \"circle\");\n  obstacle.create(x + 24, x + 11, \"circle\");\n}\n\n// Boundaries of the game\n// Do not change these\nobstacle.create(0, 11, \"square\");\nobstacle.create(0, 17, \"square\");\n\nobstacle.create(7, 6, \"square\", \"faster\");\nobstacle.create(8, 6, \"square\", \"faster\");\nobstacle.create(7, 12, \"square\", \"faster\");\nobstacle.create(8, 12, \"square\", \"faster\");\n\nobstacle.create(15, 11, \"square\", \"faster\");\nobstacle.create(16, 11, \"square\", \"faster\");\nobstacle.create(15, 17, \"square\", \"faster\");\nobstacle.create(16, 17, \"square\", \"faster\");\n\nobstacle.create(23, 6, \"square\", \"faster\");\nobstacle.create(24, 6, \"square\", \"faster\");\nobstacle.create(23, 12, \"square\", \"faster\");\nobstacle.create(24, 12, \"square\", \"faster\");",
          "solution"      : "puck.create(0, 14, \"circle\");\n\ngoal.create(30, 14);\n\n// Keep this for loop\nfor(var x = 1; x <= 6; x++)\n{\n  obstacle.create(x, 12 - x, \"circle\");\n  obstacle.create(x, 18 - x, \"circle\");\n  obstacle.create(x + 8, x + 5, \"circle\");\n  obstacle.create(x + 8, x + 11, \"circle\");\n  obstacle.create(x + 16, 12 - x, \"circle\");\n  obstacle.create(x + 16, 18 - x, \"circle\");\n  obstacle.create(x + 24, x + 5, \"circle\");\n  obstacle.create(x + 24, x + 11, \"circle\");\n}\n\n// Boundaries of the game\n// Do not change these\nobstacle.create(0, 11, \"square\");\nobstacle.create(0, 17, \"square\");\n\nobstacle.create(7, 6, \"square\", \"faster\");\nobstacle.create(8, 6, \"square\", \"faster\");\nobstacle.create(7, 12, \"square\", \"faster\");\nobstacle.create(8, 12, \"square\", \"faster\");\n\nobstacle.create(15, 11, \"square\", \"faster\");\nobstacle.create(16, 11, \"square\", \"faster\");\nobstacle.create(15, 17, \"square\", \"faster\");\nobstacle.create(16, 17, \"square\", \"faster\");\n\nobstacle.create(23, 6, \"square\", \"faster\");\nobstacle.create(24, 6, \"square\", \"faster\");\nobstacle.create(23, 12, \"square\", \"faster\");\nobstacle.create(24, 12, \"square\", \"faster\");",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-250",
          "name"          : "Shapeshifting",
          "normalizedName": "shapeshifting",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a puzzle where every obstacle with an odd-numbered x coordinate transforms the player's puck into a circle and every obstacle with an even-numbered x coordinate transforms it into a triangle. Your puzzle should look like the image below.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the for loop. The control variable should be named <var id=x>x</var> and have an initial value of 3. The condition should check if the value of <var id=x>x</var> is less than or equal to 27. The increment should increase the value of <var id=x>x</var> by 3. <strong>Hint:</strong> you will not be able to use the increment operator (++).</li><li class=code-item>Replace the second question mark with an if statement. The condition of this if statement should check if the value of <var id=isDividableBy2>isDividableBy2</var> is equal to true. Inside the code block of this if statement, assign to the variable <var id=shape>shape</var> the value <string>\"triangle\"</string>.</li><li class=code-item>Replace the third question mark with an else statement. Inside the code block of this else statement, assign to the variable <var id=shape>shape</var> the value <string>\"circle\"</string>.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_en-CA/exercise-250_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(0, 11, \"circle\");\n\ngoal.create(30, 11);\n\nvar shape;\n\nfor(?)\n{\n  var isDividableBy2 = isDividableBy(x, 2);\n\n  // Create an if statement here\n  ?\n  \n  // Create an else statement here\n  ?\n  \n  obstacle.create(x, 2, shape, \"change\");\n  obstacle.create(x, 5, shape, \"change\");\n  obstacle.create(x, 8, shape, \"change\");\n  obstacle.create(x, 11, shape, \"change\");\n  obstacle.create(x, 14, shape, \"change\");\n  obstacle.create(x, 17, shape, \"change\");\n  obstacle.create(x, 20, shape, \"change\");\n}",
          "solution"      : "puck.create(0, 11, \"circle\");\n\ngoal.create(30, 11);\n\nvar shape;\n\nfor(var x = 3; x <= 27; x = x + 3)\n{\n  var isDividableBy2 = isDividableBy(x, 2);\n\n  // Create an if statement here\n  if(isDividableBy2 == true)\n  {\n    shape = \"triangle\";\n  }\n  // Create an else statement here\n  else\n  {\n    shape = \"circle\";\n  }\n\n  obstacle.create(x, 2, shape, \"change\");\n  obstacle.create(x, 5, shape, \"change\");\n  obstacle.create(x, 8, shape, \"change\");\n  obstacle.create(x, 11, shape, \"change\");\n  obstacle.create(x, 14, shape, \"change\");\n  obstacle.create(x, 17, shape, \"change\");\n  obstacle.create(x, 20, shape, \"change\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-012",
          "name"          : "Quiz 12",
          "description"   : "For Loops",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-012_q-01",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>for(var x = 0; x &lt; 3; x = x + 1)\n{\n  console.log(x);\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-01_a-01",
                  "value" : 0,
                  "answer": "<div><samp>0 1 2 3</samp></div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-012_q-01_a-02",
                  "value"      : 2,
                  "answer"     : "<div><samp>0 1 2</samp></div>",
                  "explanation": "The variable <var>x</var> begins at 0 and increases by one until it reaches the value of 3. The number 3 is never displayed, because once <var>x</var> reaches 3, the loop stops before it can display any more values."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-01_a-03",
                  "value" : 0,
                  "answer": "<div><samp>3 2 1 0</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-01_a-04",
                  "value" : 0,
                  "answer": "<div><samp>2 1 0</samp></div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-012_q-02",
              "question": "<div>What does <em>incrementing</em> the value of a variable mean?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>Assigning a new value to a variable</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-02_a-02",
                  "value" : 0,
                  "answer": "<div>Deleting a variable's value</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-02_a-03",
                  "value" : 0,
                  "answer": "<div>Decreasing the value of a variable</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-012_q-02_a-04",
                  "value"      : 2,
                  "answer"     : "<div>Increasing the value of a variable</div>",
                  "explanation": "<em>Incrementing</em> means: \"to increase the value of something.\""
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-012_q-03",
              "question": "<div>True or false. The increment operator (<code>++</code>) increases the value of a variable by one.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-012_q-03_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "The increment operator, used on the variable <var>x</var>, is equal to the instruction: <code>x = x + 1;</code>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-012_q-04",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>for(var x = 3; x &gt; 0; x--)\n{\n  console.log(x);\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-04_a-01",
                  "value" : 0,
                  "answer": "<div><samp>3 2 1 0</samp></div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-012_q-04_a-02",
                  "value"      : 2,
                  "answer"     : "<div><samp>3 2 1</samp></div>",
                  "explanation": "The variable <var>x</var> begins at 3 and decreases by one until it reaches the value of 0. The number 0 is never displayed, because once <var>x</var> reaches zero, the loop stops before it can display any more values."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-04_a-03",
                  "value" : 0,
                  "answer": "<div><samp>1 2 3</samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-04_a-04",
                  "value" : 0,
                  "answer": "<div><samp>0 1 2 3<samp></div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-012_q-05",
              "question": "<div>True or false. A <code>for</code> loop can never result in an infinite loop.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>True</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-012_q-05_a-02",
                  "value"      : 1,
                  "answer"     : "<div>False</div>",
                  "explanation": "An infinite loop can still happen if the condition of the <code>for</code> loop can never become false."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-012_q-06",
              "question": "<div>What is the problem with the following <code>for</code> loop?</div>\n<pre class=\"language-javascript\"><code>for(var x = 3; x++)\n{\n  console.log(x);\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-012_q-06_a-01",
                  "value"      : 2,
                  "answer"     : "<div>The loop is missing a condition (the middle component)</div>",
                  "explanation": "A <code>for</code> loop will always have 3 components: the initialization, the condition, and the increment or decrement."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>The control variable of a loop cannot be called \"x\"</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>The increment operator (<code>++</code>) cannot be used in a loop</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>All of the above</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-012_q-07",
              "question": "<div>In the following code, a semicolon was placed immediately after the <code>for</code> loop. Will this semicolon cause an infinite loop?</div>\n<pre class=\"language-javascript\"><code>for(var x = 0; x &lt; 3; x = x + 1);\n{\n  console.log(x);\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-012_q-07_a-01",
                  "value" : 0,
                  "answer": "<div>Yes, the semicolon will make it so the value of the control variable can never change, leaving the loop in an infinite loop.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-012_q-07_a-02",
                  "value"      : 1,
                  "answer"     : "<div>No, the code block of the loop will be empty and the loop will do nothing.</div>",
                  "explanation": "Because the increment of the control variable is still inside the loop, the loop will not be infinite. Instead, the iterations will do nothing."
                }
              ]
            }
          ],
          "normalizedName": "quiz 12",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_en-CA_exercise-270",
          "name"          : "Types of Loops",
          "normalizedName": "types of loops",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-270_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-270_en-ca.vtt"
        },
        {
          "_id"           : "cs-1_en-CA_project-25",
          "name"          : "Project 25 - Comparing Two Loops",
          "normalizedName": "project 25 - comparing two loops",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-216",
          "name"          : "For or While?",
          "normalizedName": "for or while",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-216_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-216_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use a for loop to create a countdown program that counts from 10 to 0.</li></ol>",
          "boilerplate"   : "?\n\nliftOff();",
          "solution"      : "for(var countdown = 10; countdown >= 0; countdown--)\n{\n  displayCount(countdown);\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"incremental loop\">Incremental Loops</h3>\n<div class=\"text\">Loops that <concept ref=\"iteration\">iterate</concept> a known number of times are called incremental loops. The control variables of these loops always have a clear starting and ending value.</div><div class=\"text\">An example of an incremental loop is a countdown program. The preferred type of loop for an incremental loop is a <concept ref=\"for loop\">for loop</concept>.</div>\n<h3 class=\"title\" ref=\"conditional loop\">Conditional Loops</h3>\n<div class=\"text\">Loops that <concept ref=\"iteration\">iterate</concept> an unknown number of times are called conditional loops. These loops typically end when a user enters a specific value.</div><div class=\"text\">An example of an conditional loop is a menu in a program. The preferred type of loop for a conditional loop is a <concept ref=\"while loop\">while loop</concept>.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-217",
          "name"          : "A Matter of Condition",
          "normalizedName": "a matter of condition",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's practice using the right type of loop for a program. We're going to build a program that will ask the hamstronauts to enter \"yes\" if they are ready for lift off. If they answer anything else but \"yes\", the program will continue asking them if they are ready.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=readyForLiftOff>readyForLiftOff</var> and assign it an initial value of <string>\"no\"</string>.</li><li class=code-item>Replace the second question mark with a while loop. The condition of this while loop should check if the value of <var id=readyForLiftOff>readyForLiftOff</var> is <strong>not equal</strong> to <string>\"yes\"</string>. Inside the code block of the while loop, assign to <var id=readyForLiftOff>readyForLiftOff</var> the value returned by a <concept ref=prompt>prompt()</concept> asking the user <string>\"Are you ready for lift off? (yes/no)\"</string>.</li></ol>",
          "boilerplate"   : "?\n\n?\n\nliftOff();",
          "solution"      : "var readyForLiftOff = \"no\";\n\nwhile(readyForLiftOff != \"yes\")\n{\n  readyForLiftOff = prompt(\"Are you ready for lift off? (yes/no)\");\n}\n\nliftOff();",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-218",
          "name"          : "From While to For",
          "normalizedName": "from while to for",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-218_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-218_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the while loop with a for loop. The functionality of the program should not change.</li></ol>",
          "boilerplate"   : "var hours = 0;\n\nwhile(hours < 24)\n{\n  console.log(hours + \" hours have passed.\");\n  hours++;\n}",
          "solution"      : "for(var hours = 0; hours < 24; hours++)\n{\n  console.log(hours + \" hours have passed.\");\n  \n}",
          "tips"          : "<h3 class=\"title\" ref=\"changing loop\">Changing a While Loop into a For Loop</h3>\n<div class=\"text\">We can always use a <concept ref=\"while loop\">while loop</concept> or a <concept ref=\"for loop\">for loop</concept> in any given situation. To do so, we must identify the three components: the <concept ref=\"control variable\">control variable</concept>, the <concept ref=\"condition\">condition</concept> and the <concept ref=\"increment\">increment</concept>. Then, we select the loop that is more appropriate for the problem.</div>\n<div class=\"code-sample-title\">Changing a while loop into a for loop</div><pre class=\"codeBlock\">var x = 0; // control variable (first component of for loop)\nwhile(x < 2) // condition (second component of for loop)\n{\n  console.log(\"The value of x is \" + x);\n  x = x + 1; // increment (third component of for loop)\n}\n\n// the same loop, but done with a for loop\nfor(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"The value of x is \" + x);\n}</pre>\n<div class=\"text\">In the code above, we can see that the control variable (var x = 0), the condition (x &lt; 2), and the increment (x = x + 1) are the same for both loops, but they appear in different places.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-219",
          "name"          : "A Strange Sentinel",
          "normalizedName": "a strange sentinel",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>While loops are ideal for programs that must end when a specific value is entered. This program calculates the weight of the baggage on a hamstronaut to ensure that they do not exceed the weight limit of 100kg. Once hamstronauts are done registering all their baggage, they enter a weight of -1 to stop the program. Can you build the rest of the program?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a while loop. The condition of this while loop should check if the value of <var id=currentItem>currentItem</var> is <strong>not equal</strong> to -1. Do not forget to wrap the instructions following the loop into a code block.</li></ol>",
          "boilerplate"   : "var currentItem = 0;\nvar totalWeight = 0;\n\n?\n\n// These instructions should be in the code block of the loop\ncurrentItem = prompt(\"Enter the weight of an item: (-1 to exit)\");\ncurrentItem = Number(currentItem);\nif(currentItem != -1)\n{\n  totalWeight = totalWeight + currentItem;\n}\n\n// These instructions should be outside the code block of the loop\nif(totalWeight > 100)\n{\n  console.log(\"Weight limit exceeded!\");\n}\nelse\n{\n  console.log(\"Safe weight, enjoy your space walk!\");\n}",
          "solution"      : "var currentItem = 0;\nvar totalWeight = 0;\n\nwhile(currentItem != -1)\n{\n  // These instructions should be in the code block of the loop\n  currentItem = prompt(\"Enter the weight of an item: (-1 to exit)\");\n  currentItem = Number(currentItem);\n  if(currentItem != -1)\n  {\n    totalWeight = totalWeight + currentItem;\n  }\n}\n\n// These instructions should be outside the code block of the loop\nif(totalWeight > 100)\n{\n  console.log(\"Weight limit exceeded!\");\n}\nelse\n{\n  console.log(\"Safe weight, enjoy your space walk!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"if statement\">If Statement</h3>\n<div class=\"text\">The if statement is a type of conditional statement that allow us to control if a <concept ref=\"code block\">code block</concept> will be executed. They have two main parts: a <concept ref=\"condition\">Boolean condition</concept>, and code to execute if the condition is true.</div>\n<div class=\"code-sample-title\">Example of an if statement</div><pre class=\"codeBlock\">var money = 8;\nif(money > 5) // the Boolean condition, between parentheses\n{\n  // everything between the curly braces ({}) will\n  // only be executed if money is greater than 5\n  console.log(\"You can buy the game!\");\n}</pre>\n<div class=\"text\">In the above example, if the <concept ref=\"variable value\">value</concept> of the variable money is greater than 5, then the console.log() is executed, otherwise nothing happens.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-220",
          "name"          : "A Conditional Increment",
          "normalizedName": "a conditional increment",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-220_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-220_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with a while loop. The condition of this loop should check if the value of <var id=oxygenTanks>oxygenTanks</var> is greater than 0.</li></ol>",
          "boilerplate"   : "var oxygenTanks = 10;\nvar choice = 0;\nvar hamstronauts = 0;\n\n?\n{\n  choice = prompt(\"There are \" + oxygenTanks + \" oxygen tanks left, how many would you like to take? (1 or 2)\");\n  choice = Number(choice);\n\n  if(choice == 1)\n  {\n    oxygenTanks = oxygenTanks - 1;\n    hamstronauts++;\n  }\n  else if(choice == 2 && oxygenTanks > 1)\n  {\n    oxygenTanks = oxygenTanks - 2;\n    hamstronauts++;\n  }\n}\n\nconsole.log(\"With 10 oxygen tanks, a total of \" + hamstronauts + \" hamstronauts can go on a space walk.\");",
          "solution"      : "var oxygenTanks = 10;\nvar choice = 0;\nvar hamstronauts = 0;\n\nwhile(oxygenTanks > 0)\n{\n  choice = prompt(\"There are \" + oxygenTanks + \" oxygen tanks left, how many would you like to take? (1 or 2)\");\n  choice = Number(choice);\n\n  if(choice == 1)\n  {\n    oxygenTanks = oxygenTanks - 1;\n    hamstronauts++;\n  }\n  else if(choice == 2 && oxygenTanks > 1)\n  {\n    oxygenTanks = oxygenTanks - 2;\n    hamstronauts++;\n  }\n}\n\nconsole.log(\"With 10 oxygen tanks, a total of \" + hamstronauts + \" hamstronauts can go on a space walk.\");",
          "tips"          : "<h3 class=\"title\" ref=\"conditional increment\">Incrementing a Control Variable with a Condition</h3>\n<div class=\"text\">Sometimes, the <concept ref=\"increment\">increment</concept> of a <concept ref=\"loops\">loop</concept> can depend on a certain condition in a program. In those cases, using a <concept ref=\"for loop\">for loop</concept> becomes difficult.</div><div class=\"text\">Look at the following program:</div>\n<div class=\"code-sample-title\">Example of an increment depending on a condition</div><pre class=\"codeBlock\">var aNumber;\nvar points = 0;\n\nwhile(points < 100)\n{\n  aNumber = getRandomNumber(1, 20); // returns a random number from 1 to 20\n\n  if(aNumber < 10) // if the random number is smaller than 10\n  {\n    points = points + 1; // increase the value of the control variable\n  }\n  else\n  {\n    points = points - 1; // decrease the value of the control variable\n  }\n}</pre>\n<div class=\"text\">In the above code, the variable points can either increase by one or decrease by one. It would be difficult to put this in the <concept ref=\"for loop components\">increment component</concept> of a for loop, so in this case we have to use a <concept ref=\"while loop\">while loop</concept>.</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-252",
          "name"          : "A Day in Space",
          "normalizedName": "a day in space",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>The length of a day on a planet is calculated by how long it takes for the planet to complete a full rotation. On some planets, a day can last up to 58 Earth days. On other planets, just 12 hours is enough for a full day. Let's build a program capable of determining which planet in our solar system has the longest day.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with the type of loop you think is most appropriate. The control variable of this loop should be named <var id=planetNumber>planetNumber</var> and its initial value should be 0. The condition of this loop should check if the value of <var id=planetNumber>planetNumber</var> is less than 8. The increment of the loop should increase the value of <var id=planetNumber>planetNumber</var> by one.</li></ol>",
          "boilerplate"   : "var longestDay = 0;\nvar longestDayPlanetName = \"\";\nvar currentDayLength;\nvar currentPlanetName;\n\n?\n{\n  currentPlanetName = getPlanetName(planetNumber);\n  currentDayLength = getDayLength(currentPlanetName);\n\n  if(currentDayLength > longestDay)\n  {\n    longestDay = currentDayLength;\n    longestDayPlanetName = currentPlanetName;\n  }\n}\n\nconsole.log(\"The planet with the longest day is \" + longestDayPlanetName + \" with a day length of \" + longestDay + \" Earth days.\");",
          "solution"      : "var longestDay = 0;\nvar longestDayPlanetName = \"\";\nvar currentDayLength;\nvar currentPlanetName;\n\nfor(var planetNumber = 0; planetNumber < 8; planetNumber++)\n{\n  currentPlanetName = getPlanetName(planetNumber);\n  currentDayLength = getDayLength(currentPlanetName);\n\n  if(currentDayLength > longestDay)\n  {\n    longestDay = currentDayLength;\n    longestDayPlanetName = currentPlanetName;\n  }\n}\n\nconsole.log(\"The planet with the longest day is \" + longestDayPlanetName + \" with a day length of \" + longestDay + \" Earth days.\");",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"boolean\">Booleans</h3>\n<div class=\"text\">Booleans are a <concept ref=\"data type\">data type</concept> with only two possible values: true or false.</div><div class=\"text\">Any expression using a <concept ref=\"relational operators\">relational operator</concept> will return a Boolean value.</div>\n<div class=\"code-sample-title\">Example of Boolean values</div><pre class=\"codeBlock\">var iLikeCereals = true;\nvar isGreaterThan18 = 10 > 18; // isGreaterThan18 will be false\nvar age = 19;\nvar ageIsGreaterThan18 = age > 18; // ageIsGreaterThan18 will be true</pre>\n<h3 class=\"title\" ref=\"and operator\">AND Operator (&amp;&amp;)</h3>\n<div class=\"text\">The AND operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if two or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the AND operator will only be true if all the conditions that make up the expression are true.</div><div class=\"text\">The operator is represented using two ampersand symbols (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Example of the AND operator</div><pre class=\"codeBlock\">var result = true && true; // result is true\nresult = false && true; // result is false\nresult = true && false; // result is false\nresult = false && false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-253",
          "name"          : "Hangman",
          "normalizedName": "hangman",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a game of hangman! The player will have 10 chances to guess a secret word. At every iteration, the player will have to guess one letter. The player wins if they can guess the word before their 10 chances are over, otherwise, they lose.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with the type of loop you think is most appropriate. The condition of this loop should check if the value of <var id=attempts>attempts</var> is less than 10 <strong>and</strong> if the value of <var id=secretFound>secretFound</var> is equal to false.</li></ol>",
          "boilerplate"   : "var currentSecretWord = checkForLetter();\nvar secretFound = false;\nvar attempts = 0;\n\n?\n{\n  var currentLetter = prompt(\"The word so far is: \" + currentSecretWord + \". You have \" + (10 - attempts) + \" attempts left. Please enter a letter!\");\n\n  currentSecretWord = checkForLetter(currentLetter);\n\n  secretFound = checkSecretWord();\n\n  attempts++;\n}\n\nif(secretFound == true)\n{\n  console.log(\"You found the secret word: \" + currentSecretWord);\n}\nelse\n{\n  console.log(\"You did not find the word\");\n}",
          "solution"      : "var currentSecretWord = checkForLetter();\nvar secretFound = false;\nvar attempts = 0;\n\nwhile(attempts < 10 && secretFound == false)\n{\n  var currentLetter = prompt(\"The word so far is: \" + currentSecretWord + \". You have \" + (10 - attempts) + \" attempts left. Please enter a letter!\");\n\n  currentSecretWord = checkForLetter(currentLetter);\n\n  secretFound = checkSecretWord();\n\n  attempts++;\n}\n\nif(secretFound == true)\n{\n  console.log(\"You found the secret word: \" + currentSecretWord);\n}\nelse\n{\n  console.log(\"You did not find the word\");\n}",
          "tips"          : "<h4 class=\"no-content\">No tips</h4>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-254",
          "name"          : "The Collatz Conjecture",
          "normalizedName": "the collatz conjecture",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>The Collatz conjecture is an interesting mathematical phenomenon. The conjecture states that any positive whole number passed through the following algorithm will end up with a value of 1 after a fixed number of iterations. No one has ever found a number that doesn't end to 1 eventually. Let's build a program to test the algorithm and see if we can find a number that won't end up to a value of 1!</div><div class=text>Collatz's Conjecture Algorithm:</div><ol class=algorithm><li>Start with any positive whole number (number with no decimals).</li><li>If the number is even, divide the number by 2 (n = n / 2).</li><li>If the number is odd, multiply the number by 3 and add 1 (n = 3 x n + 1).</li><li>If the number is now equal to 1, stop.</li><li>If the number is still not equal to 1, go back to step (b).</li></ol><div class=text>For example, say our starting number is 12. We get the following sequence:</div><pre><samp>12 (even, divide by 2)\n 6 (even, divide by 2)\n 3 (odd, multiply by 3 and add 1)\n10 (even, divide by 2)\n 5 (odd, multiply by 3 and add 1)\n16 (even, divide by 2)\n 8 (even, divide by 2)\n 4 (even, divide by 2)\n 2 (even, divide by 2)\n 1.</samp></pre></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with the type of loop you think is most appropriate. This loop should not stop until the value of <var id=temporaryNumber>temporaryNumber</var> is equal to 1.</li></ol>",
          "boilerplate"   : "var myNumber = prompt(\"Enter the initial number (must be larger than 0)\");\nvar iterationsCompleted = 0;\n\nmyNumber = Number(myNumber);\n\nvar temporaryNumber = myNumber;\n\n?\n{\n  var isDividableBy2 = isDividableBy(temporaryNumber, 2);\n\n  if(isDividableBy2 == false)\n  {\n    temporaryNumber = temporaryNumber * 3 + 1;\n  }\n  else\n  {\n    temporaryNumber = temporaryNumber / 2;\n  }\n\n  iterationsCompleted++;\n}\n\nconsole.log(\"The number became \" + temporaryNumber + \" after \" + iterationsCompleted + \" iterations\");",
          "solution"      : "var myNumber = prompt(\"Enter the initial number (must be larger than 0)\");\nvar iterationsCompleted = 0;\n\nmyNumber = Number(myNumber);\n\nvar temporaryNumber = myNumber;\n\nwhile(temporaryNumber != 1)\n{\n  var isDividableBy2 = isDividableBy(temporaryNumber, 2);\n\n  if(isDividableBy2 == false)\n  {\n    temporaryNumber = temporaryNumber * 3 + 1;\n  }\n  else\n  {\n    temporaryNumber = temporaryNumber / 2;\n  }\n\n  iterationsCompleted++;\n}\n\nconsole.log(\"The number became \" + temporaryNumber + \" after \" + iterationsCompleted + \" iterations\");",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">While Loops</h3>\n<div class=\"text\">While loops are a type of <concept ref=\"loops\">loop</concept> that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div>\n<div class=\"code-sample-title\">Example of while loop</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x is equal to: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"and operator\">AND Operator (&amp;&amp;)</h3>\n<div class=\"text\">The AND operator is a <concept ref=\"logical operators\">logical operator</concept> that allows us to check if two or more <concept ref=\"boolean\">Boolean</concept> values are true.</div><div class=\"text\">An expression that uses the AND operator will only be true if all the conditions that make up the expression are true.</div><div class=\"text\">The operator is represented using two ampersand symbols (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Example of the AND operator</div><pre class=\"codeBlock\">var result = true && true; // result is true\nresult = false && true; // result is false\nresult = true && false; // result is false\nresult = false && false; // result is false</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_project-26",
          "name"          : "Project 26 - A Game of Life",
          "normalizedName": "project 26 - a game of life",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-221",
          "name"          : "A Growing Colony",
          "normalizedName": "a growing colony",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-221_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-221_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the for loop. The control variable should be named <var id=col>col</var> and should have an initial value of 0. The condition of the loop should check if the value of <var id=col>col</var> is less than the value returned by the <concept ref=getColumns>getColumns()</concept> instruction. The increment should increase the value of <var id=col>col</var> by one.</li><li class=code-item>Complete the if statement. The first question mark within its condition should be replaced with a condition to check if the value of <var id=cellState>cellState</var> is equal to <string>\"alive\"</string>. The second question mark should be replaced with a condition to check if the value of <var id=neighbors>neighbors</var> is less than 2 or greater than 3.</li><li class=code-item>Complete the else if statement. The first question mark within its condition should be replaced with a condition to check if the value of <var id=cellState>cellState</var> is equal to <string>\"empty\"</string>. The second question mark should be replaced with a condition to check if the value of <var id=neighbors>neighbors</var> is equal to 3.</li></ol>",
          "boilerplate"   : "initializeGrid();\n\nfor(?)\n{\n  var cellState = getCellState(0, col);\n  var neighbors = getNeighbors(0, col);\n\n  if(? && (?))\n  {\n    setEmpty(0, col);\n  }\n  else if(? && ?)\n  {\n    setAlive(0, col);\n  }\n}\n\nupdateGrid();",
          "solution"      : "initializeGrid();\n\nfor(var col = 0; col < getColumns(); col++)\n{\n  var cellState = getCellState(0, col);\n  var neighbors = getNeighbors(0, col);\n\n  if(cellState == \"alive\" && (neighbors < 2 || neighbors > 3))\n  {\n    setEmpty(0, col);\n  }\n  else if(cellState == \"empty\" && neighbors == 3)\n  {\n    setAlive(0, col);\n  }\n}\n\nupdateGrid();",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"relational operators\">Relational Operators</h3>\n<div class=\"text\">Relational operators allow us to compare values. They always return a <concept ref=\"boolean\">Boolean</concept> value.</div><div class=\"text\">The relational operators are: greater than (&gt;), less than (&lt;), greater or equal to (&gt;=), less or equal to (&lt;=), equal (==), not equal (!=).</div>\n<div class=\"code-sample-title\">Example of relational operators</div><pre class=\"codeBlock\">var result = 10 > 5; // true, 10 is greater than 5\nresult = 10 < 5; // false, 10 is not less than 5\nresult = 10 <= 10; // true, 10 is equal to 10\nresult = 10 < 10; // false, 10 is not less than 10\nresult = 15 == 10; // false, 15 is not equal to 10\nresult = 15 == 15; // true, 15 is equal to 15\nresult = 5 != 7; // true, 5 is not equal to 7\nresult = 5 != 5; // false, 5 is equal to 5</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-222",
          "name"          : "Checking All the Neighbors",
          "normalizedName": "checking all the neighbors",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-222_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-222_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Complete the for loop. The control variable should be named <var id=row>row</var> and should have an initial value of 0. The condition of the loop should check if the value of <var id=row>row</var> is less than the value returned by the <concept ref=getRows>getRows()</concept> instruction. The increment should increase the value of <var id=row>row</var> by one.</li><li class=code-item>Replace the second question mark with an opening curly brace ({).</li><li class=code-item>Replace the third question mark with a closing curly brace (}).</li></ol>",
          "boilerplate"   : "initializeGrid();\n\nfor(?)\n?\nfor(var col = 0; col < getColumns(); col++)\n{\n  var cellState = getCellState(row, col);\n  var neighbors = getNeighbors(row, col);\n\n  if(cellState == \"alive\" && (neighbors < 2 || neighbors > 3))\n  {\n    setEmpty(row, col);\n  }\n\n  else if(cellState == \"empty\" && neighbors == 3)\n  {\n    setAlive(row, col);\n  }\n}\n?\n\nupdateGrid();",
          "solution"      : "initializeGrid();\n\nfor(var row = 0; row < getRows(); row++)\n{\n  for(var col = 0; col < getColumns(); col++)\n  {\n    var cellState = getCellState(row, col);\n    var neighbors = getNeighbors(row, col);\n\n    if(cellState == \"alive\" && (neighbors < 2 || neighbors > 3))\n    {\n      setEmpty(row, col);\n    }\n\n    else if(cellState == \"empty\" && neighbors == 3)\n    {\n      setAlive(row, col);\n    }\n  }\n}\n\nupdateGrid();",
          "tips"          : "<h3 class=\"title\" ref=\"nested loops\">Nested Loops</h3>\n<div class=\"text\">We can put a loop inside another loop to create a nested loop (this is similar to <concept ref=\"nested statements\">nested conditional statements</concept>). The first loop is called the outer loop, while the second loop is called the inner loop. Nested loops can be made with either <concept ref=\"for loop\">for loops</concept> or <concept ref=\"while loop\">while loops</concept>.</div>\n<div class=\"code-sample-title\">Example of a nested loop</div><pre class=\"codeBlock\">console.log(\"outer loop starts\");\nfor(var x = 0; x < 2; x = x + 1) // outer loop\n{\n  console.log(\"inner loop starts\");\n  for(var y = 0; y < 2; y = y + 1) // inner loop\n  {\n    console.log(\"x is equal to \" + x + \" and y is equal to \" + y);\n  }\n  console.log(\"inner loop is done\");\n}\nconsole.log(\"outer loop is done\");</pre>\n<div class=\"text\">The program will begin by doing one iteration of the outer loop, which will execute all the iterations of the inner loop. Then, the program will do the next iteration of the outer loop, which will restart the inner loop, redoing all the iterations once more. This continues until the outer loop completes all of its iterations.</div><div class=\"text\">The output of the above program is as follows:</div><div class=\"text\">outer loop starts</div><div class=\"text\">inner loop starts</div><div class=\"text\">x is equal to 0 and y is equal to 0</div><div class=\"text\">x is equal to 0 and y is equal to 1</div><div class=\"text\">inner loop is done</div><div class=\"text\">inner loop starts</div><div class=\"text\">x is equal to 1 and y is equal to 0</div><div class=\"text\">x is equal to 1 and y is equal to 1</div><div class=\"text\">inner loop is done</div><div class=\"text\">outer loop is done</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-223",
          "name"          : "Seeding Life",
          "normalizedName": "seeding life",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's modify our program by adding an input. This input will let the user select an initial sample number which will decide which cells initially contain living bacteria.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=sampleNumber>sampleNumber</var>. Assign it the value returned by a <concept ref=prompt>prompt()</concept> asking the user <string>\"Please enter a sample number: (1 to 10000)\"</string>.</li><li class=code-item>Replace the second question mark with an instruction to assign to <var id=sampleNumber>sampleNumber</var> the value of <var id=sampleNumber>sampleNumber</var> converted into a number. You will need to use the <concept ref=Number>Number()</concept> instruction.</li><li class=code-item>Replace the third question mark with the variable <var id=sampleNumber>sampleNumber</var>.</li></ol>",
          "boilerplate"   : "?\n?\n\ninitializeGrid(?);\n\nfor(var row = 0; row < getRows(); row++)\n{\n  for(var col = 0; col < getColumns(); col++)\n  {\n    var cellState = getCellState(row, col);\n    var neighbors = getNeighbors(row, col);\n\n    if(cellState == \"alive\" && (neighbors < 2 || neighbors > 3))\n    {\n      setEmpty(row, col);\n    }\n    else if(cellState == \"empty\" && neighbors == 3)\n    {\n      setAlive(row, col);\n    }\n  }\n}\n\nupdateGrid();",
          "solution"      : "var sampleNumber = prompt(\"Please enter a sample number: (1 to 10000)\");\nsampleNumber = Number(sampleNumber);\n\ninitializeGrid(sampleNumber);\n\nfor(var row = 0; row < getRows(); row++)\n{\n  for(var col = 0; col < getColumns(); col++)\n  {\n    var cellState = getCellState(row, col);\n    var neighbors = getNeighbors(row, col);\n\n    if(cellState == \"alive\" && (neighbors < 2 || neighbors > 3))\n    {\n      setEmpty(row, col);\n    }\n    else if(cellState == \"empty\" && neighbors == 3)\n    {\n      setAlive(row, col);\n    }\n  }\n}\n\nupdateGrid();",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Using the prompt() Instruction</h3>\n<div class=\"text\">The prompt() <concept ref=\"instruction\">instruction</concept> creates a text <concept ref=\"input\">input</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. Typically, the parameter is a <concept ref=\"string\">string</concept>. The parameter will be displayed to the user above the input box.</div><div class=\"text\">The instruction returns a string that is the value entered by the user the input box. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later.</div>\n<div class=\"code-sample-title\">Example of prompt()</div><pre class=\"codeBlock\">var myName = prompt(\"What is your name?\"); // user enters: EduCode\nconsole.log(\"Your name is \" + myName); // displays the text: Your name is EduCode\nvar myAge = prompt(\"How old are you?\"); // user enters: 16\nconsole.log(\"You are \" + myAge + \" years old\"); // displays the text: You are 16 years old</pre>\n<h3 class=\"title\" ref=\"Number()\">Using the Number() Instruction</h3>\n<div class=\"text\">The Number() instruction converts a string into a <concept ref=\"number\">number</concept>. The instruction has one <concept ref=\"parameter\">parameter</concept>. The parameter should be a <concept ref=\"string\">string</concept> or a <concept ref=\"variable\">variable</concept> with a string <concept ref=\"variable value\">value</concept>. In either case, the string should represent a number.</div><div class=\"text\">The instruction returns the string parameter as a number. This value should be saved in a <concept ref=\"variable\">variable</concept> so that it can be used later. If the string cannot be converted to a number, the instruction returns <concept ref=\"not a number\">NaN</concept> (Not a Number).</div><div class=\"text\">Note that the &quot;N&quot; of Number() must be in uppercase.</div>\n<div class=\"code-sample-title\">Example of Number()</div><pre class=\"codeBlock\">var first = Number(\"10\"); // first receives the converted value of 10\n\nvar userInput = prompt(\"Enter a number\"); // user enters: 42\nuserInput = Number(userInput); // userInput receives the converted value of 42\n\nvar second = number(\"6\"); // invalid, \"n\" should be in uppercase\nvar third = Number(\"a\"); // invalid, returns NaN (Not a Number)</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-224",
          "name"          : "A Never-Ending Cycle",
          "normalizedName": "a never-ending cycle",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-224_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-224_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=currentDay>currentDay</var>. Assign it the value 0.</li><li class=code-item>Replace the second question mark with a while loop. Its condition should check if the value of <var id=currentDay>currentDay</var> is less than 50. <strong>Note</strong>: Do not add a code block, there is already one in default code.</li><li class=code-item>Replace the third question mark with an instruction to increment the value of <var id=currentDay>currentDay</var> by one.</li></ol>",
          "boilerplate"   : "var sampleNumber = prompt(\"Please enter a sample number: (1 to 10000)\");\nsampleNumber = Number(sampleNumber);\n\ninitializeGrid(sampleNumber);\n\n// Create the currentDay variable here\n?\n\n?\n{\n  for(var row = 0; row < getRows(); row++)\n  {\n    for(var col = 0; col < getColumns(); col++)\n    {\n      var cellState = getCellState(row, col);\n      var neighbors = getNeighbors(row, col);\n\n      if(cellState == \"alive\" && (neighbors < 2 || neighbors > 3))\n      {\n        setEmpty(row, col);\n      }\n      else if(cellState == \"empty\" && neighbors == 3)\n      {\n        setAlive(row, col);\n      }\n    }\n  }\n\n  // Increase the value of currentDay by one here\n  ?\n\n  updateGrid();\n}",
          "solution"      : "var sampleNumber = prompt(\"Please enter a sample number: (1 to 10000)\");\nsampleNumber = Number(sampleNumber);\n\ninitializeGrid(sampleNumber);\n\n// Create the currentDay variable here\nvar currentDay = 0;\n\nwhile(currentDay < 50)\n{\n  for(var row = 0; row < getRows(); row++)\n  {\n    for(var col = 0; col < getColumns(); col++)\n    {\n      var cellState = getCellState(row, col);\n      var neighbors = getNeighbors(row, col);\n\n      if(cellState == \"alive\" && (neighbors < 2 || neighbors > 3))\n      {\n        setEmpty(row, col);\n      }\n      else if(cellState == \"empty\" && neighbors == 3)\n      {\n        setAlive(row, col);\n      }\n    }\n  }\n\n  // Increase the value of currentDay by one here\n  currentDay++;\n\n  updateGrid();\n}",
          "tips"          : "<h3 class=\"title\" ref=\"nested loops\">Nested Loops</h3>\n<div class=\"text\">We can put a loop inside another loop to create a nested loop (this is similar to <concept ref=\"nested statements\">nested conditional statements</concept>). The first loop is called the outer loop, while the second loop is called the inner loop. Nested loops can be made with either <concept ref=\"for loop\">for loops</concept> or <concept ref=\"while loop\">while loops</concept>.</div>\n<div class=\"code-sample-title\">Example of a nested loop</div><pre class=\"codeBlock\">console.log(\"outer loop starts\");\nfor(var x = 0; x < 2; x = x + 1) // outer loop\n{\n  console.log(\"inner loop starts\");\n  for(var y = 0; y < 2; y = y + 1) // inner loop\n  {\n    console.log(\"x is equal to \" + x + \" and y is equal to \" + y);\n  }\n  console.log(\"inner loop is done\");\n}\nconsole.log(\"outer loop is done\");</pre>\n<div class=\"text\">The program will begin by doing one iteration of the outer loop, which will execute all the iterations of the inner loop. Then, the program will do the next iteration of the outer loop, which will restart the inner loop, redoing all the iterations once more. This continues until the outer loop completes all of its iterations.</div><div class=\"text\">The output of the above program is as follows:</div><div class=\"text\">outer loop starts</div><div class=\"text\">inner loop starts</div><div class=\"text\">x is equal to 0 and y is equal to 0</div><div class=\"text\">x is equal to 0 and y is equal to 1</div><div class=\"text\">inner loop is done</div><div class=\"text\">inner loop starts</div><div class=\"text\">x is equal to 1 and y is equal to 0</div><div class=\"text\">x is equal to 1 and y is equal to 1</div><div class=\"text\">inner loop is done</div><div class=\"text\">outer loop is done</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-255",
          "name"          : "The Multiplication Table",
          "normalizedName": "the multiplication table",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's practice using nested for loops. We're going to make a program that displays the multiplication table of the first 9 whole numbers. Our first loop will control each row of the table, while the inner loop will control each column of the table.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with the 3 components required to complete the for loop. The control variable of the for loop should be named <var id=number>number</var> and have an initial value of 1. The condition of the for loop should check if the value of <var id=number>number</var> is less than or equal to 9. The increment should increase the value of <var id=number>number</var> by one. Remember, each component should be separated by a semicolon (;).</li><li class=code-item>Replace the second question mark with the 3 components required to complete the for loop. The control variable of the for loop should be named <var id=multiplier>multiplier</var> and have an initial value of 1. The condition of the for loop should check if the value of <var id=multiplier>multiplier</var> is less than or equal to 9. The increment should increase the value of <var id=multiplier>multiplier</var> by one.</li></ol>",
          "boilerplate"   : "for(?)\n{\n  for(?)\n  {\n    var result = number * multiplier;\n    addToLine(result);\n  }\n  displayLine();\n}",
          "solution"      : "for(var number = 1; number <= 9; number++)\n{\n  for(var multiplier = 1; multiplier <= 9; multiplier++)\n  {\n    var result = number * multiplier;\n    addToLine(result);\n  }\n  displayLine();\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"nested loops\">Nested Loops</h3>\n<div class=\"text\">We can put a loop inside another loop to create a nested loop (this is similar to <concept ref=\"nested statements\">nested conditional statements</concept>). The first loop is called the outer loop, while the second loop is called the inner loop. Nested loops can be made with either <concept ref=\"for loop\">for loops</concept> or <concept ref=\"while loop\">while loops</concept>.</div>\n<div class=\"code-sample-title\">Example of a nested loop</div><pre class=\"codeBlock\">console.log(\"outer loop starts\");\nfor(var x = 0; x < 2; x = x + 1) // outer loop\n{\n  console.log(\"inner loop starts\");\n  for(var y = 0; y < 2; y = y + 1) // inner loop\n  {\n    console.log(\"x is equal to \" + x + \" and y is equal to \" + y);\n  }\n  console.log(\"inner loop is done\");\n}\nconsole.log(\"outer loop is done\");</pre>\n<div class=\"text\">The program will begin by doing one iteration of the outer loop, which will execute all the iterations of the inner loop. Then, the program will do the next iteration of the outer loop, which will restart the inner loop, redoing all the iterations once more. This continues until the outer loop completes all of its iterations.</div><div class=\"text\">The output of the above program is as follows:</div><div class=\"text\">outer loop starts</div><div class=\"text\">inner loop starts</div><div class=\"text\">x is equal to 0 and y is equal to 0</div><div class=\"text\">x is equal to 0 and y is equal to 1</div><div class=\"text\">inner loop is done</div><div class=\"text\">inner loop starts</div><div class=\"text\">x is equal to 1 and y is equal to 0</div><div class=\"text\">x is equal to 1 and y is equal to 1</div><div class=\"text\">inner loop is done</div><div class=\"text\">outer loop is done</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-256",
          "name"          : "A Short Report Card",
          "normalizedName": "a short report card",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Let's build a program to display the test results of students in a class. Our program will require two loops: one to iterate over the names of the students and a second one to iterate over each test result of each student.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with the 3 components required to complete the for loop. The control variable of the for loop should be named <var id=studentId>studentId</var> and have an initial value of 0. The condition of the for loop should check if the value of <var id=studentId>studentId</var> is less than 3. The increment should increase the value of <var id=studentId>studentId</var> by one. Remember, each component should be separated by a semicolon (;).</li><li class=code-item>Replace the second question mark with the 3 components required to complete the for loop. The control variable of the for loop should be named <var id=testNumber>testNumber</var> and have an initial value of 1. The condition of the for loop should check if the value of <var id=testNumber>testNumber</var> is less than or equal to 3. The increment should increase the value of <var id=testNumber>testNumber</var> by one.</li></ol>",
          "boilerplate"   : "var studentName;\nvar testResult;\n\nfor(?)\n{\n  studentName = getStudentName(studentId);\n\n  console.log(\"Student name: \" + studentName);\n\n  for(?)\n  {\n    testResult = getTestResult(studentName, testNumber);\n\n    console.log(\"Test number \" + testNumber + \": \" + testResult);\n  }\n}",
          "solution"      : "var studentName;\nvar testResult;\n\nfor(var studentId = 0; studentId < 3; studentId++)\n{\n  studentName = getStudentName(studentId);\n\n  console.log(\"Student name: \" + studentName);\n\n  for(var testNumber = 1; testNumber <= 3; testNumber++)\n  {\n    testResult = getTestResult(studentName, testNumber);\n\n    console.log(\"Test number \" + testNumber + \": \" + testResult);\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"nested loops\">Nested Loops</h3>\n<div class=\"text\">We can put a loop inside another loop to create a nested loop (this is similar to <concept ref=\"nested statements\">nested conditional statements</concept>). The first loop is called the outer loop, while the second loop is called the inner loop. Nested loops can be made with either <concept ref=\"for loop\">for loops</concept> or <concept ref=\"while loop\">while loops</concept>.</div>\n<div class=\"code-sample-title\">Example of a nested loop</div><pre class=\"codeBlock\">console.log(\"outer loop starts\");\nfor(var x = 0; x < 2; x = x + 1) // outer loop\n{\n  console.log(\"inner loop starts\");\n  for(var y = 0; y < 2; y = y + 1) // inner loop\n  {\n    console.log(\"x is equal to \" + x + \" and y is equal to \" + y);\n  }\n  console.log(\"inner loop is done\");\n}\nconsole.log(\"outer loop is done\");</pre>\n<div class=\"text\">The program will begin by doing one iteration of the outer loop, which will execute all the iterations of the inner loop. Then, the program will do the next iteration of the outer loop, which will restart the inner loop, redoing all the iterations once more. This continues until the outer loop completes all of its iterations.</div><div class=\"text\">The output of the above program is as follows:</div><div class=\"text\">outer loop starts</div><div class=\"text\">inner loop starts</div><div class=\"text\">x is equal to 0 and y is equal to 0</div><div class=\"text\">x is equal to 0 and y is equal to 1</div><div class=\"text\">inner loop is done</div><div class=\"text\">inner loop starts</div><div class=\"text\">x is equal to 1 and y is equal to 0</div><div class=\"text\">x is equal to 1 and y is equal to 1</div><div class=\"text\">inner loop is done</div><div class=\"text\">outer loop is done</div>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-257",
          "name"          : "A Prime Number",
          "normalizedName": "a prime number",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">You've got this!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>We have been tasked with finding all the prime numbers in the first 100 whole numbers. A prime number is a number than can only be wholly divided by 1 and itself. For example, 7 is a prime number, as it can only be divided by 1 and 7. On the other hand, 6 is not a prime number, as it can be divided by 1, 2, 3 or 6. To find if a number is prime, we must divide the number by every number from 2 to the number minus one (n - 1). For example, to find if 10 is a prime number, we'll divide 10 by 2, then by 3, then by 4 and so on. If any division returns a whole number (no decimals) then the number is not prime! Let's build a program to find all the prime numbers in the first 100 numbers.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with the 3 components required to complete the for loop. The control variable of the for loop should be named <var id=currentNumber>currentNumber</var>. The for loop should iterate from 2 to 100.</li><li class=code-item>Replace the second question mark with the 3 components required to complete the for loop. The control variable of the for loop should be named <var id=divider>divider</var>. The for loop should iterate from 2 to the value of <var id=currentNumber>currentNumber</var> minus 1. <strong>Hint:</strong> if this for loop goes up to the value of <var id=currentNumber>currentNumber</var>, no number will be considered a prime number, because you'll be dividing the value of <var id=currentNumber>currentNumber</var> by <var id=currentNumber>currentNumber</var>.</li></ol>",
          "boilerplate"   : "for(?)\n{\n  var isPrime = true;\n\n  for(?)\n  {\n    var isDividable = isDividableBy(currentNumber, divider);\n\n    if(isDividable == true)\n    {\n      isPrime = false;\n    }\n  }\n\n  if(isPrime == true)\n  {\n    console.log(currentNumber + \" is a prime number\");\n  }\n}",
          "solution"      : "for(var currentNumber = 2; currentNumber <= 100; currentNumber++)\n{\n  var isPrime = true;\n\n  for(var divider = 2; divider < currentNumber; divider++)\n  {\n    var isDividable = isDividableBy(currentNumber, divider);\n\n    if(isDividable == true)\n    {\n      isPrime = false;\n    }\n  }\n\n  if(isPrime == true)\n  {\n    console.log(currentNumber + \" is a prime number\");\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">For Loops</h3>\n<div class=\"text\">For loops are another type of <concept ref=\"loops\">loop</concept>, that allow us to repeat the code in a <concept ref=\"code block\">code block</concept> until a certain <concept ref=\"condition\">condition</concept> becomes false.</div><div class=\"text\">Unlike a <concept ref=\"while loop\">while loop</concept>, a for loop keeps all of its <concept ref=\"for loop components\">iteration components</concept> in one place.</div>\n<div class=\"code-sample-title\">Example of a for loop</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x is equal to: \" + x);\n}</pre>\n<div class=\"text\">In the above code, the condition &quot;x &lt; 2&quot; is initially <concept ref=\"boolean\">true</concept> The code block is executed, displaying the message: &quot;x is equal to 0&quot; and then the value of x is increased by 1.</div><div class=\"text\">The condition is checked a second time and because it is still true, the program outputs &quot;x is equal to 1&quot;. The value of x is increased by 1 again.</div><div class=\"text\">Now that x is equal to 2, the condition is false and the loop stops.</div>\n<h3 class=\"title\" ref=\"nested loops\">Nested Loops</h3>\n<div class=\"text\">We can put a loop inside another loop to create a nested loop (this is similar to <concept ref=\"nested statements\">nested conditional statements</concept>). The first loop is called the outer loop, while the second loop is called the inner loop. Nested loops can be made with either <concept ref=\"for loop\">for loops</concept> or <concept ref=\"while loop\">while loops</concept>.</div>\n<div class=\"code-sample-title\">Example of a nested loop</div><pre class=\"codeBlock\">console.log(\"outer loop starts\");\nfor(var x = 0; x < 2; x = x + 1) // outer loop\n{\n  console.log(\"inner loop starts\");\n  for(var y = 0; y < 2; y = y + 1) // inner loop\n  {\n    console.log(\"x is equal to \" + x + \" and y is equal to \" + y);\n  }\n  console.log(\"inner loop is done\");\n}\nconsole.log(\"outer loop is done\");</pre>\n<div class=\"text\">The program will begin by doing one iteration of the outer loop, which will execute all the iterations of the inner loop. Then, the program will do the next iteration of the outer loop, which will restart the inner loop, redoing all the iterations once more. This continues until the outer loop completes all of its iterations.</div><div class=\"text\">The output of the above program is as follows:</div><div class=\"text\">outer loop starts</div><div class=\"text\">inner loop starts</div><div class=\"text\">x is equal to 0 and y is equal to 0</div><div class=\"text\">x is equal to 0 and y is equal to 1</div><div class=\"text\">inner loop is done</div><div class=\"text\">inner loop starts</div><div class=\"text\">x is equal to 1 and y is equal to 0</div><div class=\"text\">x is equal to 1 and y is equal to 1</div><div class=\"text\">inner loop is done</div><div class=\"text\">outer loop is done</div>"
        },
        {
          "_id"           : "cs-1_en-CA_quiz-013",
          "name"          : "Quiz 13",
          "description"   : "Types of Loops",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_en-CA_quiz-013_q-01",
              "question": "<div>We want to build a countdown program to count from 10 to 0. Which type of loop would be best for this type of problem?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-013_q-01_a-01",
                  "value"      : 1,
                  "answer"     : "<div><code>for</code> loops are better for incremental problems like this one.</div>",
                  "explanation": "Since we know in advance how many iterations this loop will need, a <code>for</code> loop is best suited for this problem."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-013_q-01_a-02",
                  "value" : 0,
                  "answer": "<div><code>while</code> loops are better for incremental problems like this one.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-013_q-02",
              "question": "<div>We want to build a program that will ask the user to enter various amounts of money to deposit. When the user wants to stop the program, they should enter a negative value. Which type of loop would be best for this type of problem?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-013_q-02_a-01",
                  "value" : 0,
                  "answer": "<div><code>for</code> loops are better for conditionals problems like this one.</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-013_q-02_a-02",
                  "value"      : 1,
                  "answer"     : "<div><code>while</code> loops are better for conditionals problems like this one.</div>",
                  "explanation": "Since we don't know in advance how many iterations this loop will need, a <code>while</code> loop is best suited for this problem."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-013_q-03",
              "question": "<div>True or false. <code>while</code> loops and <code>for</code> loops both use a Boolean condition to control their execution.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-013_q-03_a-01",
                  "value"      : 1,
                  "answer"     : "<div>True</div>",
                  "explanation": "Loops can only do two things: continue looping or stop looping. To control this, we use <code>true</code> to continue and <code>false</code> to stop. Therefore, all loops are controlled by Boolean conditions."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-013_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>False</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-013_q-04",
              "question": "<div>True or false. A nested loop cannot result in an infinite loop.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-013_q-04_a-01",
                  "value" : 0,
                  "answer": "<div>True</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-013_q-04_a-02",
                  "value"      : 1,
                  "answer"     : "<div>False</div>",
                  "explanation": "Nested loops are still loops and are capable of creating infinite loops."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-013_q-05",
              "question": "<div>Choose the <code>for</code> loop that works the same as the following <code>while</code> loop:</div>\n<pre class=\"language-javascript\"><code>var x = 0;\nwhile(x &lt; 5)\n{\n  x++;\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-013_q-05_a-01",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>for(var x = 5; x &gt; 0; x++)</code></pre>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-013_q-05_a-02",
                  "value"      : 2,
                  "answer"     : "<pre class=\"language-javascript\"><code>for(var x = 0; x &lt; 5; x++)</code></pre>",
                  "explanation": "The initialization is the same (<code>var x = 0</code>), the condition is the same (<code>x &lt; 5</code>) and the increment is also the same (<code>x++</code>)."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-013_q-05_a-03",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>for(var x = 0; x &gt; 5; x--)</code></pre>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-013_q-05_a-04",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>for(var x = 5; x &lt; 5; x--)</code></pre>"
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-013_q-06",
              "question": "<div>What is a <em>nested loop</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_en-CA_quiz-013_q-06_a-01",
                  "value" : 0,
                  "answer": "<div>A loop with a control variable named \"nest\"</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-013_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>An <code>if</code> statement inside the code block of a loop</div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-013_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>A loop that never finishes</div>"
                },
                {
                  "_id"        : "cs-1_en-CA_quiz-013_q-06_a-04",
                  "value"      : 2,
                  "answer"     : "<div>A loop inside the code block of another loop</div>",
                  "explanation": "<em>Nested loops</em> are very similar to nested <code>if</code> statements. They are loops inside another loop's code block."
                }
              ]
            },
            {
              "_id"     : "cs-1_en-CA_quiz-013_q-07",
              "question": "<div>What is the output of the following program?</div>\n<pre class=\"language-javascript\"><code>for(var x = 0; x &lt; 2; x++)\n{\n  for(var y = 0; y &lt; 2; y++)\n  {\n    console.log(\"x: \" + x + \", y: \" + y);\n  }\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_en-CA_quiz-013_q-07_a-01",
                  "value"      : 2,
                  "answer"     : "<div><pre><samp>x: 0, y: 0\nx: 0, y: 1\nx: 1, y: 0\nx: 1, y: 1</pre></samp></div>",
                  "explanation": "We start with the outer loop (<var>x</var> = 0), which begins the inner loop (<var>y</var> = 0). The inner loops displays the message and then increases the value of <var>y</var> by 1 (<var>y</var> = 1). Since <var>y</var> is still less than 2, the code block of the inner loop displays the message again. The value of <var>y</var> is again increased (<var>y</var> = 2) and since its new value causes the condition to be false, the inner loop ends. The value of <var>x</var> now increases (<var>x</var> = 1) and the code block executes again. The value of <var>y</var> is reset to 0 by the inner loop restarting. Two more iterations of the inner loop display the other two messages."
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-013_q-07_a-02",
                  "value" : 0,
                  "answer": "<div><pre><samp>x: 0, y: 0\nx: 1, y: 0\nx: 0, y: 1\nx: 1, y: 1</pre></samp></div>"
                },
                {
                  "_id"   : "cs-1_en-CA_quiz-013_q-07_a-03",
                  "value" : 0,
                  "answer": "<div><pre><samp>x: 1, y: 0\nx: 0, y: 1\nx: 0, y: 1\nx: 1, y: 0</pre></samp></div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 13",
          "trialMode"     : false
        }
      ],
      "created"                 : 1543060094510,
      "createdBy"               : "xavier.baudry",
      "normalizedCreatedBy"     : "xavier.baudry",
      "lastModified"            : 1543060094510,
      "lastModifiedBy"          : "xavier.baudry",
      "normalizedLastModifiedBy": "xavier.baudry"
    },
    {
      "_id"                     : "cs-1A_fr-CA",
      "name"                    : "Introduction à la programmation (Première partie)",
      "normalizedName"          : "introduction a la programmation premiere partie",
      "shortDescription"        : "Ce cours convient parfaitement aux novices, même ceux qui n'ont aucune expérience en programmation.",
      "longDescription"         : "Par le biais de projets STEM, vous apprendrez les fondements d'un langage de programmation de haut niveau (JavaScript): les instructions, les variables et les instructions conditionnelles. À la fin du cours, vous serez capables de résoudre divers problèmes par un court programme.",
      "locale"                  : "fr-CA",
      "grades"                  : ["6"],
      "allowLimited"            : false,
      "trialMode"               : true,
      "comingSoon"              : false,
      "enabled"                 : true,
      "units"                   : [
        {
          "_id"           : "cs-1_fr-CA_exercise-258",
          "name"          : "Les instructions et les algorithmes",
          "normalizedName": "les instructions et les algorithmes",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-258_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-258_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-01",
          "name"          : "Projet 1 - Donner une commande",
          "normalizedName": "projet 1 - donner une commande",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-024",
          "name"          : "Donner une instruction",
          "normalizedName": "donner une instruction",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-024_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-024_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Ajouter une autre instruction \n    <concept ref=robot-forward>robot.forward()</concept> pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "robot.forward();\n?",
          "solution"      : "robot.forward();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"instruction\">Instructions</h3>\n<div class=\"text\">Les instructions sont des mots spéciaux reconnus par les ordinateurs. Elles permettent aux ordinateurs d'accomplir une action spécifique. Elles représentent des commandes que nous pouvons donner à l'ordinateur. Un exemple d'instruction est <concept ref=\"robot.forward()\">robot.forward()</concept>.</div>\n<h3 class=\"title\" ref=\"robot.forward()\">Instruction robot.forward()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> robot.forward() est utilisée pour faire avancer le robot d'une case. Comme toutes les autres instructions de <concept ref=\"programming languages\">JavaScript</concept>, robot.forward() est <concept ref=\"case sensitive\">sensible à la casse</concept> et nous devons <concept ref=\"forgetting parentheses\">l'écrire exactement</concept> comme indiqué ci-dessous.</div>\n<div class=\"code-sample-title\">Exemple de robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case</pre>\n<h3 class=\"title\" ref=\"case sensitive\">Instructions sensibles à la casse</h3>\n<div class=\"text\">Il est important de respecter les lettres majuscules et minuscules en écrivant le nom des <concept ref=\"instruction\">instructions</concept>, puisque toutes les instructions en <concept ref=\"programming languages\">JavaScript</concept> sont sensibles à la casse.</div>\n<div class=\"code-sample-title\">Exemple d'instruction incorrecte</div><pre class=\"codeBlock\">robot.Forward(); // incorrect: \"forward\" prend un \"f\" minuscule\nrobot.forward(); // correct</pre>\n<h3 class=\"title\" ref=\"programmer\">Programmeuses et programmeurs</h3>\n<div class=\"text\">Les programmeuses et les programmeurs sont des personnes qui créent des programmes à l'aide des <concept ref=\"instruction\">instructions</concept> d'un <concept ref=\"programming languages\">langage de programmation</concept>.</div>\n<h3 class=\"title\" ref=\"programming languages\">Langage de programmation</h3>\n<div class=\"text\">Les langages de programmation sont des groupes d'<concept ref=\"instruction\">instructions</concept> reconnues par un ordinateur. Dans ce cours, nous utilisons le langage de programmation JavaScript.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-025",
          "name"          : "Des instructions précises",
          "normalizedName": "des instructions precises",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-025_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-025_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Ajouter les instructions \n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-forward>robot.forward()</concept> pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin. Attention à l'ordre des instructions, puisqu'il affecte le résultat du programme!</li></ol>",
          "boilerplate"   : "robot.forward();\n?\n?",
          "solution"      : "robot.forward();\nrobot.right();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"order of instructions\">Ordre des instructions</h3>\n<div class=\"text\">Puisque les programmes sont lus de haut en bas, l'ordre dans lequel apparaissent les instructions est très important.</div>\n<div class=\"code-sample-title\">Exemple 1</div><pre class=\"codeBlock\">robot.forward();\nrobot.right();</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, le robot avance, puis tourne à droite.</div>\n<div class=\"code-sample-title\">Exemple 2</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, le robot tourne à droite, puis avance.</div>\n<h3 class=\"title\" ref=\"robot.forward()\">Instruction robot.forward()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> robot.forward() est utilisée pour faire avancer le robot d'une case. Comme toutes les autres instructions de <concept ref=\"programming languages\">JavaScript</concept>, robot.forward() est <concept ref=\"case sensitive\">sensible à la casse</concept> et nous devons <concept ref=\"forgetting parentheses\">l'écrire exactement</concept> comme indiqué ci-dessous.</div>\n<div class=\"code-sample-title\">Exemple de robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-026",
          "name"          : "Un nouveau tournant",
          "normalizedName": "un nouveau tournant",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser les instructions \n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-forward>robot.forward()</concept> pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "robot.forward();\nrobot.right();\n?\n?\n?\n?",
          "solution"      : "robot.forward();\nrobot.right();\nrobot.forward();\nrobot.forward();\nrobot.right();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Instruction robot.forward()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> robot.forward() est utilisée pour faire avancer le robot d'une case. Comme toutes les autres instructions de <concept ref=\"programming languages\">JavaScript</concept>, robot.forward() est <concept ref=\"case sensitive\">sensible à la casse</concept> et nous devons <concept ref=\"forgetting parentheses\">l'écrire exactement</concept> comme indiqué ci-dessous.</div>\n<div class=\"code-sample-title\">Exemple de robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"case sensitive\">Instructions sensibles à la casse</h3>\n<div class=\"text\">Il est important de respecter les lettres majuscules et minuscules en écrivant le nom des <concept ref=\"instruction\">instructions</concept>, puisque toutes les instructions en <concept ref=\"programming languages\">JavaScript</concept> sont sensibles à la casse.</div>\n<div class=\"code-sample-title\">Exemple d'instruction incorrecte</div><pre class=\"codeBlock\">robot.Forward(); // incorrect: \"forward\" prend un \"f\" minuscule\nrobot.forward(); // correct</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-027",
          "name"          : "Écraser un bogue",
          "normalizedName": "ecraser un bogue",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-027_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-027_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Réparer le bogue dans l'éditeur de code en ajoutant une instruction \n    <concept ref=robot-forward>robot.forward()</concept> avant l'instruction \n    <concept ref=robot-right>robot.right()</concept>.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "robot.forward();\n\nrobot.right();\nrobot.forward();",
          "solution"      : "robot.forward();\nrobot.forward();\nrobot.right();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"case sensitive\">Instructions sensibles à la casse</h3>\n<div class=\"text\">Il est important de respecter les lettres majuscules et minuscules en écrivant le nom des <concept ref=\"instruction\">instructions</concept>, puisque toutes les instructions en <concept ref=\"programming languages\">JavaScript</concept> sont sensibles à la casse.</div>\n<div class=\"code-sample-title\">Exemple d'instruction incorrecte</div><pre class=\"codeBlock\">robot.Forward(); // incorrect: \"forward\" prend un \"f\" minuscule\nrobot.forward(); // correct</pre>\n<h3 class=\"title\" ref=\"forgetting parentheses\">Oublier les parenthèses après une instruction</h3>\n<div class=\"text\">Oublier d'utiliser les parenthèses après une instruction peut causer divers problèmes.</div>\n<div class=\"code-sample-title\">Exemple d'instruction incorrecte</div><pre class=\"codeBlock\">robot.forward // incorrect: il manque les parenthèses et un point-virgule\nrobot.forward(); // correct</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-028",
          "name"          : "Un nouvel espoir",
          "normalizedName": "un nouvel espoir",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-028_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-028_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer les trois instructions \n    <concept ref=robot-right>robot.right()</concept> par une seule instruction \n    <concept ref=robot-left>robot.left()</concept>.</li><li class=code-item>Ajouter les instructions manquantes pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "robot.forward();\nrobot.right();\nrobot.right();\nrobot.right();",
          "solution"      : "robot.forward();\nrobot.left();\n\nrobot.forward();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"robot.left()\">Instruction robot.left()</h3>\n<div class=\"text\">L'instruction robot.left() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens anti-horaire (le sens contraire des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.left().</div>\n<div class=\"code-sample-title\">Exemple de robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-029",
          "name"          : "Utiliser tous les outils",
          "normalizedName": "utiliser tous les outils",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-029_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-029_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser les instructions \n    <concept ref=robot-forward>robot.forward()</concept>,\n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-left>robot.left()</concept> pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "// Utilisez robot.forward();, robot.right(); et\n// robot.left(); pour amener le robot au but!\nrobot.forward();\n?",
          "solution"      : "// Utilisez robot.forward();, robot.right(); et\n// robot.left(); pour amener le robot au but!\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.forward();\nrobot.left();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"comments\">Commentaires</h3>\n<div class=\"text\">Nous voulons parfois laisser des informations utiles et des indices dans un programme à l'intention des autres <concept ref=\"programmer\">programmeurs</concept> qui liront notre code, ou même pour nous-mêmes. Pour ce faire, nous pouvons utiliser les commentaires de ligne, indiqués par deux barres obliques (//). Nous pouvons aussi débuter un commentaire prenant plusieurs lignes par une barre oblique suivie d'un astérisque (/*) et le terminer par un astérisque suivi d'une barre oblique (*/).</div>\n<div class=\"code-sample-title\">Exemples de commentaires</div><pre class=\"codeBlock\">// Ceci est un commentaire avant une ligne de code\nrobot.right();\nrobot.right(); // Ceci est un commentaire après une ligne de code\n/* Ceci est un commentaire\nsur deux lignes */\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"order of instructions\">Ordre des instructions</h3>\n<div class=\"text\">Puisque les programmes sont lus de haut en bas, l'ordre dans lequel apparaissent les instructions est très important.</div>\n<div class=\"code-sample-title\">Exemple 1</div><pre class=\"codeBlock\">robot.forward();\nrobot.right();</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, le robot avance, puis tourne à droite.</div>\n<div class=\"code-sample-title\">Exemple 2</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, le robot tourne à droite, puis avance.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-030",
          "name"          : "Dans toutes les directions",
          "normalizedName": "dans toutes les directions",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser les instructions \n    <concept ref=robot-forward>robot.forward()</concept>,\n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-left>robot.left()</concept> pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "// Utilisez robot.forward();, robot.right(); et\n// robot.left(); pour amener le robot au but!\n?",
          "solution"      : "// Utilisez robot.forward();, robot.right(); et\n// robot.left(); pour amener le robot au but!\nrobot.forward();\nrobot.left();\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.forward();\nrobot.right();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Instruction robot.forward()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> robot.forward() est utilisée pour faire avancer le robot d'une case. Comme toutes les autres instructions de <concept ref=\"programming languages\">JavaScript</concept>, robot.forward() est <concept ref=\"case sensitive\">sensible à la casse</concept> et nous devons <concept ref=\"forgetting parentheses\">l'écrire exactement</concept> comme indiqué ci-dessous.</div>\n<div class=\"code-sample-title\">Exemple de robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Instruction robot.left()</h3>\n<div class=\"text\">L'instruction robot.left() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens anti-horaire (le sens contraire des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.left().</div>\n<div class=\"code-sample-title\">Exemple de robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-031",
          "name"          : "Avancer rapidement",
          "normalizedName": "avancer rapidement",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-031_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-031_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser l'instruction \n    <concept ref=robot-forward>robot.forward()</concept> avec une valeur numérique positive pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "// Le nombre entre parenthèses\n// doit être un nombre positif\nrobot.forward(2);",
          "solution"      : "// Le nombre entre parenthèses\n// doit être un nombre positif\nrobot.forward(6);",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-032",
          "name"          : "Où est la sortie?",
          "normalizedName": "ou est la sortie",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-032_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-032_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser les instructions \n    <concept ref=robot-forward>robot.forward()</concept>,\n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-left>robot.left()</concept> pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "// Utilisez robot.forward();,\n// robot.left(); et robot.right();\n// pour amener le robot au but\n?",
          "solution"      : "// Utilisez robot.forward();,\n// robot.left(); et robot.right();\n// pour amener le robot au but\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward(2);\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward(2);\nrobot.left();\nrobot.forward();\nrobot.right();\nrobot.forward(2);",
          "tips"          : "<h3 class=\"title\" ref=\"algorithm\">Algorithme</h3>\n<div class=\"text\">Un ensemble d'étapes spécifiques pour résoudre un problème. Pensez par exemple à une recette de gâteau. Nous ne pouvons pas glacer le gâteau avant de le faire cuire.</div>\n<h3 class=\"title\" ref=\"parameter\">Paramètre</h3>\n<div class=\"text\">Un paramètre est une valeur que nous donnons à une <concept ref=\"instruction\">instruction</concept> pour lui donner plus de détails. Un paramètre change habituellement le résultat d'une instruction. Certains paramètres sont optionnels, tandis que d'autres sont obligatoires. Les paramètres donnés à une instruction doivent être séparés par des virgules.</div>\n<div class=\"code-sample-title\">Exemples de paramètres</div><pre class=\"codeBlock\">robot.forward(); // robot.forward(), sans paramètre\nrobot.forward(6); // robot.forward(), avec un nombre optionnel comme paramètre\nsquare.draw(3, 7); // square.draw(), avec les deux paramètres obligatoires pour les coordonnées</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-033",
          "name"          : "Simplifier notre code",
          "normalizedName": "simplifier notre code",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser les instructions \n    <concept ref=robot-forward>robot.forward()</concept>,\n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-left>robot.left()</concept> pour amener le robot au but.</li><li class=code-item>Vous ne pouvez pas utiliser plus de <strong>5 instructions</strong>.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "// Vous pouvez utiliser l'instruction\n// robot.forward(2); pour faire avancer le robot de 2\n// cases avec une seule instruction\nrobot.forward();\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.forward();",
          "solution"      : "// Vous pouvez utiliser l'instruction\n// robot.forward(2); pour faire avancer le robot de 2\n// cases avec une seule instruction\n\nrobot.forward(2);\nrobot.right();\n\nrobot.forward(2);\nrobot.right();\n\nrobot.forward(2);",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-034",
          "name"          : "Dans la bonne direction",
          "normalizedName": "dans la bonne direction",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser les instructions \n    <concept ref=robot-forward>robot.forward()</concept>,\n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-left>robot.left()</concept> pour amener le robot au but.</li><li class=code-item>Vous ne pouvez pas utiliser plus de <strong>5 instructions</strong>.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "// Rappelez-vous, utiliser robot.left(); trois fois\n// ou utiliser robot.right(); fait pointer le robot dans la même direction!\nrobot.forward();\nrobot.left();\nrobot.left();\nrobot.left();\nrobot.forward();\nrobot.left();\nrobot.forward();",
          "solution"      : "// Rappelez-vous, utiliser robot.left(); trois fois\n// ou utiliser robot.right(); fait pointer le robot dans la même direction!\nrobot.forward();\nrobot.right();\n\nrobot.forward();\nrobot.left();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Instruction robot.forward()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> robot.forward() est utilisée pour faire avancer le robot d'une case. Comme toutes les autres instructions de <concept ref=\"programming languages\">JavaScript</concept>, robot.forward() est <concept ref=\"case sensitive\">sensible à la casse</concept> et nous devons <concept ref=\"forgetting parentheses\">l'écrire exactement</concept> comme indiqué ci-dessous.</div>\n<div class=\"code-sample-title\">Exemple de robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Instruction robot.left()</h3>\n<div class=\"text\">L'instruction robot.left() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens anti-horaire (le sens contraire des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.left().</div>\n<div class=\"code-sample-title\">Exemple de robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-035",
          "name"          : "Apprendre de ses erreurs",
          "normalizedName": "apprendre de ses erreurs",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser les instructions \n    <concept ref=robot-forward>robot.forward()</concept>,\n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-left>robot.left()</concept> pour amener le robot au but.</li><li class=code-item>Vous ne pouvez pas utiliser plus de <strong>5 instructions</strong>.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "// Rappelez-vous qu'il est important d'exécuter votre code pour trouver les bogues!\nrobot.forward(2);\nrobot.right();\nrobot.forward(2);\nrobot.right();\nrobot.forward(2);",
          "solution"      : "// Rappelez-vous qu'il est important d'exécuter votre code pour trouver les bogues!\nrobot.forward();\nrobot.right();\nrobot.forward(3);\nrobot.right();\nrobot.forward(2);",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Instruction robot.forward()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> robot.forward() est utilisée pour faire avancer le robot d'une case. Comme toutes les autres instructions de <concept ref=\"programming languages\">JavaScript</concept>, robot.forward() est <concept ref=\"case sensitive\">sensible à la casse</concept> et nous devons <concept ref=\"forgetting parentheses\">l'écrire exactement</concept> comme indiqué ci-dessous.</div>\n<div class=\"code-sample-title\">Exemple de robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-036",
          "name"          : "Décomposer un problème",
          "normalizedName": "decomposer un probleme",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser les instructions \n    <concept ref=robot-forward>robot.forward()</concept>,\n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-left>robot.left()</concept> pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "// Utilisez robot.forward();, robot.left();\n// et robot.right(); pour amener le robot au but\n?",
          "solution"      : "// Utilisez robot.forward();, robot.left();\n// et robot.right(); pour amener le robot au but\nrobot.left();\nrobot.left();\nrobot.forward(2);\nrobot.left();\nrobot.forward(2);\nrobot.left();\nrobot.forward(6);\nrobot.left();\nrobot.forward(2);\nrobot.left();\nrobot.forward(2);\nrobot.right();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Instruction robot.forward()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> robot.forward() est utilisée pour faire avancer le robot d'une case. Comme toutes les autres instructions de <concept ref=\"programming languages\">JavaScript</concept>, robot.forward() est <concept ref=\"case sensitive\">sensible à la casse</concept> et nous devons <concept ref=\"forgetting parentheses\">l'écrire exactement</concept> comme indiqué ci-dessous.</div>\n<div class=\"code-sample-title\">Exemple de robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Instruction robot.left()</h3>\n<div class=\"text\">L'instruction robot.left() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens anti-horaire (le sens contraire des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.left().</div>\n<div class=\"code-sample-title\">Exemple de robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-037",
          "name"          : "Le bon chemin",
          "normalizedName": "le bon chemin",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser les instructions \n    <concept ref=robot-forward>robot.forward()</concept>,\n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-left>robot.left()</concept> pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "// Utilisez robot.forward();, robot.left();\n// et robot.right(); pour amener le robot au but\n?",
          "solution"      : "// Utilisez robot.forward();, robot.left();\n// et robot.right(); pour amener le robot au but\nrobot.forward();\nrobot.right();\nrobot.forward(6);\nrobot.left();\nrobot.forward(3);\nrobot.left();\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward(2);\nrobot.right();\nrobot.forward(2);\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward();\nrobot.right();\nrobot.forward(2);",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Instruction robot.forward()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> robot.forward() est utilisée pour faire avancer le robot d'une case. Comme toutes les autres instructions de <concept ref=\"programming languages\">JavaScript</concept>, robot.forward() est <concept ref=\"case sensitive\">sensible à la casse</concept> et nous devons <concept ref=\"forgetting parentheses\">l'écrire exactement</concept> comme indiqué ci-dessous.</div>\n<div class=\"code-sample-title\">Exemple de robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Instruction robot.left()</h3>\n<div class=\"text\">L'instruction robot.left() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens anti-horaire (le sens contraire des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.left().</div>\n<div class=\"code-sample-title\">Exemple de robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-038",
          "name"          : "Maître du labyrinthe",
          "normalizedName": "maitre du labyrinthe",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser les instructions \n    <concept ref=robot-forward>robot.forward()</concept>,\n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-left>robot.left()</concept> pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "// Utilisez robot.forward();, robot.left();\n// et robot.right(); pour amener le robot au but\n?",
          "solution"      : "// Utilisez robot.forward();, robot.left();\n// et robot.right(); pour amener le robot au but\nrobot.left();\nrobot.forward();\nrobot.right();\nrobot.forward(2);\nrobot.right();\nrobot.forward(4);\nrobot.left();\nrobot.forward(2);\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward(2);\nrobot.left();\nrobot.forward(5);\nrobot.left();\nrobot.forward(2);",
          "tips"          : "<h3 class=\"title\" ref=\"robot.forward()\">Instruction robot.forward()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> robot.forward() est utilisée pour faire avancer le robot d'une case. Comme toutes les autres instructions de <concept ref=\"programming languages\">JavaScript</concept>, robot.forward() est <concept ref=\"case sensitive\">sensible à la casse</concept> et nous devons <concept ref=\"forgetting parentheses\">l'écrire exactement</concept> comme indiqué ci-dessous.</div>\n<div class=\"code-sample-title\">Exemple de robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Instruction robot.left()</h3>\n<div class=\"text\">L'instruction robot.left() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens anti-horaire (le sens contraire des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.left().</div>\n<div class=\"code-sample-title\">Exemple de robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-02",
          "name"          : "Projet 2 - Bâtir un avenir meilleur",
          "normalizedName": "projet 2 - batir un avenir meilleur",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-039",
          "name"          : "L'importance du langage",
          "normalizedName": "limportance du langage",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-039_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-039_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter le plan de bâtiment en utilisant \n    <concept ref=square-draw>square.draw()</concept> pour dessiner des carrés aux deux coordonnées suivantes: <strong>(3, 4)</strong> et <strong>(3, 7)</strong>.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-039_en-ca.png\"></div>",
          "boilerplate"   : "square.draw(3, 1);\n?\n?",
          "solution"      : "square.draw(3, 1);\nsquare.draw(3, 4);\nsquare.draw(3, 7);",
          "tips"          : "<h3 class=\"title\" ref=\"square.draw()(cities)\">Instruction square.draw() (version villes)</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> square.draw() est utilisée pour dessiner des carrés sur une grille aux coordonnées indiquées. L'instruction square.draw() a 2 <concept ref=\"parameter\">paramètres</concept> obligatoires et 2 paramètres optionnels. Les paramètres doivent être indiqués dans l'ordre suivant: square.draw(x, y, [type], [direction])</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 14 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 9 et est obligatoire</div><div class=\"text\">Le type de carré doit être l'un des suivants: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optionnel]</div><div class=\"text\">La direction du carré doit être l'un des suivants: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optionnel]</div><div class=\"text\">(Remarquez que le paramètre de direction est seulement utilisé avec le type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Exemples de square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // crée une maison à (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // crée une route verticale à (3,5)\nsquare.draw(17, 7, \"tree\"); // incorrect: la coordonnée en x ne doit pas dépasser 14\nSquare.draw(0, 0, \"pool\"); // incorrect: le mot \"square\" prend un \"s\" minuscule\nsquare.draw(1, 6, house); // incorrect: le mot \"house\" doit être entouré de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-040",
          "name"          : "Un beau quartier",
          "normalizedName": "un beau quartier",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-040_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-040_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser l'instruction \n    <concept ref=square-draw>square.draw()</concept> pour ajouter <strong>4</strong> carrés à la route. Les coordonnées de ces carrés sont: <strong>(5, 1)</strong>, <strong>(5, 2)</strong>, <strong>(5, 3)</strong> et <strong>(5, 4)</strong>. Vous devez indiquer que les carrés sont des routes en ajoutant le paramètre \n    <string>\"road\"</string>. <strong>Indice</strong>: regardez les instructions qui dessinent les autres carrés.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-040_en-ca.png\"></div>",
          "boilerplate"   : "// Ces instructions dessinent la route verticale\n?\n?\n?\n?\nsquare.draw(5, 5, \"road\");\nsquare.draw(5, 6, \"road\");\nsquare.draw(5, 7, \"road\");\n\n// Ces instructions dessinent les maisons\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "solution"      : "// Ces instructions dessinent la route verticale\nsquare.draw(5, 1, \"road\");\nsquare.draw(5, 2, \"road\");\nsquare.draw(5, 3, \"road\");\nsquare.draw(5, 4, \"road\");\nsquare.draw(5, 5, \"road\");\nsquare.draw(5, 6, \"road\");\nsquare.draw(5, 7, \"road\");\n\n// Ces instructions dessinent les maisons\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "tips"          : "<h3 class=\"title\" ref=\"text parameters\">Texte utilisé comme paramètre</h3>\n<div class=\"text\">Certaines instructions prennent du texte pour certains de leurs <concept ref=\"parameter\">paramètres</concept>. Quand nous utilisons du texte comme paramètre, il est important de l'entourer de guillemets (&quot; &quot;). Si le texte n'est pas entouré de guillemets, le programme croira qu'il s'agit d'une <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Texte comme paramètre</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" est du texte utilisé comme paramètre\nsquare.draw(3, 5, blue\"); // incorrect: il manque un guillemet avant le mot \"blue\"\nsquare.draw(1, 1, orange); // incorrect: le mot \"orange\" doit être entouré de guillemets (\" \")</pre>\n<h3 class=\"title\" ref=\"square.draw()(cities)\">Instruction square.draw() (version villes)</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> square.draw() est utilisée pour dessiner des carrés sur une grille aux coordonnées indiquées. L'instruction square.draw() a 2 <concept ref=\"parameter\">paramètres</concept> obligatoires et 2 paramètres optionnels. Les paramètres doivent être indiqués dans l'ordre suivant: square.draw(x, y, [type], [direction])</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 14 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 9 et est obligatoire</div><div class=\"text\">Le type de carré doit être l'un des suivants: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optionnel]</div><div class=\"text\">La direction du carré doit être l'un des suivants: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optionnel]</div><div class=\"text\">(Remarquez que le paramètre de direction est seulement utilisé avec le type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Exemples de square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // crée une maison à (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // crée une route verticale à (3,5)\nsquare.draw(17, 7, \"tree\"); // incorrect: la coordonnée en x ne doit pas dépasser 14\nSquare.draw(0, 0, \"pool\"); // incorrect: le mot \"square\" prend un \"s\" minuscule\nsquare.draw(1, 6, house); // incorrect: le mot \"house\" doit être entouré de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-041",
          "name"          : "Une autre route",
          "normalizedName": "une autre route",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser l'instruction <concept ref=square-draw>square.draw()</concept> pour créer une deuxième route verticale. Cette nouvelle route doit couvrir les 7 carrés aux coordonnées suivantes: <strong>(11, 1)</strong>, <strong>(11, 2)</strong>, <strong>(11, 3)</strong>, <strong>(11, 4)</strong>, <strong>(11, 5)</strong>, <strong>(11, 6)</strong> et <strong>(11, 7)</strong>. N'oubliez pas d'utiliser le paramètre <string>\"road\"</string> pour indiquer à l'ordinateur que les carrés sont des routes!</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-041_en-ca.png\"></div>",
          "boilerplate"   : "// Ces instructions dessinent la deuxième route verticale\n?\n?\n?\n?\n?\n?\n?\n\n// Ces instructions dessinent la première route verticale\nsquare.draw(5, 1, \"road\");\nsquare.draw(5, 2, \"road\");\nsquare.draw(5, 3, \"road\");\nsquare.draw(5, 4, \"road\");\nsquare.draw(5, 5, \"road\");\nsquare.draw(5, 6, \"road\");\nsquare.draw(5, 7, \"road\");\n\n// Ces instructions dessinent les maisons\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "solution"      : "// Ces instructions dessinent la deuxième route verticale\nsquare.draw(11, 1, \"road\");\nsquare.draw(11, 2, \"road\");\nsquare.draw(11, 3, \"road\");\nsquare.draw(11, 4, \"road\");\nsquare.draw(11, 5, \"road\");\nsquare.draw(11, 6, \"road\");\nsquare.draw(11, 7, \"road\");\n\n// Ces instructions dessinent la première route verticale\nsquare.draw(5, 1, \"road\");\nsquare.draw(5, 2, \"road\");\nsquare.draw(5, 3, \"road\");\nsquare.draw(5, 4, \"road\");\nsquare.draw(5, 5, \"road\");\nsquare.draw(5, 6, \"road\");\nsquare.draw(5, 7, \"road\");\n\n// Ces instructions dessinent les maisons\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "tips"          : "<h3 class=\"title\" ref=\"text parameters\">Texte utilisé comme paramètre</h3>\n<div class=\"text\">Certaines instructions prennent du texte pour certains de leurs <concept ref=\"parameter\">paramètres</concept>. Quand nous utilisons du texte comme paramètre, il est important de l'entourer de guillemets (&quot; &quot;). Si le texte n'est pas entouré de guillemets, le programme croira qu'il s'agit d'une <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Texte comme paramètre</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" est du texte utilisé comme paramètre\nsquare.draw(3, 5, blue\"); // incorrect: il manque un guillemet avant le mot \"blue\"\nsquare.draw(1, 1, orange); // incorrect: le mot \"orange\" doit être entouré de guillemets (\" \")</pre>\n<h3 class=\"title\" ref=\"square.draw()(cities)\">Instruction square.draw() (version villes)</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> square.draw() est utilisée pour dessiner des carrés sur une grille aux coordonnées indiquées. L'instruction square.draw() a 2 <concept ref=\"parameter\">paramètres</concept> obligatoires et 2 paramètres optionnels. Les paramètres doivent être indiqués dans l'ordre suivant: square.draw(x, y, [type], [direction])</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 14 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 9 et est obligatoire</div><div class=\"text\">Le type de carré doit être l'un des suivants: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optionnel]</div><div class=\"text\">La direction du carré doit être l'un des suivants: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optionnel]</div><div class=\"text\">(Remarquez que le paramètre de direction est seulement utilisé avec le type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Exemples de square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // crée une maison à (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // crée une route verticale à (3,5)\nsquare.draw(17, 7, \"tree\"); // incorrect: la coordonnée en x ne doit pas dépasser 14\nSquare.draw(0, 0, \"pool\"); // incorrect: le mot \"square\" prend un \"s\" minuscule\nsquare.draw(1, 6, house); // incorrect: le mot \"house\" doit être entouré de guillemets (\" \")</pre>\n<h3 class=\"title\" ref=\"case sensitive\">Instructions sensibles à la casse</h3>\n<div class=\"text\">Il est important de respecter les lettres majuscules et minuscules en écrivant le nom des <concept ref=\"instruction\">instructions</concept>, puisque toutes les instructions en <concept ref=\"programming languages\">JavaScript</concept> sont sensibles à la casse.</div>\n<div class=\"code-sample-title\">Exemple d'instruction incorrecte</div><pre class=\"codeBlock\">robot.Forward(); // incorrect: \"forward\" prend un \"f\" minuscule\nrobot.forward(); // correct</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-042",
          "name"          : "Une autre direction",
          "normalizedName": "une autre direction",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-042_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-042_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Trouver et réparer les <strong>3</strong> erreurs dans les instructions \n    <concept ref=square-draw>square.draw()</concept> qui dessinent la route horizontale. La route horizontale est indiquée par un commentaire.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-042_en-ca.png\"></div>",
          "boilerplate"   : "// Ces instructions dessinent la route horizontale\nsquare.draw(6, , \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"horizontal\", \"road\");\nsquare.draw(9, 4, \"road\", \"horizontal);\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// Ces instructions dessinent la deuxième route verticale\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent la première route verticale\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent les maisons\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "solution"      : "// Ces instructions dessinent la route horizontale\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// Ces instructions dessinent la deuxième route verticale\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent la première route verticale\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent les maisons\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "tips"          : "<h3 class=\"title\" ref=\"square.draw()(cities)\">Instruction square.draw() (version villes)</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> square.draw() est utilisée pour dessiner des carrés sur une grille aux coordonnées indiquées. L'instruction square.draw() a 2 <concept ref=\"parameter\">paramètres</concept> obligatoires et 2 paramètres optionnels. Les paramètres doivent être indiqués dans l'ordre suivant: square.draw(x, y, [type], [direction])</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 14 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 9 et est obligatoire</div><div class=\"text\">Le type de carré doit être l'un des suivants: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optionnel]</div><div class=\"text\">La direction du carré doit être l'un des suivants: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optionnel]</div><div class=\"text\">(Remarquez que le paramètre de direction est seulement utilisé avec le type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Exemples de square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // crée une maison à (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // crée une route verticale à (3,5)\nsquare.draw(17, 7, \"tree\"); // incorrect: la coordonnée en x ne doit pas dépasser 14\nSquare.draw(0, 0, \"pool\"); // incorrect: le mot \"square\" prend un \"s\" minuscule\nsquare.draw(1, 6, house); // incorrect: le mot \"house\" doit être entouré de guillemets (\" \")</pre>\n<h3 class=\"title\" ref=\"text parameters\">Texte utilisé comme paramètre</h3>\n<div class=\"text\">Certaines instructions prennent du texte pour certains de leurs <concept ref=\"parameter\">paramètres</concept>. Quand nous utilisons du texte comme paramètre, il est important de l'entourer de guillemets (&quot; &quot;). Si le texte n'est pas entouré de guillemets, le programme croira qu'il s'agit d'une <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Texte comme paramètre</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" est du texte utilisé comme paramètre\nsquare.draw(3, 5, blue\"); // incorrect: il manque un guillemet avant le mot \"blue\"\nsquare.draw(1, 1, orange); // incorrect: le mot \"orange\" doit être entouré de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-043",
          "name"          : "Il y a quelque chose qui cloche...",
          "normalizedName": "il y a quelque chose qui cloche...",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Trouver et réparer les <strong>3</strong> erreurs dans les instructions <concept ref=square-draw>square.draw()</concept> qui sont utilisées pour créer les nouvelles maisons. Les nouvelles maisons sont indiquées par un commentaire.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-043_en-ca.png\"></div>",
          "boilerplate"   : "// Ces instructions dessinent les nouvelles maisons\nsquare.draw(, 2, \"house\");\nsquare.draw(9, 2, \"house\");\nsquare.draw(7, \"house\", 6);\nsquare.draw(9, 6, house\");\n\n// Ces instructions dessinent la route horizontale\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// Ces instructions dessinent la deuxième route verticale\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent la première route verticale\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent les maisons\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "solution"      : "// Ces instructions dessinent les nouvelles maisons\nsquare.draw(7, 2, \"house\");\nsquare.draw(9, 2, \"house\");\nsquare.draw(7, 6, \"house\");\nsquare.draw(9, 6, \"house\");\n\n// Ces instructions dessinent la route horizontale\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// Ces instructions dessinent la deuxième route verticale\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent la première route verticale\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent les maisons\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "tips"          : "<h3 class=\"title\" ref=\"square.draw()(cities)\">Instruction square.draw() (version villes)</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> square.draw() est utilisée pour dessiner des carrés sur une grille aux coordonnées indiquées. L'instruction square.draw() a 2 <concept ref=\"parameter\">paramètres</concept> obligatoires et 2 paramètres optionnels. Les paramètres doivent être indiqués dans l'ordre suivant: square.draw(x, y, [type], [direction])</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 14 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 9 et est obligatoire</div><div class=\"text\">Le type de carré doit être l'un des suivants: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optionnel]</div><div class=\"text\">La direction du carré doit être l'un des suivants: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optionnel]</div><div class=\"text\">(Remarquez que le paramètre de direction est seulement utilisé avec le type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Exemples de square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // crée une maison à (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // crée une route verticale à (3,5)\nsquare.draw(17, 7, \"tree\"); // incorrect: la coordonnée en x ne doit pas dépasser 14\nSquare.draw(0, 0, \"pool\"); // incorrect: le mot \"square\" prend un \"s\" minuscule\nsquare.draw(1, 6, house); // incorrect: le mot \"house\" doit être entouré de guillemets (\" \")</pre>\n<h3 class=\"title\" ref=\"text parameters\">Texte utilisé comme paramètre</h3>\n<div class=\"text\">Certaines instructions prennent du texte pour certains de leurs <concept ref=\"parameter\">paramètres</concept>. Quand nous utilisons du texte comme paramètre, il est important de l'entourer de guillemets (&quot; &quot;). Si le texte n'est pas entouré de guillemets, le programme croira qu'il s'agit d'une <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Texte comme paramètre</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" est du texte utilisé comme paramètre\nsquare.draw(3, 5, blue\"); // incorrect: il manque un guillemet avant le mot \"blue\"\nsquare.draw(1, 1, orange); // incorrect: le mot \"orange\" doit être entouré de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-044",
          "name"          : "Un petit rafraîchissement",
          "normalizedName": "un petit rafraichissement",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-044_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-044_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Trouver et réparer les <strong>2</strong> erreurs dans les instructions \n    <concept ref=square-draw>square.draw()</concept> qui dessinent les piscines. Les piscines sont indiquées par un commentaire.</li><li class=code-item>Utiliser l'instruction \n    <concept ref=square-draw>square.draw()</concept> pour ajouter <strong>2</strong> autres piscines au plan. Les coordonnées de ces carrés sont <strong>(7, 7)</strong> et <strong>(9, 7)</strong>. Vous devez indiquer que les carrés sont des piscines en ajoutant le paramètre \n    <string>\"pool\"</string>. <strong>Indice</strong>: regardez les instructions qui dessinent les autres carrés.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-044_en-ca.png\"></div>",
          "boilerplate"   : "// Ces instructions dessinent les piscines\nSquare.draw(7, 1, \"pool\");\nsquare.Draw(9, 1, \"pool\");\n?\n?\n\n// Maisons autour de la route horizontale\nsquare.draw(7, 2, \"house\");\nsquare.draw(9, 2, \"house\");\nsquare.draw(7, 6, \"house\");\nsquare.draw(9, 6, \"house\");\n\n// Ces instructions dessinent la route horizontale\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// Ces instructions dessinent la deuxième route verticale\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent la première route verticale\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent les maisons\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "solution"      : "// Ces instructions dessinent les piscines\nsquare.draw(7, 1, \"pool\");\nsquare.draw(9, 1, \"pool\");\nsquare.draw(7, 7, \"pool\");\nsquare.draw(9, 7, \"pool\");\n\n// Maisons autour de la route horizontale\nsquare.draw(7, 2, \"house\");\nsquare.draw(9, 2, \"house\");\nsquare.draw(7, 6, \"house\");\nsquare.draw(9, 6, \"house\");\n\n// Ces instructions dessinent la route horizontale\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// Ces instructions dessinent la deuxième route verticale\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent la première route verticale\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent les maisons\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "tips"          : "<h3 class=\"title\" ref=\"case sensitive\">Instructions sensibles à la casse</h3>\n<div class=\"text\">Il est important de respecter les lettres majuscules et minuscules en écrivant le nom des <concept ref=\"instruction\">instructions</concept>, puisque toutes les instructions en <concept ref=\"programming languages\">JavaScript</concept> sont sensibles à la casse.</div>\n<div class=\"code-sample-title\">Exemple d'instruction incorrecte</div><pre class=\"codeBlock\">robot.Forward(); // incorrect: \"forward\" prend un \"f\" minuscule\nrobot.forward(); // correct</pre>\n<h3 class=\"title\" ref=\"square.draw()(cities)\">Instruction square.draw() (version villes)</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> square.draw() est utilisée pour dessiner des carrés sur une grille aux coordonnées indiquées. L'instruction square.draw() a 2 <concept ref=\"parameter\">paramètres</concept> obligatoires et 2 paramètres optionnels. Les paramètres doivent être indiqués dans l'ordre suivant: square.draw(x, y, [type], [direction])</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 14 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 9 et est obligatoire</div><div class=\"text\">Le type de carré doit être l'un des suivants: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optionnel]</div><div class=\"text\">La direction du carré doit être l'un des suivants: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optionnel]</div><div class=\"text\">(Remarquez que le paramètre de direction est seulement utilisé avec le type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Exemples de square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // crée une maison à (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // crée une route verticale à (3,5)\nsquare.draw(17, 7, \"tree\"); // incorrect: la coordonnée en x ne doit pas dépasser 14\nSquare.draw(0, 0, \"pool\"); // incorrect: le mot \"square\" prend un \"s\" minuscule\nsquare.draw(1, 6, house); // incorrect: le mot \"house\" doit être entouré de guillemets (\" \")</pre>\n<h3 class=\"title\" ref=\"text parameters\">Texte utilisé comme paramètre</h3>\n<div class=\"text\">Certaines instructions prennent du texte pour certains de leurs <concept ref=\"parameter\">paramètres</concept>. Quand nous utilisons du texte comme paramètre, il est important de l'entourer de guillemets (&quot; &quot;). Si le texte n'est pas entouré de guillemets, le programme croira qu'il s'agit d'une <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Texte comme paramètre</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" est du texte utilisé comme paramètre\nsquare.draw(3, 5, blue\"); // incorrect: il manque un guillemet avant le mot \"blue\"\nsquare.draw(1, 1, orange); // incorrect: le mot \"orange\" doit être entouré de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-045",
          "name"          : "Un peu de verdure",
          "normalizedName": "un peu de verdure",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser l'instruction <concept ref=square-draw>square.draw()</concept> pour ajouter <strong>2</strong> autres arbres au plan. Les coordonnées de ces carrés sont <strong>(2, 4)</strong> et <strong>(2, 7)</strong>. N'oubliez pas d'utiliser le paramètre <string>\"tree\"</string> pour indiquer que les carrés sont des arbres. <strong>Indice</strong>: regardez les instructions qui dessinent les autres carrés.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-045_en-ca.png\"></div>",
          "boilerplate"   : "// Ces instructions dessinent les arbres\nsquare.draw(2, 1, \"tree\");\n?\n?\n\n// Ces instructions dessinent les piscines\nsquare.draw(7, 1, \"pool\");\nsquare.draw(9, 1, \"pool\");\nsquare.draw(7, 7, \"pool\");\nsquare.draw(9, 7, \"pool\");\n\n// Maisons autour de la route horizontale\nsquare.draw(7, 2, \"house\");\nsquare.draw(9, 2, \"house\");\nsquare.draw(7, 6, \"house\");\nsquare.draw(9, 6, \"house\");\n\n// Ces instructions dessinent la route horizontale\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// Ces instructions dessinent la deuxième route verticale\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent la première route verticale\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent les maisons\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "solution"      : "// Ces instructions dessinent les arbres\nsquare.draw(2, 1, \"tree\");\nsquare.draw(2, 4, \"tree\");\nsquare.draw(2, 7, \"tree\");\n\n// Ces instructions dessinent les piscines\nsquare.draw(7, 1, \"pool\");\nsquare.draw(9, 1, \"pool\");\nsquare.draw(7, 7, \"pool\");\nsquare.draw(9, 7, \"pool\");\n\n// Maisons autour de la route horizontale\nsquare.draw(7, 2, \"house\");\nsquare.draw(9, 2, \"house\");\nsquare.draw(7, 6, \"house\");\nsquare.draw(9, 6, \"house\");\n\n// Ces instructions dessinent la route horizontale\nsquare.draw(6, 4, \"road\", \"horizontal\");\nsquare.draw(7, 4, \"road\", \"horizontal\");\nsquare.draw(8, 4, \"road\", \"horizontal\");\nsquare.draw(9, 4, \"road\", \"horizontal\");\nsquare.draw(10, 4, \"road\", \"horizontal\");\n\n// Ces instructions dessinent la deuxième route verticale\nsquare.draw(11, 1, \"road\", \"vertical\");\nsquare.draw(11, 2, \"road\", \"vertical\");\nsquare.draw(11, 3, \"road\", \"vertical\");\nsquare.draw(11, 4, \"road\", \"junction-3L\");\nsquare.draw(11, 5, \"road\", \"vertical\");\nsquare.draw(11, 6, \"road\", \"vertical\");\nsquare.draw(11, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent la première route verticale\nsquare.draw(5, 1, \"road\", \"vertical\");\nsquare.draw(5, 2, \"road\", \"vertical\");\nsquare.draw(5, 3, \"road\", \"vertical\");\nsquare.draw(5, 4, \"road\", \"junction-3R\");\nsquare.draw(5, 5, \"road\", \"vertical\");\nsquare.draw(5, 6, \"road\", \"vertical\");\nsquare.draw(5, 7, \"road\", \"vertical\");\n\n// Ces instructions dessinent les maisons\nsquare.draw(3, 1, \"house\");\nsquare.draw(3, 4, \"house\");\nsquare.draw(3, 7, \"house\");",
          "tips"          : "<h3 class=\"title\" ref=\"square.draw()(cities)\">Instruction square.draw() (version villes)</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> square.draw() est utilisée pour dessiner des carrés sur une grille aux coordonnées indiquées. L'instruction square.draw() a 2 <concept ref=\"parameter\">paramètres</concept> obligatoires et 2 paramètres optionnels. Les paramètres doivent être indiqués dans l'ordre suivant: square.draw(x, y, [type], [direction])</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 14 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 9 et est obligatoire</div><div class=\"text\">Le type de carré doit être l'un des suivants: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optionnel]</div><div class=\"text\">La direction du carré doit être l'un des suivants: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optionnel]</div><div class=\"text\">(Remarquez que le paramètre de direction est seulement utilisé avec le type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Exemples de square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // crée une maison à (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // crée une route verticale à (3,5)\nsquare.draw(17, 7, \"tree\"); // incorrect: la coordonnée en x ne doit pas dépasser 14\nSquare.draw(0, 0, \"pool\"); // incorrect: le mot \"square\" prend un \"s\" minuscule\nsquare.draw(1, 6, house); // incorrect: le mot \"house\" doit être entouré de guillemets (\" \")</pre>\n<h3 class=\"title\" ref=\"text parameters\">Texte utilisé comme paramètre</h3>\n<div class=\"text\">Certaines instructions prennent du texte pour certains de leurs <concept ref=\"parameter\">paramètres</concept>. Quand nous utilisons du texte comme paramètre, il est important de l'entourer de guillemets (&quot; &quot;). Si le texte n'est pas entouré de guillemets, le programme croira qu'il s'agit d'une <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Texte comme paramètre</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" est du texte utilisé comme paramètre\nsquare.draw(3, 5, blue\"); // incorrect: il manque un guillemet avant le mot \"blue\"\nsquare.draw(1, 1, orange); // incorrect: le mot \"orange\" doit être entouré de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-046",
          "name"          : "Un nouveau village",
          "normalizedName": "un nouveau village",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser l'instruction \n    <concept ref=square-draw>square.draw()</concept> pour créer votre propre village! Votre village doit avoir au moins: \n    <strong>2</strong> carrés de type <string>\"house\"</string> (des maisons), \n    <strong>2</strong> carrés de type <string>\"tree\"</string> (des arbres) et \n    <strong>5</strong> carrés de type <string>\"road\"</string> (des routes).</li></ol>",
          "boilerplate"   : "// Créez votre village ici!",
          "solution"      : "// Créez votre village ici!\nsquare.draw(2, 1, \"house\");\nsquare.draw(4, 1, \"house\");\n\nsquare.draw(2, 0, \"tree\");\nsquare.draw(4, 0, \"tree\");\n\nsquare.draw(1, 2, \"road\", \"horizontal\");\nsquare.draw(2, 2, \"road\", \"horizontal\");\nsquare.draw(3, 2, \"road\", \"horizontal\");\nsquare.draw(4, 2, \"road\", \"horizontal\");\nsquare.draw(5, 2, \"road\", \"horizontal\");",
          "tips"          : "<h3 class=\"title\" ref=\"square.draw()(cities)\">Instruction square.draw() (version villes)</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> square.draw() est utilisée pour dessiner des carrés sur une grille aux coordonnées indiquées. L'instruction square.draw() a 2 <concept ref=\"parameter\">paramètres</concept> obligatoires et 2 paramètres optionnels. Les paramètres doivent être indiqués dans l'ordre suivant: square.draw(x, y, [type], [direction])</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 14 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 9 et est obligatoire</div><div class=\"text\">Le type de carré doit être l'un des suivants: &quot;house&quot;, &quot;road&quot;, &quot;tree&quot;, &quot;pool&quot; [optionnel]</div><div class=\"text\">La direction du carré doit être l'un des suivants: &quot;vertical&quot;, &quot;horizontal&quot;, &quot;junction-3L&quot;, &quot;junction-3R&quot; [optionnel]</div><div class=\"text\">(Remarquez que le paramètre de direction est seulement utilisé avec le type &quot;road&quot;)</div>\n<div class=\"code-sample-title\">Exemples de square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7, \"house\"); // crée une maison à (0,7)\nsquare.draw(3, 5, \"road\", \"vertical\"); // crée une route verticale à (3,5)\nsquare.draw(17, 7, \"tree\"); // incorrect: la coordonnée en x ne doit pas dépasser 14\nSquare.draw(0, 0, \"pool\"); // incorrect: le mot \"square\" prend un \"s\" minuscule\nsquare.draw(1, 6, house); // incorrect: le mot \"house\" doit être entouré de guillemets (\" \")</pre>\n<h3 class=\"title\" ref=\"text parameters\">Texte utilisé comme paramètre</h3>\n<div class=\"text\">Certaines instructions prennent du texte pour certains de leurs <concept ref=\"parameter\">paramètres</concept>. Quand nous utilisons du texte comme paramètre, il est important de l'entourer de guillemets (&quot; &quot;). Si le texte n'est pas entouré de guillemets, le programme croira qu'il s'agit d'une <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Texte comme paramètre</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" est du texte utilisé comme paramètre\nsquare.draw(3, 5, blue\"); // incorrect: il manque un guillemet avant le mot \"blue\"\nsquare.draw(1, 1, orange); // incorrect: le mot \"orange\" doit être entouré de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-047",
          "name"          : "Souriez!",
          "normalizedName": "souriez!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser l'instruction \n    <concept ref=square-draw>square.draw()</concept> pour créer le dessin ci-dessous. Vous devrez utiliser les valeurs \n    <string>\"blue\"</string> (bleu) et\n    <string>\"black\"</string> (noir) pour le <strong>troisième</strong> paramètre de l'instruction \n    <concept ref=square-draw>square.draw()</concept>.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-047_en-ca.png\"></div>",
          "boilerplate"   : "square.draw(2, 7, \"blue\");\n?",
          "solution"      : "square.draw(2, 7, \"blue\");\nsquare.draw(5, 7, \"blue\");\nsquare.draw(2, 5, \"black\");\nsquare.draw(3, 4, \"black\");\nsquare.draw(4, 4, \"black\");\nsquare.draw(5, 5, \"black\");",
          "tips"          : "<h3 class=\"title\" ref=\"text parameters\">Texte utilisé comme paramètre</h3>\n<div class=\"text\">Certaines instructions prennent du texte pour certains de leurs <concept ref=\"parameter\">paramètres</concept>. Quand nous utilisons du texte comme paramètre, il est important de l'entourer de guillemets (&quot; &quot;). Si le texte n'est pas entouré de guillemets, le programme croira qu'il s'agit d'une <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Texte comme paramètre</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" est du texte utilisé comme paramètre\nsquare.draw(3, 5, blue\"); // incorrect: il manque un guillemet avant le mot \"blue\"\nsquare.draw(1, 1, orange); // incorrect: le mot \"orange\" doit être entouré de guillemets (\" \")</pre>\n<h3 class=\"title\" ref=\"square.draw()(color)\">Instruction square.draw() (version couleurs)</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> square.draw() est utilisée pour dessiner des carrés sur une grille aux coordonnées indiquées. L'instruction square.draw() instruction a 2 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: square.draw(x, y, [couleur]). Par défaut, les carrés sont dessinés en noir.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 14 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 9 et est obligatoire</div><div class=\"text\">La couleur du carré doit être l'une des suivantes: &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;white&quot;, &quot;gray&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7); // crée un carré noir à (0,7)\nsquare.draw(3, 5, \"blue\"); // crée un carré bleu à (3, 5)\nsquare.draw(17, 7, \"green\"); // incorrect: la coordonnée en x ne doit pas dépasser 14\nSquare.draw(0, 0, \"orange\"); // incorrect: le mot \"square\" prend un \"s\" minuscule\nsquare.draw(1, 6, white); // incorrect: le mot \"white\" doit être entouré de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-048",
          "name"          : "Un extra-terrestre",
          "normalizedName": "un extra-terrestre",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : true,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser l'instruction \n    <concept ref=square-draw>square.draw()</concept> pour créer le dessin ci-dessous. Vous devrez utiliser la valeur \n    <string>\"black\"</string> (noir) pour le <strong>troisième</strong> paramètre de l'instruction <concept ref=square-draw>square.draw()</concept>.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-048_en-ca.png\"></div>",
          "boilerplate"   : "// Écrivez votre code ici\n\n// Rangée 1\nsquare.draw(8, 1);\n\n// Rangée 2\nsquare.draw(4, 2);\nsquare.draw(10, 2);\n\n// Rangée 3\nsquare.draw(4, 3);\nsquare.draw(5, 3);\nsquare.draw(6, 3);\nsquare.draw(7, 3);\nsquare.draw(8, 3);\nsquare.draw(9, 3);\nsquare.draw(10, 3);\nsquare.draw(12, 3);\n\n// Rangée 4\nsquare.draw(3, 4);\nsquare.draw(4, 4);\nsquare.draw(5, 4);\nsquare.draw(6, 4);\nsquare.draw(7, 4);\nsquare.draw(8, 4);\nsquare.draw(9, 4);\nsquare.draw(10, 4);\nsquare.draw(12, 4);\n\n// Rangée 5\nsquare.draw(3, 5);\nsquare.draw(4, 5);\nsquare.draw(6, 5);\nsquare.draw(7, 5);\nsquare.draw(8, 5);\nsquare.draw(10, 5);\n\n// Rangée 6\nsquare.draw(4, 6);\nsquare.draw(5, 6);\nsquare.draw(6, 6);\nsquare.draw(7, 6);\nsquare.draw(8, 6);\nsquare.draw(9, 6);\nsquare.draw(10, 6);\n\n// Rangée 7\nsquare.draw(5, 7);\n\n// Rangée 8\nsquare.draw(10, 8);",
          "solution"      : "// Écrivez votre code ici\nsquare.draw(5, 1, \"black\");\nsquare.draw(6, 1, \"black\");\nsquare.draw(9, 1, \"black\");\nsquare.draw(2, 2, \"black\");\nsquare.draw(12, 2, \"black\");\nsquare.draw(2, 3, \"black\");\nsquare.draw(2, 4, \"black\");\nsquare.draw(11, 4, \"black\");\nsquare.draw(11, 5, \"black\");\nsquare.draw(9, 7, \"black\");\nsquare.draw(4, 8, \"black\");\n\n// Rangée 1\nsquare.draw(8, 1);\n\n// Rangée 2\nsquare.draw(4, 2);\nsquare.draw(10, 2);\n\n// Rangée 3\nsquare.draw(4, 3);\nsquare.draw(5, 3);\nsquare.draw(6, 3);\nsquare.draw(7, 3);\nsquare.draw(8, 3);\nsquare.draw(9, 3);\nsquare.draw(10, 3);\nsquare.draw(12, 3);\n\n// Rangée 4\nsquare.draw(3, 4);\nsquare.draw(4, 4);\nsquare.draw(5, 4);\nsquare.draw(6, 4);\nsquare.draw(7, 4);\nsquare.draw(8, 4);\nsquare.draw(9, 4);\nsquare.draw(10, 4);\nsquare.draw(12, 4);\n\n// Rangée 5\nsquare.draw(3, 5);\nsquare.draw(4, 5);\nsquare.draw(6, 5);\nsquare.draw(7, 5);\nsquare.draw(8, 5);\nsquare.draw(10, 5);\n\n// Rangée 6\nsquare.draw(4, 6);\nsquare.draw(5, 6);\nsquare.draw(6, 6);\nsquare.draw(7, 6);\nsquare.draw(8, 6);\nsquare.draw(9, 6);\nsquare.draw(10, 6);\n\n// Rangée 7\nsquare.draw(5, 7);\n\n// Rangée 8\nsquare.draw(10, 8);",
          "tips"          : "<h3 class=\"title\" ref=\"text parameters\">Texte utilisé comme paramètre</h3>\n<div class=\"text\">Certaines instructions prennent du texte pour certains de leurs <concept ref=\"parameter\">paramètres</concept>. Quand nous utilisons du texte comme paramètre, il est important de l'entourer de guillemets (&quot; &quot;). Si le texte n'est pas entouré de guillemets, le programme croira qu'il s'agit d'une <concept ref=\"variable\">variable</concept>.</div>\n<div class=\"code-sample-title\">Texte comme paramètre</div><pre class=\"codeBlock\">square.draw(0, 7, \"green\"); // \"green\" est du texte utilisé comme paramètre\nsquare.draw(3, 5, blue\"); // incorrect: il manque un guillemet avant le mot \"blue\"\nsquare.draw(1, 1, orange); // incorrect: le mot \"orange\" doit être entouré de guillemets (\" \")</pre>\n<h3 class=\"title\" ref=\"square.draw()(color)\">Instruction square.draw() (version couleurs)</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> square.draw() est utilisée pour dessiner des carrés sur une grille aux coordonnées indiquées. L'instruction square.draw() instruction a 2 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: square.draw(x, y, [couleur]). Par défaut, les carrés sont dessinés en noir.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 14 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 9 et est obligatoire</div><div class=\"text\">La couleur du carré doit être l'une des suivantes: &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;purple&quot;, &quot;black&quot;, &quot;white&quot;, &quot;gray&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de square.draw()</div><pre class=\"codeBlock\">square.draw(0, 7); // crée un carré noir à (0,7)\nsquare.draw(3, 5, \"blue\"); // crée un carré bleu à (3, 5)\nsquare.draw(17, 7, \"green\"); // incorrect: la coordonnée en x ne doit pas dépasser 14\nSquare.draw(0, 0, \"orange\"); // incorrect: le mot \"square\" prend un \"s\" minuscule\nsquare.draw(1, 6, white); // incorrect: le mot \"white\" doit être entouré de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-001",
          "name"          : "Quiz 1",
          "description"   : "Les instructions et les algorithmes",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-001_q-01",
              "question": "<div>Que sont les <em>instructions</em>, en informatique?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-001_q-01_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Un mot spécial qui permet à l'ordinateur de faire une action spécifique</div>",
                  "explanation": "Les instructions sont utilisées pour donner des commandes aux ordinateurs."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>Un type d'ordinateur spécial</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-01_a-03",
                  "value" : 0,
                  "answer": "<div>Un programme spécial</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-01_a-04",
                  "value" : 0,
                  "answer": "<div>Toutes ces réponses</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-001_q-02",
              "question": "<div>En informatique, que sont les <em>bogues</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>Un insecte</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-001_q-02_a-02",
                  "value"      : 2,
                  "answer"     : "<div>Un problème dans un programme</div>",
                  "explanation": "Lorsque notre programme ne fonctionne pas correctement, nous appelons le problème un <em>bogue</em>."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-02_a-03",
                  "value" : 0,
                  "answer": "<div>Une instruction spéciale</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-02_a-04",
                  "value" : 0,
                  "answer": "<div>Toutes ces réponses</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-001_q-03",
              "question": "<div>À quoi sert l'instruction suivante:</div>\n<pre class=\"language-javascript\"><code>robot.forward(3);</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-03_a-01",
                  "value" : 0,
                  "answer": "<div>À faire avancer le robot d'une case</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>À faire avancer le robot à une vitesse de 3</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-001_q-03_a-03",
                  "value"      : 2,
                  "answer"     : "<div>À faire avancer le robot de 3 cases</div>",
                  "explanation": "Le chiffre 3 entre les parenthèses indique à l'instruction d'avancer 3 fois."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>À déplacer le robot à la case numérotée 3</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-001_q-04",
              "question": "<div>Lequel des programmes suivants permet d'amener le robot au but:\n<div class=\"quiz-image\"><img src=\"/images/cs-1_fr-CA/quiz-001.question-04.png\" /></div></div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-001_q-04_a-01",
                  "value"      : 2,
                  "answer"     : "<pre class=\"language-javascript\"><code>robot.forward();\nrobot.right();\nrobot.forward();</code></pre>",
                  "explanation": "Le robot doit avancer avant de tourner à droite (dans le sens horaire)."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-04_a-02",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>robot.right();\nrobot.forward();\nrobot.forward();</code></pre>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-04_a-03",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>robot.forward();\nrobot.left();\nrobot.forward();</code></pre>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-001_q-05",
              "question": "<div>Quelle est la définition d'<em>algorithme</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>Un type de programme</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>Une sorte d'ordinateur spécial</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-001_q-05_a-03",
                  "value"      : 2,
                  "answer"     : "<div>Un ensembles d'étapes pour résoudre un problème</div>",
                  "explanation": "Les algorithmes sont comme des recettes de cuisine, où nous devons effectuer des étapes spécifiques dans l'ordre donné pour arriver à un but."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-05_a-04",
                  "value" : 0,
                  "answer": "<div>Une recette de gâteau</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-001_q-06",
              "question": "<div>À quoi sert l'instruction suivante:</div>\n<pre class=\"language-javascript\"><code>square.draw(1, 2, \"house\");</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-06_a-01",
                  "value" : 0,
                  "answer": "<div>À créer une maison de largeur 1 et de longueur 2</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>À créer une maison aux coordonnées (2,1)</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-001_q-06_a-03",
                  "value"      : 2,
                  "answer"     : "<div>À créer une maison aux coordonnées (1,2)</div>",
                  "explanation": "Les paramètres de <code>square.draw()</code> sont: <code>square.draw(x, y, \"type\")</code>."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>À créer une maison de largeur 2 et de longueur 1</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-001_q-07",
              "question": "<div>Quelle est l'erreur dans l'instruction suivante:</div>\n<pre class=\"language-javascript\"><code>square.draw(3, 7, tree);</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-001_q-07_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Le mot <em>tree</em> doit être entouré de guillemets (ex: <string>\"tree\"</string>)</div>",
                  "explanation": "Le texte doit toujours être entouré de guillemets, sinon il sera considéré comme une instruction."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-07_a-02",
                  "value" : 0,
                  "answer": "<div>Le mot <em>square</em> prend un \"S\" majuscule (ex: <code>Square.draw</code>)</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>Le mot <em>draw</em> prend un \"D\" majuscule (ex: <code>square.Draw</code>)</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-001_q-07_a-04",
                  "value" : 0,
                  "answer": "<div>Toutes ces réponses</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 1",
          "trialMode"     : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-259",
          "name"          : "Les variables",
          "normalizedName": "les variables",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-259_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-259_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-03",
          "name"          : "Projet 3 - Une boîte à la rescousse",
          "normalizedName": "projet 3 - une boite a la rescousse",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-001",
          "name"          : "Une boîte spéciale",
          "normalizedName": "une boite speciale",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-001_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-001_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par le mot <var id=score>pointage</var>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par un nombre plus petit que 100.</li></ol>",
          "boilerplate"   : "var ? = ?;",
          "solution"      : "var pointage = 42;",
          "tips"          : "<h3 class=\"title\" ref=\"variable\">Variable</h3>\n<div class=\"text\">Les variables sont des endroits spéciaux dans un programme qui possèdent un <concept ref=\"variable name\">nom</concept> et dans lesquels nous pouvons mettre une <concept ref=\"variable value\">valeur</concept>. Les variables sont comme des boîtes de carton, avec une étiquette qui indique leur nom. Le contenu de la boîte représente la valeur de la variable.</div>\n<div class=\"code-sample-title\">Exemple de variable</div><pre class=\"codeBlock\">var pointage = 42; // crée une variable appelée pointage avec une valeur de 42</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-002",
          "name"          : "L'anatomie d'une boîte",
          "normalizedName": "lanatomie dune boite",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-002_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-002_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Créer une variable appelée <var id=age>age</var>. Donnez-lui un nombre qui représente votre âge.</li></ol>",
          "boilerplate"   : "?",
          "solution"      : "var age = 13;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-003",
          "name"          : "Bonne fête!",
          "normalizedName": "bonne fete!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Pratiquons-nous à créer des variables!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Donner à la variable <var id=day>jour</var> votre jour de naissance. <strong>Indice:</strong> cette valeur devrait être un nombre entre 1 et 31 (ex: var jour = 8;).</li><li class=code-item>Créer une nouvelle variable appelée <var id=month>mois</var>. Donnez-lui votre mois de naissance (janvier=1, février=2, etc.). <strong>Indice:</strong> cette valeur devrait être un nombre entre 1 et 12 (ex: var mois = 5;).</li><li class=code-item>Créer une nouvelle variable appelée <var id=year>annee</var>. Donnez-lui votre année de naissance. <strong>Indice:</strong> cette valeur devrait être un nombre, comme 2001.</li></ol>",
          "boilerplate"   : "var jour = ?;\n?\n?",
          "solution"      : "var jour = 1;\nvar mois = 1;\nvar annee = 1970;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-004",
          "name"          : "Une boîte dans une boîte",
          "normalizedName": "une boite dans une boite",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-004_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-004_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Créer une nouvelle variable appelée <var id=score>pointage</var>. Donnez-lui le produit de <var id=coins>monnaie</var> multipliée par 10. Rappelez-vous, le symbole de multiplication est l'astérisque (*).</li></ol>",
          "boilerplate"   : "var monnaie = 2 + 2;\n?",
          "solution"      : "var monnaie = 2 + 2;\nvar pointage = monnaie * 10;",
          "tips"          : "<h3 class=\"title\" ref=\"variable value\">Affectation d'une valeur à une variable</h3>\n<div class=\"text\">Affecter une valeur à une variable signifie lui donner une valeur. Nous pouvons donner une valeur une variable en indiquant son <concept ref=\"variable name\">nom</concept> suivi de l'opérateur d'affectation (=) et d'une valeur.</div><div class=\"text\">Si nous souhaitons <concept ref=\"variable create\">créer une variable</concept>, nous devons utiliser l'instruction var avant le nom de la variable. L'instruction var est requise pour créer une nouvelle variable. Toutefois, elle ne devrait pas être utilisée avec une variable existante.</div>\n<div class=\"code-sample-title\">Exemple d'affectation à une nouvelle variable et à une variable existante</div><pre class=\"codeBlock\">var nomVariable = 42; // donne la valeur 42 à une nouvelle variable\nnomVariable = 52; // donne la valeur 52 à une variable existante</pre>\n<div class=\"text\">La valeur que nous donnons à une variable peut être de différents <concept ref=\"data type\">types</concept> et peut même être le résultat d'un <concept ref=\"mathematical operators\">calcul</concept>.</div>\n<div class=\"code-sample-title\">Exemples d'affectations</div><pre class=\"codeBlock\">var vies; // crée une nouvelle variable appelée vies avec une valeur non définie\nvar pointage = 42; // crée une variable appelée pointage et lui donne la valeur 42\nvies = 3; // donne une valeur de 3 à la variable vies existante\npointage = 2 + 2; // affecte la somme de 2 + 2 (4) à la variable pointage\nvar nom = \"EduCode\"; // crée une variable appelée nom et lui donne la valeur de \"EduCode\"</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-005",
          "name"          : "Une boîte bien nommée",
          "normalizedName": "une boite bien nommee",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-005_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-005_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Changer le nom de la variable <var id=x>x</var> à <var id=priceBeforeTax>prixAvantTaxe</var>.</li><li class=code-item>Changer le nom de la variable <var id=y>y</var> à <var id=tax>taxe</var>.</li><li class=code-item>Changer le nom de la variable <var id=z>z</var> à <var id=priceAfterTax>prixApresTaxe</var>.</li></ol>",
          "boilerplate"   : "var x = 10;\nvar y = 1.15;\nvar z = x * y;",
          "solution"      : "var prixAvantTaxe = 10;\nvar taxe = 1.15;\nvar prixApresTaxe = prixAvantTaxe * taxe;",
          "tips"          : "<h3 class=\"title\" ref=\"variable name\">Appellation des variables</h3>\n<div class=\"text\">Le nom d'une variable est important puisqu'il représente la seule façon de <concept ref=\"variable value\">récupérer sa valeur</concept>. Un nom de variable ne peut pas contenir d'espaces, ni commencer par un chiffre.</div><div class=\"text\">De plus, les noms des variables sont habituellement écrits en casse de chameau (ou camelCase en anglais) pour faciliter leur lecture. Les noms écrits de cette façon mettent la première lettre de chaque mot (sauf le premier) en majuscules.</div>\n<div class=\"code-sample-title\">Exemples de noms de variables</div><pre class=\"codeBlock\">var grossePommeRouge; // correct: le nom est écrit en casse de chameau\nvar nomdevariabletreslong; // correct: le nom respecte les règles mais n'est pas écrit en casse de chameau\nvar autre nom tres long; // incorrect: le nom ne doit pas contenir d'espaces\nvar 25pommes; // incorrect: le nom ne doit pas commencer par un chiffre\nvar dollars100; // correct: le nom peut contenir des chiffres</pre>\n<h3 class=\"title\" ref=\"variable case sensitive\">Noms de variables sensibles à la casse</h3>\n<div class=\"text\">Les <concept ref=\"variable name\">noms</concept> des variables sont sensibles à la casse. Si deux variables ont le même nom, mais que les minuscules et majuscules ne sont pas identiques, alors elles sont considérées comme deux variables distinctes. Remarquez qu'il serait préférable dans ce cas de choisir des noms différents pour les deux variables pour éviter toute confusion.</div>\n<div class=\"code-sample-title\">Exemples de noms de variables</div><pre class=\"codeBlock\">var unNomDeVariable; // crée une variable\nvar unnomdevariable; // crée une différente variable</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-006",
          "name"          : "Une grande surface",
          "normalizedName": "une grande surface",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui calcule l'aire d'un rectangle. Pour calculer l'aire d'un rectangle, nous devons multiplier sa largeur par sa longueur. Pouvez-vous calculer l'aire d'un rectangle avec les dimensions spécifiées?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Créer une nouvelle variable appelée <var id=area>aire</var>. Donnez-lui le résultat de <var id=width>largeur</var> multipliée par <var id=length>longueur</var>. <strong>Indice:</strong> le symbole de multiplication est l'astérisque (*).</li></ol>",
          "boilerplate"   : "var largeur = 10;\nvar longueur = 10;\n\n// Créez la variable aire ici!\n?",
          "solution"      : "var largeur = 10;\nvar longueur = 10;\n\n// Créez la variable aire ici!\nvar aire = largeur * longueur;",
          "tips"          : "<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-007",
          "name"          : "Une petite calculatrice",
          "normalizedName": "une petite calculatrice",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Mettons en pratique les opérateurs mathématiques de base! Complétez chacune des équations.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Donner à <var id=difference>difference</var> le résultat de <var id=firstNumber>premierNombre</var> moins <var id=secondNumber>deuxiemeNombre</var>. <strong>Indice:</strong> le symbole de soustraction est le tiret (-).</li><li class=code-item>Donner à <var id=product>produit</var> le résultat de <var id=firstNumber>premierNombre</var> multiplié par <var id=secondNumber>deuxiemeNombre</var>. <strong>Indice:</strong> le symbole de multiplication est l'astérisque (*).</li><li class=code-item>Donner à <var id=quotient>quotient</var> le résultat de <var id=firstNumber>premierNombre</var> divisé par <var id=secondNumber>deuxiemeNombre</var>. <strong>Indice:</strong> le symbole de division est la barre oblique (/).</li></ol>",
          "boilerplate"   : "var premierNombre = 10;\nvar deuxiemeNombre = 5;\n\nvar somme = premierNombre + deuxiemeNombre;\nvar difference = ?;\nvar produit = ?;\nvar quotient = ?;",
          "solution"      : "var premierNombre = 10;\nvar deuxiemeNombre = 5;\n\nvar somme = premierNombre + deuxiemeNombre;\nvar difference = premierNombre - deuxiemeNombre;\nvar produit = premierNombre * deuxiemeNombre;\nvar quotient = premierNombre / deuxiemeNombre;",
          "tips"          : "<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-008",
          "name"          : "Une boîte changeante",
          "normalizedName": "une boite changeante",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-008_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-008_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Créer une nouvelle variable appelée <var id=lives>vies</var>. Donnez-lui la valeur 3.</li><li class=code-item>Dans une autre instruction, donnez à <var id=lives>vies</var> la valeur 2.</li></ol>",
          "boilerplate"   : "?\n?",
          "solution"      : "var vies = 3;\nvies = 2;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"variable value\">Affectation d'une valeur à une variable</h3>\n<div class=\"text\">Affecter une valeur à une variable signifie lui donner une valeur. Nous pouvons donner une valeur une variable en indiquant son <concept ref=\"variable name\">nom</concept> suivi de l'opérateur d'affectation (=) et d'une valeur.</div><div class=\"text\">Si nous souhaitons <concept ref=\"variable create\">créer une variable</concept>, nous devons utiliser l'instruction var avant le nom de la variable. L'instruction var est requise pour créer une nouvelle variable. Toutefois, elle ne devrait pas être utilisée avec une variable existante.</div>\n<div class=\"code-sample-title\">Exemple d'affectation à une nouvelle variable et à une variable existante</div><pre class=\"codeBlock\">var nomVariable = 42; // donne la valeur 42 à une nouvelle variable\nnomVariable = 52; // donne la valeur 52 à une variable existante</pre>\n<div class=\"text\">La valeur que nous donnons à une variable peut être de différents <concept ref=\"data type\">types</concept> et peut même être le résultat d'un <concept ref=\"mathematical operators\">calcul</concept>.</div>\n<div class=\"code-sample-title\">Exemples d'affectations</div><pre class=\"codeBlock\">var vies; // crée une nouvelle variable appelée vies avec une valeur non définie\nvar pointage = 42; // crée une variable appelée pointage et lui donne la valeur 42\nvies = 3; // donne une valeur de 3 à la variable vies existante\npointage = 2 + 2; // affecte la somme de 2 + 2 (4) à la variable pointage\nvar nom = \"EduCode\"; // crée une variable appelée nom et lui donne la valeur de \"EduCode\"</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-009",
          "name"          : "Une boîte dynamique",
          "normalizedName": "une boite dynamique",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-009_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-009_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une instruction qui augmente la valeur de <var id=score>pointage</var> de 100.</li></ol>",
          "boilerplate"   : "var pointage = 1000;\n?",
          "solution"      : "var pointage = 1000;\npointage = pointage + 100;",
          "tips"          : "<h3 class=\"title\" ref=\"undefined variable\">Utilisation des variables avec valeur non définie</h3>\n<div class=\"text\">La <concept ref=\"variable value\">valeur</concept> par défaut des variables est undefined, c'est-à-dire non définie. Il est donc important de donner une valeur à une variable avant de l'utiliser, sinon nous obtenons des résultats étranges.</div>\n<div class=\"code-sample-title\">Exemple de variable non définie</div><pre class=\"codeBlock\">var monnaie; // la valeur de monnaie est undefined (non définie)\nvar pointage = monnaie * 10; // undefined multiplié par 10 est NaN (pas un nombre)</pre>\n<div class=\"text\">Dans l'exemple de code ci-dessus, la variable pointage reçoit la valeur de <concept ref=\"not a number\">NaN</concept>, c'est-à-dire Not a Number, ou Pas un Nombre en français, parce que le résultat de l'expression undefined <concept ref=\"mathematical operators\">multiplié</concept> par 10 ne peut pas être calculé.</div>\n<h3 class=\"title\" ref=\"variable assign with variable\">Utilisation d'une variable dans une affectation</h3>\n<div class=\"text\">Les variables peuvent être utilisées pour <concept ref=\"variable value\">affecter une valeur</concept> à une autre variable. Dans ce cas, la valeur de la variable à la droite de l'opérateur d'affectation (=) est d'abord récupérée, puis la variable à gauche reçoit cette même valeur.</div>\n<div class=\"code-sample-title\">Exemple d'une variable utilisée dans une affectation</div><pre class=\"codeBlock\">var premierNombre = 5;\nvar deuxiemeNombre = 10 + premierNombre; // deuxiemeNombre reçoit la valeur de 15</pre>\n<div class=\"text\">Pour calculer la valeur de deuxiemeNombre, nous récupérons d'abord la valeur de premierNombre, qui est 5, et calculons la <concept ref=\"mathematical operators\">somme</concept> de 10 plus 5. Lorsque nous avons obtenu le résultat de 15, nous l'affectons à la variable deuxiemeNombre. Remarquez que la variable premierNombre doit avoir été créée et doit <concept ref=\"undefined variable\">avoir une valeur</concept> avant de l'utiliser pour calculer deuxiemeNombre.</div>\n<h3 class=\"title\" ref=\"variable self reference\">Affectation d'une valeur à une variable avec sa valeur existante</h3>\n<div class=\"text\">Puisque l'expression à droite d'une opération d'<concept ref=\"variable value\">affectation</concept> est toujours <concept ref=\"mathematical operators\">calculée</concept> en premier, nous pouvons utiliser la valeur existante d'une variable pour calculer une nouvelle valeur. Pour ce faire, il est important que la variable ait déjà une valeur, sinon le résultat sera <concept ref=\"not a number\">NaN</concept> (Not a Number, ou Pas un Nombre, en français).</div>\n<div class=\"code-sample-title\">Exemples d'affectation en utilisant une valeur existante</div><pre class=\"codeBlock\">var vies = 3;\nvies = vies - 1; // vies reçoit la valeur 2, c'est-à-dire la valeur existante de vies (3) moins 1\nvar pointage = pointage + 100; // incorrect: la variable pointage sera NaN puisque la variable pointage n'a pas encore de valeur</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-010",
          "name"          : "En une fraction de seconde  ",
          "normalizedName": "en une fraction de seconde",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui convertit les fractions en pourcentages! Pour convertir une fraction en pourcentage, vous devez d'abord diviser le numérateur (le nombre du haut) par le dénominateur (le nombre du bas). Puis, vous multipliez le résultat par 100 pour obtenir un pourcentage. Complétez le programme!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=percentage>pourcentage</var>. Donnez-lui le résultat de <var id=numerator>numerateur</var> divisé par <var id=denominator>denominateur</var>. <strong>Indice:</strong> le symbole de division est la barre oblique (/).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui multiplie la valeur de <var id=percentage>pourcentage</var> par 100. Le résultat de cette multiplication doit être mis dans la variable <var id=percentage>pourcentage</var>. <strong>Indice:</strong> le symbole de multiplication est l'astérisque (*).</li></ol>",
          "boilerplate"   : "var numerateur = 3;\nvar denominateur = 4;\n\n// Créez la variable pourcentage ici et\n// donnez-lui numerateur divisé par denominateur\n?\n\n// Multipliez pourcentage par 100 ici et\n// mettez le résultat dans pourcentage\n?",
          "solution"      : "var numerateur = 3;\nvar denominateur = 4;\n\n// Créez la variable pourcentage ici et\n// donnez-lui numerateur divisé par denominateur\nvar pourcentage = numerateur / denominateur;\n\n// Multipliez pourcentage par 100 ici et\n// mettez le résultat dans pourcentage\npourcentage = pourcentage * 100;",
          "tips"          : "<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-011",
          "name"          : "Compter les secondes",
          "normalizedName": "compter les secondes",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui calcule le nombre de secondes dans une année!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Donner à <var id=hoursInYear>heuresParAnnee</var> le résultat de <var id=daysInYear>joursParAnnee</var> multiplié par 24.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=minutesInYear>minutesParAnnee</var>. Donnez-lui le produit de <var id=hoursInYear>heuresParAnnee</var> multiplié par 60.</li><li class=code-item>Remplacer le troisième point d'interrogation par une nouvelle variable appelée <var id=secondsInYear>secondesParAnnee</var>. Donnez-lui le résultat de <var id=minutesInYear>minutesParAnnee</var> multiplié par 60.</li></ol>",
          "boilerplate"   : "var joursParAnnee = 365;\n\nvar heuresParAnnee = ?;\n\n// Créez minutesParAnnee ici\n?\n\n// Créez secondesParAnnee ici\n?",
          "solution"      : "var joursParAnnee = 365;\n\nvar heuresParAnnee = joursParAnnee * 24;\n\n// Créez minutesParAnnee ici\nvar minutesParAnnee = heuresParAnnee * 60;\n\n// Créez secondesParAnnee ici\nvar secondesParAnnee = minutesParAnnee * 60;",
          "tips"          : "<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-012",
          "name"          : "De la pizza à la pelle!",
          "normalizedName": "de la pizza a la pelle!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui calcule combien de tranches de pizza vous allez manger dans votre vie!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Donner à <var id=pizzaSlicesPerWeek>tranchesPizzaParSemaine</var> un nombre entre 1 et 10. Cette variable indique combien de tranches de pizza vous aller manger chaque semaine!</li><li class=code-item>Donner à <var id=lifeSpan>anneesDeVie</var> un nombre plus petit que 100. Cette variable indique combien d'années vous allez vivre.</li><li class=code-item>Remplacer le troisième point d'interrogation par une nouvelle variable appelée <var id=lifeSpanWeeks>semainesDeVie</var>. Donnez-lui le résultat de <var id=lifeSpan>anneesDeVie</var> multiplié par 52. <strong>Indice:</strong> le symbole de multiplication est l'astérisque (*).</li><li class=code-item>Remplacer le quatrième point d'interrogation par une nouvelle variable appelée <var id=pizzaPerLifeTime>tranchesPizzaTotales</var>. Donnez-lui le résultat de <var id=lifeSpanWeeks>semainesDeVie</var> multiplié par <var id=pizzaSlicesPerWeek>tranchesPizzaParSemaine</var>. Cette variable indique combien de tranches de pizza vous aller manger dans votre vie!</li></ol>",
          "boilerplate"   : "var tranchesPizzaParSemaine = ?;\nvar anneesDeVie = ?;\n\n// Créez la variable semainesDeVie ici\n?\n\n// Créez la variable tranchesPizzaTotales ici\n?",
          "solution"      : "var tranchesPizzaParSemaine = 2;\nvar anneesDeVie = 80;\n\n// Créez la variable semainesDeVie ici\nvar semainesDeVie = anneesDeVie * 52;\n\n// Créez la variable tranchesPizzaTotales ici\nvar tranchesPizzaTotales = semainesDeVie * tranchesPizzaParSemaine;",
          "tips"          : "<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-013",
          "name"          : "Le prix total",
          "normalizedName": "le prix total",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui calcule le total après taxe de deux items. Pour ce faire, vous devez d'abord additionner le prix des deux items, puis appliquer la taxe. Pouvez-vous compléter le programme?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Créer une nouvelle variable appelée <var id=totalBeforeTax>totalAvantTaxe</var>. Donnez-lui le résultat de <var id=firstItem>premierItem</var> plus <var id=secondItem>deuxiemeItem</var>.</li><li class=code-item>Créer une nouvelle variable appelée <var id=totalAfterTax>totalApresTaxe</var>. Donnez-lui le résultat de <var id=totalBeforeTax>totalAvantTaxe</var> multiplié par <var id=tax>taxe</var>. <strong>Indice:</strong> le symbole de multiplication est l'astérisque (*).</li></ol>",
          "boilerplate"   : "var premierItem = 5;\nvar deuxiemeItem = 10;\n\nvar taxe = 1.15;\n\n// Calculez le prix total avant taxe\n?\n\n// Calculez le prix total après taxe\n?",
          "solution"      : "var premierItem = 5;\nvar deuxiemeItem = 10;\n\nvar taxe = 1.15;\n\n// Calculez le prix total avant taxe\nvar totalAvantTaxe = premierItem + deuxiemeItem;\n\n// Calculez le prix total après taxe\nvar totalApresTaxe = totalAvantTaxe * taxe;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-068",
          "name"          : "Un voyage sur Mars",
          "normalizedName": "un voyage sur mars",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Créer une nouvelle variable appelée <var id=numberOfCellsRequired>litresCarburantRequis</var>. Donnez-lui le résultat de <var id=distanceToMars>distanceTotale</var> divisée par <var id=distancePerFuelCell>distanceParLitreCarburant</var>. Cette variable indique combien de litres de carburant sont nécessaires pour voyager jusqu'à Mars. <strong>Indice:</strong> le symbole de division est la barre oblique (/).</li><li class=code-item>Créer une nouvelle variable appelée <var id=priceOfTrip>prixDuVoyage</var>. Donnez-lui le résultat de <var id=numberOfCellsRequired>litresCarburantRequis</var> multiplié par <var id=pricePerFuelCell>prixParLitreCarburant</var>. Cette variable indique le prix total du voyage sur Mars. <strong>Indice:</strong> le symbole de multiplication est l'astérisque (*).</li></ol>",
          "boilerplate"   : "var distanceTotale = 54600000;\nvar distanceParLitreCarburant = 500000;\nvar prixParLitreCarburant = 1000000;\n\n// Créez la variable litresCarburantRequis ici\n?\n\n// Créez la variable prixDuVoyage ici\n?",
          "solution"      : "var distanceTotale = 54600000;\nvar distanceParLitreCarburant = 500000;\nvar prixParLitreCarburant = 1000000;\n\n// Créez la variable litresCarburantRequis ici\nvar litresCarburantRequis = distanceTotale / distanceParLitreCarburant;\n\n// Créez la variable prixDuVoyage ici\nvar prixDuVoyage = litresCarburantRequis * prixParLitreCarburant;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-04",
          "name"          : "Projet 4 - Un jeu de variables",
          "normalizedName": "projet 4 - un jeu de variables",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-014",
          "name"          : "Une rondelle et un but",
          "normalizedName": "une rondelle et un but",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-014_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-014_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer les points d'interrogation dans l'instruction \n    <concept ref=puck-create>puck.create()</concept> par une coordonnée en x, une coordonnée en y et une forme. <strong>Indice:</strong> la <strong>forme</strong> de la rondelle peut être: <string>\"circle\"</string>, <string>\"square\"</string>, <string>\"triangle\"</string> ou <string>\"hexagon\"</string>.</li><li class=code-item>Remplacer les points d'interrogation dans l'instruction \n    <concept ref=goal-create>goal.create()</concept> par une coordonnée en x et une coordonnée en y.</li></ol>",
          "boilerplate"   : "puck.create(?, ?, \"?\");\n\ngoal.create(?, ?);",
          "solution"      : "puck.create(2, 11, \"circle\");\n\ngoal.create(23, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"physics puzzle game\">Un jeu d'obstacles</h3>\n<div class=\"text\">Le jeu d'obstacles est un jeu simple dans lequel le joueur doit tenter de frapper le but avec la rondelle.</div><div class=\"text\">Pour y jouer, nous devons au moins créer la <concept ref=\"puck.create()\">rondelle</concept> du joueur et le <concept ref=\"goal.create()\">but</concept>. Pour créer des obstacles, nous utilisons l'instruction <concept ref=\"obstacle.create()\">obstacle.create()</concept>.</div>\n<h3 class=\"title\" ref=\"puck.create()\">Instruction puck.create()</h3>\n<div class=\"text\">L'instruction puck.create() est utilisée pour créer la rondelle du joueur aux coordonnées indiquées. L'instruction puck.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme).</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div>\n<div class=\"code-sample-title\">Exemples de puck.create()</div><pre class=\"codeBlock\">puck.create(2, 11, \"circle\"); // crée une rondelle en forme de cercle à (2,11)\npuck.create(2, 11); // incorrect: la forme est obligatoire\npuck.create(22, 15, triangle); // incorrect: le mot \"triangle\" doit être entouré de guillemets (\" \")\npuck.create(\"hexagon\", 10, 11); // incorrect: la forme doit venir après les coordonnées</pre>\n<h3 class=\"title\" ref=\"goal.create()\">Instruction goal.create()</h3>\n<div class=\"text\">L'instruction goal.create() est utilisée pour créer le but du jeu aux coordonnées indiquées. L'instruction goal.create() a 2 <concept ref=\"parameter\">paramètres</concept> obligatoires. Les paramètres doivent être indiqués dans l'ordre suivant: goal.create(x, y).</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div>\n<div class=\"code-sample-title\">Exemples de goal.create()</div><pre class=\"codeBlock\">goal.create(20, 11); // crée le but à (20,11)\ngoal.create(32, 11); // incorrect: la coordonnée en x ne doit pas dépasser 30\ngoal.Create(15, 11); // incorrect: le mot \"create\" prend un \"c\" minuscule</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-015",
          "name"          : "Quelques obstacles",
          "normalizedName": "quelques obstacles",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-015_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-015_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser l'instruction \n    <concept ref=obstacle-create>obstacle.create()</concept> pour créer des obstacles de forme\n    <string>\"square\"</string> aux coordonnées suivantes: <strong>(26, 10)</strong> et <strong>(26, 12)</strong>.</li></ol>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nobstacle.create(26, 11, \"square\");\n// Créez deux autres obstacles ici\n?\n?\n\ngoal.create(28, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nobstacle.create(26, 11, \"square\");\n// Créez deux autres obstacles ici\nobstacle.create(26, 10, \"square\");\nobstacle.create(26, 12, \"square\");\n\ngoal.create(28, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"obstacle.create()\">Instruction obstacle.create()</h3>\n<div class=\"text\">L'instruction obstacle.create() est utilisée pour créer des obstacles afin d'empêcher la <concept ref=\"puck.create()\">rondelle</concept> du joueur d'atteindre le <concept ref=\"goal.create()\">but</concept>. L'instruction obstacle.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme, [type]). Par défaut, le type est &quot;normal&quot;.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div><div class=\"text\">Le type doit être l'un des suivants: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // crée un obstacle carré de type \"normal\" à (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // crée un obstacle en forme de cercle de type \"faster\" à (7,7)\nobstacle.create(1, \"triangle\", 17); // incorrect: les paramètres sont dans le mauvais ordre\nobstacle.create(4, 5); // incorrect: la forme est obligatoire\nobstacle.Create(3, 1); // incorrect: le mot \"create\" prend un \"c\" minuscule\nobstacle.create(6, 6, hexagon); // incorrect: le mot \"hexagon\" doit être entouré de guillemets (\" \")\nobstacle.create(4, 21, \"octagon\"); // incorrect: \"octagon\" n'est pas une forme acceptée</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-016",
          "name"          : "Sous une autre forme",
          "normalizedName": "sous une autre forme",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Changer la forme de <strong>tous</strong> les obstacles à des cercles, en utilisant la valeur \n    <string>\"circle\"</string>.</li></ol>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nobstacle.create(26, 8, \"square\");\nobstacle.create(26, 9, \"square\");\nobstacle.create(26, 10, \"square\");\nobstacle.create(26, 11, \"square\");\nobstacle.create(26, 12, \"square\");\nobstacle.create(26, 13, \"square\");\nobstacle.create(26, 14, \"square\");\n\ngoal.create(28, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nobstacle.create(26, 8, \"circle\");\nobstacle.create(26, 9, \"circle\");\nobstacle.create(26, 10, \"circle\");\nobstacle.create(26, 11, \"circle\");\nobstacle.create(26, 12, \"circle\");\nobstacle.create(26, 13, \"circle\");\nobstacle.create(26, 14, \"circle\");\n\ngoal.create(28, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"obstacle.create()\">Instruction obstacle.create()</h3>\n<div class=\"text\">L'instruction obstacle.create() est utilisée pour créer des obstacles afin d'empêcher la <concept ref=\"puck.create()\">rondelle</concept> du joueur d'atteindre le <concept ref=\"goal.create()\">but</concept>. L'instruction obstacle.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme, [type]). Par défaut, le type est &quot;normal&quot;.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div><div class=\"text\">Le type doit être l'un des suivants: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // crée un obstacle carré de type \"normal\" à (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // crée un obstacle en forme de cercle de type \"faster\" à (7,7)\nobstacle.create(1, \"triangle\", 17); // incorrect: les paramètres sont dans le mauvais ordre\nobstacle.create(4, 5); // incorrect: la forme est obligatoire\nobstacle.Create(3, 1); // incorrect: le mot \"create\" prend un \"c\" minuscule\nobstacle.create(6, 6, hexagon); // incorrect: le mot \"hexagon\" doit être entouré de guillemets (\" \")\nobstacle.create(4, 21, \"octagon\"); // incorrect: \"octagon\" n'est pas une forme acceptée</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-017",
          "name"          : "Une boîte à la rescousse",
          "normalizedName": "une boite a la rescousse",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-017_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-017_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le mot\n    <string>\"circle\"</string> dans chacune des instructions \n    <concept ref=obstacle-create>obstacle.create()</concept> par la variable <var id=shape>forme</var>. <strong>Indice</strong>: n'oubliez pas d'enlever les guillemets.</li></ol>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nvar forme = \"triangle\";\n\nobstacle.create(26, 8, \"circle\");\nobstacle.create(26, 9, \"circle\");\nobstacle.create(26, 10, \"circle\");\nobstacle.create(26, 11, \"circle\");\nobstacle.create(26, 12, \"circle\");\nobstacle.create(26, 13, \"circle\");\nobstacle.create(26, 14, \"circle\");\n\ngoal.create(28, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nvar forme = \"triangle\";\n\nobstacle.create(26, 8, forme);\nobstacle.create(26, 9, forme);\nobstacle.create(26, 10, forme);\nobstacle.create(26, 11, forme);\nobstacle.create(26, 12, forme);\nobstacle.create(26, 13, forme);\nobstacle.create(26, 14, forme);\n\ngoal.create(28, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"obstacle.create()\">Instruction obstacle.create()</h3>\n<div class=\"text\">L'instruction obstacle.create() est utilisée pour créer des obstacles afin d'empêcher la <concept ref=\"puck.create()\">rondelle</concept> du joueur d'atteindre le <concept ref=\"goal.create()\">but</concept>. L'instruction obstacle.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme, [type]). Par défaut, le type est &quot;normal&quot;.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div><div class=\"text\">Le type doit être l'un des suivants: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // crée un obstacle carré de type \"normal\" à (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // crée un obstacle en forme de cercle de type \"faster\" à (7,7)\nobstacle.create(1, \"triangle\", 17); // incorrect: les paramètres sont dans le mauvais ordre\nobstacle.create(4, 5); // incorrect: la forme est obligatoire\nobstacle.Create(3, 1); // incorrect: le mot \"create\" prend un \"c\" minuscule\nobstacle.create(6, 6, hexagon); // incorrect: le mot \"hexagon\" doit être entouré de guillemets (\" \")\nobstacle.create(4, 21, \"octagon\"); // incorrect: \"octagon\" n'est pas une forme acceptée</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-018",
          "name"          : "Tout va mieux avec une variable",
          "normalizedName": "tout va mieux avec une variable",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Utilisons les variables pour créer un deuxième mur dans notre jeu.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=y>y</var>. Donnez-lui le nombre 6.</li><li class=code-item>Remplacer les autres points d'interrogation par 5 obstacles. Ces obstacles doivent être aux coordonnées suivantes: <strong>(26, 6)</strong>, <strong>(27, 6)</strong>, <strong>(28, 6)</strong>, <strong>(29, 6)</strong> et <strong>(30, 6)</strong>. Utilisez la variable <var id=y>y</var> pour leur coordonnée en y et la variable <var id=shape>forme</var> pour leur forme.</li></ol>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nvar forme = \"triangle\";\n\n// Créez votre variable ici\n?\n\nobstacle.create(23, y, forme);\nobstacle.create(24, y, forme);\nobstacle.create(25, y, forme);\n// Créez vos obstacles ici\n?\n?\n?\n?\n?\n\ny = 16;\n\nobstacle.create(23, y, forme);\nobstacle.create(24, y, forme);\nobstacle.create(25, y, forme);\nobstacle.create(26, y, forme);\nobstacle.create(27, y, forme);\nobstacle.create(28, y, forme);\nobstacle.create(29, y, forme);\nobstacle.create(30, y, forme);\n\ngoal.create(28, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nvar forme = \"triangle\";\n\n// Créez votre variable ici\nvar y = 6;\n\nobstacle.create(23, y, forme);\nobstacle.create(24, y, forme);\nobstacle.create(25, y, forme);\n// Créez vos obstacles ici\nobstacle.create(26, y, forme);\nobstacle.create(27, y, forme);\nobstacle.create(28, y, forme);\nobstacle.create(29, y, forme);\nobstacle.create(30, y, forme);\n\ny = 16;\n\nobstacle.create(23, y, forme);\nobstacle.create(24, y, forme);\nobstacle.create(25, y, forme);\nobstacle.create(26, y, forme);\nobstacle.create(27, y, forme);\nobstacle.create(28, y, forme);\nobstacle.create(29, y, forme);\nobstacle.create(30, y, forme);\n\ngoal.create(28, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"obstacle.create()\">Instruction obstacle.create()</h3>\n<div class=\"text\">L'instruction obstacle.create() est utilisée pour créer des obstacles afin d'empêcher la <concept ref=\"puck.create()\">rondelle</concept> du joueur d'atteindre le <concept ref=\"goal.create()\">but</concept>. L'instruction obstacle.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme, [type]). Par défaut, le type est &quot;normal&quot;.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div><div class=\"text\">Le type doit être l'un des suivants: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // crée un obstacle carré de type \"normal\" à (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // crée un obstacle en forme de cercle de type \"faster\" à (7,7)\nobstacle.create(1, \"triangle\", 17); // incorrect: les paramètres sont dans le mauvais ordre\nobstacle.create(4, 5); // incorrect: la forme est obligatoire\nobstacle.Create(3, 1); // incorrect: le mot \"create\" prend un \"c\" minuscule\nobstacle.create(6, 6, hexagon); // incorrect: le mot \"hexagon\" doit être entouré de guillemets (\" \")\nobstacle.create(4, 21, \"octagon\"); // incorrect: \"octagon\" n'est pas une forme acceptée</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-019",
          "name"          : "Un nouveau type d'obstacle",
          "normalizedName": "un nouveau type dobstacle",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-019_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-019_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer les deux premiers points d'interrogation par le mot \n    <string>\"faster\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par le mot \n    <string>\"change\"</string>.</li></ol>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nvar forme = \"triangle\";\n\nobstacle.create(23, 8, \"hexagon\", ?);\nobstacle.create(23, 14, \"hexagon\", ?);\nobstacle.create(23, 11, \"hexagon\", ?);\n\nvar y = 6;\n\nobstacle.create(23, y, forme);\nobstacle.create(24, y, forme);\nobstacle.create(25, y, forme);\nobstacle.create(26, y, forme);\nobstacle.create(27, y, forme);\nobstacle.create(28, y, forme);\nobstacle.create(29, y, forme);\nobstacle.create(30, y, forme);\n\ny = 16;\n\nobstacle.create(23, y, forme);\nobstacle.create(24, y, forme);\nobstacle.create(25, y, forme);\nobstacle.create(26, y, forme);\nobstacle.create(27, y, forme);\nobstacle.create(28, y, forme);\nobstacle.create(29, y, forme);\nobstacle.create(30, y, forme);\n\ngoal.create(28, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nvar forme = \"triangle\";\n\nobstacle.create(23, 8, \"hexagon\", \"faster\");\nobstacle.create(23, 14, \"hexagon\", \"faster\");\nobstacle.create(23, 11, \"hexagon\", \"change\");\n\nvar y = 6;\n\nobstacle.create(23, y, forme);\nobstacle.create(24, y, forme);\nobstacle.create(25, y, forme);\nobstacle.create(26, y, forme);\nobstacle.create(27, y, forme);\nobstacle.create(28, y, forme);\nobstacle.create(29, y, forme);\nobstacle.create(30, y, forme);\n\ny = 16;\n\nobstacle.create(23, y, forme);\nobstacle.create(24, y, forme);\nobstacle.create(25, y, forme);\nobstacle.create(26, y, forme);\nobstacle.create(27, y, forme);\nobstacle.create(28, y, forme);\nobstacle.create(29, y, forme);\nobstacle.create(30, y, forme);\n\ngoal.create(28, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"obstacle.create()\">Instruction obstacle.create()</h3>\n<div class=\"text\">L'instruction obstacle.create() est utilisée pour créer des obstacles afin d'empêcher la <concept ref=\"puck.create()\">rondelle</concept> du joueur d'atteindre le <concept ref=\"goal.create()\">but</concept>. L'instruction obstacle.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme, [type]). Par défaut, le type est &quot;normal&quot;.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div><div class=\"text\">Le type doit être l'un des suivants: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // crée un obstacle carré de type \"normal\" à (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // crée un obstacle en forme de cercle de type \"faster\" à (7,7)\nobstacle.create(1, \"triangle\", 17); // incorrect: les paramètres sont dans le mauvais ordre\nobstacle.create(4, 5); // incorrect: la forme est obligatoire\nobstacle.Create(3, 1); // incorrect: le mot \"create\" prend un \"c\" minuscule\nobstacle.create(6, 6, hexagon); // incorrect: le mot \"hexagon\" doit être entouré de guillemets (\" \")\nobstacle.create(4, 21, \"octagon\"); // incorrect: \"octagon\" n'est pas une forme acceptée</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-020",
          "name"          : "Des bogues dans le jeu",
          "normalizedName": "des bogues dans le jeu",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ce niveau du jeu contient plusieurs bogues! Pouvez-vous trouver et réparer les bogues afin que le jeu fonctionne?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Trouver et réparer les <strong>3</strong> bogues dans les instructions \n    <concept ref=obstacle-create>obstacle.create()</concept>. Tous les bogues se cachent dans les obstacles qui ont la forme \n    <string>\"circle\"</string>!</li></ol>",
          "boilerplate"   : "puck.create(1, 21, \"circle\");\ngoal.create(7, 19);\n\n// Première diagonale\nobstacle.create(4, 11, \"circle\", \"faster\");\nobstacle.create(5, 10, \"faster\", \"circle\");\nobstacle.create(6, 9, \"circle\", \"faster\");\nobstacle.create(7, 8, \"circle\", \"faster\");\nobstacle.create(8, 7, \"circle\", \"faster\");\n\n// Deuxième diagonale\nobstacle.create(15, 7, \"circle\", \"faster\");\nobstacle.create(16, 8, \"circle\", \"faster\");\nobstacle.create(17, 9, circle, \"faster\");\nobstacle.create(18, 10, \"circle\", \"faster\");\nobstacle.create(19, 11, \"circle\", \"faster\");\n\n// Troisième diagonale\nobstacle.create(19, 18, \"circle\", \"faster\");\nobstacle.create(18, 19, \"circle\", \"faster\");\nobstacle.create(17, \"circle\", 20, \"faster\");\nobstacle.create(16, 21, \"circle\", \"faster\");\nobstacle.create(15, 22, \"circle\", \"faster\");\n\n// Les obstacles ci-dessous forment\n// les murs carrés. Pas de bogues ici!\n\n// Murs extérieurs\nobstacle.create(0, 11, \"square\");\nobstacle.create(1, 11, \"square\");\nobstacle.create(2, 11, \"square\");\nobstacle.create(3, 11, \"square\");\n\nobstacle.create(9, 7, \"square\");\nobstacle.create(10, 7, \"square\");\nobstacle.create(11, 7, \"square\");\nobstacle.create(12, 7, \"square\");\nobstacle.create(13, 7, \"square\");\nobstacle.create(14, 7, \"square\");\n\nobstacle.create(19, 12, \"square\");\nobstacle.create(19, 13, \"square\");\nobstacle.create(19, 14, \"square\");\nobstacle.create(19, 15, \"square\");\nobstacle.create(19, 16, \"square\");\nobstacle.create(19, 17, \"square\");\n\n// Murs intérieurs\nobstacle.create(6, 17, \"square\");\nobstacle.create(5, 18, \"square\");\nobstacle.create(5, 19, \"square\");\nobstacle.create(5, 20, \"square\");\nobstacle.create(5, 21, \"square\");\nobstacle.create(5, 22, \"square\");\n\nobstacle.create(8, 16, \"square\");\nobstacle.create(9, 16, \"square\");\nobstacle.create(7, 16, \"square\");\nobstacle.create(10, 16, \"square\");\nobstacle.create(11, 16, \"square\");\nobstacle.create(12, 16, \"square\");",
          "solution"      : "puck.create(1, 21, \"circle\");\ngoal.create(7, 19);\n\n// Première diagonale\nobstacle.create(4, 11, \"circle\", \"faster\");\nobstacle.create(5, 10, \"circle\", \"faster\");\nobstacle.create(6, 9, \"circle\", \"faster\");\nobstacle.create(7, 8, \"circle\", \"faster\");\nobstacle.create(8, 7, \"circle\", \"faster\");\n\n// Deuxième diagonale\nobstacle.create(15, 7, \"circle\", \"faster\");\nobstacle.create(16, 8, \"circle\", \"faster\");\nobstacle.create(17, 9, \"circle\", \"faster\");\nobstacle.create(18, 10, \"circle\", \"faster\");\nobstacle.create(19, 11, \"circle\", \"faster\");\n\n// Troisième diagonale\nobstacle.create(19, 18, \"circle\", \"faster\");\nobstacle.create(18, 19, \"circle\", \"faster\");\nobstacle.create(17, 20, \"circle\", \"faster\");\nobstacle.create(16, 21, \"circle\", \"faster\");\nobstacle.create(15, 22, \"circle\", \"faster\");\n\n// Les obstacles ci-dessous forment\n// les murs carrés. Pas de bogues ici!\n\n// Murs extérieurs\nobstacle.create(0, 11, \"square\");\nobstacle.create(1, 11, \"square\");\nobstacle.create(2, 11, \"square\");\nobstacle.create(3, 11, \"square\");\n\nobstacle.create(9, 7, \"square\");\nobstacle.create(10, 7, \"square\");\nobstacle.create(11, 7, \"square\");\nobstacle.create(12, 7, \"square\");\nobstacle.create(13, 7, \"square\");\nobstacle.create(14, 7, \"square\");\n\nobstacle.create(19, 12, \"square\");\nobstacle.create(19, 13, \"square\");\nobstacle.create(19, 14, \"square\");\nobstacle.create(19, 15, \"square\");\nobstacle.create(19, 16, \"square\");\nobstacle.create(19, 17, \"square\");\n\n// Murs intérieurs\nobstacle.create(6, 17, \"square\");\nobstacle.create(5, 18, \"square\");\nobstacle.create(5, 19, \"square\");\nobstacle.create(5, 20, \"square\");\nobstacle.create(5, 21, \"square\");\nobstacle.create(5, 22, \"square\");\n\nobstacle.create(8, 16, \"square\");\nobstacle.create(9, 16, \"square\");\nobstacle.create(7, 16, \"square\");\nobstacle.create(10, 16, \"square\");\nobstacle.create(11, 16, \"square\");\nobstacle.create(12, 16, \"square\");",
          "tips"          : "<h3 class=\"title\" ref=\"obstacle.create()\">Instruction obstacle.create()</h3>\n<div class=\"text\">L'instruction obstacle.create() est utilisée pour créer des obstacles afin d'empêcher la <concept ref=\"puck.create()\">rondelle</concept> du joueur d'atteindre le <concept ref=\"goal.create()\">but</concept>. L'instruction obstacle.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme, [type]). Par défaut, le type est &quot;normal&quot;.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div><div class=\"text\">Le type doit être l'un des suivants: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // crée un obstacle carré de type \"normal\" à (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // crée un obstacle en forme de cercle de type \"faster\" à (7,7)\nobstacle.create(1, \"triangle\", 17); // incorrect: les paramètres sont dans le mauvais ordre\nobstacle.create(4, 5); // incorrect: la forme est obligatoire\nobstacle.Create(3, 1); // incorrect: le mot \"create\" prend un \"c\" minuscule\nobstacle.create(6, 6, hexagon); // incorrect: le mot \"hexagon\" doit être entouré de guillemets (\" \")\nobstacle.create(4, 21, \"octagon\"); // incorrect: \"octagon\" n'est pas une forme acceptée</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-021",
          "name"          : "Créer un chef-d'œuvre",
          "normalizedName": "creer un chef-doeuvre",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>À votre tour de créer un niveau! Vous pouvez utiliser tous les outils que nous avons appris jusqu'à maintenant.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Créer un niveau qui contient un minimum de <strong>15</strong> obstacles. <strong>Indice:</strong> la valeur du paramètre qui indique la <strong>forme</strong> peut être\n    <string>\"circle\"</string>,\n    <string>\"square\"</string>,\n    <string>\"triangle\"</string> ou\n    <string>\"hexagon\"</string>. \n    \n    La valeur du paramètre qui indique le <strong>type</strong> peut être\n    <string>\"faster\"</string>,\n    <string>\"slower\"</string> ou\n    <string>\"change\"</string>.</li></ol>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\ngoal.create(28, 11);\n\n// Créez vos obstacles ici!",
          "solution"      : "puck.create(1, 11, \"circle\");\ngoal.create(28, 11);\n\n// Créez vos obstacles ici!\nobstacle.create(13, 4, \"square\");\nobstacle.create(13, 5, \"square\");\nobstacle.create(13, 6, \"square\");\nobstacle.create(13, 7, \"square\");\nobstacle.create(13, 8, \"square\");\nobstacle.create(13, 9, \"square\");\nobstacle.create(13, 10, \"square\");\nobstacle.create(13, 11, \"square\");\nobstacle.create(13, 12, \"square\");\nobstacle.create(13, 13, \"square\");\nobstacle.create(13, 14, \"square\");\nobstacle.create(13, 15, \"square\");\nobstacle.create(13, 16, \"square\");\nobstacle.create(13, 17, \"square\");\nobstacle.create(13, 18, \"square\");",
          "tips"          : "<h3 class=\"title\" ref=\"obstacle.create()\">Instruction obstacle.create()</h3>\n<div class=\"text\">L'instruction obstacle.create() est utilisée pour créer des obstacles afin d'empêcher la <concept ref=\"puck.create()\">rondelle</concept> du joueur d'atteindre le <concept ref=\"goal.create()\">but</concept>. L'instruction obstacle.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme, [type]). Par défaut, le type est &quot;normal&quot;.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div><div class=\"text\">Le type doit être l'un des suivants: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // crée un obstacle carré de type \"normal\" à (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // crée un obstacle en forme de cercle de type \"faster\" à (7,7)\nobstacle.create(1, \"triangle\", 17); // incorrect: les paramètres sont dans le mauvais ordre\nobstacle.create(4, 5); // incorrect: la forme est obligatoire\nobstacle.Create(3, 1); // incorrect: le mot \"create\" prend un \"c\" minuscule\nobstacle.create(6, 6, hexagon); // incorrect: le mot \"hexagon\" doit être entouré de guillemets (\" \")\nobstacle.create(4, 21, \"octagon\"); // incorrect: \"octagon\" n'est pas une forme acceptée</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-022",
          "name"          : "Un jeu de maître",
          "normalizedName": "un jeu de maitre",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer chaque \n    forme <string>\"hexagon\"</string> par la forme <string>\"triangle\"</string> et chaque \n    forme <string>\"triangle\"</string> par la forme <string>\"hexagon\"</string>. Vous devez utiliser une ou plusieurs variables.</li></ol>",
          "boilerplate"   : "puck.create(1, 21, \"circle\");\ngoal.create(17, 11);\n\n// Créez vos variables ici!\n\n// Ligne supérieure\nobstacle.create(11, 7, \"hexagon\", \"faster\");\nobstacle.create(11, 8, \"hexagon\", \"change\");\nobstacle.create(12, 7, \"hexagon\", \"change\");\nobstacle.create(12, 8, \"hexagon\", \"faster\");\n\nobstacle.create(17, 7, \"triangle\", \"faster\");\nobstacle.create(17, 8, \"triangle\", \"change\");\nobstacle.create(18, 7, \"triangle\", \"change\");\nobstacle.create(18, 8, \"triangle\", \"faster\");\n\nobstacle.create(24, 7, \"hexagon\", \"faster\");\nobstacle.create(24, 8, \"hexagon\", \"change\");\nobstacle.create(25, 7, \"hexagon\", \"change\");\nobstacle.create(25, 8, \"hexagon\", \"faster\");\n\n// Ligne inférieure\nobstacle.create(11, 15, \"hexagon\", \"faster\");\nobstacle.create(11, 16, \"hexagon\", \"change\");\nobstacle.create(12, 15, \"hexagon\", \"change\");\nobstacle.create(12, 16, \"hexagon\", \"faster\");\n\nobstacle.create(17, 15, \"triangle\", \"faster\");\nobstacle.create(17, 16, \"triangle\", \"change\");\nobstacle.create(18, 15, \"triangle\", \"change\");\nobstacle.create(18, 16, \"triangle\", \"faster\");\n\nobstacle.create(24, 15, \"hexagon\", \"faster\");\nobstacle.create(24, 16, \"hexagon\", \"change\");\nobstacle.create(25, 15, \"hexagon\", \"change\");\nobstacle.create(25, 16, \"hexagon\", \"faster\");\n\n// Ne changez pas ces obstacles!\nobstacle.create(0, 4, \"circle\", \"faster\");\nobstacle.create(1, 3, \"circle\", \"faster\");\nobstacle.create(2, 2, \"circle\", \"faster\");\nobstacle.create(3, 1, \"circle\", \"faster\");\nobstacle.create(4, 0, \"circle\", \"faster\");\n\nobstacle.create(3, 22, \"square\");\nobstacle.create(3, 21, \"square\");\nobstacle.create(3, 20, \"square\");\nobstacle.create(3, 19, \"square\");\nobstacle.create(3, 18, \"square\");\nobstacle.create(3, 17, \"square\");\nobstacle.create(3, 16, \"square\");\nobstacle.create(3, 15, \"square\");\nobstacle.create(3, 14, \"square\");\nobstacle.create(3, 13, \"square\");\nobstacle.create(3, 12, \"square\");\nobstacle.create(3, 11, \"square\");",
          "solution"      : "puck.create(1, 21, \"circle\");\ngoal.create(17, 11);\n\n// Créez vos variables ici!\nvar hexagone = \"hexagon\";\nvar triangle = \"triangle\";\n\n// Ligne supérieure\nobstacle.create(11, 7, triangle, \"faster\");\nobstacle.create(11, 8, triangle, \"change\");\nobstacle.create(12, 7, triangle, \"change\");\nobstacle.create(12, 8, triangle, \"faster\");\n\nobstacle.create(17, 7, hexagone, \"faster\");\nobstacle.create(17, 8, hexagone, \"change\");\nobstacle.create(18, 7, hexagone, \"change\");\nobstacle.create(18, 8, hexagone, \"faster\");\n\nobstacle.create(24, 7, triangle, \"faster\");\nobstacle.create(24, 8, triangle, \"change\");\nobstacle.create(25, 7, triangle, \"change\");\nobstacle.create(25, 8, triangle, \"faster\");\n\n// Ligne inférieure\nobstacle.create(11, 15, triangle, \"faster\");\nobstacle.create(11, 16, triangle, \"change\");\nobstacle.create(12, 15, triangle, \"change\");\nobstacle.create(12, 16, triangle, \"faster\");\n\nobstacle.create(17, 15, hexagone, \"faster\");\nobstacle.create(17, 16, hexagone, \"change\");\nobstacle.create(18, 15, hexagone, \"change\");\nobstacle.create(18, 16, hexagone, \"faster\");\n\nobstacle.create(24, 15, triangle, \"faster\");\nobstacle.create(24, 16, triangle, \"change\");\nobstacle.create(25, 15, triangle, \"change\");\nobstacle.create(25, 16, triangle, \"faster\");\n\n// Ne changez pas ces obstacles!\nobstacle.create(0, 4, \"circle\", \"faster\");\nobstacle.create(1, 3, \"circle\", \"faster\");\nobstacle.create(2, 2, \"circle\", \"faster\");\nobstacle.create(3, 1, \"circle\", \"faster\");\nobstacle.create(4, 0, \"circle\", \"faster\");\n\nobstacle.create(3, 22, \"square\");\nobstacle.create(3, 21, \"square\");\nobstacle.create(3, 20, \"square\");\nobstacle.create(3, 19, \"square\");\nobstacle.create(3, 18, \"square\");\nobstacle.create(3, 17, \"square\");\nobstacle.create(3, 16, \"square\");\nobstacle.create(3, 15, \"square\");\nobstacle.create(3, 14, \"square\");\nobstacle.create(3, 13, \"square\");\nobstacle.create(3, 12, \"square\");\nobstacle.create(3, 11, \"square\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"obstacle.create()\">Instruction obstacle.create()</h3>\n<div class=\"text\">L'instruction obstacle.create() est utilisée pour créer des obstacles afin d'empêcher la <concept ref=\"puck.create()\">rondelle</concept> du joueur d'atteindre le <concept ref=\"goal.create()\">but</concept>. L'instruction obstacle.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme, [type]). Par défaut, le type est &quot;normal&quot;.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div><div class=\"text\">Le type doit être l'un des suivants: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // crée un obstacle carré de type \"normal\" à (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // crée un obstacle en forme de cercle de type \"faster\" à (7,7)\nobstacle.create(1, \"triangle\", 17); // incorrect: les paramètres sont dans le mauvais ordre\nobstacle.create(4, 5); // incorrect: la forme est obligatoire\nobstacle.Create(3, 1); // incorrect: le mot \"create\" prend un \"c\" minuscule\nobstacle.create(6, 6, hexagon); // incorrect: le mot \"hexagon\" doit être entouré de guillemets (\" \")\nobstacle.create(4, 21, \"octagon\"); // incorrect: \"octagon\" n'est pas une forme acceptée</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-023",
          "name"          : "Un mur de triangles",
          "normalizedName": "un mur de triangles",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter le code pour ajouter des obstacles aux coordonnées: <strong>(22, 12)</strong>, <strong>(23, 13)</strong>, <strong>(24, 14)</strong>, <strong>(25, 15)</strong> et <strong>(26, 16)</strong>. Les coordonnées de ces obstacles doivent être calculées à partir des variables <var id=x>x</var> et <var id=y>y</var>. <strong>Indice:</strong> regardez les instructions qui créent les autres obstacles!</li></ol>",
          "boilerplate"   : "puck.create(2, 11, \"triangle\");\ngoal.create(27, 11);\n\nvar x = 21;\nvar y = 11;\n\nobstacle.create(x+5, y-5, \"triangle\");\nobstacle.create(x+4, y-4, \"triangle\");\nobstacle.create(x+3, y-3, \"triangle\");\nobstacle.create(x+2, y-2, \"triangle\");\nobstacle.create(x+1, y-1, \"triangle\");\nobstacle.create(x, y, \"triangle\");\nobstacle.create(?, ?, \"triangle\");\nobstacle.create(?, ?, \"triangle\");\nobstacle.create(?, ?, \"triangle\");\nobstacle.create(?, ?, \"triangle\");\nobstacle.create(?, ?, \"triangle\");",
          "solution"      : "puck.create(2, 11, \"triangle\");\ngoal.create(27, 11);\n\nvar x = 21;\nvar y = 11;\n\nobstacle.create(x+5, y-5, \"triangle\");\nobstacle.create(x+4, y-4, \"triangle\");\nobstacle.create(x+3, y-3, \"triangle\");\nobstacle.create(x+2, y-2, \"triangle\");\nobstacle.create(x+1, y-1, \"triangle\");\nobstacle.create(x, y, \"triangle\");\nobstacle.create(x+1, y+1, \"triangle\");\nobstacle.create(x+2, y+2, \"triangle\");\nobstacle.create(x+3, y+3, \"triangle\");\nobstacle.create(x+4, y+4, \"triangle\");\nobstacle.create(x+5, y+5, \"triangle\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"obstacle.create()\">Instruction obstacle.create()</h3>\n<div class=\"text\">L'instruction obstacle.create() est utilisée pour créer des obstacles afin d'empêcher la <concept ref=\"puck.create()\">rondelle</concept> du joueur d'atteindre le <concept ref=\"goal.create()\">but</concept>. L'instruction obstacle.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme, [type]). Par défaut, le type est &quot;normal&quot;.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div><div class=\"text\">Le type doit être l'un des suivants: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // crée un obstacle carré de type \"normal\" à (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // crée un obstacle en forme de cercle de type \"faster\" à (7,7)\nobstacle.create(1, \"triangle\", 17); // incorrect: les paramètres sont dans le mauvais ordre\nobstacle.create(4, 5); // incorrect: la forme est obligatoire\nobstacle.Create(3, 1); // incorrect: le mot \"create\" prend un \"c\" minuscule\nobstacle.create(6, 6, hexagon); // incorrect: le mot \"hexagon\" doit être entouré de guillemets (\" \")\nobstacle.create(4, 21, \"octagon\"); // incorrect: \"octagon\" n'est pas une forme acceptée</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-002",
          "name"          : "Quiz 2",
          "description"   : "Les variables",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-002_q-01",
              "question": "<div>Quelle est la définition d'une <em>variable</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-002_q-01_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Un espace de rangement spécial dans la mémoire de l'ordinateur</div>",
                  "explanation": "Les variables sont comme des boîtes de carton dans lesquelles nous pouvons mettre des valeurs."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>Quelque chose qui change constamment</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-01_a-03",
                  "value" : 0,
                  "answer": "<div>Un nombre</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-01_a-04",
                  "value" : 0,
                  "answer": "<div>Toutes ces réponses</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-002_q-02",
              "question": "<div>Choisissez tous les noms de variables qui sont <strong>corrects</strong>.</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-02_a-01",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>var grosse pomme rouge;</code></pre>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-002_q-02_a-02",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>var premierNombre;</code></pre>",
                  "explanation": "Un nom court, écrit en casse de chameau, sans espaces."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-02_a-03",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>var 22millions;</code></pre>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-002_q-02_a-04",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>var unNomDeVariableAssezLong;</code></pre>",
                  "explanation": "Un nom long, écrit en casse de chameau, sans espaces."
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-002_q-02_a-05",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>var unautrenomdevariable;</code></pre>",
                  "explanation": "Le nom est correct, mais pourrait être écrit en casse de chameau (unAutreNomDeVariable)."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-002_q-03",
              "question": "<div>Quelle est la valeur finale de la variable <var>pointage</var>?</div>\n<pre class=\"language-javascript\"><code>var bonus = 5;\nvar pointage = 5 + bonus;</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-03_a-01",
                  "value" : 0,
                  "answer": "<div>5</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-002_q-03_a-02",
                  "value"      : 2,
                  "answer"     : "<div>10</div>",
                  "explanation": "Puisque <var>bonus</var> est égal à 5, l'instruction <code>var pointage = 5 + bonus;</code> devient: <code>var pointage = 5 + 5;</code>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-03_a-03",
                  "value" : 0,
                  "answer": "<div>0</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>55</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-002_q-04",
              "question": "<div>Quelle est la valeur finale de la variable <var>vies</var>?</div>\n<pre class=\"language-javascript\"><code>var vies = 5;\nvies = vies + 1;</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-04_a-01",
                  "value" : 0,
                  "answer": "<div>5</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>1</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-002_q-04_a-03",
                  "value"      : 2,
                  "answer"     : "<div>6</div>",
                  "explanation": "Puisque <var>vies</var> est égale à 5, l'instruction <code>var vies = vies + 1;</code> devient: <code>var vies = 5 + 1;</code>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-04_a-04",
                  "value" : 0,
                  "answer": "<div>0</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-002_q-05",
              "question": "<div>Quelle est l'erreur dans l'instruction suivante:</div>\n<pre class=\"language-javascript\"><code>obstacle.create(5, 5, \"faster\", \"circle\");</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>Le paramètre <string>\"circle\"</string> n'est pas une forme correcte.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>Le paramètre <string>\"faster\"</string> n'est pas un type correct.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-002_q-05_a-03",
                  "value"      : 2,
                  "answer"     : "<div>Les paramètres <string>\"faster\"</string> et <string>\"circle\"</string> ont été inversés.</div>",
                  "explanation": "Les paramètres de <code>obstacle.create()</code> sont: <code>obstacle.create(x, y, \"forme\", \"type\")</code>."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-05_a-04",
                  "value" : 0,
                  "answer": "<div>Les coordonnées (5,5) sont incorrectes.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-002_q-06",
              "question": "<div>Vrai ou faux. Deux variables différentes peuvent avoir le même nom.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-06_a-01",
                  "value" : 0,
                  "answer": "<div>Vrai</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-002_q-06_a-02",
                  "value"      : 1,
                  "answer"     : "<div>Faux</div>",
                  "explanation": "Chaque variable doit avoir un nom unique."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-002_q-07",
              "question": "<div>Choisissez tous les énoncés qui sont vrais.</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-002_q-07_a-01",
                  "value"      : 1,
                  "answer"     : "<div>L'instruction <code>var</code> devrait seulement être utilisée pour créer une nouvelle variable.</div>",
                  "explanation": "L'instruction <code>var</code> est seulement utilisée pour créer une nouvelle variable."
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-002_q-07_a-02",
                  "value"      : 1,
                  "answer"     : "<div>La valeur d'une variable peut être changée plusieurs fois dans un programme.</div>",
                  "explanation": "Nous pouvons toujours donner une nouvelle valeur à une variable. (ex: <code>x = 5;</code>)"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>Le nom d'une variable n'a pas besoin d'être unique.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-002_q-07_a-04",
                  "value"      : 1,
                  "answer"     : "<div>Une variable peut seulement contenir une seule valeur à la fois.</div>",
                  "explanation": "Si nous donnons une deuxième valeur à une variable, la première valeur est perdue."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-002_q-07_a-05",
                  "value" : 0,
                  "answer": "<div>Le nom d'une variable ne peut pas contenir de lettres majuscules.</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 2",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-260",
          "name"          : "Les entrées et sorties",
          "normalizedName": "les entrees et sorties",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-260_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-260_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-05",
          "name"          : "Projet 5 - Poser des questions",
          "normalizedName": "projet 5 - poser des questions",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-049",
          "name"          : "Dites quelque chose!",
          "normalizedName": "dites quelque chose!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-049_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-049_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par votre prénom. N'oubliez pas de l'entourer de guillemets! (exemple: <string>\"EduCode\"</string>)</li></ol>",
          "boilerplate"   : "console.log(?);",
          "solution"      : "console.log(\"EduCode\");",
          "tips"          : "<h3 class=\"title\" ref=\"output\">Sortie</h3>\n<div class=\"text\">Une sortie est une information qui nous est retournée par un programme. Les sons émis par un haut-parleur, ou une page sortant d'une imprimante sont des exemples de sorties.</div><div class=\"text\">L'instruction <concept ref=\"console.log()\">console.log()</concept> permet de créer des sorties de type <concept ref=\"string\">texte</concept>.</div>\n<h3 class=\"title\" ref=\"console.log()\">Instruction console.log()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> console.log() permet de créer une <concept ref=\"output\">sortie</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>, qui est habituellement une <concept ref=\"string\">chaîne</concept>. Le paramètre est écrit dans la sortie du programme, c'est-à-dire dans la console.</div><div class=\"text\">Remarquez que la chaîne donnée comme paramètre peut aussi être la <concept ref=\"concatenation\">concaténation</concept> de plusieurs chaînes.</div>\n<div class=\"code-sample-title\">Exemples de console.log()</div><pre class=\"codeBlock\">console.log(\"Bonjour!\"); // affiche: Bonjour!\nconsole.log(\"Bonjour \" + \"le monde!\"); // affiche la chaîne concaténée: Bonjour le monde!\nconsole.log(Bonjour!); // incorrect: la chaîne doit être entourée de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-050",
          "name"          : "Une sortie variable",
          "normalizedName": "une sortie variable",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-050_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-050_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par votre prénom. N'oubliez pas de l'entourer de guillemets! (exemple: <string>\"EduCode\"</string>)</li><li class=code-item>Remplacer le deuxième point d'interrogation par la variable <var id=firstName>prenom</var>.</li></ol>",
          "boilerplate"   : "var prenom = ?;\nconsole.log(?);",
          "solution"      : "var prenom = \"EduCode\";\nconsole.log(prenom);",
          "tips"          : "<h3 class=\"title\" ref=\"variable value\">Affectation d'une valeur à une variable</h3>\n<div class=\"text\">Affecter une valeur à une variable signifie lui donner une valeur. Nous pouvons donner une valeur une variable en indiquant son <concept ref=\"variable name\">nom</concept> suivi de l'opérateur d'affectation (=) et d'une valeur.</div><div class=\"text\">Si nous souhaitons <concept ref=\"variable create\">créer une variable</concept>, nous devons utiliser l'instruction var avant le nom de la variable. L'instruction var est requise pour créer une nouvelle variable. Toutefois, elle ne devrait pas être utilisée avec une variable existante.</div>\n<div class=\"code-sample-title\">Exemple d'affectation à une nouvelle variable et à une variable existante</div><pre class=\"codeBlock\">var nomVariable = 42; // donne la valeur 42 à une nouvelle variable\nnomVariable = 52; // donne la valeur 52 à une variable existante</pre>\n<div class=\"text\">La valeur que nous donnons à une variable peut être de différents <concept ref=\"data type\">types</concept> et peut même être le résultat d'un <concept ref=\"mathematical operators\">calcul</concept>.</div>\n<div class=\"code-sample-title\">Exemples d'affectations</div><pre class=\"codeBlock\">var vies; // crée une nouvelle variable appelée vies avec une valeur non définie\nvar pointage = 42; // crée une variable appelée pointage et lui donne la valeur 42\nvies = 3; // donne une valeur de 3 à la variable vies existante\npointage = 2 + 2; // affecte la somme de 2 + 2 (4) à la variable pointage\nvar nom = \"EduCode\"; // crée une variable appelée nom et lui donne la valeur de \"EduCode\"</pre>\n<h3 class=\"title\" ref=\"console.log()\">Instruction console.log()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> console.log() permet de créer une <concept ref=\"output\">sortie</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>, qui est habituellement une <concept ref=\"string\">chaîne</concept>. Le paramètre est écrit dans la sortie du programme, c'est-à-dire dans la console.</div><div class=\"text\">Remarquez que la chaîne donnée comme paramètre peut aussi être la <concept ref=\"concatenation\">concaténation</concept> de plusieurs chaînes.</div>\n<div class=\"code-sample-title\">Exemples de console.log()</div><pre class=\"codeBlock\">console.log(\"Bonjour!\"); // affiche: Bonjour!\nconsole.log(\"Bonjour \" + \"le monde!\"); // affiche la chaîne concaténée: Bonjour le monde!\nconsole.log(Bonjour!); // incorrect: la chaîne doit être entourée de guillemets (\" \")</pre>\n<h3 class=\"title\" ref=\"variable in console.log()\">Instruction console.log() et variables</h3>\n<div class=\"text\">Nous pouvons utiliser une <concept ref=\"variable\">variable</concept> comme paramètre de l'instruction <concept ref=\"console.log()\">console.log()</concept>. La <concept ref=\"variable value\">valeur</concept> de la variable est écrite dans la <concept ref=\"output\">sortie</concept> du programme, c'est-à-dire dans la console.</div><div class=\"text\">Remarquez que le <concept ref=\"variable name\">nom</concept> de la variable ne doit pas être entouré de guillemets, sinon il sera traité comme une <concept ref=\"string\">chaîne</concept>.</div>\n<div class=\"code-sample-title\">Exemples de console.log() avec une variable</div><pre class=\"codeBlock\">var monNom = \"EduCode\";\nconsole.log(monNom); // affiche le texte: EduCode\nvar unNombre = 42;\nconsole.log(unNombre); // affiche le nombre: 42\nvar uneVariable = \"Programmer est amusant!\";\nconsole.log(uneVariable); // affiche le texte: Programmer est amusant!\nconsole.log(\"uneVariable\"); // affiche le texte: uneVariable</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-051",
          "name"          : "Votre nom entier, svp!",
          "normalizedName": "votre nom entier svp!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Utilisons deux variables et des instructions console.log() pour que l'ordinateur dise votre nom entier!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par votre prénom. N'oubliez pas de l'entourer de guillemets! (exemple: <string>\"EduCode\"</string>)</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=lastName>nom</var>. Donnez-lui votre nom de famille! N'oubliez pas d'entourer cette valeur de guillemets.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction \n    <concept ref=console-log>console.log()</concept>. Elle doit afficher la valeur de la variable <var id=lastName>nom</var>.</li></ol>",
          "boilerplate"   : "var prenom = ?;\n\n// Créez la variable nom\n?\n\nconsole.log(prenom);\n\n// Écrivez la variable nom dans la console\n?",
          "solution"      : "var prenom = \"Edu\";\n\n// Créez la variable nom\nvar nom = \"Code\";\n\nconsole.log(prenom);\n\n// Écrivez la variable nom dans la console\nconsole.log(nom);",
          "tips"          : "<h3 class=\"title\" ref=\"variable value\">Affectation d'une valeur à une variable</h3>\n<div class=\"text\">Affecter une valeur à une variable signifie lui donner une valeur. Nous pouvons donner une valeur une variable en indiquant son <concept ref=\"variable name\">nom</concept> suivi de l'opérateur d'affectation (=) et d'une valeur.</div><div class=\"text\">Si nous souhaitons <concept ref=\"variable create\">créer une variable</concept>, nous devons utiliser l'instruction var avant le nom de la variable. L'instruction var est requise pour créer une nouvelle variable. Toutefois, elle ne devrait pas être utilisée avec une variable existante.</div>\n<div class=\"code-sample-title\">Exemple d'affectation à une nouvelle variable et à une variable existante</div><pre class=\"codeBlock\">var nomVariable = 42; // donne la valeur 42 à une nouvelle variable\nnomVariable = 52; // donne la valeur 52 à une variable existante</pre>\n<div class=\"text\">La valeur que nous donnons à une variable peut être de différents <concept ref=\"data type\">types</concept> et peut même être le résultat d'un <concept ref=\"mathematical operators\">calcul</concept>.</div>\n<div class=\"code-sample-title\">Exemples d'affectations</div><pre class=\"codeBlock\">var vies; // crée une nouvelle variable appelée vies avec une valeur non définie\nvar pointage = 42; // crée une variable appelée pointage et lui donne la valeur 42\nvies = 3; // donne une valeur de 3 à la variable vies existante\npointage = 2 + 2; // affecte la somme de 2 + 2 (4) à la variable pointage\nvar nom = \"EduCode\"; // crée une variable appelée nom et lui donne la valeur de \"EduCode\"</pre>\n<h3 class=\"title\" ref=\"console.log()\">Instruction console.log()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> console.log() permet de créer une <concept ref=\"output\">sortie</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>, qui est habituellement une <concept ref=\"string\">chaîne</concept>. Le paramètre est écrit dans la sortie du programme, c'est-à-dire dans la console.</div><div class=\"text\">Remarquez que la chaîne donnée comme paramètre peut aussi être la <concept ref=\"concatenation\">concaténation</concept> de plusieurs chaînes.</div>\n<div class=\"code-sample-title\">Exemples de console.log()</div><pre class=\"codeBlock\">console.log(\"Bonjour!\"); // affiche: Bonjour!\nconsole.log(\"Bonjour \" + \"le monde!\"); // affiche la chaîne concaténée: Bonjour le monde!\nconsole.log(Bonjour!); // incorrect: la chaîne doit être entourée de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-052",
          "name"          : "Poser les bonnes questions",
          "normalizedName": "poser les bonnes questions",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-052_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-052_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une instruction \n    <concept ref=prompt>prompt()</concept>. Elle doit demander à l'utilisateur: \n    <string>\"Quel est votre nom?\"</string>.</li></ol>",
          "boilerplate"   : "var prenom = prompt(\"Quel est votre prénom?\");\nvar nom = ?;\n\nconsole.log(prenom);\nconsole.log(nom);",
          "solution"      : "var prenom = prompt(\"Quel est votre prénom?\");\nvar nom = prompt(\"Quel est votre nom?\");\n\nconsole.log(prenom);\nconsole.log(nom);",
          "tips"          : "<h3 class=\"title\" ref=\"input\">Entrée</h3>\n<div class=\"text\">Une entrée est une information que nous donnons à un programme. Par exemple, une calculatrice prend deux nombres en entrée, effectue un calcul en les additionnant, puis crée une <concept ref=\"output\">sortie</concept> en affichant le résultat à l'écran.</div><div class=\"text\">L'instruction <concept ref=\"prompt()\">prompt()</concept> permet de créer une entrée de type <concept ref=\"string\">texte</concept>.</div>\n<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-053",
          "name"          : "Pour en savoir plus",
          "normalizedName": "pour en savoir plus",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-053_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-053_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Ajouter le texte \n    <string>\"Votre nom est \"</string> au deuxième\n    <concept ref=console-log>console.log()</concept>.</li></ol>",
          "boilerplate"   : "var prenom = prompt(\"Quel est votre prénom?\");\nvar nom = prompt(\"Quel est votre nom?\");\n\nconsole.log(\"Votre prénom est \" + prenom);\nconsole.log(nom);",
          "solution"      : "var prenom = prompt(\"Quel est votre prénom?\");\nvar nom = prompt(\"Quel est votre nom?\");\n\nconsole.log(\"Votre prénom est \" + prenom);\nconsole.log(\"Votre nom est \" + nom);",
          "tips"          : "<h3 class=\"title\" ref=\"console.log() concatenation\">Combinaison de chaînes et de variables dans un console.log()</h3>\n<div class=\"text\">Nous pouvons combiner une <concept ref=\"string\">chaîne</concept> et la <concept ref=\"variable value\">valeur</concept> d'une variable entre les parenthèses de l'instruction console.log() pour créer une <concept ref=\"output\">sortie</concept> complexe.</div><div class=\"text\">Pour ce faire, nous devons utiliser l'opérateur de <concept ref=\"concatenation\">concaténation (+)</concept> entre chacun des éléments.</div>\n<div class=\"code-sample-title\">Exemples de console.log() avec une variable et une chaîne</div><pre class=\"codeBlock\">var monNom = \"EduCode\";\nconsole.log(\"Mon nom est \" + monNom); // affiche la chaîne concaténée: Mon nom est EduCode\nvar monAge = 16;\nconsole.log(\"J'ai \" + monAge + \" ans\"); // affiche la chaîne concaténée: J'ai 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-054",
          "name"          : "Une autre question",
          "normalizedName": "une autre question",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une variable appelée <var id=color>couleur</var>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par votre couleur favorite. La couleur doit être entourée de guillemets! (exemple: <string>\"vert\"</string>)</li><li class=code-item>Remplacer le troisième point d'interrogation par le texte <string>\"Votre couleur favorite est \"</string>.</li><li class=code-item>Remplacer le dernier point d'interrogation par la variable <var id=color>couleur</var>.</li></ol>",
          "boilerplate"   : "var ? = ?;\nconsole.log(? + ?);",
          "solution"      : "var couleur = \"vert\";\nconsole.log(\"Votre couleur favorite est \" + couleur);",
          "tips"          : "<h3 class=\"title\" ref=\"console.log() concatenation\">Combinaison de chaînes et de variables dans un console.log()</h3>\n<div class=\"text\">Nous pouvons combiner une <concept ref=\"string\">chaîne</concept> et la <concept ref=\"variable value\">valeur</concept> d'une variable entre les parenthèses de l'instruction console.log() pour créer une <concept ref=\"output\">sortie</concept> complexe.</div><div class=\"text\">Pour ce faire, nous devons utiliser l'opérateur de <concept ref=\"concatenation\">concaténation (+)</concept> entre chacun des éléments.</div>\n<div class=\"code-sample-title\">Exemples de console.log() avec une variable et une chaîne</div><pre class=\"codeBlock\">var monNom = \"EduCode\";\nconsole.log(\"Mon nom est \" + monNom); // affiche la chaîne concaténée: Mon nom est EduCode\nvar monAge = 16;\nconsole.log(\"J'ai \" + monAge + \" ans\"); // affiche la chaîne concaténée: J'ai 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-055",
          "name"          : "Une seule sortie",
          "normalizedName": "une seule sortie",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-055_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-055_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par le texte \n    <string>\". Votre nom est \"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par la variable <var id=lastName>nom</var>.</li></ol>",
          "boilerplate"   : "var prenom = prompt(\"Quel est votre prénom?\");\nvar nom = prompt(\"Quel est votre nom?\");\n\nconsole.log(\"Votre prénom est \" + prenom + ? + ?);",
          "solution"      : "var prenom = prompt(\"Quel est votre prénom?\");\nvar nom = prompt(\"Quel est votre nom?\");\n\nconsole.log(\"Votre prénom est \" + prenom + \". Votre nom est \" + nom);",
          "tips"          : "<h3 class=\"title\" ref=\"console.log() concatenation\">Combinaison de chaînes et de variables dans un console.log()</h3>\n<div class=\"text\">Nous pouvons combiner une <concept ref=\"string\">chaîne</concept> et la <concept ref=\"variable value\">valeur</concept> d'une variable entre les parenthèses de l'instruction console.log() pour créer une <concept ref=\"output\">sortie</concept> complexe.</div><div class=\"text\">Pour ce faire, nous devons utiliser l'opérateur de <concept ref=\"concatenation\">concaténation (+)</concept> entre chacun des éléments.</div>\n<div class=\"code-sample-title\">Exemples de console.log() avec une variable et une chaîne</div><pre class=\"codeBlock\">var monNom = \"EduCode\";\nconsole.log(\"Mon nom est \" + monNom); // affiche la chaîne concaténée: Mon nom est EduCode\nvar monAge = 16;\nconsole.log(\"J'ai \" + monAge + \" ans\"); // affiche la chaîne concaténée: J'ai 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-056",
          "name"          : "Une question simple",
          "normalizedName": "une question simple",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ce programme devrait demander aux utilisateurs d'entrer leur animal favori. Présentement, le programme affiche toujours que l'animal favori de l'utilisateur est un chien. Ajoutons une entrée au programme pour permettre aux utilisateurs de répondre à la question!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le mot <string>\"chien\"</string> par une instruction \n    <concept ref=prompt>prompt()</concept>. Elle doit demander à l'utilisateur:\n    <string>\"Quel est votre animal favori?\"</string>.</li></ol>",
          "boilerplate"   : "var animalFavori = \"chien\";\nconsole.log(animalFavori);",
          "solution"      : "var animalFavori = prompt(\"Quel est votre animal favori?\");\nconsole.log(animalFavori);",
          "tips"          : "<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-057",
          "name"          : "Maître en son domaine",
          "normalizedName": "maitre en son domaine",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Il est dit que 10 000 heures de pratique sont nécessaires pour maîtriser une habileté ou une activité. Créons un programme qui calcule combien d'années sont nécessaires pour maîtriser une activité.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Donner une valeur de type texte à la variable <var id=skill>activite</var>. Cette valeur doit indiquer l'activité que vous voulez maîtriser (ex:\n    <string>\"les sports\"</string>,\n    <string>\"la musique\"</string>, etc.).</li><li class=code-item>Donner un nombre à la variable <var id=timeSpentPerMonth>tempsPasseParMois</var>. Cette valeur doit indiquer combien d'heures par mois  vous voulez passer à pratiquer l'activité. Ce nombre doit être plus petit que 744 (le nombre d'heures dans un mois)!</li><li class=code-item>Compléter l'instruction \n    <concept ref=console-log>console.log()</concept> en remplaçant le premier point d'interrogation par la variable <var id=years>annees</var> et le deuxième point d'interrogation par la variable <var id=skill>activite</var>.</li></ol>",
          "boilerplate"   : "var activite = ?;\nvar tempsPasseParMois = ?;\n\nvar tempsPasseParAn = tempsPasseParMois * 12;\n\nvar annees = 10000 / tempsPasseParAn;\n\nconsole.log(\"Il vous faudra \" + ? + \" années pour maîtriser \" + ?);",
          "solution"      : "var activite = \"les sports\";\nvar tempsPasseParMois = 50;\n\nvar tempsPasseParAn = tempsPasseParMois * 12;\n\nvar annees = 10000 / tempsPasseParAn;\n\nconsole.log(\"Il vous faudra \" + annees + \" années pour maîtriser \" + activite);",
          "tips"          : "<h3 class=\"title\" ref=\"variable value\">Affectation d'une valeur à une variable</h3>\n<div class=\"text\">Affecter une valeur à une variable signifie lui donner une valeur. Nous pouvons donner une valeur une variable en indiquant son <concept ref=\"variable name\">nom</concept> suivi de l'opérateur d'affectation (=) et d'une valeur.</div><div class=\"text\">Si nous souhaitons <concept ref=\"variable create\">créer une variable</concept>, nous devons utiliser l'instruction var avant le nom de la variable. L'instruction var est requise pour créer une nouvelle variable. Toutefois, elle ne devrait pas être utilisée avec une variable existante.</div>\n<div class=\"code-sample-title\">Exemple d'affectation à une nouvelle variable et à une variable existante</div><pre class=\"codeBlock\">var nomVariable = 42; // donne la valeur 42 à une nouvelle variable\nnomVariable = 52; // donne la valeur 52 à une variable existante</pre>\n<div class=\"text\">La valeur que nous donnons à une variable peut être de différents <concept ref=\"data type\">types</concept> et peut même être le résultat d'un <concept ref=\"mathematical operators\">calcul</concept>.</div>\n<div class=\"code-sample-title\">Exemples d'affectations</div><pre class=\"codeBlock\">var vies; // crée une nouvelle variable appelée vies avec une valeur non définie\nvar pointage = 42; // crée une variable appelée pointage et lui donne la valeur 42\nvies = 3; // donne une valeur de 3 à la variable vies existante\npointage = 2 + 2; // affecte la somme de 2 + 2 (4) à la variable pointage\nvar nom = \"EduCode\"; // crée une variable appelée nom et lui donne la valeur de \"EduCode\"</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-058",
          "name"          : "L'animalerie du futur",
          "normalizedName": "lanimalerie du futur",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ce programme vous aidera à choisir l'animal de compagnie qui vous convient parfaitement. Répondez simplement aux questions!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction \n    <concept ref=prompt>prompt()</concept>. Elle doit demander à l'utilisateur:\n    <string>\"Quelle est votre couleur favorite?\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction \n    <concept ref=prompt>prompt()</concept>. Elle doit demander à l'utilisateur:\n    <string>\"Entrez un nombre (ex: 4)\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction \n    <concept ref=prompt>prompt()</concept>. Elle doit demander à l'utilisateur:\n    <string>\"Quel est votre animal favori?\"</string>.</li></ol>",
          "boilerplate"   : "var couleurFavorite = ?;\nvar unNombre = ?;\nvar animalFavori = ?;\nvar partieDuCorps = prompt(\"Entrez une partie du corps (ex: pattes, yeux, etc.)\");\n\nconsole.log(\"Votre animal de rêve est un \" + animalFavori + \" \" + couleurFavorite + \" à \" + unNombre + \" \" + partieDuCorps);",
          "solution"      : "var couleurFavorite = prompt(\"Quelle est votre couleur favorite?\");\nvar unNombre = prompt(\"Entrez un nombre (ex: 4)\");\nvar animalFavori = prompt(\"Quel est votre animal favori?\");\nvar partieDuCorps = prompt(\"Entrez une partie du corps (ex: pattes, yeux, etc.)\");\n\nconsole.log(\"Votre animal de rêve est un \" + animalFavori + \" \" + couleurFavorite + \" à \" + unNombre + \" \" + partieDuCorps);",
          "tips"          : "<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-059",
          "name"          : "Une pizza bien garnie",
          "normalizedName": "une pizza bien garnie",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ce programme aide l'utilisateur à créer une pizza sur mesure. Pour ce faire, l'utilisateur doit entrer le nom de trois garnitures. Puis, le programme affiche les trois garnitures à l'utilisateur. Pouvez-vous combiner les trois instructions de sortie en une seule?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Combiner les trois instructions \n    <concept ref=console-log>console.log()</concept> en une seule instruction. Votre programme devrait afficher un message comme:\n    <string>\"La première garniture est: fromage. La deuxième garniture est: pepperoni. La troisième garniture est: oignons.\"</string>. <strong>Indice:</strong> votre programme devrait contenir <strong>une seule</strong> instruction <concept ref=console-log>console.log()</concept>.</li></ol>",
          "boilerplate"   : "var garniture1 = prompt(\"Quelle est la première garniture?\");\nvar garniture2 = prompt(\"Quelle est la deuxième garniture?\");\nvar garniture3 = prompt(\"Quelle est la troisième garniture?\");\n\nconsole.log(\"La première garniture est: \" + garniture1);\nconsole.log(\"La deuxième garniture est: \" + garniture2);\nconsole.log(\"La troisième garniture est: \" + garniture3);",
          "solution"      : "var garniture1 = prompt(\"Quelle est la première garniture?\");\nvar garniture2 = prompt(\"Quelle est la deuxième garniture?\");\nvar garniture3 = prompt(\"Quelle est la troisième garniture?\");\n\nconsole.log(\"La première garniture est: \" + garniture1 + \". La deuxième garniture est: \" + garniture2 + \". La troisième garniture est: \" + garniture3);",
          "tips"          : "<h3 class=\"title\" ref=\"console.log() concatenation\">Combinaison de chaînes et de variables dans un console.log()</h3>\n<div class=\"text\">Nous pouvons combiner une <concept ref=\"string\">chaîne</concept> et la <concept ref=\"variable value\">valeur</concept> d'une variable entre les parenthèses de l'instruction console.log() pour créer une <concept ref=\"output\">sortie</concept> complexe.</div><div class=\"text\">Pour ce faire, nous devons utiliser l'opérateur de <concept ref=\"concatenation\">concaténation (+)</concept> entre chacun des éléments.</div>\n<div class=\"code-sample-title\">Exemples de console.log() avec une variable et une chaîne</div><pre class=\"codeBlock\">var monNom = \"EduCode\";\nconsole.log(\"Mon nom est \" + monNom); // affiche la chaîne concaténée: Mon nom est EduCode\nvar monAge = 16;\nconsole.log(\"J'ai \" + monAge + \" ans\"); // affiche la chaîne concaténée: J'ai 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-060",
          "name"          : "Un tour de magie",
          "normalizedName": "un tour de magie",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ce programme fait un tour de magie. Peu importe le nombre que vous entrez, il sera transformé dans le chiffre 5! Complétez le programme pour le voir en action. Assurez-vous de le tester quand vous avez terminé! Si la sortie du programme n'est pas le chiffre 5, il y a une erreur quelque part!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une variable appelée <var id=myNumber>monNombre</var>. Donnez-lui la valeur retournée par une instruction <concept ref=prompt>prompt()</concept> demandant à l'utilisateur:\n    <string>\"Entrez un nombre positif (plus grand que zéro)\"</string>. N'oubliez pas l'instruction <strong>var</strong>!</li><li class=code-item>Remplacer le deuxième point d'interrogation par une variable appelée <var id=temporaryNumber>nombreTemporaire</var>. Donnez-lui la valeur de la variable <var id=myNumber>monNombre</var>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui multiplie <var id=temporaryNumber>nombreTemporaire</var> par 2. <strong>Indice:</strong> l'opérateur de multiplication est l'astérisque (*).</li><li class=code-item>Remplacer le quatrième point d'interrogation par une instruction qui ajoute 10 à <var id=temporaryNumber>nombreTemporaire</var>.</li><li class=code-item>Remplacer le cinquième point d'interrogation par une instruction qui divise <var id=temporaryNumber>nombreTemporaire</var> par 2. <strong>Indice:</strong> l'opérateur de division est la barre oblique (/).</li></ol>",
          "boilerplate"   : "// Créez la variable monNombre ici\n?\n\n// Ne changez pas la ligne suivante!\nmonNombre = Number(monNombre);\n\n// Créez la variable nombreTemporaire ici\n?\n\nnombreTemporaire = ?;\nnombreTemporaire = ?;\nnombreTemporaire = ?;\nnombreTemporaire = nombreTemporaire - monNombre;\n\nconsole.log(\"Votre nombre est devenu le chiffre \" + nombreTemporaire);",
          "solution"      : "// Créez la variable monNombre ici\nvar monNombre = prompt(\"Entrez un nombre positif (plus grand que zéro)\");\n\n// Ne changez pas la ligne suivante!\nmonNombre = Number(monNombre);\n\n// Créez la variable nombreTemporaire ici\nvar nombreTemporaire = monNombre;\n\nnombreTemporaire = nombreTemporaire * 2;\nnombreTemporaire = nombreTemporaire + 10;\nnombreTemporaire = nombreTemporaire / 2;\nnombreTemporaire = nombreTemporaire - monNombre;\n\nconsole.log(\"Votre nombre est devenu le chiffre \" + nombreTemporaire);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-06",
          "name"          : "Projet 6 - La bataille des entrées",
          "normalizedName": "projet 6 - la bataille des entrees",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-061",
          "name"          : "Docteur, est-ce grave?",
          "normalizedName": "docteur est-ce grave",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-061_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-061_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=enemyHealth>pointsEnnemi</var>. Donnez-lui la valeur retournée par <concept ref=getEnemyHealth>obtenirPointsEnnemi()</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=enemyHealth>pointsEnnemi</var> le résultat de <var id=enemyHealth>pointsEnnemi</var> moins <var id=playerDamage>dommageJoueur</var>.</li><li class=code-item>Remplacer le troisième point d'interrogation par <var id=enemyHealth>pointsEnnemi</var>.</li></ol>",
          "boilerplate"   : "var dommageJoueur = obtenirDommageJoueur();\n?\n\n?\n\nmettreAJourPointsEnnemi(?);",
          "solution"      : "var dommageJoueur = obtenirDommageJoueur();\nvar pointsEnnemi = obtenirPointsEnnemi();\n\npointsEnnemi = pointsEnnemi - dommageJoueur;\n\nmettreAJourPointsEnnemi(pointsEnnemi);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-062",
          "name"          : "Panser nos blessures",
          "normalizedName": "panser nos blessures",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-062_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-062_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=playerHealth>pointsJoueur</var>. Donnez-lui la valeur retournée par <concept ref=getPlayerHealth>obtenirPointsJoueur()</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=healAmount>pointsGuerison</var>. Donnez-lui la valeur retournée par <concept ref=getHealAmount>obtenirPointsGuerison()</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui donne à <var id=playerHealth>pointsJoueur</var> le résultat de <var id=playerHealth>pointsJoueur</var> plus <var id=healAmount>pointsGuerison</var>.</li><li class=code-item>Remplacer le quatrième point d'interrogation par <var id=playerHealth>pointsJoueur</var>.</li></ol>",
          "boilerplate"   : "?\n?\n\n?\n\nmettreAJourPointsJoueur(?);",
          "solution"      : "var pointsJoueur = obtenirPointsJoueur();\nvar pointsGuerison = obtenirPointsGuerison();\n\npointsJoueur = pointsJoueur + pointsGuerison;\n\nmettreAJourPointsJoueur(pointsJoueur);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-063",
          "name"          : "Un peu de hasard",
          "normalizedName": "un peu de hasard",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=damageMultiplier>dommageBonus</var>. Donnez-lui la valeur retournée par <concept ref=getDamageMultiplier>obtenirDommageBonus()</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=playerDamage>dommageJoueur</var> le résultat de <var id=playerDamage>dommageJoueur</var> multiplié par <var id=damageMultiplier>dommageBonus</var>. <strong>Indice:</strong> le symbole de multiplication est l'astérisque (*).</li></ol>",
          "boilerplate"   : "var dommageJoueur = obtenirDommageJoueur();\nvar pointsEnnemi = obtenirPointsEnnemi();\n\n?\n?\n\npointsEnnemi = pointsEnnemi - dommageJoueur;\n\nmettreAJourPointsEnnemi(pointsEnnemi);",
          "solution"      : "var dommageJoueur = obtenirDommageJoueur();\nvar pointsEnnemi = obtenirPointsEnnemi();\n\nvar dommageBonus = obtenirDommageBonus();\ndommageJoueur = dommageJoueur * dommageBonus;\n\npointsEnnemi = pointsEnnemi - dommageJoueur;\n\nmettreAJourPointsEnnemi(pointsEnnemi);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-064",
          "name"          : "Surveiller nos arrières",
          "normalizedName": "surveiller nos arrieres",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-064_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-064_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=playerShield>armureJoueur</var>. Donnez-lui la valeur retournée par <concept ref=getPlayerShield>obtenirArmureJoueur()</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=shieldAmount>pointsArmure</var>. Donnez-lui la valeur retournée par <concept ref=getShieldAmount>obtenirPointsArmure()</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui donne à <var id=playerShield>armureJoueur</var> le résultat de <var id=playerShield>armureJoueur</var> plus <var id=shieldAmount>pointsArmure</var>.</li><li class=code-item>Remplacer le quatrième point d'interrogation par <var id=playerShield>armureJoueur</var>.</li></ol>",
          "boilerplate"   : "?\n?\n\n?\n\nmettreAJourArmureJoueur(?);",
          "solution"      : "var armureJoueur = obtenirArmureJoueur();\nvar pointsArmure = obtenirPointsArmure();\n\narmureJoueur = armureJoueur + pointsArmure;\n\nmettreAJourArmureJoueur(armureJoueur);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-065",
          "name"          : "Une armure efficace",
          "normalizedName": "une armure efficace",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-065_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-065_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=enemyShield>armureEnnemi</var>. Donnez-lui la valeur retournée par <concept ref=getEnemyShield>obtenirArmureEnnemi()</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=damageAfterShield>dommageApresArmure</var>. Donnez-lui la valeur retournée par l'instruction <concept ref=attackShield>attaquerArmure()</concept>. Cette instruction prend deux paramètres: le premier est la valeur de l'armure de l'ennemi et le deuxième est le dommage infligé par le joueur.</li><li class=code-item>Remplacer le troisième point d'interrogation par la variable <var id=damageAfterShield>dommageApresArmure</var>.</li></ol>",
          "boilerplate"   : "var dommageJoueur = obtenirDommageJoueur();\nvar pointsEnnemi = obtenirPointsEnnemi();\nvar dommageBonus = obtenirDommageBonus();\n?\n\ndommageJoueur = dommageJoueur * dommageBonus;\n?\n\npointsEnnemi = pointsEnnemi - ?;\n\nmettreAJourPointsEnnemi(pointsEnnemi);",
          "solution"      : "var dommageJoueur = obtenirDommageJoueur();\nvar pointsEnnemi = obtenirPointsEnnemi();\nvar dommageBonus = obtenirDommageBonus();\nvar armureEnnemi = obtenirArmureEnnemi();\n\ndommageJoueur = dommageJoueur * dommageBonus;\nvar dommageApresArmure = attaquerArmure(armureEnnemi, dommageJoueur);\n\npointsEnnemi = pointsEnnemi - dommageApresArmure;\n\nmettreAJourPointsEnnemi(pointsEnnemi);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-066",
          "name"          : "Une armure plus robuste",
          "normalizedName": "une armure plus robuste",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Améliorons l'action qui déclenche l'armure du joueur. Plutôt que d'ajouter seulement 10 points d'armure, nous allons aussi ajouter un bonus choisi au hasard, de 5 à 15 points.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=shieldBonus>armureBonus</var>. Donnez-lui la valeur retournée par <concept ref=getShieldBonus>obtenirArmureBonus()</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=shieldAmount>pointsArmure</var> le résultat de <var id=shieldAmount>pointsArmure</var> plus <var id=shieldBonus>armureBonus</var>.</li></ol>",
          "boilerplate"   : "var armureJoueur = obtenirArmureJoueur();\nvar pointsArmure = obtenirPointsArmure();\n?\n\n?\n\narmureJoueur = armureJoueur + pointsArmure;\n\nmettreAJourArmureJoueur(armureJoueur);",
          "solution"      : "var armureJoueur = obtenirArmureJoueur();\nvar pointsArmure = obtenirPointsArmure();\nvar armureBonus = obtenirArmureBonus();\n\npointsArmure = pointsArmure + armureBonus;\n\narmureJoueur = armureJoueur + pointsArmure;\n\nmettreAJourArmureJoueur(armureJoueur);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-067",
          "name"          : "Une trousse de premiers soins",
          "normalizedName": "une trousse de premiers soins",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Améliorons l'action de guérison pour la rendre plus intéressante. Plutôt que d'ajouter seulement 10 points au joueur, nous allons aussi ajouter un bonus choisi au hasard, de 10 à 20 points.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=healingBonus>guerisonBonus</var>. Donnez-lui la valeur retournée par <concept ref=getHealingBonus>obtenirGuerisonBonus()</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=healAmount>pointsGuerison</var> le résultat de <var id=healAmount>pointsGuerison</var> plus <var id=healingBonus>guerisonBonus</var>.</li></ol>",
          "boilerplate"   : "var pointsJoueur = obtenirPointsJoueur();\nvar pointsGuerison = obtenirPointsGuerison();\n?\n\n?\n\npointsJoueur = pointsJoueur + pointsGuerison;\n\nmettreAJourPointsJoueur(pointsJoueur);",
          "solution"      : "var pointsJoueur = obtenirPointsJoueur();\nvar pointsGuerison = obtenirPointsGuerison();\nvar guerisonBonus = obtenirGuerisonBonus();\n\npointsGuerison = pointsGuerison + guerisonBonus;\n\npointsJoueur = pointsJoueur + pointsGuerison;\n\nmettreAJourPointsJoueur(pointsJoueur);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"variable value\">Affectation d'une valeur à une variable</h3>\n<div class=\"text\">Affecter une valeur à une variable signifie lui donner une valeur. Nous pouvons donner une valeur une variable en indiquant son <concept ref=\"variable name\">nom</concept> suivi de l'opérateur d'affectation (=) et d'une valeur.</div><div class=\"text\">Si nous souhaitons <concept ref=\"variable create\">créer une variable</concept>, nous devons utiliser l'instruction var avant le nom de la variable. L'instruction var est requise pour créer une nouvelle variable. Toutefois, elle ne devrait pas être utilisée avec une variable existante.</div>\n<div class=\"code-sample-title\">Exemple d'affectation à une nouvelle variable et à une variable existante</div><pre class=\"codeBlock\">var nomVariable = 42; // donne la valeur 42 à une nouvelle variable\nnomVariable = 52; // donne la valeur 52 à une variable existante</pre>\n<div class=\"text\">La valeur que nous donnons à une variable peut être de différents <concept ref=\"data type\">types</concept> et peut même être le résultat d'un <concept ref=\"mathematical operators\">calcul</concept>.</div>\n<div class=\"code-sample-title\">Exemples d'affectations</div><pre class=\"codeBlock\">var vies; // crée une nouvelle variable appelée vies avec une valeur non définie\nvar pointage = 42; // crée une variable appelée pointage et lui donne la valeur 42\nvies = 3; // donne une valeur de 3 à la variable vies existante\npointage = 2 + 2; // affecte la somme de 2 + 2 (4) à la variable pointage\nvar nom = \"EduCode\"; // crée une variable appelée nom et lui donne la valeur de \"EduCode\"</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-003",
          "name"          : "Quiz 3",
          "description"   : "Les entrées et sorties",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-003_q-01",
              "question": "<div>Que sont les <em>entrées</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-003_q-01_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Les informations que nous donnons à l'ordinateur</div>",
                  "explanation": "Les informations que nous donnons à l'ordinateur pour qu'il les traite s'appellent des <em>entrées</en>."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>La première instruction d'un programme</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-01_a-03",
                  "value" : 0,
                  "answer": "<div>Les instructions d'un programme</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-01_a-04",
                  "value" : 0,
                  "answer": "<div>La façon dont les ordinateurs pensent</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-003_q-02",
              "question": "<div>Quelle est la valeur finale de la variable <var>nom</var>?</div>\n<pre class=\"language-javascript\"><code>var nom = prompt(\"Entrez votre nom\");</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>Le texte <string>\"Entrez votre nom\"</string></div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-003_q-02_a-02",
                  "value"      : 2,
                  "answer"     : "<div>La valeur fournie par l'utilisateur</div>",
                  "explanation": "L'instruction <code>prompt()</code> retourne une valeur de type texte qui indique la réponse des utilisateurs à la question qui leur est posée."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-02_a-03",
                  "value" : 0,
                  "answer": "<div>Aucune valeur</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-02_a-04",
                  "value" : 0,
                  "answer": "<div>Le mot <string>\"prompt\"</string></div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-003_q-03",
              "question": "<div>Que sont les <em>sorties</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-03_a-01",
                  "value" : 0,
                  "answer": "<div>Une façon de fournir des données au programme</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>La dernière instruction d'un programme</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-03_a-03",
                  "value" : 0,
                  "answer": "<div>Une instruction spéciale</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-003_q-03_a-04",
                  "value"      : 2,
                  "answer"     : "<div>Les informations que l'ordinateur nous donne</div>",
                  "explanation": "Les informations que l'ordinateur nous affiche durant le programme."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-003_q-04",
              "question": "<div>Lequel des énoncés suivants est vrai?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-003_q-04_a-01",
                  "value"      : 2,
                  "answer"     : "<div>L'instruction <code>console.log()</code> crée une sortie de type texte et l'instruction <code>prompt()</code> crée une entrée de type texte.</div>",
                  "explanation": "L'instruction <code>prompt()</code> crée une entrée de type texte qui peut être utilisée pour poser une question à l'utilisateur. L'instruction <code>console.log()</code> affiche du texte dans la console du programme."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>Les instructions <code>console.log()</code> et <code>prompt()</code> créent des sorties de type texte.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-04_a-03",
                  "value" : 0,
                  "answer": "<div>Les instructions <code>console.log()</code> et <code>prompt()</code> créent des entrées de type texte.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-04_a-04",
                  "value" : 0,
                  "answer": "<div>L'instruction <code>prompt()</code> crée une sortie de type texte et l'instruction <code>console.log()</code> crée une entrée de type texte.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-003_q-05",
              "question": "<div>Vrai ou faux. Un programme peut prendre plusieurs entrées.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-003_q-05_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "Un programme peut prendre autant d'entrées que nous voulons."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-003_q-06",
              "question": "<div>Lequel des énoncés suivants est vrai?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-06_a-01",
                  "value" : 0,
                  "answer": "<div>Cliquer un bouton est un exemple d'une entrée et d'une sortie.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>Cliquer un bouton est un exemple d'une sortie.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-003_q-06_a-03",
                  "value"      : 2,
                  "answer"     : "<div>Cliquer un bouton est un exemple d'une entrée.</div>",
                  "explanation": "En cliquant un bouton, nous créons une entrée."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-003_q-07",
              "question": "<div>Vrai ou faux. Un programme peut avoir plusieurs sorties.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-003_q-07_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "Un programme peut avoir autant de sorties que nous voulons."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-003_q-07_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 3",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-261",
          "name"          : "Les types de données",
          "normalizedName": "les types de donnees",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-261_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-261_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-07",
          "name"          : "Projet 7 - Une chaîne et un nombre",
          "normalizedName": "projet 7 - une chaine et un nombre",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-069",
          "name"          : "Le total est...",
          "normalizedName": "le total est...",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-069_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-069_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=firstItemPrice>prixItem1</var>. Donnez-lui un nombre plus petit que 100.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=secondItemPrice>prixItem2</var>. Donnez-lui un nombre plus petit que 100.</li><li class=code-item>Remplacer le dernier point d'interrogation par une instruction qui donne à <var id=total>total</var> le résultat de <var id=firstItemPrice>prixItem1</var> plus <var id=secondItemPrice>prixItem2</var>.</li></ol>",
          "boilerplate"   : "// Obtenir le prix des items de l'utilisateur\n?\n?\n\nvar total = ? + ?;\n\nconsole.log(\"Le prix total est \" + total.toFixed(2) + \"$\");",
          "solution"      : "// Obtenir le prix des items de l'utilisateur\nvar prixItem1 = 10.50;\nvar prixItem2 = 5;\n\nvar total = prixItem1 + prixItem2;\n\nconsole.log(\"Le prix total est \" + total.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"number\">Nombres</h3>\n<div class=\"text\">Les nombres sont des valeurs que nous pouvons utiliser dans des <concept ref=\"mathematical operators\">opérations mathématiques</concept>. Les nombres doivent être écrits sans espaces entre les chiffres et les décimales doivent être séparées par un point (.) et non une virgule (,).</div>\n<div class=\"code-sample-title\">Exemples de nombres</div><pre class=\"codeBlock\">var unNombre = 42;\nvar unTresGrandNombre = 10000000;\nvar unAutreGrandNombre = 100 000 000; // incorrect: ne doit pas contenir d'espaces\nvar unNombreDecimal = 1.15;\nvar unAutreNombreDecimal = 1,15; // incorrect: les décimales doivent être séparées par un point</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-070",
          "name"          : "Une question de type",
          "normalizedName": "une question de type",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-070_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-070_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter la première instruction <concept ref=console-log>console.log()</concept> qui contient des points d'interrogation. Le premier point d'interrogation doit être remplacé par la variable <var id=aString>uneChaine</var> et le deuxième doit aussi être remplacé par <var id=aString>uneChaine</var>.</li><li class=code-item>Compléter la deuxième instruction <concept ref=console-log>console.log()</concept> qui contient des points d'interrogation. Le premier point d'interrogation doit être remplacé par la variable <var id=aString>uneChaine</var> et le deuxième doit être remplacé par <var id=aNumber>unNombre</var>.</li><li class=code-item>Compléter la troisième instruction <concept ref=console-log>console.log()</concept> qui contient des points d'interrogation. Le premier point d'interrogation doit être remplacé par la variable <var id=aNumber>unNombre</var> et le deuxième doit être remplacé par <var id=aString>uneChaine</var>.</li></ol>",
          "boilerplate"   : "var uneChaine = \"3\";\nvar unNombre = 2;\n\nconsole.log(\"nombre + nombre = \" + (unNombre + unNombre));\nconsole.log(\"chaîne + chaîne = \" + (? + ?));\nconsole.log(\"chaîne + nombre = \" + (? + ?));\nconsole.log(\"nombre + chaîne = \" + (? + ?));",
          "solution"      : "var uneChaine = \"3\";\nvar unNombre = 2;\n\nconsole.log(\"nombre + nombre = \" + (unNombre + unNombre));\nconsole.log(\"chaîne + chaîne = \" + (uneChaine + uneChaine));\nconsole.log(\"chaîne + nombre = \" + (uneChaine + unNombre));\nconsole.log(\"nombre + chaîne = \" + (unNombre + uneChaine));",
          "tips"          : "<h3 class=\"title\" ref=\"data type\">Types de données</h3>\n<div class=\"text\">Les <concept ref=\"variable value\">valeurs</concept> des variables ont un type. Il est important de considérer le type des données que contiennent les variables lorsque nous les utilisons dans des opérations. Parmi les types courants, nous retrouvons les <concept ref=\"number\">nombres</concept> et les <concept ref=\"string\">chaînes</concept>.</div>\n<h3 class=\"title\" ref=\"string\">Chaînes</h3>\n<div class=\"text\">Les chaînes sont des valeurs que nous pouvons utiliser pour représenter du texte. Une chaîne doit toujours être entourée de guillemets. Il est possible de combiner plusieurs chaînes en une seule à l'aide de l'opérateur de <concept ref=\"concatenation\">concaténation (+)</concept>.</div>\n<div class=\"code-sample-title\">Exemples de chaînes</div><pre class=\"codeBlock\">var monNom = \"EduCode\";\nvar unePhrase = \"Programmer est amusant!\";\nvar uneAutrePhrase = Programmer est amusant!; // incorrect: la chaîne doit être entourée de guillemets (\" \")</pre>\n<div class=\"text\">Les chaînes peuvent aussi être utilisées pour représenter des <concept ref=\"number\">nombres</concept>. Cependant, ces nombres ne peuvent pas être utilisés dans des opérations mathématiques sans d'abord les convertir en nombres à l'aide de l'instruction <concept ref=\"Number()\">Number()</concept>.</div>\n<div class=\"code-sample-title\">Exemples de chaînes représentant des nombres</div><pre class=\"codeBlock\">var unNombreDansUneChaine = \"450\"; // représentation en texte de 450\nvar resultat = unNombreDansUneChaine + 10; // resultat est 45010</pre>\n<h3 class=\"title\" ref=\"number\">Nombres</h3>\n<div class=\"text\">Les nombres sont des valeurs que nous pouvons utiliser dans des <concept ref=\"mathematical operators\">opérations mathématiques</concept>. Les nombres doivent être écrits sans espaces entre les chiffres et les décimales doivent être séparées par un point (.) et non une virgule (,).</div>\n<div class=\"code-sample-title\">Exemples de nombres</div><pre class=\"codeBlock\">var unNombre = 42;\nvar unTresGrandNombre = 10000000;\nvar unAutreGrandNombre = 100 000 000; // incorrect: ne doit pas contenir d'espaces\nvar unNombreDecimal = 1.15;\nvar unAutreNombreDecimal = 1,15; // incorrect: les décimales doivent être séparées par un point</pre>\n<h3 class=\"title\" ref=\"concatenation\">Combinaison de chaînes avec d'autres valeurs (concaténation)</h3>\n<div class=\"text\">Le résultat de l'opérateur + dépend du type des données qui sont utilisées.</div><div class=\"text\">Si les deux valeurs sont des nombres, alors l'opérateur + fonctionne comme l'<concept ref=\"mathematical operators\">opérateur d'addition</concept> en mathématiques.</div><div class=\"text\">Toutefois, si les valeurs sont des chaînes, le signe + est alors l'opérateur de concaténation et combine les valeurs pour former une <concept ref=\"string\">chaîne</concept>.</div>\n<div class=\"code-sample-title\">Exemples avec signe +</div><pre class=\"codeBlock\">var resultat = 10 + 10; // nombre + nombre, resultat est 20 (nombre)\nresultat = \"10\" + \"10\"; // chaîne + chaîne, resultat est 1010 (chaîne)\nresultat = \"10\" + 10; // chaîne + nombre, resultat est 1010 (chaîne)\nresultat = \"10\" + (10 + 10); // chaîne + (nombre + nombre), resultat est 1020 (chaîne)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-071",
          "name"          : "Ce sera tout?",
          "normalizedName": "ce sera tout",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-071_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-071_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une instruction qui donne à <var id=secondItemPrice>prixItem2</var> la valeur de <var id=secondItemPrice>prixItem2</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li></ol>",
          "boilerplate"   : "// Obtenir le prix des items de l'utilisateur\nvar prixItem1 = prompt(\"Entrez le prix du premier item:\");\nvar prixItem2 = prompt(\"Entrez le prix du deuxième item:\");\n\nprixItem1 = Number(prixItem1);\n?\n\nvar total = prixItem1 + prixItem2;\n\nconsole.log(\"Le prix total est \" + total.toFixed(2) + \"$\");",
          "solution"      : "// Obtenir le prix des items de l'utilisateur\nvar prixItem1 = prompt(\"Entrez le prix du premier item:\");\nvar prixItem2 = prompt(\"Entrez le prix du deuxième item:\");\n\nprixItem1 = Number(prixItem1);\nprixItem2 = Number(prixItem2);\n\nvar total = prixItem1 + prixItem2;\n\nconsole.log(\"Le prix total est \" + total.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"data type\">Types de données</h3>\n<div class=\"text\">Les <concept ref=\"variable value\">valeurs</concept> des variables ont un type. Il est important de considérer le type des données que contiennent les variables lorsque nous les utilisons dans des opérations. Parmi les types courants, nous retrouvons les <concept ref=\"number\">nombres</concept> et les <concept ref=\"string\">chaînes</concept>.</div>\n<h3 class=\"title\" ref=\"number\">Nombres</h3>\n<div class=\"text\">Les nombres sont des valeurs que nous pouvons utiliser dans des <concept ref=\"mathematical operators\">opérations mathématiques</concept>. Les nombres doivent être écrits sans espaces entre les chiffres et les décimales doivent être séparées par un point (.) et non une virgule (,).</div>\n<div class=\"code-sample-title\">Exemples de nombres</div><pre class=\"codeBlock\">var unNombre = 42;\nvar unTresGrandNombre = 10000000;\nvar unAutreGrandNombre = 100 000 000; // incorrect: ne doit pas contenir d'espaces\nvar unNombreDecimal = 1.15;\nvar unAutreNombreDecimal = 1,15; // incorrect: les décimales doivent être séparées par un point</pre>\n<h3 class=\"title\" ref=\"not a number\">Pas un Nombre (Not a Number, or NaN)</h3>\n<div class=\"text\">La valeur spéciale NaN (Not a Number, ou Pas un Nombre en français) est utilisée par <concept ref=\"programming languages\">JavaScript</concept> lorsqu'une expression <concept ref=\"mathematical operators\">mathématique</concept> ne peut pas être calculée.</div><div class=\"text\">Par exemple, si nous utilisons une variable <concept ref=\"undefined variable\">non définie</concept> dans une addition, ou essayons de convertir un mot en nombre avec l'instruction <concept ref=\"Number()\">Number()</concept>, nous obtenons le résultat NaN.</div>\n<div class=\"code-sample-title\">Exemples de NaN (Not a Number, ou Pas un Nombre)</div><pre class=\"codeBlock\">var unNombre;\nvar resultat = 10 + unNombre; // 10 plus undefined (non défini) donne NaN\n\nvar uneChaine = \"Bonjour\";\nuneChaine = Number(uneChaine); // \"Bonjour\" ne peut pas être converti en nombre, retourne NaN</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-072",
          "name"          : "La monnaie de sa pièce",
          "normalizedName": "la monnaie de sa piece",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction qui donne à <var id=userMoney>argent</var> la valeur de <var id=userMoney>argent</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=change>monnaie</var>. Donnez-lui le résultat de <var id=userMoney>argent</var> moins <var id=total>total</var>.</li><li class=code-item>Remplacer le troisième point d'interrogation par la variable <var id=change>monnaie</var> pour afficher sa valeur.</li></ol>",
          "boilerplate"   : "// Obtenir le prix des items de l'utilisateur\nvar prixItem1 = prompt(\"Entrez le prix du premier item:\");\nvar prixItem2 = prompt(\"Entrez le prix du deuxième item:\");\n\nprixItem1 = Number(prixItem1);\nprixItem2 = Number(prixItem2);\n\nvar total = prixItem1 + prixItem2;\n\nconsole.log(\"Le prix total est \" + total);\n\n// Demander à l'utilisateur d'entrer un montant\nvar argent = prompt(\"Combien d'argent avez-vous?\");\n?\n\n?\n\nconsole.log(\"Votre monnaie est \" + ? + \"$\");",
          "solution"      : "// Obtenir le prix des items de l'utilisateur\nvar prixItem1 = prompt(\"Entrez le prix du premier item:\");\nvar prixItem2 = prompt(\"Entrez le prix du deuxième item:\");\n\nprixItem1 = Number(prixItem1);\nprixItem2 = Number(prixItem2);\n\nvar total = prixItem1 + prixItem2;\n\nconsole.log(\"Le prix total est \" + total);\n\n// Demander à l'utilisateur d'entrer un montant\nvar argent = prompt(\"Combien d'argent avez-vous?\");\nargent = Number(argent);\n\nvar monnaie = argent - total;\n\nconsole.log(\"Votre monnaie est \" + monnaie + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"Number()\">Instruction Number()</h3>\n<div class=\"text\">L'instruction Number() convertit une chaîne en <concept ref=\"number\">nombre</concept>. Cette instruction a un <concept ref=\"parameter\">paramètre</concept>. Le paramètre devrait être une <concept ref=\"string\">chaîne</concept>, ou une <concept ref=\"variable\">variable</concept> contenant une <concept ref=\"variable value\">valeur</concept> de type texte. Dans les deux cas, la chaîne devrait représenter un nombre.</div><div class=\"text\">L'instruction retourne la valeur du paramètre convertie en nombre. Cette valeur devrait être conservée dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard. Si la chaîne ne peut pas être convertie en nombre, l'instruction retourne <concept ref=\"not a number\">NaN</concept>, c'est-à-dire Not a Number, ou Pas un Nombre en français.</div><div class=\"text\">Remarquez que le &quot;N&quot; de Number() doit être écrit en majuscule.</div>\n<div class=\"code-sample-title\">Exemples de Number()</div><pre class=\"codeBlock\">var premier = Number(\"10\"); // premier reçoit la valeur convertie de 10\n\nvar entree = prompt(\"Entrez un nombre\"); // l'utilisateur entre: 42\nentree = Number(entree); // entree reçoit la valeur convertie de 42\n\nvar deuxieme = number(\"6\"); // incorrect: la lettre \"n\" doit être en majuscule\nvar troisieme = Number(\"a\"); // incorrect: retourne NaN (Pas un Nombre)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-073",
          "name"          : "Calculer la taxe",
          "normalizedName": "calculer la taxe",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-073_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-073_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une nouvelle variable appelée <var id=tax>taxe</var>. Donnez-lui le nombre 1.15. Assurez-vous de séparer les décimales par un point (.) et non par une virgule (,).</li><li class=code-item>Entourez l'expression <var id=firstItemPrice>prixItem1</var> + <var id=secondItemPrice>prixItem2</var> de parenthèses, puis multipliez cette expression par la variable <var id=tax>taxe</var>.</li></ol>",
          "boilerplate"   : "// Obtenir le prix des items de l'utilisateur\nvar prixItem1 = prompt(\"Entrez le prix du premier item:\");\nvar prixItem2 = prompt(\"Entrez le prix du deuxième item:\");\n?\n\nprixItem1 = Number(prixItem1);\nprixItem2 = Number(prixItem2);\n\nvar total = prixItem1 + prixItem2;\n\nconsole.log(\"Le prix total est \" + total.toFixed(2) + \"$\");\n\n// Demander à l'utilisateur d'entrer un montant\nvar argent = prompt(\"Combien d'argent avez-vous?\");\nargent = Number(argent);\n\nvar monnaie = argent - total;\n\nconsole.log(\"Votre monnaie est \" + monnaie.toFixed(2) + \"$\");",
          "solution"      : "// Obtenir le prix des items de l'utilisateur\nvar prixItem1 = prompt(\"Entrez le prix du premier item:\");\nvar prixItem2 = prompt(\"Entrez le prix du deuxième item:\");\nvar taxe = 1.15;\n\nprixItem1 = Number(prixItem1);\nprixItem2 = Number(prixItem2);\n\nvar total = (prixItem1 + prixItem2) * taxe;\n\nconsole.log(\"Le prix total est \" + total.toFixed(2) + \"$\");\n\n// Demander à l'utilisateur d'entrer un montant\nvar argent = prompt(\"Combien d'argent avez-vous?\");\nargent = Number(argent);\n\nvar monnaie = argent - total;\n\nconsole.log(\"Votre monnaie est \" + monnaie.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"pedmas\">Ordre des opérations (PEDMAS)</h3>\n<div class=\"text\">Les programmes respectent l'ordre des opérations lorsqu'ils calculent le résultat d'expressions <concept ref=\"mathematical operators\">mathématiques</concept>.</div><div class=\"text\">L'ordre des opérations est: Parenthèses, Exposants, Division, Multiplication, Addition, Soustraction.</div>\n<div class=\"code-sample-title\">Exemple de PEDMAS</div><pre class=\"codeBlock\">var resultat = 10 + 10 * 2; // resultat est 30\nresultat = (10 + 10) * 2; // resultat est 40\nresultat = 2 * 2 / 4; // resultat est 1</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-074",
          "name"          : "5 + 5 = 55",
          "normalizedName": "5  5  55",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ce programme additionne deux nombres entrés par l'utilisateur, mais les données sont des chaînes. Pour cette raison, le programme affiche que 5 + 5 est égal à 55! Pouvez-vous réparer le programme en convertissant les données en nombres?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction qui donne à <var id=firstNumber>premierNombre</var> la valeur de <var id=firstNumber>premierNombre</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>. <strong>Exemple:</strong> monNombre = Number(monNombre);</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=secondNumber>deuxiemeNombre</var> la valeur de <var id=secondNumber>deuxiemeNombre</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li></ol>",
          "boilerplate"   : "var premierNombre = prompt(\"Entrez le premier nombre\");\nvar deuxiemeNombre = prompt(\"Entrez le deuxième nombre\");\n\n?\n?\n\nvar somme = premierNombre + deuxiemeNombre;\n\nconsole.log(premierNombre + \" + \" + deuxiemeNombre + \" = \" + somme);",
          "solution"      : "var premierNombre = prompt(\"Entrez le premier nombre\");\nvar deuxiemeNombre = prompt(\"Entrez le deuxième nombre\");\n\npremierNombre = Number(premierNombre);\ndeuxiemeNombre = Number(deuxiemeNombre);\n\nvar somme = premierNombre + deuxiemeNombre;\n\nconsole.log(premierNombre + \" + \" + deuxiemeNombre + \" = \" + somme);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"Number()\">Instruction Number()</h3>\n<div class=\"text\">L'instruction Number() convertit une chaîne en <concept ref=\"number\">nombre</concept>. Cette instruction a un <concept ref=\"parameter\">paramètre</concept>. Le paramètre devrait être une <concept ref=\"string\">chaîne</concept>, ou une <concept ref=\"variable\">variable</concept> contenant une <concept ref=\"variable value\">valeur</concept> de type texte. Dans les deux cas, la chaîne devrait représenter un nombre.</div><div class=\"text\">L'instruction retourne la valeur du paramètre convertie en nombre. Cette valeur devrait être conservée dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard. Si la chaîne ne peut pas être convertie en nombre, l'instruction retourne <concept ref=\"not a number\">NaN</concept>, c'est-à-dire Not a Number, ou Pas un Nombre en français.</div><div class=\"text\">Remarquez que le &quot;N&quot; de Number() doit être écrit en majuscule.</div>\n<div class=\"code-sample-title\">Exemples de Number()</div><pre class=\"codeBlock\">var premier = Number(\"10\"); // premier reçoit la valeur convertie de 10\n\nvar entree = prompt(\"Entrez un nombre\"); // l'utilisateur entre: 42\nentree = Number(entree); // entree reçoit la valeur convertie de 42\n\nvar deuxieme = number(\"6\"); // incorrect: la lettre \"n\" doit être en majuscule\nvar troisieme = Number(\"a\"); // incorrect: retourne NaN (Pas un Nombre)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-075",
          "name"          : "Toute une aubaine!",
          "normalizedName": "toute une aubaine!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Améliorons notre programme de caisse enregistreuse pour que l'utilisateur puisse appliquer un rabais au prix total. Le rabais doit être appliqué avant la taxe. Pouvez-vous compléter le programme?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation avec une nouvelle variable appelée <var id=discount>rabais</var>. Donnez-lui la valeur retournée par un <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: <string>\"Entrez le montant du rabais:\"</string>. N'oubliez pas l'instruction <strong>var</strong>!</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=discount>rabais</var> la valeur de <var id=discount>rabais</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par la variable <var id=discount>rabais</var>.</li></ol>",
          "boilerplate"   : "// Obtenir le prix des items de l'utilisateur\nvar prixItem1 = prompt(\"Entrez le prix du premier item:\");\nvar prixItem2 = prompt(\"Entrez le prix du deuxième item:\");\n?\nvar taxe = 1.15;\n\nprixItem1 = Number(prixItem1);\nprixItem2 = Number(prixItem2);\n?\n\nvar total = (prixItem1 + prixItem2 - ?) * taxe;\n\nconsole.log(\"Le prix total est \" + total.toFixed(2) + \"$\");\n\n// Demander à l'utilisateur d'entrer un montant\nvar argent = prompt(\"Combien d'argent avez-vous?\");\nargent = Number(argent);\n\nvar monnaie = argent - total;\n\nconsole.log(\"Votre monnaie est \" + monnaie.toFixed(2) + \"$\");",
          "solution"      : "// Obtenir le prix des items de l'utilisateur\nvar prixItem1 = prompt(\"Entrez le prix du premier item:\");\nvar prixItem2 = prompt(\"Entrez le prix du deuxième item:\");\nvar rabais = prompt(\"Entrez le montant du rabais:\");\nvar taxe = 1.15;\n\nprixItem1 = Number(prixItem1);\nprixItem2 = Number(prixItem2);\nrabais = Number(rabais);\n\nvar total = (prixItem1 + prixItem2 - rabais) * taxe;\n\nconsole.log(\"Le prix total est \" + total.toFixed(2) + \"$\");\n\n// Demander à l'utilisateur d'entrer un montant\nvar argent = prompt(\"Combien d'argent avez-vous?\");\nargent = Number(argent);\n\nvar monnaie = argent - total;\n\nconsole.log(\"Votre monnaie est \" + monnaie.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-076",
          "name"          : "Combien fait-il?",
          "normalizedName": "combien fait-il",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui convertit les degrés Fahrenheit en degrés Celsius. Pour ce faire, nous pouvons utiliser la formule suivante:</div><div class=text>Celsius = (Fahrenheit - 32) x (5 ÷ 9)</div><div class=text>Assurez-vous de tester votre programme quand vous avez terminé. Si vous entrez 80 degrés Fahrenheit, le programme devrait afficher 26,6 degrés Celsius.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=fahrenheit>fahrenheit</var>. Donnez-lui la valeur retournée par un <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: <string>\"Entrez la température en Fahrenheit:\"</string>. N'oubliez pas l'instruction <strong>var</strong>!</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=fahrenheit>fahrenheit</var> la valeur de <var id=fahrenheit>fahrenheit</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par la variable <var id=fahrenheit>fahrenheit</var> moins 32.</li></ol>",
          "boilerplate"   : "?\n?\n\nvar celsius = (?) * (5 / 9);\n\nconsole.log(\"La température en degrés Celsius est \" + celsius);",
          "solution"      : "var fahrenheit = prompt(\"Entrez la température en Fahrenheit:\");\nfahrenheit = Number(fahrenheit);\n\nvar celsius = (fahrenheit - 32) * (5 / 9);\n\nconsole.log(\"La température en degrés Celsius est \" + celsius);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>\n<h3 class=\"title\" ref=\"Number()\">Instruction Number()</h3>\n<div class=\"text\">L'instruction Number() convertit une chaîne en <concept ref=\"number\">nombre</concept>. Cette instruction a un <concept ref=\"parameter\">paramètre</concept>. Le paramètre devrait être une <concept ref=\"string\">chaîne</concept>, ou une <concept ref=\"variable\">variable</concept> contenant une <concept ref=\"variable value\">valeur</concept> de type texte. Dans les deux cas, la chaîne devrait représenter un nombre.</div><div class=\"text\">L'instruction retourne la valeur du paramètre convertie en nombre. Cette valeur devrait être conservée dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard. Si la chaîne ne peut pas être convertie en nombre, l'instruction retourne <concept ref=\"not a number\">NaN</concept>, c'est-à-dire Not a Number, ou Pas un Nombre en français.</div><div class=\"text\">Remarquez que le &quot;N&quot; de Number() doit être écrit en majuscule.</div>\n<div class=\"code-sample-title\">Exemples de Number()</div><pre class=\"codeBlock\">var premier = Number(\"10\"); // premier reçoit la valeur convertie de 10\n\nvar entree = prompt(\"Entrez un nombre\"); // l'utilisateur entre: 42\nentree = Number(entree); // entree reçoit la valeur convertie de 42\n\nvar deuxieme = number(\"6\"); // incorrect: la lettre \"n\" doit être en majuscule\nvar troisieme = Number(\"a\"); // incorrect: retourne NaN (Pas un Nombre)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-225",
          "name"          : "Une semaine profitable...",
          "normalizedName": "une semaine profitable...",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui calcule notre salaire brut et net à la fin de chaque semaine de travail. Pour ce faire, nous devons multiplier le nombre d'heures travaillées par le salaire horaire. Le salaire brut est le salaire avant impôt, tandis que le salaire net est le salaire après impôt. Par exemple, si nous travaillons 40 heures à un salaire de 15$ de l'heure et que le taux d'impôt est de 15%, alors notre salaire brut est de 600,00$ et notre salaire net est de 510,00$.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Créer une nouvelle variable appelée <var id=taxRate>tauxImpot</var> et lui donner une valeur de 0.15.</li><li class=code-item>Convertir <var id=hourlyPay>salaireHoraire</var> et <var id=weekHours>heuresSemaine</var> en nombres. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li><li class=code-item>Créer une nouvelle variable appelée <var id=grossPay>salaireBrut</var> et lui donner le produit de <var id=hourlyPay>salaireHoraire</var> multiplié par <var id=weekHours>heuresSemaine</var>. <strong>Indice:</strong> le symbole de multiplication est l'astérisque (*).</li><li class=code-item>Créer une nouvelle variable appelée <var id=deduction>deduction</var> et lui donner le produit de <var id=grossPay>salaireBrut</var> multiplié par <var id=taxRate>tauxImpot</var>.</li><li class=code-item>Créer une nouvelle variable appelée <var id=totalPay>salaireNet</var> et lui donner le résultat de <var id=grossPay>salaireBrut</var> moins <var id=deduction>deduction</var>.</li></ol>",
          "boilerplate"   : "var salaireHoraire = prompt(\"Entrez un salaire horaire: ($/heure)\");\nvar heuresSemaine = prompt(\"Combien d'heures avez-vous travaillé cette semaine?\");\n\n// Créez la variable tauxImpot\n?\n\n// Convertissez salaireHoraire et heuresSemaine en nombres\n?\n\n// Calculez salaireBrut\n?\n\n// Créez la variable deduction\n?\n\n// Calculez salaireNet\n?\n\nconsole.log(\"Votre salaire brut est \" + salaireBrut.toFixed(2) + \"$\");\nconsole.log(\"Votre salaire net est \" + salaireNet.toFixed(2) + \"$\");",
          "solution"      : "var salaireHoraire = prompt(\"Entrez un salaire horaire: ($/heure)\");\nvar heuresSemaine = prompt(\"Combien d'heures avez-vous travaillé cette semaine?\");\n\n// Créez la variable tauxImpot\nvar tauxImpot = 0.15;\n\n// Convertissez salaireHoraire et heuresSemaine en nombres\nsalaireHoraire = Number(salaireHoraire);\nheuresSemaine = Number(heuresSemaine);\n\n// Calculez salaireBrut\nvar salaireBrut = salaireHoraire * heuresSemaine;\n\n// Créez la variable deduction\nvar deduction = salaireBrut * tauxImpot;\n\n// Calculez salaireNet\nvar salaireNet = salaireBrut - deduction;\n\nconsole.log(\"Votre salaire brut est \" + salaireBrut.toFixed(2) + \"$\");\nconsole.log(\"Votre salaire net est \" + salaireNet.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"Number()\">Instruction Number()</h3>\n<div class=\"text\">L'instruction Number() convertit une chaîne en <concept ref=\"number\">nombre</concept>. Cette instruction a un <concept ref=\"parameter\">paramètre</concept>. Le paramètre devrait être une <concept ref=\"string\">chaîne</concept>, ou une <concept ref=\"variable\">variable</concept> contenant une <concept ref=\"variable value\">valeur</concept> de type texte. Dans les deux cas, la chaîne devrait représenter un nombre.</div><div class=\"text\">L'instruction retourne la valeur du paramètre convertie en nombre. Cette valeur devrait être conservée dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard. Si la chaîne ne peut pas être convertie en nombre, l'instruction retourne <concept ref=\"not a number\">NaN</concept>, c'est-à-dire Not a Number, ou Pas un Nombre en français.</div><div class=\"text\">Remarquez que le &quot;N&quot; de Number() doit être écrit en majuscule.</div>\n<div class=\"code-sample-title\">Exemples de Number()</div><pre class=\"codeBlock\">var premier = Number(\"10\"); // premier reçoit la valeur convertie de 10\n\nvar entree = prompt(\"Entrez un nombre\"); // l'utilisateur entre: 42\nentree = Number(entree); // entree reçoit la valeur convertie de 42\n\nvar deuxieme = number(\"6\"); // incorrect: la lettre \"n\" doit être en majuscule\nvar troisieme = Number(\"a\"); // incorrect: retourne NaN (Pas un Nombre)</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-08",
          "name"          : "Projet 8 - L'heure des prédictions",
          "normalizedName": "projet 8 - lheure des predictions",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-077",
          "name"          : "Maths, arts ou sciences?",
          "normalizedName": "maths arts ou sciences",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-077_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-077_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=schoolSubject>matiere</var>. Donnez-lui le résultat retourné par une instruction <concept ref=prompt>prompt()</concept> demandant à l'utilisateur:\n    <string>\"Quelle est votre matière favorite? maths, arts ou sciences\"</string>. (N'oubliez pas l'instruction var!)</li><li class=code-item>Remplacer le deuxième point d'interrogation par la variable <var id=schoolSubject>matiere</var>.</li></ol>",
          "boilerplate"   : "?\n\npredireAvenir(?);",
          "solution"      : "var matiere = prompt(\"Quelle est votre matière favorite? maths, arts ou sciences\");\n\npredireAvenir(matiere);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-078",
          "name"          : "Un choix difficile",
          "normalizedName": "un choix difficile",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ajoutons une deuxième question à notre programme afin qu'il puisse encore mieux prédire notre avenir. Le programme doit demander à l'utilisateur de choisir son aliment favori, parmi la crème glacée, la pizza ou les fruits. La réponse doit être sous forme de chaîne!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=favoriteFood>alimentFavori</var>. Donnez-lui la valeur retournée par un <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: <string>\"Quel est votre aliment favori? crème glacée, pizza ou fruits\"</string>. (N'oubliez pas l'instruction var!)</li><li class=code-item>Remplacer le deuxième point d'interrogation par la variable <var id=favoriteFood>alimentFavori</var>.</li></ol>",
          "boilerplate"   : "var matiere = prompt(\"Quelle est votre matière favorite? maths, arts ou sciences\");\n?\n\npredireAvenir(matiere, ?);",
          "solution"      : "var matiere = prompt(\"Quelle est votre matière favorite? maths, arts ou sciences\");\nvar alimentFavori = prompt(\"Quel est votre aliment favori? crème glacée, pizza ou fruits\");\n\npredireAvenir(matiere, alimentFavori);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-079",
          "name"          : "Huit heures par jour",
          "normalizedName": "huit heures par jour",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-079_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-079_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=sleepHours>heuresSommeil</var>. Donnez-lui le résultat retourné par une instruction <concept ref=prompt>prompt()</concept> demandant à l'utilisateur:\n    <string>\"Combien d'heures dormez-vous par nuit? 0 à 24\"</string>. (N'oubliez pas l'instruction var!)</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=sleepHours>heuresSommeil</var> la valeur de <var id=sleepHours>heuresSommeil</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une nouvelle variable appelée <var id=sleepHoursPerYear>heuresSommeilParAn</var>. Donnez-lui le résultat de <var id=sleepHours>heuresSommeil</var> multiplié par 365.</li><li class=code-item>Remplacer le dernier point d'interrogation par la variable <var id=sleepHoursPerYear>heuresSommeilParAn</var>.</li></ol>",
          "boilerplate"   : "var matiere = prompt(\"Quelle est votre matière favorite? maths, arts ou sciences\");\nvar alimentFavori = prompt(\"Quel est votre aliment favori? crème glacée, pizza ou fruits\");\n?\n\n?\n\n?\n\npredireAvenir(matiere, alimentFavori, ?);",
          "solution"      : "var matiere = prompt(\"Quelle est votre matière favorite? maths, arts ou sciences\");\nvar alimentFavori = prompt(\"Quel est votre aliment favori? crème glacée, pizza ou fruits\");\nvar heuresSommeil = prompt(\"Combien d'heures dormez-vous par nuit? 0 à 24\");\n\nheuresSommeil = Number(heuresSommeil);\n\nvar heuresSommeilParAn = heuresSommeil * 365;\n\npredireAvenir(matiere, alimentFavori, heuresSommeilParAn);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-080",
          "name"          : "Un animal spécial",
          "normalizedName": "un animal special",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-080_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-080_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=adjective>adjectif</var>. Donnez-lui le résultat retourné par une instruction <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: <string>\"Choisissez un adjectif: rapide, gros ou fort\"</string>. (N'oubliez pas l'instruction var!)</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=animal>animal</var>. Donnez-lui le résultat retourné par une instruction <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: <string>\"Choisissez un animal: tortue, escargot ou crabe\"</string>. (N'oubliez pas l'instruction var!)</li><li class=code-item>Remplacer le troisième point d'interrogation par une nouvelle variable appelée <var id=specialAnimal>animalSpecial</var>. Donnez-lui le résultat de la combinaison des variables <var id=adjective>adjectif</var> et <var id=animal>animal</var>. Une espace doit séparer le texte des deux variables.</li><li class=code-item>Remplacer le point d'interrogation dans l'instruction \n    <concept ref=tellFuture>predireAvenir()</concept> par la variable <var id=specialAnimal>animalSpecial</var>.</li></ol>",
          "boilerplate"   : "var matiere = prompt(\"Quelle est votre matière favorite? maths, arts ou sciences\");\nvar alimentFavori = prompt(\"Quel est votre aliment favori? crème glacée, pizza ou fruits\");\nvar heuresSommeil = prompt(\"Combien d'heures dormez-vous par nuit? 0 à 24\");\n?\n?\n\nheuresSommeil = Number(heuresSommeil);\n\nvar heuresSommeilParAn = heuresSommeil * 365;\n\n? = ? + \" \" + ?;\n\npredireAvenir(matiere, alimentFavori, heuresSommeilParAn, ?);",
          "solution"      : "var matiere = prompt(\"Quelle est votre matière favorite? maths, arts ou sciences\");\nvar alimentFavori = prompt(\"Quel est votre aliment favori? crème glacée, pizza ou fruits\");\nvar heuresSommeil = prompt(\"Combien d'heures dormez-vous par nuit? 0 à 24\");\nvar adjectif = prompt(\"Choisissez un adjectif: rapide, gros ou fort\");\nvar animal = prompt(\"Choisissez un animal: tortue, escargot ou crabe\");\n\nheuresSommeil = Number(heuresSommeil);\n\nvar heuresSommeilParAn = heuresSommeil * 365;\n\nvar animalSpecial = adjectif + \" \" + animal;\n\npredireAvenir(matiere, alimentFavori, heuresSommeilParAn, animalSpecial);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-226",
          "name"          : "La meilleure aubaine",
          "normalizedName": "la meilleure aubaine",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Un magasin vend des barres de chocolat à prix de gros. Nous pouvons acheter 12 barres de chocolat pour 10,50$, ou 18 barres pour 16,75$. Construisons un programme qui pourra nous révéler la meilleure aubaine.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=firstRatio>premierRapport</var>. Donnez-lui le résultat de <var id=firstPrice>premierPrix</var> divisé par <var id=firstQuantity>premiereQuantite</var>. <strong>Indice:</strong> le symbole de division est la barre oblique (/).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=secondRatio>deuxiemeRapport</var>. Donnez-lui le résultat de <var id=secondPrice>deuxiemePrix</var> divisé par <var id=secondQuantity>deuxiemeQuantite</var>.</li></ol>",
          "boilerplate"   : "var premierPrix = 10.50;\nvar premiereQuantite = 12;\n\nvar deuxiemePrix = 16.75;\nvar deuxiemeQuantite = 18;\n\n// Créez les variables premierRapport et deuxiemeRapport ici\n?\n?\n\nconsole.log(\"Le prix par unité du premier item est \" + premierRapport.toFixed(2) + \"$\");\nconsole.log(\"Le prix par unité du deuxième item est \" + deuxiemeRapport.toFixed(2) + \"$\");",
          "solution"      : "var premierPrix = 10.50;\nvar premiereQuantite = 12;\n\nvar deuxiemePrix = 16.75;\nvar deuxiemeQuantite = 18;\n\n// Créez les variables premierRapport et deuxiemeRapport ici\nvar premierRapport = premierPrix / premiereQuantite;\nvar deuxiemeRapport = deuxiemePrix / deuxiemeQuantite;\n\nconsole.log(\"Le prix par unité du premier item est \" + premierRapport.toFixed(2) + \"$\");\nconsole.log(\"Le prix par unité du deuxième item est \" + deuxiemeRapport.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-227",
          "name"          : "Un grand voyage",
          "normalizedName": "un grand voyage",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui aidera notre amie Anastasia à prévoir la durée du voyage jusqu'à certaines destinations d'Amérique du Nord. Notre amie habite une petite ville à l'est du Canada, appelée Moncton. Elle voudrait savoir combien d'heures seront nécessaires pour voyager jusqu'à Vancouver (Canada), Washington (États-Unis), Montréal (Canada) et Chicago (États-Unis).</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=speed>vitesse</var>. Donnez-lui la valeur retournée par un <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: <string>\"À quelle vitesse conduirez-vous? (km/h)\"</string>. N'oubliez pas l'instruction <strong>var</strong>!</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à la variable <var id=speed>vitesse</var> la valeur de <var id=speed>vitesse</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une nouvelle variable appelée <var id=hoursToDestination>heuresDeVoyage</var>. Donnez-lui le résultat de <var id=distanceToDestination>distance</var> divisée par <var id=speed>vitesse</var>. <strong>Indice:</strong> le symbole de division est la barre oblique (/).</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Choisir une destination: Vancouver, Washington, Montréal, Chicago\");\nvar distance = obtenirDistanceDestination(destination);\n\n?\n?\n\n?\n\nconsole.log(\"Il faudra \" + heuresDeVoyage.toFixed(1) + \" heures pour voyager jusqu'à \" + destination);",
          "solution"      : "var destination = prompt(\"Choisir une destination: Vancouver, Washington, Montréal, Chicago\");\nvar distance = obtenirDistanceDestination(destination);\n\nvar vitesse = prompt(\"À quelle vitesse conduirez-vous? (km/h)\");\nvitesse = Number(vitesse);\n\nvar heuresDeVoyage = distance / vitesse;\n\nconsole.log(\"Il faudra \" + heuresDeVoyage.toFixed(1) + \" heures pour voyager jusqu'à \" + destination);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>\n<h3 class=\"title\" ref=\"Number()\">Instruction Number()</h3>\n<div class=\"text\">L'instruction Number() convertit une chaîne en <concept ref=\"number\">nombre</concept>. Cette instruction a un <concept ref=\"parameter\">paramètre</concept>. Le paramètre devrait être une <concept ref=\"string\">chaîne</concept>, ou une <concept ref=\"variable\">variable</concept> contenant une <concept ref=\"variable value\">valeur</concept> de type texte. Dans les deux cas, la chaîne devrait représenter un nombre.</div><div class=\"text\">L'instruction retourne la valeur du paramètre convertie en nombre. Cette valeur devrait être conservée dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard. Si la chaîne ne peut pas être convertie en nombre, l'instruction retourne <concept ref=\"not a number\">NaN</concept>, c'est-à-dire Not a Number, ou Pas un Nombre en français.</div><div class=\"text\">Remarquez que le &quot;N&quot; de Number() doit être écrit en majuscule.</div>\n<div class=\"code-sample-title\">Exemples de Number()</div><pre class=\"codeBlock\">var premier = Number(\"10\"); // premier reçoit la valeur convertie de 10\n\nvar entree = prompt(\"Entrez un nombre\"); // l'utilisateur entre: 42\nentree = Number(entree); // entree reçoit la valeur convertie de 42\n\nvar deuxieme = number(\"6\"); // incorrect: la lettre \"n\" doit être en majuscule\nvar troisieme = Number(\"a\"); // incorrect: retourne NaN (Pas un Nombre)</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-228",
          "name"          : "Bientôt terminé",
          "normalizedName": "bientot termine",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Afin de nous encourager à étudier pour notre test de maths, nos parents nous laisseront jouer à nos jeux vidéo favoris lorsque nous aurons terminé 80% de nos exercices de maths. Construisons un programme qui calcule combien d'exercices nous devons terminer pour atteindre le but qu'ils nous ont fixé.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction qui donne à <var id=totalQuantity>totalExercices</var> la valeur de <var id=totalQuantity>totalExercices</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=percentage>pourcentage</var> la valeur de <var id=percentage>pourcentage</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui donne à <var id=percentage>pourcentage</var> la valeur de <var id=percentage>pourcentage</var> divisée par 100.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une nouvelle variable appelée <var id=numberOfExercises>nombreExercices</var> et lui donner la valeur de <var id=totalQuantity>totalExercices</var> multiplié par <var id=percentage>pourcentage</var>.</li></ol>",
          "boilerplate"   : "var totalExercices = prompt(\"Entrez le nombre total d'exercices\");\nvar pourcentage = prompt(\"Quel pourcentage des exercices doit être complété? (1 à 100)\");\n\n?\n?\n\n?\n\n?\n\nconsole.log(\"Vous devez terminer \" + nombreExercices + \" exercices\");",
          "solution"      : "var totalExercices = prompt(\"Entrez le nombre total d'exercices\");\nvar pourcentage = prompt(\"Quel pourcentage des exercices doit être complété? (1 à 100)\");\n\ntotalExercices = Number(totalExercices);\npourcentage = Number(pourcentage);\n\npourcentage = pourcentage / 100;\n\nvar nombreExercices = totalExercices * pourcentage;\n\nconsole.log(\"Vous devez terminer \" + nombreExercices + \" exercices\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>\n<h3 class=\"title\" ref=\"Number()\">Instruction Number()</h3>\n<div class=\"text\">L'instruction Number() convertit une chaîne en <concept ref=\"number\">nombre</concept>. Cette instruction a un <concept ref=\"parameter\">paramètre</concept>. Le paramètre devrait être une <concept ref=\"string\">chaîne</concept>, ou une <concept ref=\"variable\">variable</concept> contenant une <concept ref=\"variable value\">valeur</concept> de type texte. Dans les deux cas, la chaîne devrait représenter un nombre.</div><div class=\"text\">L'instruction retourne la valeur du paramètre convertie en nombre. Cette valeur devrait être conservée dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard. Si la chaîne ne peut pas être convertie en nombre, l'instruction retourne <concept ref=\"not a number\">NaN</concept>, c'est-à-dire Not a Number, ou Pas un Nombre en français.</div><div class=\"text\">Remarquez que le &quot;N&quot; de Number() doit être écrit en majuscule.</div>\n<div class=\"code-sample-title\">Exemples de Number()</div><pre class=\"codeBlock\">var premier = Number(\"10\"); // premier reçoit la valeur convertie de 10\n\nvar entree = prompt(\"Entrez un nombre\"); // l'utilisateur entre: 42\nentree = Number(entree); // entree reçoit la valeur convertie de 42\n\nvar deuxieme = number(\"6\"); // incorrect: la lettre \"n\" doit être en majuscule\nvar troisieme = Number(\"a\"); // incorrect: retourne NaN (Pas un Nombre)</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-229",
          "name"          : "Peintre en bâtiment",
          "normalizedName": "peintre en batiment",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui calcule combien de pots de peinture sont nécessaires pour couvrir un mur. Notre programme doit demander à l'utilisateur d'entrer la longueur et la hauteur du mur. Puis, notre programme doit calculer l'aire du mur afin d'estimer combien de pots de peinture sont nécessaires. Un pot de peinture peut couvrir 14 mètres carrés.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Convertir <var id=width>longueur</var> et <var id=height>hauteur</var> en nombres. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li><li class=code-item>Créer une nouvelle variable appelée <var id=wallArea>aireMur</var> et lui donner le produit de <var id=width>longueur</var> multipliée par <var id=height>hauteur</var>.</li><li class=code-item>Créer une nouvelle variable appelée <var id=squareMetersPerCan>metresCarresParPot</var> et lui donner la valeur 14.</li><li class=code-item>Créer une nouvelle variable appelée <var id=cansOfPaint>potsPeinture</var> et lui donner le quotient de <var id=wallArea>aireMur</var> divisée par <var id=squareMetersPerCan>metresCarresParPot</var>.</li></ol>",
          "boilerplate"   : "var longueur = prompt(\"Entrez la longueur du mur (en mètres)\");\nvar hauteur = prompt(\"Entrez la hauteur du mur (en mètres)\");\n\n// Convertissez longueur et hauteur en nombres\n?\n\n// Calculez aireMur\n?\n\n// Créez la variable metresCarresParPot\n?\n\n// Calculez potsPeinture\n?\n\nconsole.log(\"Il faudra \" + Math.ceil(potsPeinture) + \" pots de peinture pour couvrir le mur.\");",
          "solution"      : "var longueur = prompt(\"Entrez la longueur du mur (en mètres)\");\nvar hauteur = prompt(\"Entrez la hauteur du mur (en mètres)\");\n\n// Convertissez longueur et hauteur en nombres\nvar longueur = Number(longueur);\nvar hauteur = Number(hauteur);\n\n// Calculez aireMur\nvar aireMur = longueur * hauteur;\n\n// Créez la variable metresCarresParPot\nvar metresCarresParPot = 14;\n\n// Calculez potsPeinture\nvar potsPeinture = aireMur / metresCarresParPot;\n\nconsole.log(\"Il faudra \" + Math.ceil(potsPeinture) + \" pots de peinture pour couvrir le mur.\");",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"Number()\">Instruction Number()</h3>\n<div class=\"text\">L'instruction Number() convertit une chaîne en <concept ref=\"number\">nombre</concept>. Cette instruction a un <concept ref=\"parameter\">paramètre</concept>. Le paramètre devrait être une <concept ref=\"string\">chaîne</concept>, ou une <concept ref=\"variable\">variable</concept> contenant une <concept ref=\"variable value\">valeur</concept> de type texte. Dans les deux cas, la chaîne devrait représenter un nombre.</div><div class=\"text\">L'instruction retourne la valeur du paramètre convertie en nombre. Cette valeur devrait être conservée dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard. Si la chaîne ne peut pas être convertie en nombre, l'instruction retourne <concept ref=\"not a number\">NaN</concept>, c'est-à-dire Not a Number, ou Pas un Nombre en français.</div><div class=\"text\">Remarquez que le &quot;N&quot; de Number() doit être écrit en majuscule.</div>\n<div class=\"code-sample-title\">Exemples de Number()</div><pre class=\"codeBlock\">var premier = Number(\"10\"); // premier reçoit la valeur convertie de 10\n\nvar entree = prompt(\"Entrez un nombre\"); // l'utilisateur entre: 42\nentree = Number(entree); // entree reçoit la valeur convertie de 42\n\nvar deuxieme = number(\"6\"); // incorrect: la lettre \"n\" doit être en majuscule\nvar troisieme = Number(\"a\"); // incorrect: retourne NaN (Pas un Nombre)</pre>\n<h3 class=\"title\" ref=\"mathematical operators\">Opérateurs mathématiques</h3>\n<div class=\"text\">Les 4 opérateurs mathématiques de base sont: addition (+), soustraction (-), multiplication (*) et division (/). Remarquez que les opérateurs de multiplication et de division sont écrits avec des symboles différents qu'en mathématiques.</div><div class=\"text\">De plus, l'<concept ref=\"pedmas\">ordre des opérations</concept> (PEDMAS) est respecté.</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs mathématiques</div><pre class=\"codeBlock\">var somme = 10 + 5; // 10 plus 5 est égal à 15\nvar difference = 10 - 5; // 10 moins 5 est égal à 5\nvar produit = 10 * 5; // 10 multiplié par 5 est égal à 50\nvar quotient = 10 / 5; // 10 divisé par 5 est égal à 2</pre>\n<div class=\"text\">Tous ces opérateurs peuvent aussi être utilisés avec une variable qui contient une <concept ref=\"number\">valeur numérique</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'opérateurs mathématiques avec des variables</div><pre class=\"codeBlock\">var premierNombre = 10;\nvar deuxiemeNombre = 5;\nvar resultat = premierNombre * deuxiemeNombre; // est égal à 50 (10 multiplié par 5)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-004",
          "name"          : "Quiz 4",
          "description"   : "Les types de données",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-004_q-01",
              "question": "<div>Que sont les <em>chaînes</em>, en informatique?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-01_a-01",
                  "value" : 0,
                  "answer": "<div>Une entrée</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-004_q-01_a-02",
                  "value"      : 2,
                  "answer"     : "<div>Du texte entouré de guillemets</div>",
                  "explanation": "Les <em>chaînes</em> sont du texte entouré de guillemets. Si le texte n'est pas entouré de guillemets, il s'agit d'une instruction ou d'une variable."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-01_a-03",
                  "value" : 0,
                  "answer": "<div>Un morceau de tissu</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-01_a-04",
                  "value" : 0,
                  "answer": "<div>Une instruction</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-004_q-02",
              "question": "<div>Lequel des énoncés suivants est vrai?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-004_q-02_a-01",
                  "value"      : 2,
                  "answer"     : "<div>La valeur retournée par l'instruction <code>prompt()</code> est toujours une chaîne.</div>",
                  "explanation": "Toutes les valeurs retournées par un <code>prompt()</code> sont des chaînes, y compris les nombres."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-02_a-02",
                  "value" : 0,
                  "answer": "<div>La somme de deux chaînes est un nombre (ex: <string>\"5\"</string> + <string>\"3\"</string> = 8).</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-02_a-03",
                  "value" : 0,
                  "answer": "<div>Les données ne peuvent jamais être converties dans un autre type.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-02_a-04",
                  "value" : 0,
                  "answer": "<div>L'instruction <code>Number()</code> retourne un nombre au hasard.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-004_q-03",
              "question": "<div>Choisissez les deux types de données dans la liste suivante:</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-004_q-03_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Nombres</div>",
                  "explanation": "Les nombres sont un type de données et peuvent être utilisés dans les calculs."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>Couleurs</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-004_q-03_a-03",
                  "value"      : 1,
                  "answer"     : "<div>Chaînes</div>",
                  "explanation": "Les chaînes sont un type de données et peuvent être utilisées pour représenter du texte."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>Taille</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-004_q-04",
              "question": "<div>Vrai ou faux. Un nombre entré dans un <code>prompt()</code> devrait toujours être converti en nombre avant d'être utilisé dans une opération mathématique.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-004_q-04_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "Les nombres entrés dans un <code>prompt()</code> sont retournés comme des chaînes, ce qui peut donner des résultats inattendus dans les opérations mathématiques."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-004_q-05",
              "question": "<div>Quelle est la valeur finale de la variable <var>resultat</var>?</div>\n<pre class=\"language-javascript\"><code>var premier = \"7\";\nvar deuxieme = \"3\";\nvar resultat = premier + deuxieme;</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>10</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>37</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-004_q-05_a-03",
                  "value"      : 2,
                  "answer"     : "<div>73</div>",
                  "explanation": "Puisque les deux valeurs sont des chaînes et non des nombres, le programme combine les deux chaînes pour créer la chaîne <string>\"73\"</string>."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-05_a-04",
                  "value" : 0,
                  "answer": "<div>NaN</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-004_q-06",
              "question": "<div>Quelle est la valeur finale de la variable <var>resultat</var>?</div>\n<pre class=\"language-javascript\"><code>var premier = 4;\nvar deuxieme = \"2\";\ndeuxieme = Number(deuxieme);\nvar resultat = premier + deuxieme;</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-06_a-01",
                  "value" : 0,
                  "answer": "<div>42</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-004_q-06_a-02",
                  "value"      : 2,
                  "answer"     : "<div>6</div>",
                  "explanation": "La chaîne <string>\"2\"</string> est convertie en nombre, donc le programme additionne les deux nombres."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>24</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>NaN</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-004_q-07",
              "question": "<div>Vrai ou faux. L'instruction <code>Number()</code> peut s'écrire avec un \"n\" minuscule (ex: <code>number()</code>).</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-004_q-07_a-01",
                  "value" : 0,
                  "answer": "<div>Vrai</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-004_q-07_a-02",
                  "value"      : 1,
                  "answer"     : "<div>Faux</div>",
                  "explanation": "L'instruction <code>Number()</code> prend <strong>toujours</strong> un \"N\" majuscule."
                }
              ]
            }
          ],
          "normalizedName": "quiz 4",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-262",
          "name"          : "Les booléens et les instructions if",
          "normalizedName": "les booleens et les instructions if",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-262_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-262_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-09",
          "name"          : "Projet 9 - Vrai ou faux?",
          "normalizedName": "projet 9 - vrai ou faux",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-081",
          "name"          : "Vrai ou faux?",
          "normalizedName": "vrai ou faux",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-081_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-081_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=myBool>monBooleen</var>. Donnez-lui la valeur booléenne retournée par la comparaison de <strong>5 plus petit que 10</strong>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par la variable <var id=myBool>monBooleen</var>.</li></ol>",
          "boilerplate"   : "?\n\nbouleBooleenne(\"5 est-il plus petit que 10?\", ?);",
          "solution"      : "var monBooleen = (5 < 10);\n\nbouleBooleenne(\"5 est-il plus petit que 10?\", monBooleen);",
          "tips"          : "<h3 class=\"title\" ref=\"boolean\">Booléens</h3>\n<div class=\"text\">Les booléens sont un <concept ref=\"data type\">type de données</concept> qui ont seulement deux valeurs possibles: true (vrai) ou false (faux).</div><div class=\"text\">Les expressions qui utilisent un <concept ref=\"relational operators\">opérateur relationnel</concept> retournent une valeur booléenne.</div>\n<div class=\"code-sample-title\">Exemples de valeurs booléennes</div><pre class=\"codeBlock\">var tuAimesLesCereales = true;\nvar estPlusGrandQue18 = 10 > 18; // estPlusGrandQue18 sera false (faux)\nvar age = 19;\nvar ageEstPlusGrandQue18 = age > 18; // ageEstPlusGrandQue18 sera true (vrai)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-082",
          "name"          : "Une autre logique",
          "normalizedName": "une autre logique",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Essayons d'utiliser d'autres opérateurs relationnels pour comprendre comment ils fonctionnent.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction qui donne à <var id=myBool>monBooleen</var> la valeur booléenne retournée par la comparaison: <strong>5 plus petit ou égal à 5</strong>. <strong>Indice:</strong> l'opérateur plus petit ou égal est &lt;=</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=myBool>monBooleen</var> la valeur booléenne retournée par la comparaison: <strong>9 plus grand ou égal à 4</strong>. <strong>Indice:</strong> l'opérateur plus grand ou égal est &gt;=</li></ol>",
          "boilerplate"   : "var monBooleen = (5 < 10);\nbouleBooleenne(\"5 est-il plus petit que 10?\", monBooleen);\n\n// Vérifiez si 5 est plus petit\n// ou égal à 5\nmonBooleen = ?\nbouleBooleenne(\"5 est-il plus petit ou égal à 5?\", monBooleen);\n\n// Vérifiez si 9 est plus grand\n// ou égal à 4\nmonBooleen = ?\nbouleBooleenne(\"9 est-il plus grand ou égal à 4?\", monBooleen);",
          "solution"      : "var monBooleen = (5 < 10);\nbouleBooleenne(\"5 est-il plus petit que 10?\", monBooleen);\n\n// Vérifiez si 5 est plus petit\n// ou égal à 5\nmonBooleen = (5 <= 5);\nbouleBooleenne(\"5 est-il plus petit ou égal à 5?\", monBooleen);\n\n// Vérifiez si 9 est plus grand\n// ou égal à 4\nmonBooleen = (9 >= 4);\nbouleBooleenne(\"9 est-il plus grand ou égal à 4?\", monBooleen);",
          "tips"          : "<h3 class=\"title\" ref=\"boolean\">Booléens</h3>\n<div class=\"text\">Les booléens sont un <concept ref=\"data type\">type de données</concept> qui ont seulement deux valeurs possibles: true (vrai) ou false (faux).</div><div class=\"text\">Les expressions qui utilisent un <concept ref=\"relational operators\">opérateur relationnel</concept> retournent une valeur booléenne.</div>\n<div class=\"code-sample-title\">Exemples de valeurs booléennes</div><pre class=\"codeBlock\">var tuAimesLesCereales = true;\nvar estPlusGrandQue18 = 10 > 18; // estPlusGrandQue18 sera false (faux)\nvar age = 19;\nvar ageEstPlusGrandQue18 = age > 18; // ageEstPlusGrandQue18 sera true (vrai)</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-083",
          "name"          : "Être ou ne pas être (égal)?",
          "normalizedName": "etre ou ne pas etre egal",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-083_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-083_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=myBool>monBooleen</var>. Donnez-lui la valeur booléenne retournée par la comparaison de <strong>5 égal à 5</strong>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=myBool>monBooleen</var> la valeur booléenne retournée par la comparaison de <strong>7 égal à 5</strong>.</li></ol>",
          "boilerplate"   : "?\n\nbouleBooleenne(\"5 est-il égal à 5?\", monBooleen);\n\n?\n\nbouleBooleenne(\"7 est-il égal à 5?\", monBooleen);",
          "solution"      : "var monBooleen = (5 == 5);\n\nbouleBooleenne(\"5 est-il égal à 5?\", monBooleen);\n\nmonBooleen = (7 == 5);\n\nbouleBooleenne(\"7 est-il égal à 5?\", monBooleen);",
          "tips"          : "<h3 class=\"title\" ref=\"string compare\">Comparaison de chaînes avec les opérateurs d'égalité et d'inégalité</h3>\n<div class=\"text\">Les <concept ref=\"relational operators\">opérateurs relationnels</concept> d'égalité et d'inégalité peuvent être utilisés pour comparer des <concept ref=\"string\">chaînes</concept>.</div><div class=\"text\">L'opérateur d'égalité (==) retourne <concept ref=\"boolean\">true</concept> (vrai) si les deux chaînes sont identiques, en considérant les majuscules et les minuscules.</div><div class=\"text\">L'opérateur d'inégalité (!=) retourne <concept ref=\"boolean\">true</concept> (vrai) si les deux chaînes sont différentes (c'est-à-dire, si au moins une lettre est différente), en considérant les majuscules et les minuscules.</div>\n<div class=\"code-sample-title\">Comparaison de chaînes</div><pre class=\"codeBlock\">var resultat = \"EduCode\" == \"EduCode\"; // true (vrai)\nresultat = \"Coder\" == \"Programmer\"; // false (faux)\nresultat = \"EduCode\" == \"Educode\"; // false (faux), car le \"C\" est en majuscule puis en minuscule\nresultat = \"EduCode\" != \"EduCode\"; // false (faux), car les deux chaînes sont identiques\nresultat = \"EduCode\" != \"Educode\"; // true (vrai), car le \"C\" est en majuscule puis en minuscule</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"accidental assignment\">Opérateurs d'affectation (=) et d'égalité (==)</h3>\n<div class=\"text\">Une erreur commune qui survient en utilisant l'<concept ref=\"relational operators\">opérateur d'égalité (==)</concept> est d'écrire un seul signe égal (=). Au lieu de comparer les deux valeurs, le programme fera une opération d'<concept ref=\"variable value\">affectation</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'affectation au lieu de comparaison</div><pre class=\"codeBlock\">var x = 10;\nconsole.log(x = 15); // plutôt que de vérifier si x est égal à 15, x prend la valeur 15</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-084",
          "name"          : "Une vraie différence",
          "normalizedName": "une vraie difference",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Parfois, plutôt que de vérifier si deux valeurs sont égales, nous voulons vérifier si les valeurs ne sont pas égales (c'est-à-dire, différentes). Pour ce faire, nous pouvons utiliser l'opérateur d'<strong>inégalité</strong> (!=). Essayons-le dans cet exercice.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=myBool>monBooleen</var>. Donnez-lui la valeur booléenne retournée par la comparaison: <strong>5 pas égal à 5</strong>. <strong>Indice:</strong> l'opérateur d'inégalité est !=</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=myBool>monBooleen</var> la valeur booléenne retournée par la comparaison: <strong>7 pas égal à 5</strong>.</li></ol>",
          "boilerplate"   : "// Vérifiez si 5 n'est pas égal à 5\n?\n\nbouleBooleenne(\"Est-ce que 5 n'est PAS égal à 5?\", monBooleen);\n\n// Vérifiez si 7 n'est pas égal à 5\n?\n\nbouleBooleenne(\"Est-ce que 7 n'est PAS égal à 5?\", monBooleen);",
          "solution"      : "// Vérifiez si 5 n'est pas égal à 5\nvar monBooleen = (5 != 5);\n\nbouleBooleenne(\"Est-ce que 5 n'est PAS égal à 5?\", monBooleen);\n\n// Vérifiez si 7 n'est pas égal à 5\nmonBooleen = (7 != 5);\n\nbouleBooleenne(\"Est-ce que 7 n'est PAS égal à 5?\", monBooleen);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"accidental assignment\">Opérateurs d'affectation (=) et d'égalité (==)</h3>\n<div class=\"text\">Une erreur commune qui survient en utilisant l'<concept ref=\"relational operators\">opérateur d'égalité (==)</concept> est d'écrire un seul signe égal (=). Au lieu de comparer les deux valeurs, le programme fera une opération d'<concept ref=\"variable value\">affectation</concept>.</div>\n<div class=\"code-sample-title\">Exemple d'affectation au lieu de comparaison</div><pre class=\"codeBlock\">var x = 10;\nconsole.log(x = 15); // plutôt que de vérifier si x est égal à 15, x prend la valeur 15</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-085",
          "name"          : "Comparer du texte",
          "normalizedName": "comparer du texte",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-085_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-085_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=firstWord>premierMot</var>. Donnez-lui le résultat retourné par une instruction <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: <string>\"Entrez le premier mot\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=secondWord>deuxiemeMot</var>. Donnez-lui le résultat retourné par une instruction <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: <string>\"Entrez le deuxième mot\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une nouvelle variable appelée <var id=stringCompare>comparaison</var>. Donnez-lui la valeur booléenne retournée par la comparaison de <var id=firstWord>premierMot</var> <strong>égal à</strong> <var id=secondWord>deuxiemeMot</var>.</li></ol>",
          "boilerplate"   : "?\n?\n\n?\n\nbouleBooleenne(\"Est-ce que \" + premierMot + \" est égal à \" + deuxiemeMot + \"?\", comparaison);",
          "solution"      : "var premierMot = prompt(\"Entrez le premier mot\");\nvar deuxiemeMot = prompt(\"Entrez le deuxième mot\");\n\nvar comparaison = premierMot == deuxiemeMot;\n\nbouleBooleenne(\"Est-ce que \" + premierMot + \" est égal à \" + deuxiemeMot + \"?\", comparaison);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-086",
          "name"          : "Une connexion réussie",
          "normalizedName": "une connexion reussie",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Créons un système de connexion, protégé par mot de passe, qui vérifie si l'utilisateur a entré le bon mot de passe.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=userPassword>motDePasseUtilisateur</var>. Donnez-lui la valeur retournée par un <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: <string>\"Entrez votre mot de passe\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=validLogin>succesConnexion</var>. Donnez-lui la valeur booléenne retournée par la comparaison: <var id=validPassword>motDePasse</var> <strong>égal à</strong> <var id=userPassword>motDePasseUtilisateur</var>.</li><li class=code-item>Remplacer le troisième point d'interrogation par la variable <var id=validLogin>succesConnexion</var>.</li></ol>",
          "boilerplate"   : "var motDePasse = \"EduCode\";\n?\n\n// Vérifiez si motDePasse\n// est égal à motDePasseUtilisateur\n?\n\nbouleBooleenne(\"Connexion réussie?\", ?);",
          "solution"      : "var motDePasse = \"EduCode\";\nvar motDePasseUtilisateur = prompt(\"Entrez votre mot de passe\");\n\n// Vérifiez si motDePasse\n// est égal à motDePasseUtilisateur\nvar succesConnexion = (motDePasse == motDePasseUtilisateur);\n\nbouleBooleenne(\"Connexion réussie?\", succesConnexion);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-087",
          "name"          : "Remporter le gros lot",
          "normalizedName": "remporter le gros lot",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui vérifie si nous avons gagné la loterie.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=userNumber>numeroUtilisateur</var>. Donnez-lui la valeur retournée par un <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: <string>\"Entrez votre numéro de loterie\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=userNumber>numeroUtilisateur</var> la valeur de <var id=userNumber>numeroUtilisateur</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une nouvelle variable appelée <var id=answer>reponse</var>. Donnez-lui la valeur booléenne retournée par la comparaison: <var id=winningNumber>numeroGagnant</var> <strong>égal à</strong> <var id=userNumber>numeroUtilisateur</var>.</li><li class=code-item>Remplacer le quatrième point d'interrogation par la variable <var id=answer>reponse</var>.</li></ol>",
          "boilerplate"   : "var numeroGagnant = 19700101;\n?\n\n// Convertissez numeroUtilisateur\n// en nombre avec Number()\n?\n\n// Vérifiez si numeroGagnant\n// est égal à numeroUtilisateur\n?\n\nbouleBooleenne(\"Avez-vous gagné la loterie?\", ?);",
          "solution"      : "var numeroGagnant = 19700101;\nvar numeroUtilisateur = prompt(\"Entrez votre numéro de loterie\");\n\n// Convertissez numeroUtilisateur\n// en nombre avec Number()\nnumeroUtilisateur = Number(numeroUtilisateur);\n\n// Vérifiez si numeroGagnant\n// est égal à numeroUtilisateur\nvar reponse = (numeroGagnant == numeroUtilisateur);\n\nbouleBooleenne(\"Avez-vous gagné la loterie?\", reponse);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"Number()\">Instruction Number()</h3>\n<div class=\"text\">L'instruction Number() convertit une chaîne en <concept ref=\"number\">nombre</concept>. Cette instruction a un <concept ref=\"parameter\">paramètre</concept>. Le paramètre devrait être une <concept ref=\"string\">chaîne</concept>, ou une <concept ref=\"variable\">variable</concept> contenant une <concept ref=\"variable value\">valeur</concept> de type texte. Dans les deux cas, la chaîne devrait représenter un nombre.</div><div class=\"text\">L'instruction retourne la valeur du paramètre convertie en nombre. Cette valeur devrait être conservée dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard. Si la chaîne ne peut pas être convertie en nombre, l'instruction retourne <concept ref=\"not a number\">NaN</concept>, c'est-à-dire Not a Number, ou Pas un Nombre en français.</div><div class=\"text\">Remarquez que le &quot;N&quot; de Number() doit être écrit en majuscule.</div>\n<div class=\"code-sample-title\">Exemples de Number()</div><pre class=\"codeBlock\">var premier = Number(\"10\"); // premier reçoit la valeur convertie de 10\n\nvar entree = prompt(\"Entrez un nombre\"); // l'utilisateur entre: 42\nentree = Number(entree); // entree reçoit la valeur convertie de 42\n\nvar deuxieme = number(\"6\"); // incorrect: la lettre \"n\" doit être en majuscule\nvar troisieme = Number(\"a\"); // incorrect: retourne NaN (Pas un Nombre)</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-10",
          "name"          : "Projet 10 - Prendre une décision",
          "normalizedName": "projet 10 - prendre une decision",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-088",
          "name"          : "Une machine spéciale",
          "normalizedName": "une machine speciale",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-088_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-088_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Donner à la variable <var id=packageWeight>poids</var> un nombre plus grand que 8.</li></ol>",
          "boilerplate"   : "var poids = ?;\n\nif(poids > 8)\n{\n  console.log(\"Le paquet pèse plus de 8 kilogrammes!\");\n}",
          "solution"      : "var poids = 9;\n\nif(poids > 8)\n{\n  console.log(\"Le paquet pèse plus de 8 kilogrammes!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"condition\">Condition</h3>\n<div class=\"text\">Les conditions sont comme des questions auxquelles nous ne pouvons répondre que par <concept ref=\"boolean\">vrai ou faux</concept>. Nous utilisons des conditions pour contrôler diverses parties de notre code, comme les <concept ref=\"conditional statements\">instructions conditionnelles</concept> et les <concept ref=\"loops\">boucles</concept>. Une condition retourne toujours true (vrai) ou false (faux).</div><div class=\"text\">Pour créer une condition, nous pouvons utiliser n'importe quel <concept ref=\"relational operators\">opérateur relationnel</concept>.</div>\n<div class=\"code-sample-title\">Exemple de condition</div><pre class=\"codeBlock\">if(maVariable > 10) // condition: maVariable est plus grande que 10\n{\n  console.log(\"maVariable est plus grande que 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-089",
          "name"          : "Sous contrôle",
          "normalizedName": "sous controle",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Il est important de savoir créer des conditions afin de pouvoir contrôler les instructions if. Cette instruction if devrait afficher un message pour les paquets pesant moins de 5 kilogrammes. Pouvez-vous créer la condition qui permet de contrôler cette instruction if?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une condition qui vérifie si la valeur de <var id=packageWeight>poids</var> est plus petite que 5. <strong>Indice:</strong> l'opérateur plus petit est &lt;</li></ol>",
          "boilerplate"   : "var poids = 3;\n\nif(?)\n{\n  console.log(\"Le paquet pèse moins de 5 kilogrammes!\");\n}",
          "solution"      : "var poids = 3;\n\nif(poids < 5)\n{\n  console.log(\"Le paquet pèse moins de 5 kilogrammes!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-090",
          "name"          : "Grouper nos idées",
          "normalizedName": "grouper nos idees",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-090_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-090_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une accolade ouvrante ({).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à la variable <var id=shippingPrice>prix</var> le résultat de <var id=shippingPrice>prix</var> plus 5.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction \n    <concept ref=console-log>console.log()</concept> qui affiche à l'utilisateur le message: \n    <string>\"Paquet trop lourd, taxe supplémentaire ajoutée!\"</string>.</li><li class=code-item>Remplacer le dernier point d'interrogation par une accolade fermante (}).</li></ol>",
          "boilerplate"   : "var poids = prompt(\"Entrez le poids du paquet:\");\nvar prix = 10;\n\npoids = Number(poids);\n\n// Rappelez-vous, il est essentiel d'utiliser\n// les accolades { } pour créer un bloc de code\nif(poids > 8)\n?\n?\n?\n?",
          "solution"      : "var poids = prompt(\"Entrez le poids du paquet:\");\nvar prix = 10;\n\npoids = Number(poids);\n\n// Rappelez-vous, il est essentiel d'utiliser\n// les accolades { } pour créer un bloc de code\nif(poids > 8)\n{\n  prix = prix + 5;\n  console.log(\"Paquet trop lourd, taxe supplémentaire ajoutée!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"console.log()\">Instruction console.log()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> console.log() permet de créer une <concept ref=\"output\">sortie</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>, qui est habituellement une <concept ref=\"string\">chaîne</concept>. Le paramètre est écrit dans la sortie du programme, c'est-à-dire dans la console.</div><div class=\"text\">Remarquez que la chaîne donnée comme paramètre peut aussi être la <concept ref=\"concatenation\">concaténation</concept> de plusieurs chaînes.</div>\n<div class=\"code-sample-title\">Exemples de console.log()</div><pre class=\"codeBlock\">console.log(\"Bonjour!\"); // affiche: Bonjour!\nconsole.log(\"Bonjour \" + \"le monde!\"); // affiche la chaîne concaténée: Bonjour le monde!\nconsole.log(Bonjour!); // incorrect: la chaîne doit être entourée de guillemets (\" \")</pre>\n<h3 class=\"title\" ref=\"code block\">Bloc de code</h3>\n<div class=\"text\">Un bloc de code est un outil spécial servant à grouper une ou plusieurs <concept ref=\"instruction\">instructions</concept>. Les instructions ainsi groupées seront exécutées selon une certaine <concept ref=\"condition\">condition</concept>.</div><div class=\"text\">Dans le cas d'une <concept ref=\"if statement\">instruction if</concept>, le code à l'intérieur du bloc de code sera seulement exécuté si la condition de l'instruction if est <concept ref=\"boolean\">vraie</concept>.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-091",
          "name"          : "Le code après le bloc",
          "normalizedName": "le code apres le bloc",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-091_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-091_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une instruction \n    <concept ref=console-log>console.log()</concept> qui affiche à l'utilisateur le message: \n    <string>\"Le prix total est: \"</string>, suivi de la valeur de la variable <var id=shippingPrice>prix</var>.</li></ol>",
          "boilerplate"   : "var poids = prompt(\"Entrez le poids du paquet:\");\nvar prix = 10;\n\npoids = Number(poids);\n\nif(poids > 8)\n{\n  prix = prix + 5;\n  console.log(\"Paquet trop lourd, taxe supplémentaire ajoutée!\");\n}\n\n// Créez un message avec l'instruction console.log()\n?",
          "solution"      : "var poids = prompt(\"Entrez le poids du paquet:\");\nvar prix = 10;\n\npoids = Number(poids);\n\nif(poids > 8)\n{\n  prix = prix + 5;\n  console.log(\"Paquet trop lourd, taxe supplémentaire ajoutée!\");\n}\n\n// Créez un message avec l'instruction console.log()\nconsole.log(\"Le prix total est: \" + prix);",
          "tips"          : "<h3 class=\"title\" ref=\"code after code block\">Code suivant un bloc de code</h3>\n<div class=\"text\">Le code qui suit un <concept ref=\"code block\">bloc de code</concept> est toujours exécuté, même si le bloc de code est ignoré lorsqu'une condition est <concept ref=\"boolean\">fausse</concept>.</div>\n<div class=\"code-sample-title\">Exemple de code après une instruction if</div><pre class=\"codeBlock\">var prix = 4;\nvar poids = 7;\nif(poids > 5)\n{\n  // ce code est seulement exécuté si poids est plus grand que 5\n  console.log(\"Paquet trop lourd, ajout d'une taxe de 5$\");\n  prix = prix + 5;\n}\nconsole.log(\"Prix final: \" + prix + \"$\"); // ce code est toujours exécuté</pre>\n<h3 class=\"title\" ref=\"console.log() concatenation\">Combinaison de chaînes et de variables dans un console.log()</h3>\n<div class=\"text\">Nous pouvons combiner une <concept ref=\"string\">chaîne</concept> et la <concept ref=\"variable value\">valeur</concept> d'une variable entre les parenthèses de l'instruction console.log() pour créer une <concept ref=\"output\">sortie</concept> complexe.</div><div class=\"text\">Pour ce faire, nous devons utiliser l'opérateur de <concept ref=\"concatenation\">concaténation (+)</concept> entre chacun des éléments.</div>\n<div class=\"code-sample-title\">Exemples de console.log() avec une variable et une chaîne</div><pre class=\"codeBlock\">var monNom = \"EduCode\";\nconsole.log(\"Mon nom est \" + monNom); // affiche la chaîne concaténée: Mon nom est EduCode\nvar monAge = 16;\nconsole.log(\"J'ai \" + monAge + \" ans\"); // affiche la chaîne concaténée: J'ai 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-092",
          "name"          : "Voyager léger",
          "normalizedName": "voyager leger",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Byte Mail offre un prix réduit aux paquets légers. Les paquets pesant moins de 4 kilogrammes obtiennent un rabais de 2$ sur le prix d'expédition. Pouvez-vous aider Byte Mail à construire leur système?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=packageWeight>poids</var> <strong>est plus petite que 4</strong>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=shippingPrice>prix</var> le résultat de  <var id=shippingPrice>prix</var> <strong>moins 2</strong>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction <concept ref=console-log>console.log()</concept> qui affiche à l'utilisateur le message: <string>\"Paquet de moins de 4 kg, rabais appliqué\"</string>.</li></ol>",
          "boilerplate"   : "var poids = prompt(\"Entrez le poids du paquet:\");\nvar prix = 10;\n\npoids = Number(poids);\n\nif(?)\n{\n  ?\n  ?\n}\n\nconsole.log(\"Le prix total est: \" + prix);",
          "solution"      : "var poids = prompt(\"Entrez le poids du paquet:\");\nvar prix = 10;\n\npoids = Number(poids);\n\nif(poids < 4)\n{\n  prix = prix - 2;\n  console.log(\"Paquet de moins de 4 kg, rabais appliqué\");\n}\n\nconsole.log(\"Le prix total est: \" + prix);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"console.log()\">Instruction console.log()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> console.log() permet de créer une <concept ref=\"output\">sortie</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>, qui est habituellement une <concept ref=\"string\">chaîne</concept>. Le paramètre est écrit dans la sortie du programme, c'est-à-dire dans la console.</div><div class=\"text\">Remarquez que la chaîne donnée comme paramètre peut aussi être la <concept ref=\"concatenation\">concaténation</concept> de plusieurs chaînes.</div>\n<div class=\"code-sample-title\">Exemples de console.log()</div><pre class=\"codeBlock\">console.log(\"Bonjour!\"); // affiche: Bonjour!\nconsole.log(\"Bonjour \" + \"le monde!\"); // affiche la chaîne concaténée: Bonjour le monde!\nconsole.log(Bonjour!); // incorrect: la chaîne doit être entourée de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-093",
          "name"          : "Retourné à l'expéditeur",
          "normalizedName": "retourne a lexpediteur",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-093_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-093_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Enlever le point-virgule après la condition de l'instruction if.</li></ol>",
          "boilerplate"   : "var poids = prompt(\"Entrez le poids du paquet:\");\n\npoids = Number(poids);\n\nif(poids > 8);\n{\n  console.log(\"Le paquet pèse plus de 8 kilogrammes!\");\n}",
          "solution"      : "var poids = prompt(\"Entrez le poids du paquet:\");\n\npoids = Number(poids);\n\nif(poids > 8)\n{\n  console.log(\"Le paquet pèse plus de 8 kilogrammes!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"semicolon after if\">Point-virgule après la condition d'une instruction if</h3>\n<div class=\"text\">Si nous écrivons un point-virgule (;) après la <concept ref=\"condition\">condition</concept> d'une <concept ref=\"if statement\">instruction if</concept>, la condition sera ignorée et le <concept ref=\"code block\">bloc de code</concept> sera toujours exécuté.</div>\n<div class=\"code-sample-title\">Exemple d'un point-virgule après une instruction if</div><pre class=\"codeBlock\">var argent = 4;\nif(argent > 5); // remarquez le point-virgule ici\n{\n  console.log(\"Vous avez plus de 5$\"); // ce message est toujours affiché\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, le message &quot;Vous avez plus de 5$&quot; est toujours affiché, même si l'utilisateur a moins de 5$. Pour résoudre le problème, il suffit d'enlever le point-virgule après la condition.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-094",
          "name"          : "Une deuxième machine",
          "normalizedName": "une deuxieme machine",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-094_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-094_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=packageWeight>poids</var> <strong>est plus grande que 16</strong>.</li><li class=code-item>À l'intérieur du bloc de code de votre nouvelle instruction if, donnez à la variable <var id=shippingPrice>prix</var> le résultat de <var id=shippingPrice>prix</var> <strong>plus 10</strong>.</li></ol>",
          "boilerplate"   : "var poids = prompt(\"Entrez le poids du paquet:\");\nvar prix = 10;\n\npoids = Number(poids);\n\nif(poids > 8)\n{\n  prix = prix + 5;\n}\n\n// Ajoutez une autre instruction if ici\n?\n?\n?\n?\n\nconsole.log(\"Le prix total est: \" + prix);",
          "solution"      : "var poids = prompt(\"Entrez le poids du paquet:\");\nvar prix = 10;\n\npoids = Number(poids);\n\nif(poids > 8)\n{\n  prix = prix + 5;\n}\n\n// Ajoutez une autre instruction if ici\nif(poids > 16)\n{\n  prix = prix + 10;\n}\n\nconsole.log(\"Le prix total est: \" + prix);",
          "tips"          : "<h3 class=\"title\" ref=\"multiple if\">Instructions if multiples dans un programme</h3>\n<div class=\"text\">Il est possible d'utiliser plusieurs <concept ref=\"if statement\">instructions if</concept> dans un seul programme. Dans ce cas, le résultat d'une instruction if n'affecte pas le résultat des autres instructions.</div>\n<div class=\"code-sample-title\">Exemple d'instructions if multiples</div><pre class=\"codeBlock\">if(maVariable > 8)\n{\n  console.log(\"maVariable est plus grande que 8!\");\n}\nif(maVariable > 16)\n{\n  console.log(\"maVariable est plus grande que 16!\");\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, le <concept ref=\"code block\">bloc de code</concept> de la deuxième instruction if peut être exécuté même si le bloc de code de la première instruction if n'est pas exécuté. Par exemple, si la <concept ref=\"variable value\">valeur</concept> de maVariable est 17, nous obtenons les deux messages: &quot;maVariable est plus grande que 8!&quot; et &quot;maVariable est plus grande que 16!&quot;.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-095",
          "name"          : "Le côté positif",
          "normalizedName": "le cote positif",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui nous dit si un nombre est positif (plus grand que zéro), négatif (plus petit que zéro) ou égal à zéro. Pouvez-vous écrire les trois conditions qui feront fonctionner le programme correctement?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=myNumber>monNombre</var> <strong>est plus grande que 0</strong>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=myNumber>monNombre</var> <strong>est plus petite que 0</strong>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=myNumber>monNombre</var> <strong>est égale à 0</strong>.</li></ol>",
          "boilerplate"   : "var monNombre = prompt(\"Entrez un nombre\");\n\nmonNombre = Number(monNombre);\n\n// Vérifiez si monNombre est plus grand que 0\nif(?)\n{\n  console.log(monNombre + \" est un nombre positif.\");\n}\n// Vérifiez si monNombre est plus petit que 0\nif(?)\n{\n  console.log(monNombre + \" est un nombre négatif.\");\n}\n// Vérifiez si monNombre est égal à 0\nif(?)\n{\n  console.log(monNombre + \" est zéro.\");\n}",
          "solution"      : "var monNombre = prompt(\"Entrez un nombre\");\n\nmonNombre = Number(monNombre);\n\n// Vérifiez si monNombre est plus grand que 0\nif(monNombre > 0)\n{\n  console.log(monNombre + \" est un nombre positif.\");\n}\n// Vérifiez si monNombre est plus petit que 0\nif(monNombre < 0)\n{\n  console.log(monNombre + \" est un nombre négatif.\");\n}\n// Vérifiez si monNombre est égal à 0\nif(monNombre == 0)\n{\n  console.log(monNombre + \" est zéro.\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-096",
          "name"          : "Bonjour, admin!",
          "normalizedName": "bonjour admin!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un système de connexion, protégé par mot de passe, qui vérifie si l'utilisateur a entré le bon mot de passe. Pouvez-vous compléter les conditions de ce système?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si <var id=myAttempt>monEssai</var> est égal à <var id=password>motDePasse</var>. <strong>Indice:</strong> l'opérateur d'égalité est ==</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si <var id=myAttempt>monEssai</var> n'est <strong>PAS</strong> égal à <var id=password>motDePasse</var>. <strong>Indice:</strong> l'opérateur d'inégalité est !=</li></ol>",
          "boilerplate"   : "var monEssai = prompt(\"Entrez votre mot de passe\");\nvar motDePasse = \"12345\";\n\n// Vérifiez si monEssai est égal à motDePasse\nif(?)\n{\n  console.log(\"Bonjour, admin!\");\n}\n\n// Vérifiez si monEssai n'est PAS égal à motDePasse\nif(?)\n{\n  console.log(\"Le mot de passe est incorrect!\");\n}",
          "solution"      : "var monEssai = prompt(\"Entrez votre mot de passe\");\nvar motDePasse = \"12345\";\n\n// Vérifiez si monEssai est égal à motDePasse\nif(monEssai == motDePasse)\n{\n  console.log(\"Bonjour, admin!\");\n}\n\n// Vérifiez si monEssai n'est PAS égal à motDePasse\nif(monEssai != motDePasse)\n{\n  console.log(\"Le mot de passe est incorrect!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-097",
          "name"          : "Une échelle de prix",
          "normalizedName": "une echelle de prix",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Aidons Byte Mail à construire un autre programme de tri. Ce programme doit calculer le prix d'expédition des paquets selon les règles suivantes:</div><ul class=algorithm><li>Les paquets qui sont envoyés sur une distance plus petite ou égale à 1000 kilomètres ont un prix de 10$.</li><li>Les paquets qui sont envoyés sur une distance plus grande que 1000 kilomètres ont un prix de 20$.</li><li>Les paquets qui sont envoyés sur une distance plus grande que 2500 kilomètres ont un prix de 50$.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=distance>distance</var> est plus grande que 1000. À l'intérieur du bloc de code de cette instruction if, donnez à <var id=shippingPrice>prix</var> le nombre 20.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une autre instruction if. La condition de cette instruction doit vérifier si la valeur de <var id=distance>distance</var> est plus grande que 2500. À l'intérieur du bloc de code de cette instruction if, donnez à <var id=shippingPrice>prix</var> le nombre 50.</li></ol>",
          "boilerplate"   : "var distance = prompt(\"Entrez la distance que doit parcourir le paquet\");\nvar prix;\n\ndistance = Number(distance);\n\nif(distance <= 1000)\n{\n  prix = 10;\n}\n\n// Si distance est plus grande que 1000,\n// prix doit être 20$\n?\n\n// Si distance est plus grande que 2500,\n// prix doit être 50$\n?\n\nconsole.log(\"Le prix total est: \" + prix + \"$\");",
          "solution"      : "var distance = prompt(\"Entrez la distance que doit parcourir le paquet\");\nvar prix;\n\ndistance = Number(distance);\n\nif(distance <= 1000)\n{\n  prix = 10;\n}\n\n// Si distance est plus grande que 1000,\n// prix doit être 20$\nif(distance > 1000)\n{\n  prix = 20;\n}\n\n// Si distance est plus grande que 2500,\n// prix doit être 50$\nif(distance > 2500)\n{\n  prix = 50;\n}\n\nconsole.log(\"Le prix total est: \" + prix + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-098",
          "name"          : "En forme?",
          "normalizedName": "en forme",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui nous aide à identifier une forme selon le nombre de côtés qu'elle possède. Notre programme pourra reconnaître des formes ayant jusqu'à 6 côtés.</div><ul class=algorithm><li>Une forme ne peut pas avoir 2 côtés ou moins.</li><li>Une forme possédant 3 côtés est un triangle.</li><li>Une forme possédant 4 côtés est un quadrilatère (un carré, un rectangle, etc.).</li><li>Une forme possédant 5 côtés est un pentagone.</li><li>Une forme possédant 6 côtés est un hexagone.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=numberOfSides>nombreCotes</var> est égale à 4. À l'intérieur du bloc de code de cette instruction if, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message <string>\"Cette forme est un quadrilatère!\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=numberOfSides>nombreCotes</var> est égale à 5. À l'intérieur du bloc de code de cette instruction if, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message <string>\"Cette forme est un pentagone!\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=numberOfSides>nombreCotes</var> est égale à 6. À l'intérieur du bloc de code de cette instruction if, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message <string>\"Cette forme est un hexagone!\"</string>.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=numberOfSides>nombreCotes</var> est plus grande que 6. À l'intérieur du bloc de code de cette instruction if, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message <string>\"Je ne reconnais pas cette forme!\"</string>.</li></ol>",
          "boilerplate"   : "var nombreCotes = prompt(\"Combien de cotés la forme possède-t-elle?\");\nnombreCotes = Number(nombreCotes);\n\nif(nombreCotes <= 2)\n{\n  console.log(\"Cette forme n'a pas assez de côtés!\");\n}\nif(nombreCotes == 3)\n{\n  console.log(\"Cette forme est un triangle!\");\n}\n// Vérifiez si la forme est un quadrilatère\n?\n\n// Vérifiez si la forme est un pentagone\n?\n\n// Vérifiez si la forme est un hexagone\n?\n\n// Afficher un message disant que\n// le programme ne reconnaît pas cette forme\n?",
          "solution"      : "var nombreCotes = prompt(\"Combien de cotés la forme possède-t-elle?\");\nnombreCotes = Number(nombreCotes);\n\nif(nombreCotes <= 2)\n{\n  console.log(\"Cette forme n'a pas assez de côtés!\");\n}\nif(nombreCotes == 3)\n{\n  console.log(\"Cette forme est un triangle!\");\n}\n// Vérifiez si la forme est un quadrilatère\nif(nombreCotes == 4)\n{\n  console.log(\"Cette forme est un quadrilatère!\");\n}\n// Vérifiez si la forme est un pentagone\nif(nombreCotes == 5)\n{\n  console.log(\"Cette forme est un pentagone!\");\n}\n// Vérifiez si la forme est un hexagone\nif(nombreCotes == 6)\n{\n  console.log(\"Cette forme est un hexagone!\");\n}\n// Afficher un message disant que\n// le programme ne reconnaît pas cette forme\nif(nombreCotes > 6)\n{\n    console.log(\"Je ne reconnais pas cette forme!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-099",
          "name"          : "En panne sèche",
          "normalizedName": "en panne seche",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui permet d'afficher combien il reste d'essence dans le réservoir d'une voiture. Le programme doit afficher l'un des quatre messages suivants, selon le niveau d'essence dans le réservoir:</div><ul class=algorithm><li>Si le niveau d'essence est plus petit que 5 litres, afficher \"Vite! À la station d'essence!\".</li><li>Si le niveau d'essence est plus grand ou égal à 20 litres, afficher \"Le réservoir est à moitié plein!\".</li><li>Si le niveau d'essence est égal à 40 litres, afficher \"Le réservoir est plein!\".</li><li>Si le niveau d'essence est plus grand que 40 litres, afficher \"Le réservoir déborde!\".</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter les 3 instructions if manquantes. Le bloc de code de chaque instruction if doit donner à la variable <var id=message>message</var> le message approprié.</li></ol>",
          "boilerplate"   : "var niveauEssence = prompt(\"Combien d'essence reste-t-il? (en litres)\");\nvar message = \"Il reste de l'essence\";\n\nniveauEssence = Number(niveauEssence);\n\nif(niveauEssence < 5)\n{\n  message = \"Vite! À la station d'essence!\";\n}\n\n// Vérifiez si niveauEssence est plus grand ou égal à 20\n?\n\n// Vérifiez si niveauEssence est égal à 40\n?\n\n// Vérifiez si niveauEssence est plus grand que 40\n?\n\nconsole.log(message);",
          "solution"      : "var niveauEssence = prompt(\"Combien d'essence reste-t-il? (en litres)\");\nvar message = \"Il reste de l'essence\";\n\nniveauEssence = Number(niveauEssence);\n\nif(niveauEssence < 5)\n{\n  message = \"Vite! À la station d'essence!\";\n}\n\n// Vérifiez si niveauEssence est plus grand ou égal à 20\nif(niveauEssence >= 20)\n{\n  message = \"Le réservoir est à moitié plein!\";\n}\n\n// Vérifiez si niveauEssence est égal à 40\nif(niveauEssence == 40)\n{\n  message = \"Le réservoir est plein!\";\n}\n\n// Vérifiez si niveauEssence est plus grand que 40\nif (niveauEssence > 40)\n{\n  message = \"Le réservoir déborde!\";\n}\n\nconsole.log(message);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-100",
          "name"          : "Une note passable",
          "normalizedName": "une note passable",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui permet de noter le résultat du test d'un élève. Voici comment les notes sont accordées:</div><ul class=algorithm><li>Si le résultat du test est plus petit que 60, l'élève obtient la note D.</li><li>Si le résultat du test est plus grand ou égal à 60, l'élève obtient la note C.</li><li>Si le résultat du test est plus grand ou égal à 75, l'élève obtient la note B.</li><li>Si le résultat du test est plus grand ou égal à 90, l'élève obtient la note A.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter les 4 instructions if afin que le programme fonctionne correctement. Le bloc de code de chaque instruction if doit donner à la variable <var id=grade>note</var> la note appropriée, sous forme de chaîne (ex: <string>\"A\"</string>). <strong>Indice:</strong> Pour que le programme fonctionne correctement, la première instruction if doit vérifier la plus basse note, la deuxième instruction doit vérifier la deuxième plus basse note et ainsi de suite. La dernière instruction if devrait vérifier la meilleure note.</li></ol>",
          "boilerplate"   : "var resultatTest = prompt(\"Entrez le résultat du test (0 à 100)\");\nresultatTest = Number(resultatTest);\n// Cette variable contiendra la note finale\nvar note;\n\n// Créez les quatre instructions if ici\n\nconsole.log(\"La note finale est: \" + note);",
          "solution"      : "var resultatTest = prompt(\"Entrez le résultat du test (0 à 100)\");\nresultatTest = Number(resultatTest);\n// Cette variable contiendra la note finale\nvar note;\n\n// Créez les quatre instructions if ici\nif(resultatTest < 60)\n{\n  note = \"D\";\n}\nif(resultatTest >= 60)\n{\n  note = \"C\";\n}\nif(resultatTest >= 75)\n{\n  note = \"B\";\n}\nif(resultatTest >= 90)\n{\n  note = \"A\";\n}\n\nconsole.log(\"La note finale est: \" + note);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-101",
          "name"          : "Un nombre de grande valeur",
          "normalizedName": "un nombre de grande valeur",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui compare trois nombres et affiche le plus grand. Pour ce faire, nous utilisons une propriété mathématique spéciale, la transitivité. Voici l'algorithme:</div><ol class=algorithm><li>Créer une variable appelée plusGrandNombre et lui donner la valeur du premier nombre.</li><li>Comparer le deuxième nombre avec la variable plusGrandNombre. Si le deuxième nombre est plus grand, mettre la valeur du deuxième nombre dans plusGrandNombre.</li><li>Comparer le troisième nombre avec la variable plusGrandNombre. Si le troisième nombre est plus grand, mettre la valeur du troisième nombre dans plusGrandNombre.</li><li>La valeur finale de plusGrandNombre est le nombre avec la plus grande valeur.</li></ol><div class=text>Pouvez-vous construire un programme pour appliquer cet algorithme?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser une instruction if pour l'étape (b) de l'algorithme.</li><li class=code-item>Utiliser une autre instruction if pour l'étape (c) de l'algorithme.</li></ol>",
          "boilerplate"   : "var premierNombre = 12;\nvar deuxiemeNombre = 7;\nvar troisiemeNombre = 9;\n\nvar plusGrandNombre = premierNombre;\n\n// Vérifiez si deuxiemeNombre est\n// plus grand que plusGrandNombre\n?\n\n// Vérifiez si troisiemeNombre est\n// plus grand que plusGrandNombre\n?\n\nconsole.log(\"Le plus grand nombre est \" + plusGrandNombre);",
          "solution"      : "var premierNombre = 12;\nvar deuxiemeNombre = 7;\nvar troisiemeNombre = 9;\n\nvar plusGrandNombre = premierNombre;\n\n// Vérifiez si deuxiemeNombre est\n// plus grand que plusGrandNombre\nif(deuxiemeNombre > plusGrandNombre)\n{\n  plusGrandNombre = deuxiemeNombre;\n}\n\n// Vérifiez si troisiemeNombre est\n// plus grand que plusGrandNombre\nif(troisiemeNombre > plusGrandNombre)\n{\n  plusGrandNombre = troisiemeNombre;\n}\n\nconsole.log(\"Le plus grand nombre est \" + plusGrandNombre);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-005",
          "name"          : "Quiz 5",
          "description"   : "Les booléens et les instructions if",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-005_q-01",
              "question": "<div>Vrai ou faux. Les booléens ont seulement deux valeurs possibles.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-005_q-01_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "<code>true</code> (vrai) et <code>false</code> (faux) sont les deux seules valeurs booléennes possibles."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-005_q-02",
              "question": "<div>Quelle est la valeur finale de la variable <var>resultat</var>?</div>\n<pre class=\"language-javascript\"><code>var premier = 4;\nvar deuxieme = 2;\nvar resultat = premier &gt; deuxieme;</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>6</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-005_q-02_a-02",
                  "value"      : 2,
                  "answer"     : "<div><code>true</code></div>",
                  "explanation": "L'opérateur plus grand (&gt;) retourne une valeur booléenne: <code>true</code> si la valeur de gauche est plus grande que celle de droite, <code>false</code> sinon."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-02_a-03",
                  "value" : 0,
                  "answer": "<div>2</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-02_a-04",
                  "value" : 0,
                  "answer": "<div><code>false</code></div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-005_q-03",
              "question": "<div>Quelle est la valeur finale de la variable <var>resultat</var>?</div>\n<pre class=\"language-javascript\"><code>var premier = \"EduCode\";\nvar deuxieme = \"educode\";\nvar resultat = premier == deuxieme;</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-03_a-01",
                  "value" : 0,
                  "answer": "<div><code>true</code></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>EduCodeeducode</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-005_q-03_a-03",
                  "value"      : 2,
                  "answer"     : "<div><code>false</code></div>",
                  "explanation": "L'opérateur d'égalité (==) retourne une valeur booléenne: <code>true</code> si les deux valeurs sont égales, <code>false</code> si elles sont différentes. Les majuscules et les minuscules sont prises en compte."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>educodeEduCode</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-005_q-04",
              "question": "<div>Choisissez toutes les expressions qui retournent une valeur booléenne.</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-005_q-04_a-01",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>4 &lt; 5</code></pre>",
                  "explanation": "L'opérateur plus petit (&lt;) est utilisé pour comparer deux valeurs et retourne une valeur booléenne."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-04_a-02",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>2 + 5</code></pre>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-005_q-04_a-03",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>5 == 3</code></pre>",
                  "explanation": "L'opérateur d'égalité (==) est utilisé pour comparer deux valeurs et retourne une valeur booléenne."
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-005_q-04_a-04",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>(7 + 2) != (3 - 1)</code></pre>",
                  "explanation": "L'opérateur d'inégalité (!=) est utilisé pour comparer deux valeurs et retourne une valeur booléenne."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-04_a-05",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>1 * 3</code></pre>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-005_q-05",
              "question": "<div>Quelle est la sortie de ce programme?</div>\n<pre class=\"language-javascript\"><code>var maVariable = 5;\n\nif(maVariable &gt; 4)\n{\n  maVariable = maVariable + 1;\n  console.log(\"maVariable est égale à \" + maVariable);\n}\n\nconsole.log(\"maVariable est égale à \" + maVariable);</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>maVariable est égale à 5</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>maVariable est égale à 6</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-05_a-03",
                  "value" : 0,
                  "answer": "<div>Deux messages: <samp>maVariable est égale à 5</samp> et <samp>maVariable est égale à 6</samp></div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-005_q-05_a-04",
                  "value"      : 2,
                  "answer"     : "<div>Deux messages: <samp>maVariable est égale à 6</samp> et <samp>maVariable est égale à 6</samp></div>",
                  "explanation": "Le message à l'intérieur de l'instruction if est affiché, puisque <code>maVariable &gt; 4</code> est vrai. Le message après l'instruction if est toujours affiché."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-005_q-06",
              "question": "<div>Quelle est la sortie de ce programme?</div>\n<pre class=\"language-javascript\"><code>var maVariable = 9;\n\nif(maVariable &gt; 4)\n{\n  console.log(\"maVariable est plus grande que 4\");\n}\nif(maVariable &gt; 8)\n{\n  console.log(\"maVariable est plus grande que 8\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-005_q-06_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Deux messages: <samp>maVariable est plus grande que 4</samp> et <samp>maVariable est plus grande que 8</samp></div>",
                  "explanation": "Le message à l'intérieur de la première instruction if est affiché puisque <code>maVariable &gt; 4</code> est vrai. Le message à l'intérieur de la deuxième instruction if est aussi affiché puisque <code>maVariable &gt; 8</code> est aussi vrai."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>maVariable est plus grande que 4</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>maVariable est plus grande que 8</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>Aucun message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-005_q-07",
              "question": "<div>Qu'arrive-t-il si un point-virgule est mis immédiatement après la condition d'une instruction if? ex: <code>if(maVariable &gt; 5);</code></div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-07_a-01",
                  "value" : 0,
                  "answer": "<div>Le bloc de code est ignoré.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-005_q-07_a-02",
                  "value"      : 2,
                  "answer"     : "<div>Le bloc de code est toujours exécuté, peu importe le résultat de la condition.</div>",
                  "explanation": "Le point-virgule fait en sorte que l'instruction if exécute un bloc de code vide. Le bloc de code de l'instruction if est alors toujours exécuté, plutôt que d'être exécuté seulement lorsque la condition est vraie."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>L'instruction if fonctionne normalement.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-005_q-07_a-04",
                  "value" : 0,
                  "answer": "<div>Le programme s'arrête immédiatement.</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 5",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-263",
          "name"          : "Les instructions else et else if",
          "normalizedName": "les instructions else et else if",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-263_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-263_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-11",
          "name"          : "Projet 11 - Offrir une alternative",
          "normalizedName": "projet 11 - offrir une alternative",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-102",
          "name"          : "Le paquet le plus lourd",
          "normalizedName": "le paquet le plus lourd",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-102_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-102_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=package1>paquet1</var> est plus grande que la valeur de <var id=package2>paquet2</var>. À l'intérieur du bloc de code de cette instruction if, utilisez une instruction <concept ref=console-log>console.log()</concept> qui affiche le message: <string>\"paquet1 est plus lourd que paquet2\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=package1>paquet1</var> est plus petite que la valeur de <var id=package2>paquet2</var>. À l'intérieur du bloc de code de cette instruction if, utilisez une instruction <concept ref=console-log>console.log()</concept> qui affiche le message: <string>\"paquet2 est plus lourd que paquet1\"</string>.</li></ol>",
          "boilerplate"   : "var paquet1 = prompt(\"Entrez le poids du premier paquet:\");\nvar paquet2 = prompt(\"Entrez le poids du deuxième paquet:\");\n\npaquet1 = Number(paquet1);\npaquet2 = Number(paquet2);\n\n// Vérifiez si paquet1 est\n// plus lourd que paquet2\n?\n\n// Vérifiez si paquet1 est\n// plus léger que paquet2\n?",
          "solution"      : "var paquet1 = prompt(\"Entrez le poids du premier paquet:\");\nvar paquet2 = prompt(\"Entrez le poids du deuxième paquet:\");\n\npaquet1 = Number(paquet1);\npaquet2 = Number(paquet2);\n\n// Vérifiez si paquet1 est\n// plus lourd que paquet2\nif(paquet1 > paquet2)\n{\n  console.log(\"paquet1 est plus lourd que paquet2\");\n}\n\n// Vérifiez si paquet1 est\n// plus léger que paquet2\nif(paquet1 < paquet2)\n{\n  console.log(\"paquet2 est plus lourd que paquet1\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-103",
          "name"          : "Une alternative",
          "normalizedName": "une alternative",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-103_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-103_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer la deuxième instruction if par une instruction else.</li></ol>",
          "boilerplate"   : "var paquet1 = prompt(\"Entrez le poids du premier paquet:\");\nvar paquet2 = prompt(\"Entrez le poids du deuxième paquet:\");\n\npaquet1 = Number(paquet1);\npaquet2 = Number(paquet2);\n\nif(paquet1 > paquet2)\n{\n  console.log(\"paquet1 est plus lourd que paquet2\");\n}\nif(paquet1 < paquet2)\n{\n  console.log(\"paquet2 est plus lourd que paquet1\");\n}",
          "solution"      : "var paquet1 = prompt(\"Entrez le poids du premier paquet:\");\nvar paquet2 = prompt(\"Entrez le poids du deuxième paquet:\");\n\npaquet1 = Number(paquet1);\npaquet2 = Number(paquet2);\n\nif(paquet1 > paquet2)\n{\n  console.log(\"paquet1 est plus lourd que paquet2\");\n}\nelse\n{\n  console.log(\"paquet2 est plus lourd que paquet1\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-104",
          "name"          : "Avec une instruction else",
          "normalizedName": "avec une instruction else",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=packageWeight>poids</var> est plus grande que 8.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else. Rappelez-vous, les instructions else n'ont pas de condition!</li></ol>",
          "boilerplate"   : "var poids = prompt(\"Entrez le poids du paquet:\");\n\npoids = Number(poids);\n\n?\n{\n  console.log(\"Le paquet pèse plus de 8 kilogrammes\");\n}\n?\n{\n  console.log(\"Le paquet pèse 8 kilogrammes ou moins\");\n}",
          "solution"      : "var poids = prompt(\"Entrez le poids du paquet:\");\n\npoids = Number(poids);\n\nif(poids > 8)\n{\n  console.log(\"Le paquet pèse plus de 8 kilogrammes\");\n}\nelse\n{\n  console.log(\"Le paquet pèse 8 kilogrammes ou moins\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-105",
          "name"          : "Une machine, trois conditions",
          "normalizedName": "une machine trois conditions",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-105_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-105_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer la première instruction else par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=package1>paquet1</var> est plus petite que la valeur de <var id=package2>paquet2</var>. Vous n'avez pas besoin de changer le bloc de code de cette instruction if.</li><li class=code-item>Remplacer la deuxième instruction else par une autre instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=package1>paquet1</var> est égale à la valeur de <var id=package2>paquet2</var>. Vous n'avez pas besoin de changer le bloc de code de cette instruction if.</li></ol>",
          "boilerplate"   : "var paquet1 = prompt(\"Entrez le poids du premier paquet:\");\nvar paquet2 = prompt(\"Entrez le poids du deuxième paquet:\");\n\npaquet1 = Number(paquet1);\npaquet2 = Number(paquet2);\n\nif(paquet1 > paquet2)\n{\n  console.log(\"paquet1 est plus lourd que paquet2!\");\n}\nelse\n{\n  console.log(\"paquet2 est plus lourd que paquet1!\");\n}\nelse\n{\n  console.log(\"Les deux paquets ont le même poids!\");\n}",
          "solution"      : "var paquet1 = prompt(\"Entrez le poids du premier paquet:\");\nvar paquet2 = prompt(\"Entrez le poids du deuxième paquet:\");\n\npaquet1 = Number(paquet1);\npaquet2 = Number(paquet2);\n\nif(paquet1 > paquet2)\n{\n  console.log(\"paquet1 est plus lourd que paquet2!\");\n}\nif(paquet1 < paquet2)\n{\n  console.log(\"paquet2 est plus lourd que paquet1!\");\n}\nif(paquet1 == paquet2)\n{\n  console.log(\"Les deux paquets ont le même poids!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>\n<h3 class=\"title\" ref=\"else statement restrictions\">Restriction des instructions else</h3>\n<div class=\"text\">Puisqu'une instruction else dépend de la <concept ref=\"condition\">condition</concept> d'une <concept ref=\"if statement\">instruction if</concept> et que la condition ne peut prendre que deux valeurs, nous ne pouvons ajouter qu'une seule <concept ref=\"else statement\">instruction else</concept> à chaque instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else incorrecte</div><pre class=\"codeBlock\">var poids = 8;\nif(poids > 8)\n{\n  // seulement exécuté si la condition est vraie\n  console.log(\"Ce paquet est très lourd!\");\n}\nelse\n{\n  // seulement exécuté si la condition est fausse\n  console.log(\"Ce paquet est léger!\");\n}\nelse // incorrect: il peut seulement y avoir une seule instruction else\n{\n  console.log(\"Ce paquet est super léger!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-106",
          "name"          : "Il neige!",
          "normalizedName": "il neige!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui peut prévoir s'il va neiger. Pour ce faire, le programme demande à l'utilisateur d'entrer une température, en degrés Celsius. Si la température est plus petite ou égale à zéro, alors il va neiger.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=temperature>temperature</var> est plus petite ou égale à 0. <strong>Indice:</strong> l'opérateur plus petit ou égal est &lt;=</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else. Rappelez-vous, les instructions else n'ont pas de condition!</li></ol>",
          "boilerplate"   : "var temperature = prompt(\"Quelle température fait-il à l'extérieur? (en Celsius)\");\n\ntemperature = Number(temperature);\n\n?\n{\n  console.log(\"Il neige!\");\n}\n?\n{\n  console.log(\"Pas de neige en vue!\");\n}",
          "solution"      : "var temperature = prompt(\"Quelle température fait-il à l'extérieur? (en Celsius)\");\n\ntemperature = Number(temperature);\n\nif(temperature <= 0)\n{\n  console.log(\"Il neige!\");\n}\nelse\n{\n  console.log(\"Pas de neige en vue!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-107",
          "name"          : "En cas d'erreur",
          "normalizedName": "en cas derreur",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ce programme convertit les livres en kilogrammes. Présentement, si un nombre négatif est entré, le programme donne un résultat incorrect. Utilisons une instruction if et une instruction else pour protéger notre programme des entrées incorrectes.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=pounds>livres</var> est plus grande ou égale à 0.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else. À l'intérieur du bloc de code de cette instruction else, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message: <string>\"Le poids ne peut pas être négatif!\"</string>.</li></ol>",
          "boilerplate"   : "var livres = prompt(\"Entrez le nombre de livres à convertir:\");\nvar kilogrammes;\n\nlivres = Number(livres);\n\n// Vérifiez si livres est\n// plus grand ou égal à 0\n?\n{\n  kilogrammes = livres / 2.2;\n  console.log(livres + \" livres valent \" + kilogrammes + \" kilogrammes\");\n}\n// Écrivez l'instruction else ici\n?",
          "solution"      : "var livres = prompt(\"Entrez le nombre de livres à convertir:\");\nvar kilogrammes;\n\nlivres = Number(livres);\n\n// Vérifiez si livres est\n// plus grand ou égal à 0\nif(livres >= 0)\n{\n  kilogrammes = livres / 2.2;\n  console.log(livres + \" livres valent \" + kilogrammes + \" kilogrammes\");\n}\n// Écrivez l'instruction else ici\nelse\n{\n  console.log(\"Le poids ne peut pas être négatif!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-108",
          "name"          : "Un record difficile à battre!",
          "normalizedName": "un record difficile a battre!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Les jeux utilisent souvent les instructions if pour vérifier diverses conditions, comme celles qui déterminent si le joueur a gagné, si un objet est entré en collision avec un autre, etc. Utilisons une instruction if pour déterminer si l'utilisateur a battu le record dans un jeu.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=currentScore>pointage</var> est plus grande que la valeur de <var id=highScore>record</var>. À l'intérieur du bloc de code de cette instruction if, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message: <string>\"Vous avez battu le record!\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else. À l'intérieur du bloc de code de cette instruction else, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message: <string>\"Vous n'avez pas battu le record!\"</string>.</li></ol>",
          "boilerplate"   : "var pointage = prompt(\"Entrez votre pointage\");\npointage = Number(pointage);\nvar record = 1000;\n\n// Créez l'instruction if ici\n?\n\n// Créez l'instruction else ici\n?",
          "solution"      : "var pointage = prompt(\"Entrez votre pointage\");\npointage = Number(pointage);\nvar record = 1000;\n\n// Créez l'instruction if ici\nif(pointage > record)\n{\n  console.log(\"Vous avez battu le record!\");\n}\n// Créez l'instruction else ici\nelse\n{\n  console.log(\"Vous n'avez pas battu le record!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-109",
          "name"          : "Est-ce un triangle?",
          "normalizedName": "est-ce un triangle",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui nous permet de déterminer si trois angles forment un triangle. Rappelons-nous que trois angles peuvent seulement former un triangle si leur somme est égale à 180.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer les trois premiers points d'interrogation par des instructions qui donnent à <var id=firstAngle>premierAngle</var>, <var id=secondAngle>deuxiemeAngle</var> et <var id=thirdAngle>troisiemeAngle</var> leurs valeurs converties en nombres. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une nouvelle variable appelée <var id=sum>somme</var> et lui donner la somme de <var id=firstAngle>premierAngle</var>, <var id=secondAngle>deuxiemeAngle</var> et <var id=thirdAngle>troisiemeAngle</var>.</li><li class=code-item>Remplacer le cinquième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=sum>somme</var> est égale à 180. À l'intérieur du bloc de code de cette instruction if, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message: <string>\"Les angles forment un triangle!\"</string>.</li><li class=code-item>Remplacer le dernier point d'interrogation par une instruction else. À l'intérieur du bloc de code de cette instruction else, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message: <string>\"Ces angles ne forment pas un triangle!\"</string>.</li></ol>",
          "boilerplate"   : "var premierAngle = prompt(\"Entrez la valeur du premier angle\");\nvar deuxiemeAngle = prompt(\"Entrez la valeur du deuxième angle\");\nvar troisiemeAngle = prompt(\"Entrez la valeur du troisième angle\");\n\n// Convertissez premierAngle, deuxiemeAngle\n// et troisiemeAngle en nombres\n?\n?\n?\n\n// Calculez la somme\n?\n\n// Écrivez l'instruction if ici\n?\n\n// Écrivez l'instruction else ici\n?",
          "solution"      : "var premierAngle = prompt(\"Entrez la valeur du premier angle\");\nvar deuxiemeAngle = prompt(\"Entrez la valeur du deuxième angle\");\nvar troisiemeAngle = prompt(\"Entrez la valeur du troisième angle\");\n\n// Convertissez premierAngle, deuxiemeAngle\n// et troisiemeAngle en nombres\npremierAngle = Number(premierAngle);\ndeuxiemeAngle = Number(deuxiemeAngle);\ntroisiemeAngle = Number(troisiemeAngle);\n\n// Calculez la somme\nvar somme = premierAngle + deuxiemeAngle + troisiemeAngle;\n\n// Écrivez l'instruction if ici\nif(somme == 180)\n{\n  console.log(\"Ces angles forment un triangle!\");\n}\n// Écrivez l'instruction else ici\nelse\n{\n  console.log(\"Ces angles ne forment pas un triangle!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>\n<h3 class=\"title\" ref=\"console.log()\">Instruction console.log()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> console.log() permet de créer une <concept ref=\"output\">sortie</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>, qui est habituellement une <concept ref=\"string\">chaîne</concept>. Le paramètre est écrit dans la sortie du programme, c'est-à-dire dans la console.</div><div class=\"text\">Remarquez que la chaîne donnée comme paramètre peut aussi être la <concept ref=\"concatenation\">concaténation</concept> de plusieurs chaînes.</div>\n<div class=\"code-sample-title\">Exemples de console.log()</div><pre class=\"codeBlock\">console.log(\"Bonjour!\"); // affiche: Bonjour!\nconsole.log(\"Bonjour \" + \"le monde!\"); // affiche la chaîne concaténée: Bonjour le monde!\nconsole.log(Bonjour!); // incorrect: la chaîne doit être entourée de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-110",
          "name"          : "Le prochain nombre",
          "normalizedName": "le prochain nombre",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui devine le quatrième nombre qui vient après une séquence de trois nombres. Par exemple, si l'utilisateur entre les nombres 2, 4 et 6, le programme affiche que le prochain nombre est 8. Pour ce faire, nous pouvons utiliser l'algorithme suivant:</div><ol class=algorithm><li>Si le deuxième nombre moins le premier nombre est égal au troisième nombre moins le deuxième, alors le quatrième nombre est égale au troisième nombre plus le deuxième moins le premier.</li><li>Si l'étape (a) est fausse, alors le quatrième nombre est égal au troisième nombre divisé par le résultat du premier nombre divisé par le deuxième.</li></ol><div class=text>Essayez d'exécuter le programme avec les valeurs suivantes:</div><div class=text>Si nombre1 est 1, que nombre2 est 2 et que nombre3 est 3, le programme devrait afficher \"Le quatrième nombre de la séquence est: 4\".</div><div class=text>Si nombre1 est 3, que nombre2 est 6 et que nombre3 est 9, le programme devrait afficher \"Le quatrième nombre de la séquence est: 12\".</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si (<var id=secondNumber>nombre2</var> - <var id=firstNumber>nombre1</var>) est égal à (<var id=thirdNumber>nombre3</var> - <var id=secondNumber>nombre2</var>). Le bloc de code de cette instruction if doit donner à la variable <var id=fourthNumber>nombre4</var> le résultat de l'équation: <var id=thirdNumber>nombre3</var> + (<var id=secondNumber>nombre2</var> - <var id=firstNumber>nombre1</var>).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else. Le bloc de code de cette instruction else doit donner à la variable  <var id=fourthNumber>nombre4</var> le résultat de l'équation: <var id=thirdNumber>nombre3</var> / (<var id=firstNumber>nombre1</var> / <var id=secondNumber>nombre2</var>).</li><li class=code-item>L'ordre des opérations (PEDMAS) est essentiel dans cet exercice!</li></ol>",
          "boilerplate"   : "var nombre1 = prompt(\"Entrez le premier nombre de la séquence\");\nvar nombre2 = prompt(\"Entrez le deuxième nombre de la séquence\");\nvar nombre3 = prompt(\"Entrez le troisième nombre de la séquence\");\nvar nombre4;\n\nnombre1 = Number(nombre1);\nnombre2 = Number(nombre2);\nnombre3 = Number(nombre3);\n\n// Écrivez l'instruction if ici\n?\n\n// Écrivez l'instruction else ici\n?\n\nconsole.log(\"Le quatrième nombre de la séquence est: \" + nombre4);",
          "solution"      : "var nombre1 = prompt(\"Entrez le premier nombre de la séquence\");\nvar nombre2 = prompt(\"Entrez le deuxième nombre de la séquence\");\nvar nombre3 = prompt(\"Entrez le troisième nombre de la séquence\");\nvar nombre4;\n\nnombre1 = Number(nombre1);\nnombre2 = Number(nombre2);\nnombre3 = Number(nombre3);\n\n// Écrivez l'instruction if ici\nif((nombre2 - nombre1) == (nombre3 - nombre2))\n{\n  nombre4 = nombre3 + (nombre2 - nombre1);\n}\n// Écrivez l'instruction else ici\nelse\n{\n  nombre4 = nombre3 / (nombre1 / nombre2);\n}\n\nconsole.log(\"Le quatrième nombre de la séquence est: \" + nombre4);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-12",
          "name"          : "Projet 12 - Ajouter des options",
          "normalizedName": "projet 12 - ajouter des options",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-111",
          "name"          : "Une nouvelle sorte de machine",
          "normalizedName": "une nouvelle sorte de machine",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-111_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-111_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une condition qui vérifie si <var id=package1>paquet1</var> est plus petit que <var id=package2>paquet2</var>.</li></ol>",
          "boilerplate"   : "var paquet1 = prompt(\"Entrez le poids du premier paquet:\");\nvar paquet2 = prompt(\"Entrez le poids du deuxième paquet:\");\n\npaquet1 = Number(paquet1);\npaquet2 = Number(paquet2);\n\nif(paquet1 > paquet2)\n{\n  console.log(\"paquet1 est plus lourd que paquet2!\");\n}\nelse if(?)\n{\n  console.log(\"paquet2 est plus lourd que paquet1!\");\n}\nelse\n{\n  console.log(\"Les deux paquets ont le même poids!\");\n}",
          "solution"      : "var paquet1 = prompt(\"Entrez le poids du premier paquet:\");\nvar paquet2 = prompt(\"Entrez le poids du deuxième paquet:\");\n\npaquet1 = Number(paquet1);\npaquet2 = Number(paquet2);\n\nif(paquet1 > paquet2)\n{\n  console.log(\"paquet1 est plus lourd que paquet2!\");\n}\nelse if(paquet1 < paquet2)\n{\n  console.log(\"paquet2 est plus lourd que paquet1!\");\n}\nelse\n{\n  console.log(\"Les deux paquets ont le même poids!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-112",
          "name"          : "Livraison prioritaire",
          "normalizedName": "livraison prioritaire",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Aidons Octo Poste à construire un programme qui estime le temps de livraison des paquets. La distance parcourue par les paquets a une influence sur le temps de livraison.</div><ul class=algorithm><li>Les paquets qui parcourent <strong>moins de 1000 km</strong> arrivent en <strong>une journée</strong>.</li><li>Les paquets qui parcourent <strong>plus de 1000 km mais moins de 2000 km</strong> arrivent en <strong>deux jours</strong>.</li><li>Les paquets qui parcourent <strong>plus de 2000 km mais moins de 5000 km</strong> arrivent en <strong>une semaine</strong>.</li><li>Les paquets qui parcourent <strong>plus de 5000 km</strong> arrivent en <strong>deux semaines ou plus</strong>.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si <var id=distance>distance</var> est plus petite que 1000.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si <var id=distance>distance</var> est plus petite que 2000.</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si <var id=distance>distance</var> est plus petite que 5000.</li></ol>",
          "boilerplate"   : "var distance = prompt(\"Entrez la distance jusqu'à la destination (en km)\");\n\ndistance = Number(distance);\n\nif(?)\n{\n  console.log(\"Le paquet arrivera demain.\");\n}\nelse if(?)\n{\n  console.log(\"Le paquet arrivera dans 2 jours.\");\n}\nelse if(?)\n{\n  console.log(\"Le paquet arrivera dans 1 semaine.\");\n}\nelse\n{\n  console.log(\"Le paquet arrivera dans 2 semaines ou plus.\");\n}",
          "solution"      : "var distance = prompt(\"Entrez la distance jusqu'à la destination (en km)\");\n\ndistance = Number(distance);\n\nif(distance < 1000)\n{\n  console.log(\"Le paquet arrivera demain.\");\n}\nelse if(distance < 2000)\n{\n  console.log(\"Le paquet arrivera dans 2 jours.\");\n}\nelse if(distance < 5000)\n{\n  console.log(\"Le paquet arrivera dans 1 semaine.\");\n}\nelse\n{\n  console.log(\"Le paquet arrivera dans 2 semaines ou plus.\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-113",
          "name"          : "Trop de messages!",
          "normalizedName": "trop de messages!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-113_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-113_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer la deuxième instruction if par une instruction else if. Vous n'avez pas besoin de changer la condition.</li></ol>",
          "boilerplate"   : "var poids = prompt(\"Entrez le poids du paquet:\");\n\npoids = Number(poids);\n\nif(poids > 8)\n{\n  console.log(\"Le paquet pèse plus de 8 kilogrammes!\");\n}\nif(poids > 4)\n{\n  console.log(\"Le paquet pèse plus de 4 kilogrammes!\");\n}",
          "solution"      : "var poids = prompt(\"Entrez le poids du paquet:\");\n\npoids = Number(poids);\n\nif(poids > 8)\n{\n  console.log(\"Le paquet pèse plus de 8 kilogrammes!\");\n}\nelse if(poids > 4)\n{\n  console.log(\"Le paquet pèse plus de 4 kilogrammes!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"comparing if and else if\">Instructions if multiples et instructions else if</h3>\n<div class=\"text\">Les <concept ref=\"if statement\">instructions if</concept> et les <concept ref=\"else if statement\">instructions else if</concept> fonctionnent un peu de la même façon, mais elles ont une différence importante. Lorsque nous écrivons plusieurs instructions if, nous pouvons contrôler plusieurs <concept ref=\"code block\">blocs de code</concept> de façon indépendante, car le résultat d'une instruction if n'affecte pas les autres instructions if. Avec les instructions else if, les blocs de code sont dépendants, de sorte qu'un seul bloc de code sera exécuté.</div>\n<div class=\"code-sample-title\">Exemple avec plusieurs instructions if</div><pre class=\"codeBlock\">var poids = 17;\n\nif(poids > 4)\n{\n  // ce bloc de code est exécuté\n  console.log(\"poids est plus grand que 4!\");\n}\nif(poids > 8)\n{\n  // ce bloc de code est exécuté aussi\n  console.log(\"poids est plus grand que 8!\");\n}\nif(poids > 16)\n{\n  // ce bloc de code est exécuté aussi\n  console.log(\"poids est plus grand que 16!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, nous obtenons trois messages: &quot;poids est plus grand que 4!&quot;, &quot;poids est plus grand que 8!&quot; et &quot;poids est plus grand que 16!&quot;. Même si la première instruction if est <concept ref=\"boolean\">vraie</concept>, les deuxième et troisième instructions if sont tout de même exécutées.</div>\n<div class=\"code-sample-title\">Exemple avec instructions else if</div><pre class=\"codeBlock\">var poids = 17;\n\nif(poids > 4)\n{\n  // ce bloc de code est exécuté\n  console.log(\"poids est plus grand que 4!\");\n}\nelse if(poids > 8)\n{\n  // ce bloc de code n'est PAS exécuté, car le premier bloc a été exécuté\n  console.log(\"poids est plus grand que 8!\");\n}\nelse if(poids > 16)\n{\n  // ce bloc de code n'est PAS exécuté, car le premier bloc a été exécuté\n  console.log(\"poids est plus grand que 16!\");\n}</pre>\n<div class=\"text\">Si nous remplaçons les deuxième et troisième instructions if par des instructions else if, comme dans l'exemple ci-dessus, nous obtenons un seul message: &quot;poids est plus grand que 4!&quot;. Dès que la condition d'une instruction if ou else if est vraie, nous cessons d'exécuter les autres instructions.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-114",
          "name"          : "L'ordre des conditions",
          "normalizedName": "lordre des conditions",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Si vous exécutez le programme dans l'éditeur de code, vous remarquez que le message \"Le paquet pèse entre 32 et 64 kilogrammes!\" est toujours affiché. Nous vérifions la condition \"poids est plus petit que 64\" avant de vérifier si \"poids est plus petit que 16\". Si un paquet pèse moins de 16 kg, il pèse aussi moins de 64 kg. Pouvez-vous réparer le programme en échangeant les conditions?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer la condition de l'instruction if par une condition qui vérifie si <var id=packageWeight>poids</var> est plus petit que 16. Remplacez l'instruction <concept ref=console-log>console.log()</concept> de l'instruction if pour qu'elle affiche: <string>\"Le paquet pèse moins de 16 kilogrammes!\"</string>\n  </li><li class=code-item>Remplacer la condition de la <strong>dernière</strong> instruction else if par une condition qui vérifie si <var id=packageWeight>poids</var> est plus petit que 64. Remplacez l'instruction <concept ref=console-log>console.log()</concept> de cette instruction else if pour qu'elle affiche: \n    <string>\"Le paquet pèse entre 32 et 64 kilogrammes!\"</string>\n  </li></ol>",
          "boilerplate"   : "var poids = prompt(\"Entrez le poids d'un paquet de moins de 64 kg\");\n\npoids = Number(poids);\n\nif(poids < 64)\n{\n  console.log(\"Le paquet pèse entre 32 et 64 kilogrammes!\");\n}\nelse if(poids < 32)\n{\n  console.log(\"Le paquet pèse entre 16 et 31 kilogrammes!\");\n}\nelse if(poids < 16)\n{\n  console.log(\"Le paquet pèse moins de 16 kilogrammes!\");\n}",
          "solution"      : "var poids = prompt(\"Entrez le poids d'un paquet de moins de 64 kg\");\n\npoids = Number(poids);\n\nif(poids < 16)\n{\n  console.log(\"Le paquet pèse moins de 16 kilogrammes!\");\n}\nelse if(poids < 32)\n{\n  console.log(\"Le paquet pèse entre 16 et 31 kilogrammes!\");\n}\nelse if(poids < 64)\n{\n  console.log(\"Le paquet pèse entre 32 et 64 kilogrammes!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-115",
          "name"          : "Le marché international",
          "normalizedName": "le marche international",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-115_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-115_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=destination>destination</var> est égale à <string>\"France\"</string>. À l'intérieur du bloc de code de cette instruction else if, utilisez une instruction <concept ref=console-log>console.log()</concept> qui affiche le message: <string>\"Paquet pour la France!\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else. À l'intérieur du bloc de code de cette instruction else, utilisez une instruction <concept ref=console-log>console.log()</concept> qui affiche le message: <string>\"Destination inconnue!\"</string>.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Entrez la destination du paquet:\");\n\nif(destination == \"Canada\")\n{\n  console.log(\"Paquet pour le Canada!\");\n}\n// Créez une instruction else if ici\n?\n\n// Créez une instruction else ici\n?",
          "solution"      : "var destination = prompt(\"Entrez la destination du paquet:\");\n\nif(destination == \"Canada\")\n{\n  console.log(\"Paquet pour le Canada!\");\n}\n// Créez une instruction else if ici\nelse if(destination == \"France\")\n{\n  console.log(\"Paquet pour la France!\");\n}\n// Créez une instruction else ici\nelse\n{\n  console.log(\"Destination inconnue!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-116",
          "name"          : "Une portée mondiale",
          "normalizedName": "une portee mondiale",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-116_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-116_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=destination>destination</var> est égale à <string>\"États-Unis\"</string>. À l'intérieur du bloc de code de cette instruction else if, utilisez une instruction <concept ref=console-log>console.log()</concept> qui affiche le message: <string>\"Paquet pour les États-Unis!\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une autre instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=destination>destination</var> est égale à <string>\"Chine\"</string>. À l'intérieur du bloc de code de cette instruction else if, utilisez une instruction <concept ref=console-log>console.log()</concept> qui affiche le message: <string>\"Paquet pour la Chine!\"</string>.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Entrez la destination du paquet:\");\n\nif(destination == \"Canada\")\n{\n  console.log(\"Paquet pour le Canada!\");\n}\nelse if(destination == \"France\")\n{\n  console.log(\"Paquet pour la France!\");\n}\n// Vérifiez si la destination est \"États-Unis\"\n?\n\n// Vérifiez si la destination est \"Chine\"\n?\n\nelse\n{\n  console.log(\"Destination inconnue!\");\n}",
          "solution"      : "var destination = prompt(\"Entrez la destination du paquet:\");\n\nif(destination == \"Canada\")\n{\n  console.log(\"Paquet pour le Canada!\");\n}\nelse if(destination == \"France\")\n{\n  console.log(\"Paquet pour la France!\");\n}\n// Vérifiez si la destination est \"États-Unis\"\nelse if(destination == \"États-Unis\")\n{\n  console.log(\"Paquet pour les États-Unis!\");\n}\n// Vérifiez si la destination est \"Chine\"\nelse if(destination == \"Chine\")\n{\n  console.log(\"Paquet pour la Chine!\");\n}\nelse\n{\n  console.log(\"Destination inconnue!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"conditional statement restrictions\">Restrictions des instructions conditionnelles</h3>\n<div class=\"text\">Les <concept ref=\"conditional statements\">instructions conditionnelles</concept> ont 3 restrictions importantes:</div><div class=\"text\">1- Une instruction conditionnelle doit toujours commencer par une <concept ref=\"if statement\">instruction if</concept>.</div><div class=\"text\">2- Une instruction conditionnelle peut avoir n'importe quel nombre d'<concept ref=\"else if statement\">instructions else if</concept>.</div><div class=\"text\">3- Une instruction conditionnelle peut avoir une <concept ref=\"else statement\">instruction else</concept>, mais elle doit apparaître en dernier.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle complexe</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15) // l'instruction if doit être la première\n{\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10) // suivie d'une instruction else if\n{\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5) // puis d'une autre instruction else if\n{\n  console.log(\"maVariable est plus grande que 5!\");\n}\nelse // l'instruction else doit être la dernière\n{\n  console.log(\"maVariable est plus petite ou égale à 5!\");\n}</pre>\n<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-117",
          "name"          : "À l'aéroport",
          "normalizedName": "a laeroport",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons une balance pour peser les bagages des passagers à un aéroport. Voici comment elle doit fonctionner:</div><ul class=algorithm><li>Les bagages pesant <strong>moins de 50 kg</strong> n'ont pas de frais supplémentaires.</li><li>Les bagages pesant <strong>plus de 50 kg</strong> ont des frais supplémentaires de 10$.</li><li>Les bagages pesant <strong>plus de 120 kg</strong> sont refusés.</li></ul><div class=text>Pouvez-vous compléter le programme?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=baggageWeight>poidsBagages</var> est plus grande que 120.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=baggageWeight>poidsBagages</var> est plus grande que 50.</li></ol>",
          "boilerplate"   : "var poidsBagages = prompt(\"Entrez le poids de vos bagages (en kg)\");\n\npoidsBagages = Number(poidsBagages);\n\nif(?)\n{\n  console.log(\"Vos bagages sont trop lourds!\");\n}\nelse if(?)\n{\n  console.log(\"Vos bagages pèsent plus de 50kg, des frais de 10$ s'ajoutent.\");\n}\nelse\n{\n  console.log(\"Il n'y a pas de frais supplémentaires pour ces bagages.\");\n}",
          "solution"      : "var poidsBagages = prompt(\"Entrez le poids de vos bagages (en kg)\");\n\npoidsBagages = Number(poidsBagages);\n\nif(poidsBagages > 120)\n{\n  console.log(\"Vos bagages sont trop lourds!\");\n}\nelse if(poidsBagages > 50)\n{\n  console.log(\"Vos bagages pèsent plus de 50kg, des frais de 10$ s'ajoutent.\");\n}\nelse\n{\n  console.log(\"Il n'y a pas de frais supplémentaires pour ces bagages.\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-118",
          "name"          : "Bonjour, le monde!",
          "normalizedName": "bonjour le monde!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui traduit la phrase \"Bonjour, le monde!\" en diverses langues. Nous utilisons une instruction if avec plusieurs instructions else if pour déterminer la langue choisie par l'utilisateur.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=lang>langue</var> est égale à <string>\"es\"</string>. À l'intérieur du bloc de code de cette instruction else if, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message: <string>\"¡Hola Mundo!\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=lang>langue</var> est égale à <string>\"jp\"</string>. À l'intérieur du bloc de code de cette instruction else if, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message: <string>\"Kon'nichiwa sekai!\"</string>.</li></ol>",
          "boilerplate"   : "var langue = prompt(\"Choisissez une langue (fr, es, jp, en)\");\n\n// Vérifiez si la langue choisie est le français (fr)\nif(langue == \"fr\")\n{\n  console.log(\"Bonjour, le monde!\");\n}\n// Vérifiez si la langue choisie est l'espagnol (es)\n?\n\n// Vérifiez si la langue choisie est le japonais (jp)\n?\n\n// Vérifiez si la langue choisie est l'anglais (en)\nelse\n{\n  console.log(\"Hello, world!\");\n}",
          "solution"      : "var langue = prompt(\"Choisissez une langue (fr, es, jp, en)\");\n\n// Vérifiez si la langue choisie est le français (fr)\nif(langue == \"fr\")\n{\n  console.log(\"Bonjour, le monde!\");\n}\n// Vérifiez si la langue choisie est l'espagnol (es)\nelse if(langue == \"es\")\n{\n  console.log(\"¡Hola Mundo!\");\n}\n// Vérifiez si la langue choisie est le japonais (jp)\nelse if(langue == \"jp\")\n{\n  console.log(\"Kon'nichiwa sekai!\");\n}\n// Vérifiez si la langue choisie est l'anglais (en)\nelse\n{\n  console.log(\"Hello, world!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-119",
          "name"          : "Passer au radar",
          "normalizedName": "passer au radar",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui aide la police à identifier les conducteurs qui dépassent la limite de vitesse. Le programme doit afficher un message différent, selon la vitesse des conducteurs.</div><ul class=algorithm><li>Si les conducteurs dépassent la limite de <strong>20 km/h ou plus</strong>, afficher le message: <string>\"Vous dépassez la limite de 20 km/h ou plus. Vous allez recevoir une amende.\"</string>.</li><li>Si les conducteurs dépassent la limite de <strong>10 km/h ou plus</strong>, afficher le message: <string>\"Vous dépassez la limite de 10 km/h ou plus. Ralentissez, sinon vous recevrez une amende.\"</string>.</li><li>Si les conducteurs dépassent la limite de <strong>1 km/h ou plus</strong>, afficher le message: <string>\"Vous dépassez la limite de 1 km/h ou plus. Veuillez ralentir.\"</string>.</li><li>Si les conducteurs sont <strong>sous la limite de vitesse</strong>, afficher le message: <string>\"Merci de voyager à une vitesse sécuritaire.\"</string>.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=overLimit>depasseLimite</var> est plus grande ou égale à 20. À l'intérieur du bloc de code de cette instruction if, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message: <string>\"Vous dépassez la limite de 20 km/h ou plus. Vous allez recevoir une amende.\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=overLimit>depasseLimite</var> est plus grande ou égale à 10. À l'intérieur du bloc de code de cette instruction else if, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message: <string>\"Vous dépassez la limite de 10 km/h ou plus. Ralentissez, sinon vous recevrez une amende.\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=overLimit>depasseLimite</var> est plus grande ou égale à 1. À l'intérieur du bloc de code de cette instruction else if, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message:\n    <string>\"Vous dépassez la limite de 1 km/h ou plus. Veuillez ralentir.\"</string>.</li><li class=code-item>Remplacer le dernier point d'interrogation par une instruction else. À l'intérieur du bloc de code de cette instruction else, utilisez une instruction <concept ref=console-log>console.log()</concept> pour afficher le message:\n    <string>\"Merci de voyager à une vitesse sécuritaire.\"</string>.</li></ol>",
          "boilerplate"   : "var vitesse = prompt(\"Entrez la vitesse de l'automobiliste (en km/h)\");\nvar limiteVitesse = 50;\n\nvitesse = Number(vitesse);\n\nvar depasseLimite = vitesse - limiteVitesse;\n\n// Créez l'instruction if ici\n?\n\n// Créez la première instruction else if ici\n?\n\n// Créez la deuxième instruction else if ici\n?\n\n// Créez l'instruction else ici\n?",
          "solution"      : "var vitesse = prompt(\"Entrez la vitesse de l'automobiliste (en km/h)\");\nvar limiteVitesse = 50;\n\nvitesse = Number(vitesse);\n\nvar depasseLimite = vitesse - limiteVitesse;\n\n// Créez l'instruction if ici\nif(depasseLimite >= 20)\n{\n  console.log(\"Vous dépassez la limite de 20 km/h ou plus. Vous allez recevoir une amende.\");\n}\n// Créez la première instruction else if ici\nelse if(depasseLimite >= 10)\n{\n  console.log(\"Vous dépassez la limite de 10 km/h ou plus. Ralentissez, sinon vous recevrez une amende.\");\n}\n// Créez la deuxième instruction else if ici\nelse if(depasseLimite >= 1)\n{\n  console.log(\"Vous dépassez la limite de 1 km/h ou plus. Veuillez ralentir.\");\n}\n// Créez l'instruction else ici\nelse\n{\n  console.log(\"Merci de voyager à une vitesse sécuritaire.\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>\n<h3 class=\"title\" ref=\"console.log()\">Instruction console.log()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> console.log() permet de créer une <concept ref=\"output\">sortie</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>, qui est habituellement une <concept ref=\"string\">chaîne</concept>. Le paramètre est écrit dans la sortie du programme, c'est-à-dire dans la console.</div><div class=\"text\">Remarquez que la chaîne donnée comme paramètre peut aussi être la <concept ref=\"concatenation\">concaténation</concept> de plusieurs chaînes.</div>\n<div class=\"code-sample-title\">Exemples de console.log()</div><pre class=\"codeBlock\">console.log(\"Bonjour!\"); // affiche: Bonjour!\nconsole.log(\"Bonjour \" + \"le monde!\"); // affiche la chaîne concaténée: Bonjour le monde!\nconsole.log(Bonjour!); // incorrect: la chaîne doit être entourée de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-120",
          "name"          : "Deviner le nombre",
          "normalizedName": "deviner le nombre",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui demande à l'utilisateur de deviner le nombre choisi par l'ordinateur. L'utilisateur a une seule chance de deviner le nombre, qui est toujours entre 1 et 10. Votre programme doit déterminer:</div><ul class=algorithm><li>Si monEssai est <strong>plus grand</strong> que nombreHasard, alors le nombre de l'utilisateur est trop grand.</li><li>Si monEssai est <strong>plus petit</strong> que nombreHasard, alors le nombre de l'utilisateur est trop petit.</li><li>Si monEssai est <strong>égal</strong> à nombreHasard, alors l'utilisateur a deviné correctement.</li></ul><div class=text>Pouvez-vous compléter le programme?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si <var id=myGuess>monEssai</var> est plus grand que <var id=randomNumber>nombreHasard</var>. À l'intérieur du bloc de code de cette instruction if, utilisez l'instruction \n    <concept ref=displayGuess>afficherEssai(<string>\"trop grand\"</string>)</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si <var id=myGuess>monEssai</var> est plus petit que <var id=randomNumber>nombreHasard</var>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction     <concept ref=displayGuess>afficherEssai(<string>\"trop petit\"</string>)</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction else. À l'intérieur du bloc de code de cette instruction else, utilisez l'instruction \n    <concept ref=displayGuess>afficherEssai(<string>\"correct\"</string>)</concept>.</li></ol>",
          "boilerplate"   : "var nombreHasard = nombreEntre1Et10();\nvar monEssai = prompt(\"Essayez de deviner le nombre (1 à 10)\");\n\nmonEssai = Number(monEssai);\n\n// Utilisez une instruction if pour\n// vérifier si monEssai est plus grand que nombreHasard\n?\n\n// Utilisez une instruction else if pour\n// vérifier si monEssai est plus petit que nombreHasard\n?\n\n// Utilisez une instruction else pour\n// les essais corrects\n?",
          "solution"      : "var nombreHasard = nombreEntre1Et10();\nvar monEssai = prompt(\"Essayez de deviner le nombre (1 à 10)\");\n\nmonEssai = Number(monEssai);\n\n// Utilisez une instruction if pour\n// vérifier si monEssai est plus grand que nombreHasard\nif(monEssai > nombreHasard)\n{\n  afficherEssai(\"trop grand\");\n}\n// Utilisez une instruction else if pour\n// vérifier si monEssai est plus petit que nombreHasard\nelse if(monEssai < nombreHasard)\n{\n  afficherEssai(\"trop petit\");\n}\n// Utilisez une instruction else pour\n// les essais corrects\nelse\n{\n  afficherEssai(\"correct\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-121",
          "name"          : "Des millions de millimètres",
          "normalizedName": "des millions de millimetres",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui convertit les kilomètres en d'autres unités. Notre programme doit être capable de convertir les kilomètres en mètres, en centimètres et en millimètres. Voici les conversions:</div><ul class=algorithm><li>1 kilomètre vaut 1000 mètres.</li><li>1 mètre vaut 100 centimètres.</li><li>1 centimètre vaut 10 millimètres.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Ajouter les deux instructions else if manquantes. Chacune de ces instructions else if doit vérifier une unité (soit \n    <string>\"cm\"</string> pour les centimètres ou \n    <string>\"mm\"</string> pour les millimètres). À l'intérieur du bloc de code de ces instructions else if, convertissez le nombre de kilomètres entré par l'utilisateur dans l'unité demandée et affichez le résultat à l'aide d'une instruction \n    <concept ref=console-log>console.log()</concept>.</li><li class=code-item>Ajouter une instruction else pour les unités incorrectes. À l'aide du bloc de code de cette instruction else, utilisez une instruction \n    <concept ref=console-log>console.log()</concept> pour afficher le message:\n    <string>\"Cette unité est inconnue\"</string>.</li></ol>",
          "boilerplate"   : "var kilometres = prompt(\"Entrez le nombre de kilomètres\");\nvar unite = prompt(\"Entrez l'unité de conversion (m, cm, mm)\");\n\nkilometres = Number(kilometres);\n\nconsole.log(kilometres + \" kilomètres valent:\");\n\nif(unite == \"m\")\n{\n  var metres = kilometres * 1000;\n  console.log(metres + \" mètres\");\n}\n// Utilisez une instruction else if pour\n// vérifier si unite est \"cm\" (centimètres)\n?\n\n// Utilisez une instruction else if pour\n// vérifier si unite est \"mm\" (millimètres)\n?\n\n// Utilisez une instruction else pour\n// les unités inconnues\n?",
          "solution"      : "var kilometres = prompt(\"Entrez le nombre de kilomètres\");\nvar unite = prompt(\"Entrez l'unité de conversion (m, cm, mm)\");\n\nkilometres = Number(kilometres);\n\nconsole.log(kilometres + \" kilomètres valent:\");\n\nif(unite == \"m\")\n{\n  var metres = kilometres * 1000;\n  console.log(metres + \" mètres\");\n}\n// Utilisez une instruction else if pour\n// vérifier si unite est \"cm\" (centimètres)\nelse if(unite == \"cm\")\n{\n  var centimetres = kilometres * 100000;\n  console.log(centimetres + \" centimètres\");\n}\n// Utilisez une instruction else if pour\n// vérifier si unite est \"mm\" (millimètres)\nelse if(unite == \"mm\")\n{\n  var millimetres = kilometres * 1000000;\n  console.log(millimetres + \" millimètres\");\n}\n// Utilisez une instruction else pour\n// les unités inconnues\nelse\n{\n  console.log(\"Cette unité est inconnue\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-006",
          "name"          : "Quiz 6",
          "description"   : "Les instructions else et else if",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-006_q-01",
              "question": "<div>Vrai ou faux. Une instruction <code>if</code> peut avoir plusieurs instructions <code>else</code>.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-01_a-01",
                  "value" : 0,
                  "answer": "<div>Vrai</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-006_q-01_a-02",
                  "value"      : 1,
                  "answer"     : "<div>Faux</div>",
                  "explanation": "Chaque instruction <code>if</code> peut avoir une seule instruction <code>else</code>."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-006_q-02",
              "question": "<div>Combien d'instructions <code>else if</code> une instruction <code>if</code> peut-elle avoir?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>Aucune</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-02_a-02",
                  "value" : 0,
                  "answer": "<div>Une</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-006_q-02_a-03",
                  "value"      : 2,
                  "answer"     : "<div>Autant que nous voulons</div>",
                  "explanation": "Il n'y a pas de limite au nombre d'instructions <code>else if</code> qu'une instruction <code>if</code> peut avoir."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-02_a-04",
                  "value" : 0,
                  "answer": "<div>Deux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-006_q-03",
              "question": "<div>Lequel des énoncés suivants est vrai?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-006_q-03_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Une instruction <code>else if</code> a toujours besoin d'une condition.</div>",
                  "explanation": "Les instructions <code>if</code> et <code>else if</code> ont toujours besoin d'une condition. Les instructions <code>else</code> n'ont jamais de condition."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>Une instruction <code>else</code> a toujours besoin d'une condition.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-03_a-03",
                  "value" : 0,
                  "answer": "<div>Une instruction <code>else if</code> n'a jamais besoin d'une condition.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>Les instructions <code>else</code> et <code>else if</code> n'ont jamais besoin d'une condition.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-006_q-04",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var maVariable = 2;\n\nif(maVariable &gt; 3)\n{\n  console.log(\"maVariable est plus grande que 3\");\n}\nelse\n{\n  console.log(\"maVariable est plus petite que 3\");  \n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-006_q-04_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Un message: <samp>maVariable est plus petite que 3</samp></div>",
                  "explanation": "Puisque <code>maVariable &gt; 3</code> est faux, le bloc de code de l'instruction <code>else</code> est exécuté."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>maVariable est plus grande que 3</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-04_a-03",
                  "value" : 0,
                  "answer": "<div>Deux messages: <samp>maVariable est plus grande que 3</samp> et <samp>maVariable est plus petite que 3</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-04_a-04",
                  "value" : 0,
                  "answer": "<div>Aucun message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-006_q-05",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var maVariable = 5;\n\nif(maVariable &gt; 5)\n{\n  console.log(\"maVariable est plus grande que 5\");\n}\nelse if(maVariable &lt; 5)\n{\n  console.log(\"maVariable est plus petite que 5\");  \n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>maVariable est plus petite que 5</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>maVariable est plus grande que 5</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-05_a-03",
                  "value" : 0,
                  "answer": "<div>Deux messages: <samp>maVariable est plus grande que 5</samp> et <samp>maVariable est plus petite que 5</samp></div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-006_q-05_a-04",
                  "value"      : 2,
                  "answer"     : "<div>Aucun message</div>",
                  "explanation": "Puisque <code>maVariable &gt; 5</code> est faux, et que <code>maVariable &lt; 5</code> est aussi faux, aucun message n'est affiché."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-006_q-06",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var animal = \"chien\";\n\nif(animal == \"chien\")\n{\n  console.log(\"L'animal est un chien\");\n}\nelse if(animal == \"chat\")\n{\n  console.log(\"L'animal est un chat\");  \n}\nelse\n{\n  console.log(\"Je ne connais pas cet animal\");  \n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-006_q-06_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Un message: <samp>L'animal est un chien</samp></div>",
                  "explanation": "Puisque la variable <var>animal</var> est égale à <string>\"chien\"</string>, <code>\"chien\" == \"chien\"</code> est vrai."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>L'animal est un chat</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>Je ne connais pas cet animal</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>Aucun message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-006_q-07",
              "question": "<div>Choisissez tous les énoncés qui sont vrais.</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-006_q-07_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Une instruction <code>if</code> doit toujours être la première instruction d'une instruction conditionnelle.</div>",
                  "explanation": "Une instruction <code>if</code> débute toujours une instruction conditionnelle."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-07_a-02",
                  "value" : 0,
                  "answer": "<div>Si nous utilisons une instruction <code>else</code>, elle n'a pas besoin d'être la dernière instruction d'une instruction conditionnelle.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-006_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>Si nous utilisons une instruction <code>else if</code>, nous devons utiliser une instruction <code>else</code>.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-006_q-07_a-04",
                  "value"      : 1,
                  "answer"     : "<div>Nous pouvons utiliser une instruction <code>if</code> sans avoir d'instructions <code>else</code> ou <code>else if</code>.</div>",
                  "explanation": "Une instruction <code>if</code> est la seule instruction nécessaire dans une instruction conditionnelle."
                }
              ]
            }
          ],
          "normalizedName": "quiz 6",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-264",
          "name"          : "Les if imbriqués",
          "normalizedName": "les if imbriques",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-264_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-264_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-13",
          "name"          : "Projet 13 - Un if dans un if",
          "normalizedName": "projet 13 - un if dans un if",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-122",
          "name"          : "Quelle est la destination?",
          "normalizedName": "quelle est la destination",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-122_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-122_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une condition qui vérifie si la valeur de <var id=weight>poids</var> est plus petite que 10.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Entrez la destination du paquet (ex: Canada)\");\nvar poids = prompt(\"Entrez le poids du paquet (en kg)\");\nvar prix = 50;\n\npoids = Number(poids);\n\nif(destination == \"Canada\")\n{\n  if(?)\n  {\n    prix = 7;\n  }\n}\n\nconsole.log(\"Poids: \" + poids + \" kg\");\nconsole.log(\"Destination: \" + destination);\nconsole.log(\"Prix d'expédition: \" + prix.toFixed(2) + \"$\");",
          "solution"      : "var destination = prompt(\"Entrez la destination du paquet (ex: Canada)\");\nvar poids = prompt(\"Entrez le poids du paquet (en kg)\");\nvar prix = 50;\n\npoids = Number(poids);\n\nif(destination == \"Canada\")\n{\n  if(poids < 10)\n  {\n    prix = 7;\n  }\n}\n\nconsole.log(\"Poids: \" + poids + \" kg\");\nconsole.log(\"Destination: \" + destination);\nconsole.log(\"Prix d'expédition: \" + prix.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-123",
          "name"          : "Vers l'Amérique",
          "normalizedName": "vers lamerique",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ajoutons une autre destination à la machine de tri d'Octo Poste. La nouvelle destination est les États-Unis. Les paquets à destination des États-Unis pesant moins de 10 kg ont un prix d'expédition réduit de 11$.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=weight>poids</var> est plus petite que 10. À l'intérieur du bloc de code de cette instruction if, donnez à <var id=shippingPrice>prix</var> la valeur 11.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Le paquet est-il pour le Canada ou les États-Unis?\");\nvar poids = prompt(\"Entrez le poids du paquet (en kg)\");\nvar prix = 50;\n\npoids = Number(poids);\n\nif(destination == \"Canada\")\n{\n  if(poids < 10)\n  {\n    prix = 7;\n  }\n}\nelse if(destination == \"États-Unis\")\n{\n  ?\n  \n}\n\nconsole.log(\"Poids: \" + poids + \" kg\");\nconsole.log(\"Destination: \" + destination);\nconsole.log(\"Prix d'expédition: \" + prix.toFixed(2) + \"$\");",
          "solution"      : "var destination = prompt(\"Le paquet est-il pour le Canada ou les États-Unis?\");\nvar poids = prompt(\"Entrez le poids du paquet (en kg)\");\nvar prix = 50;\n\npoids = Number(poids);\n\nif(destination == \"Canada\")\n{\n  if(poids < 10)\n  {\n    prix = 7;\n  }\n}\nelse if(destination == \"États-Unis\")\n{\n  if(poids < 10)\n  {\n    prix = 11;\n  }\n}\n\nconsole.log(\"Poids: \" + poids + \" kg\");\nconsole.log(\"Destination: \" + destination);\nconsole.log(\"Prix d'expédition: \" + prix.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-124",
          "name"          : "À destination de l'Europe",
          "normalizedName": "a destination de leurope",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-124_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-124_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=destination>destination</var> est égale à <string>\"France\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. Cette instruction if doit être à l'intérieur du bloc de code de l'instruction else if précédente. La condition de cette instruction if doit vérifier si la valeur de <var id=weight>poids</var> est plus petite que 10. À l'intérieur du bloc de code de cette instruction if, donnez à <var id=shippingPrice>prix</var> la valeur 20.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Le paquet est-il pour le Canada, les États-Unis ou la France?\");\nvar poids = prompt(\"Entrez le poids du paquet (en kg)\");\nvar prix = 50;\n\npoids = Number(poids);\n\nif(destination == \"Canada\")\n{\n  if(poids < 10)\n  {\n    prix = 7;\n  }\n}\nelse if(destination == \"États-Unis\")\n{\n  if(poids < 10)\n  {\n    prix = 11;\n  }\n}\n// Créez l'instruction else if externe ici\n// pour vérifier si la destination est la France\n?\n\n// Créez l'instruction if interne ici\n?\n\nconsole.log(\"Poids: \" + poids + \" kg\");\nconsole.log(\"Destination: \" + destination);\nconsole.log(\"Prix d'expédition: \" + prix.toFixed(2) + \"$\");",
          "solution"      : "var destination = prompt(\"Le paquet est-il pour le Canada, les États-Unis ou la France?\");\nvar poids = prompt(\"Entrez le poids du paquet (en kg)\");\nvar prix = 50;\n\npoids = Number(poids);\n\nif(destination == \"Canada\")\n{\n  if(poids < 10)\n  {\n    prix = 7;\n  }\n}\nelse if(destination == \"États-Unis\")\n{\n  if(poids < 10)\n  {\n    prix = 11;\n  }\n}\n// Créez l'instruction else if externe ici\n// pour vérifier si la destination est la France\nelse if(destination == \"France\")\n{\n  // Créez l'instruction if interne ici\n  if(poids < 10)\n  {\n    prix = 20;\n  }\n}\n\nconsole.log(\"Poids: \" + poids + \" kg\");\nconsole.log(\"Destination: \" + destination);\nconsole.log(\"Prix d'expédition: \" + prix.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-125",
          "name"          : "Une clarification",
          "normalizedName": "une clarification",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Nous allons ajouter un message pour chacune des destinations, afin d'indiquer à l'utilisateur la destination des paquets qui passent dans la machine.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction \n    <concept ref=console-log>console.log()</concept> qui affiche le message:\n    <string>\"Paquet pour le Canada!\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction \n    <concept ref=console-log>console.log()</concept> qui affiche le message: \n    <string>\"Paquet pour les États-Unis!\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction \n    <concept ref=console-log>console.log()</concept> qui affiche le message: \n    <string>\"Paquet pour la France!\"</string>.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Le paquet est-il pour le Canada, les États-Unis ou la France?\");\nvar poids = prompt(\"Entrez le poids du paquet (en kg)\");\nvar prix = 50;\n\npoids = Number(poids);\n\nif(destination == \"Canada\")\n{\n  ?\n\n  if(poids < 10)\n  {\n    prix = 7;\n  }\n}\nelse if(destination == \"États-Unis\")\n{\n  ?\n\n  if(poids < 10)\n  {\n    prix = 11;\n  }\n}\nelse if(destination == \"France\")\n{\n  ?\n\n  if(poids < 10)\n  {\n    prix = 20;\n  }\n}\n\nconsole.log(\"Poids: \" + poids + \" kg\");\nconsole.log(\"Destination: \" + destination);\nconsole.log(\"Prix d'expédition: \" + prix.toFixed(2) + \"$\");",
          "solution"      : "var destination = prompt(\"Le paquet est-il pour le Canada, les États-Unis ou la France?\");\nvar poids = prompt(\"Entrez le poids du paquet (en kg)\");\nvar prix = 50;\n\npoids = Number(poids);\n\nif(destination == \"Canada\")\n{\n  console.log(\"Paquet pour le Canada!\");\n\n  if(poids < 10)\n  {\n    prix = 7;\n  }\n}\nelse if(destination == \"États-Unis\")\n{\n  console.log(\"Paquet pour les États-Unis!\");\n\n  if(poids < 10)\n  {\n    prix = 11;\n  }\n}\nelse if(destination == \"France\")\n{\n  console.log(\"Paquet pour la France!\");\n\n  if(poids < 10)\n  {\n    prix = 20;\n  }\n}\n\nconsole.log(\"Poids: \" + poids + \" kg\");\nconsole.log(\"Destination: \" + destination);\nconsole.log(\"Prix d'expédition: \" + prix.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"console.log()\">Instruction console.log()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> console.log() permet de créer une <concept ref=\"output\">sortie</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>, qui est habituellement une <concept ref=\"string\">chaîne</concept>. Le paramètre est écrit dans la sortie du programme, c'est-à-dire dans la console.</div><div class=\"text\">Remarquez que la chaîne donnée comme paramètre peut aussi être la <concept ref=\"concatenation\">concaténation</concept> de plusieurs chaînes.</div>\n<div class=\"code-sample-title\">Exemples de console.log()</div><pre class=\"codeBlock\">console.log(\"Bonjour!\"); // affiche: Bonjour!\nconsole.log(\"Bonjour \" + \"le monde!\"); // affiche la chaîne concaténée: Bonjour le monde!\nconsole.log(Bonjour!); // incorrect: la chaîne doit être entourée de guillemets (\" \")</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-126",
          "name"          : "Une autre échelle de prix",
          "normalizedName": "une autre echelle de prix",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-126_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-126_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction else. À l'intérieur du bloc de code de cette instruction else, donnez à <var id=shippingPrice>prix</var> la valeur 35.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une autre instruction else. À l'intérieur du bloc de code de cette instruction else, donnez à <var id=shippingPrice>prix</var> la valeur 55.</li></ol>",
          "boilerplate"   : "var destination = prompt(\"Le paquet est-il pour le Canada, les États-Unis ou la France?\");\nvar poids = prompt(\"Entrez le poids du paquet (en kg)\");\nvar prix = 50;\n\npoids = Number(poids);\n\nif(destination == \"Canada\")\n{\n  console.log(\"Paquet pour le Canada!\");\n\n  if(poids < 10)\n  {\n    prix = 7;\n  }\n  else\n  {\n    prix = 25;\n  }\n}\nelse if(destination == \"États-Unis\")\n{\n  console.log(\"Paquet pour les États-Unis!\");\n\n  if(poids < 10)\n  {\n    prix = 11;\n  }\n  // Ajoutez une instruction else\n  // ici pour les États-Unis\n  ?\n  \n}\nelse if(destination == \"France\")\n{\n  console.log(\"Paquet pour la France!\");\n\n  if(poids < 10)\n  {\n    prix = 20;\n  }\n  // Ajoutez une instruction else\n  // ici pour la France\n  ?\n  \n}\n\nconsole.log(\"Poids: \" + poids + \" kg\");\nconsole.log(\"Destination: \" + destination);\nconsole.log(\"Prix d'expédition: \" + prix.toFixed(2) + \"$\");",
          "solution"      : "var destination = prompt(\"Le paquet est-il pour le Canada, les États-Unis ou la France?\");\nvar poids = prompt(\"Entrez le poids du paquet (en kg)\");\nvar prix = 50;\n\npoids = Number(poids);\n\nif(destination == \"Canada\")\n{\n  console.log(\"Paquet pour le Canada!\");\n\n  if(poids < 10)\n  {\n    prix = 7;\n  }\n  else\n  {\n    prix = 25;\n  }\n}\nelse if(destination == \"États-Unis\")\n{\n  console.log(\"Paquet pour les États-Unis!\");\n\n  if(poids < 10)\n  {\n    prix = 11;\n  }\n  // Ajoutez une instruction else\n  // ici pour les États-Unis\n  else\n  {\n    prix = 35;\n  }\n}\nelse if(destination == \"France\")\n{\n  console.log(\"Paquet pour la France!\");\n\n  if(poids < 10)\n  {\n    prix = 20;\n  }\n  // Ajoutez une instruction else\n  // ici pour la France\n  else\n  {\n    prix = 55;\n  }\n}\n\nconsole.log(\"Poids: \" + poids + \" kg\");\nconsole.log(\"Destination: \" + destination);\nconsole.log(\"Prix d'expédition: \" + prix.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"nested code blocks\">Instructions else et else if dans une instruction if imbriquée</h3>\n<div class=\"text\">Les <concept ref=\"nested statements\">instructions conditionnelles imbriquées</concept> peuvent avoir des <concept ref=\"else statement\">instructions else</concept> et des <concept ref=\"else if statement\">instructions else if</concept>.</div><div class=\"text\">Il est très utile d'aligner les <concept ref=\"code block\">blocs de code</concept>, afin de pouvoir distinguer les instructions qui font partie de l'instruction externe et celles qui font partie de l'instruction interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée complexe</div><pre class=\"codeBlock\">if(vies > 0) // instruction if externe\n{\n  if(pointage > 100) // instruction if interne\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n  else if // cette instruction else if fait partie de l'instruction if interne\n  {\n    console.log(\"Vous n'avez pas suffisamment de points!\");\n  }\n}\nelse // cette instruction else fait partie de l'instruction if externe\n{\n  console.log(\"Vous avez perdu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-127",
          "name"          : "L'échelle de Richter",
          "normalizedName": "lechelle de richter",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>L'échelle de Richter est utilisée pour déterminer la force des tremblements de terre. Les tremblements de terre sont mesurés sur une échelle de 1 à 10, où 1 représente un tremblement de terre mineur et 10, un évènement catastrophique. Construisons un programme qui détermine si une ville doit être évacuée, selon la force d'un tremblement de terre.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=richterValue>valeurDeRichter</var> est plus grande que 7. À l'intérieur du bloc de code de cette instruction if, utilisez une instruction \n    <concept ref=console-log>console.log()</concept> pour afficher le message:\n    <string>\"Il faut évacuer immédiatement.\"</string>.</li></ol>",
          "boilerplate"   : "var valeurDeRichter = prompt(\"Entrez la force du tremblement de terre (1 à 10)\");\nvaleurDeRichter = Number(valeurDeRichter);\n\nif(valeurDeRichter > 5)\n{\n  console.log(\"Le tremblement de terre est dangereux.\");\n\n  ?\n  \n}\nelse\n{\n  console.log(\"Le tremblement de terre est mineur.\");\n}",
          "solution"      : "var valeurDeRichter = prompt(\"Entrez la force du tremblement de terre (1 à 10)\");\nvaleurDeRichter = Number(valeurDeRichter);\n\nif(valeurDeRichter > 5)\n{\n  console.log(\"Le tremblement de terre est dangereux.\");\n\n  if(valeurDeRichter > 7)\n  {\n    console.log(\"Il faut évacuer immédiatement.\");\n  }\n}\nelse\n{\n  console.log(\"Le tremblement de terre est mineur.\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-128",
          "name"          : "Une meilleure connexion",
          "normalizedName": "une meilleure connexion",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Améliorons un système de connexion par mot de passe. Ce nouveau système doit pouvoir afficher aux utilisateurs si leur mot de passe ou leur nom d'utilisateur est incorrect. Le nom d'utilisateur du système est \"admin\" et le mot de passe est \"12345\".</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=inputPassword>motDePasseEntre</var> est égale à <var id=password>motDePasse</var>. À l'intérieur du bloc de code de cette instruction if, utilisez une instruction \n    <concept ref=console-log>console.log()</concept> pour afficher le message: \n    <string>\"Bonjour, admin!\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else. À l'intérieur du bloc de code de cette instruction else, utilisez une instruction \n    <concept ref=console-log>console.log()</concept> pour afficher le message: \n    <string>\"Le mot de passe est incorrect!\"</string>.</li></ol>",
          "boilerplate"   : "var nomUtilisateurEntre = prompt(\"Entrez votre nom d'utilisateur\");\nvar motDePasseEntre = prompt(\"Entrez votre mot de passe\");\n\nvar nomUtilisateur = \"admin\";\nvar motDePasse = \"12345\";\n\nif(nomUtilisateurEntre == nomUtilisateur)\n{\n  // Ajoutez une instruction if ici\n  // pour vérifier si le mot de passe entré est correct\n  ?\n  \n  // Ajoutez une instruction else ici\n  // pour vérifier si le mot de passe entré est incorrect\n  ?\n  \n}\nelse\n{\n  console.log(\"Le nom d'utilisateur est incorrect!\");\n}",
          "solution"      : "var nomUtilisateurEntre = prompt(\"Entrez votre nom d'utilisateur\");\nvar motDePasseEntre = prompt(\"Entrez votre mot de passe\");\n\nvar nomUtilisateur = \"admin\";\nvar motDePasse = \"12345\";\n\nif(nomUtilisateurEntre == nomUtilisateur)\n{\n  // Ajoutez une instruction if ici\n  // pour vérifier si le mot de passe entré est correct\n  if(motDePasseEntre == motDePasse)\n  {\n    console.log(\"Bonjour, admin!\");\n  }\n  // Ajoutez une instruction else ici\n  // pour vérifier si le mot de passe entré est incorrect\n  else\n  {\n    console.log(\"Le mot de passe est incorrect!\");\n  }\n}\nelse\n{\n  console.log(\"Le nom d'utilisateur est incorrect!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-129",
          "name"          : "Un visage familier",
          "normalizedName": "un visage familier",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Les billets de banque sont souvent utilisés pour mettre en valeur l'histoire d'une nation. Au Canada et aux États-Unis, les billets portent des illustrations de personnages historiques importants. Construisons un programme pour analyser les billets de 5, 10 et 20$ du Canada et des États-Unis et afficher l'illustration qui correspond.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=billType>valeurBillet</var> est égale à\n    <string>\"5$\"</string>. À l'intérieur du bloc de code de cette instruction if, utilisez l'instruction \n    <concept ref=showPerson>afficherPersonne()</concept> avec le paramètre\n    <string>\"Abraham Lincoln\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=billType>valeurBillet</var> est égale à\n    <string>\"10$\"</string>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=showPerson>afficherPersonne()</concept> avec le paramètre\n    <string>\"Alexander Hamilton\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=billType>valeurBillet</var> est égale à\n    <string>\"20$\"</string>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=showPerson>afficherPersonne()</concept> avec le paramètre\n    <string>\"Andrew Jackson\"</string>.</li></ol>",
          "boilerplate"   : "var paysOrigine = obtenirPaysOrigine();\nvar valeurBillet = obtenirValeurBillet();\n\nif(paysOrigine == \"USD\")\n{\n  // Vérifiez les billets de 5$\n  ?\n  \n  // Vérifiez les billets de 10$\n  ?\n  \n  // Vérifiez les billets de 20$\n  ?\n  \n}\nelse if(paysOrigine == \"CAD\")\n{\n  if(valeurBillet == \"5$\")\n  {\n    afficherPersonne(\"Sir Wilfrid Laurier\");\n  }\n  else if(valeurBillet == \"10$\")\n  {\n    afficherPersonne(\"Viola Desmond\");\n  }\n  else if(valeurBillet == \"20$\")\n  {\n    afficherPersonne(\"Reine Elizabeth II\");\n  }\n}",
          "solution"      : "var paysOrigine = obtenirPaysOrigine();\nvar valeurBillet = obtenirValeurBillet();\n\nif(paysOrigine == \"USD\")\n{\n  // Vérifiez les billets de 5$\n  if(valeurBillet == \"5$\")\n  {\n    afficherPersonne(\"Abraham Lincoln\");\n  }\n  // Vérifiez les billets de 10$\n  else if(valeurBillet == \"10$\")\n  {\n    afficherPersonne(\"Alexander Hamilton\");\n  }\n  // Vérifiez les billets de 20$\n  else if(valeurBillet == \"20$\")\n  {\n    afficherPersonne(\"Andrew Jackson\");\n  }\n}\nelse if(paysOrigine == \"CAD\")\n{\n  if(valeurBillet == \"5$\")\n  {\n    afficherPersonne(\"Sir Wilfrid Laurier\");\n  }\n  else if(valeurBillet == \"10$\")\n  {\n    afficherPersonne(\"Viola Desmond\");\n  }\n  else if(valeurBillet == \"20$\")\n  {\n    afficherPersonne(\"Reine Elizabeth II\");\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-130",
          "name"          : "Roche, papier, ciseaux!",
          "normalizedName": "roche papier ciseaux!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un jeu de roche, papier, ciseaux! Pour jouer, le joueur et l'ordinateur doivent chacun choisir l'une des trois valeurs suivantes: roche, papier ou ciseaux. Voici les règles qui permettent de déterminer le vainqueur:</div><ul class=algorithm><li>Si le joueur choisit <string>\"roche\"</string> et que l'ordinateur choisit <string>\"ciseaux\"</string>, le joueur gagne.</li><li>Si le joueur choisit <string>\"ciseaux\"</string> et que l'ordinateur choisit <string>\"papier\"</string>, le joueur gagne.</li><li>Si le joueur choisit <string>\"papier\"</string> et que l'ordinateur choisit <string>\"roche\"</string>, le joueur gagne.</li><li>Si le joueur et l'ordinateur choisissent la même valeur, la partie est nulle.</li><li>Dans tous les autres cas, le joueur perd.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=playerChoice>choixJoueur</var> est égale à\n    <string>\"roche\"</string>.</li><li class=code-item>À l'intérieur du bloc de code de l'instruction else if créée dans la première étape, remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=computerChoice>choixOrdinateur</var> est égale à \n    <string>\"ciseaux\"</string>. À l'intérieur du bloc de code de cette instruction if, utilisez l'instruction \n    <concept ref=setGameState>resultatDuJeu()</concept> avec le paramètre\n    <string>\"victoire\"</string>.</li><li class=code-item>Toujours à l'intérieur du bloc de code de l'instruction else if créée dans la première étape, remplacer le troisième point d'interrogation par une instruction else. À l'intérieur du bloc de code de cette instruction else, utilisez l'instruction \n    <concept ref=setGameState>resultatDuJeu()</concept> avec le paramètre\n    <string>\"défaite\"</string>.</li></ol>",
          "boilerplate"   : "var choixJoueur = prompt(\"Choisissez: roche, papier ou ciseaux?\");\nvar choixOrdinateur = obtenirRochePapierCiseaux();\n\nafficherChoix(choixJoueur, choixOrdinateur);\n\nif(choixJoueur == choixOrdinateur)\n{\n  resultatDuJeu(\"égalité\");\n}\n// Vérifiez si choixJoueur est égal à roche\n?\n\n// Vérifiez si choixOrdinateur est égal à ciseaux\n?\n\n// Ajoutez une instruction else ici\n// (choixOrdinateur n'est pas égal à ciseaux)\n?\n\nelse if(choixJoueur == \"papier\")\n{\n  if(choixOrdinateur == \"roche\")\n  {\n    resultatDuJeu(\"victoire\");\n  }\n  else\n  {\n    resultatDuJeu(\"défaite\");\n  }\n}\nelse if(choixJoueur == \"ciseaux\")\n{\n  if(choixOrdinateur == \"papier\")\n  {\n    resultatDuJeu(\"victoire\");\n  }\n  else\n  {\n    resultatDuJeu(\"défaite\");\n  }\n}",
          "solution"      : "var choixJoueur = prompt(\"Choisissez: roche, papier ou ciseaux?\");\nvar choixOrdinateur = obtenirRochePapierCiseaux();\n\nafficherChoix(choixJoueur, choixOrdinateur);\n\nif(choixJoueur == choixOrdinateur)\n{\n  resultatDuJeu(\"égalité\");\n}\n// Vérifiez si choixJoueur est égal à roche\nelse if(choixJoueur == \"roche\")\n{\n  // Vérifiez si choixOrdinateur est égal à ciseaux\n  if(choixOrdinateur == \"ciseaux\")\n  {\n    resultatDuJeu(\"victoire\");\n  }\n  // Ajoutez une instruction else ici\n  // (choixOrdinateur n'est pas égal à ciseaux)\n  else\n  {\n    resultatDuJeu(\"défaite\");\n  }\n}\nelse if(choixJoueur == \"papier\")\n{\n  if(choixOrdinateur == \"roche\")\n  {\n    resultatDuJeu(\"victoire\");\n  }\n  else\n  {\n    resultatDuJeu(\"défaite\");\n  }\n}\nelse if(choixJoueur == \"ciseaux\")\n{\n  if(choixOrdinateur == \"papier\")\n  {\n    resultatDuJeu(\"victoire\");\n  }\n  else\n  {\n    resultatDuJeu(\"défaite\");\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-14",
          "name"          : "Projet 14 - Bâtir un traducteur",
          "normalizedName": "projet 14 - batir un traducteur",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-132",
          "name"          : "Apprendre un peu d'anglais",
          "normalizedName": "apprendre un peu danglais",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-132_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-132_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=lang>langue</var> est égale à\n    <string>\"FR\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=word>mot</var> est égale à <string>\"is\"</string>. À l'intérieur du bloc de code de cette instruction if, donnez à la variable <var id=translatedWord>motTraduit</var> la valeur <string>\"est\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=word>mot</var> est égale à <string>\"fun\"</string>. À l'intérieur du bloc de code de cette instruction if, donnez à la variable <var id=translatedWord>motTraduit</var> la valeur <string>\"amusant\"</string>.</li></ol>",
          "boilerplate"   : "var mot = obtenirProchainMot();\nvar langue = obtenirLangue();\n\nvar motTraduit = mot;\n\nif(?)\n{\n  if(mot == \"programming\") { motTraduit = \"programmer\"; }\n  ?\n  ?\n}\n\nmettreAJourTraduction(motTraduit);",
          "solution"      : "var mot = obtenirProchainMot();\nvar langue = obtenirLangue();\n\nvar motTraduit = mot;\n\nif(langue == \"FR\")\n{\n  if(mot == \"programming\") { motTraduit = \"programmer\"; }\n  if(mot == \"is\") { motTraduit = \"est\"; }\n  if(mot == \"fun\") { motTraduit = \"amusant\"; }\n}\n\nmettreAJourTraduction(motTraduit);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-133",
          "name"          : "Quelques mots de plus",
          "normalizedName": "quelques mots de plus",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ajoutons deux autres mots à notre programme de traduction automatique afin qu'il puisse traduire la phrase \"I love programming\" en français.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=word>mot</var> est égale à\n    <string>\"i\"</string>. À l'intérieur du bloc de code de cette instruction if, donnez à la variable <var id=translatedWord>motTraduit</var> la valeur\n    <string>\"je\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=word>mot</var> est égale à \n    <string>\"love\"</string>. À l'intérieur du bloc de code de cette instruction if, donnez à la variable <var id=translatedWord>motTraduit</var> la valeur \n    <string>\"aime\"</string>.</li></ol>",
          "boilerplate"   : "var mot = obtenirProchainMot();\nvar langue = obtenirLangue();\n\nvar motTraduit = mot;\n\nif(langue == \"FR\")\n{\n  if(mot == \"programming\") { motTraduit = \"programmer\"; }\n  if(mot == \"is\") { motTraduit = \"est\"; }\n  if(mot == \"fun\") { motTraduit = \"amusant\"; }\n  ?\n  ?\n}\n\nmettreAJourTraduction(motTraduit);",
          "solution"      : "var mot = obtenirProchainMot();\nvar langue = obtenirLangue();\n\nvar motTraduit = mot;\n\nif(langue == \"FR\")\n{\n  if(mot == \"programming\") { motTraduit = \"programmer\"; }\n  if(mot == \"is\") { motTraduit = \"est\"; }\n  if(mot == \"fun\") { motTraduit = \"amusant\"; }\n  if(mot == \"i\") { motTraduit = \"je\"; }\n  if(mot == \"love\") { motTraduit = \"aime\"; }\n}\n\nmettreAJourTraduction(motTraduit);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-134",
          "name"          : "Un bogue minuscule",
          "normalizedName": "un bogue minuscule",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-134_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-134_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une instruction qui donne à <var id=word>mot</var> la valeur de <var id=word>mot</var> en minuscules. Vous devrez utiliser l'instruction <concept ref=toLowerCase>.toLowerCase()</concept>.</li></ol>",
          "boilerplate"   : "var mot = obtenirProchainMot();\nvar langue = obtenirLangue();\n\nlangue = langue.toUpperCase();\n?\n\nvar motTraduit = mot;\n\nif(langue == \"FR\")\n{\n  if(mot == \"programming\") { motTraduit = \"programmer\"; }\n  if(mot == \"is\") { motTraduit = \"est\"; }\n  if(mot == \"fun\") { motTraduit = \"amusant\"; }\n  if(mot == \"i\") { motTraduit = \"je\"; }\n  if(mot == \"love\") { motTraduit = \"aime\"; }\n}\n\nmettreAJourTraduction(motTraduit);",
          "solution"      : "var mot = obtenirProchainMot();\nvar langue = obtenirLangue();\n\nlangue = langue.toUpperCase();\nmot = mot.toLowerCase();\n\nvar motTraduit = mot;\n\nif(langue == \"FR\")\n{\n  if(mot == \"programming\") { motTraduit = \"programmer\"; }\n  if(mot == \"is\") { motTraduit = \"est\"; }\n  if(mot == \"fun\") { motTraduit = \"amusant\"; }\n  if(mot == \"i\") { motTraduit = \"je\"; }\n  if(mot == \"love\") { motTraduit = \"aime\"; }\n}\n\nmettreAJourTraduction(motTraduit);",
          "tips"          : "<h3 class=\"title\" ref=\"toLowerCase()\">Instruction .toLowerCase()</h3>\n<div class=\"text\">L'<concept ref=\"string\">instruction</concept> .toLowerCase() peut être utilisée pour convertir les lettres majuscules d'une <concept ref=\"string\">chaîne</concept> en minuscules.</div><div class=\"text\">Remarquez que les lettres qui sont déjà en minuscules ne sont pas affectées par l'instruction .toLowerCase().</div>\n<div class=\"code-sample-title\">Exemple de l'instruction .toLowerCase()</div><pre class=\"codeBlock\">var maChaine = \"Programmer Est Amusant!\";\nmaChaine = maChaine.toLowerCase();\nconsole.log(maChaine); // affiche: programmer est amusant!</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-135",
          "name"          : "Une autre phrase",
          "normalizedName": "une autre phrase",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Maintenant notre bogue réparé, ajoutons une dernière phrase à notre programme de traduction automatique avant d'ajouter la traduction vers l'espagnol. La nouvelle phrase est: \"Programming is a good skill\".</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=word>mot</var> est égale à\n    <string>\"a\"</string>. À l'intérieur du bloc de code de cette instruction if, donnez à la variable <var id=translatedWord>motTraduit</var> la valeur\n    <string>\"un\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=word>mot</var> est égale à\n    <string>\"good\"</string>. À l'intérieur du bloc de code de cette instruction if, donnez à la variable <var id=translatedWord>motTraduit</var> la valeur\n    <string>\"bon\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction if. La condition de cette instruction doit vérifier si la valeur de <var id=word>mot</var> est égale à \n    <string>\"skill\"</string>. À l'intérieur du bloc de code de cette instruction if, donnez à la variable <var id=translatedWord>motTraduit</var> la valeur\n    <string>\"compétence\"</string>. <strong>Indice:</strong> n'oubliez pas l'accent aigu sur le \"e\".</li></ol>",
          "boilerplate"   : "var mot = obtenirProchainMot();\nvar langue = obtenirLangue();\n\nlangue = langue.toUpperCase();\nmot = mot.toLowerCase();\n\nvar motTraduit = mot;\n\nif(langue == \"FR\")\n{\n  if(mot == \"programming\") { motTraduit = \"programmer\"; }\n  if(mot == \"is\") { motTraduit = \"est\"; }\n  if(mot == \"fun\") { motTraduit = \"amusant\"; }\n  if(mot == \"i\") { motTraduit = \"je\"; }\n  if(mot == \"love\") { motTraduit = \"aime\"; }\n  ?\n  ?\n  ?\n}\n\nmettreAJourTraduction(motTraduit);",
          "solution"      : "var mot = obtenirProchainMot();\nvar langue = obtenirLangue();\n\nlangue = langue.toUpperCase();\nmot = mot.toLowerCase();\n\nvar motTraduit = mot;\n\nif(langue == \"FR\")\n{\n  if(mot == \"programming\") { motTraduit = \"programmer\"; }\n  if(mot == \"is\") { motTraduit = \"est\"; }\n  if(mot == \"fun\") { motTraduit = \"amusant\"; }\n  if(mot == \"i\") { motTraduit = \"je\"; }\n  if(mot == \"love\") { motTraduit = \"aime\"; }\n  if(mot == \"a\") { motTraduit = \"un\"; }\n  if(mot == \"good\") { motTraduit = \"bon\"; }\n  if(mot == \"skill\") { motTraduit = \"compétence\"; }\n}\n\nmettreAJourTraduction(motTraduit);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-136",
          "name"          : "Quelques mots d'espagnol",
          "normalizedName": "quelques mots despagnol",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-136_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-136_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=lang>langue</var> est égale à <string>\"ES\"</string>.</li><li class=code-item>À l'intérieur du bloc de code de l'instruction else if, copier toutes les instructions if imbriquées qui sont utilisées pour la traduction vers le français, puis remplacer chaque mot en français par son équivalent en espagnol, à l'aide de la liste ci-dessous. <strong>Indice: n'écrivez pas les instructions if une par une, utilisez la fonction copier-coller pour gagner du temps!</strong></li></ol>\n<table><thead><tr><th>Anglais</th><th>Équivalent en espagnol</th></tr></thead><tbody><tr><td>programming</td><td>programar</td></tr><tr><td>is</td><td>es</td></tr><tr><td>fun</td><td>divertido</td></tr><tr><td>I</td><td>me</td></tr><tr><td>love</td><td>encanta</td></tr><tr><td>a</td><td>un</td></tr><tr><td>good</td><td>bueno</td></tr><tr><td>skill</td><td>habilidad</td></tr></tbody></table>",
          "boilerplate"   : "var mot = obtenirProchainMot();\nvar langue = obtenirLangue();\n\nlangue = langue.toUpperCase();\nmot = mot.toLowerCase();\n\nvar motTraduit = mot;\n\nif(langue == \"FR\")\n{\n  if(mot == \"programming\") { motTraduit = \"programmer\"; }\n  if(mot == \"is\") { motTraduit = \"est\"; }\n  if(mot == \"fun\") { motTraduit = \"amusant\"; }\n  if(mot == \"i\") { motTraduit = \"je\"; }\n  if(mot == \"love\") { motTraduit = \"aime\"; }\n  if(mot == \"a\") { motTraduit = \"un\"; }\n  if(mot == \"good\") { motTraduit = \"bon\"; }\n  if(mot == \"skill\") { motTraduit = \"compétence\"; }\n}\n?\n\nmettreAJourTraduction(motTraduit);",
          "solution"      : "var mot = obtenirProchainMot();\nvar langue = obtenirLangue();\n\nlangue = langue.toUpperCase();\nmot = mot.toLowerCase();\n\nvar motTraduit = mot;\n\nif(langue == \"FR\")\n{\n  if(mot == \"programming\") { motTraduit = \"programmer\"; }\n  if(mot == \"is\") { motTraduit = \"est\"; }\n  if(mot == \"fun\") { motTraduit = \"amusant\"; }\n  if(mot == \"i\") { motTraduit = \"je\"; }\n  if(mot == \"love\") { motTraduit = \"aime\"; }\n  if(mot == \"a\") { motTraduit = \"un\"; }\n  if(mot == \"good\") { motTraduit = \"bon\"; }\n  if(mot == \"skill\") { motTraduit = \"compétence\"; }\n}\nelse if(langue == \"ES\")\n{\n  if(mot == \"programming\") { motTraduit = \"programar\"; }\n  if(mot == \"is\") { motTraduit = \"es\"; }\n  if(mot == \"fun\") { motTraduit = \"divertido\"; }\n  if(mot == \"i\") { motTraduit = \"me\"; }\n  if(mot == \"love\") { motTraduit = \"encanta\"; }\n  if(mot == \"a\") { motTraduit = \"un\"; }\n  if(mot == \"good\") { motTraduit = \"bueno\"; }\n  if(mot == \"skill\") { motTraduit = \"habilidad\"; }\n}\n\nmettreAJourTraduction(motTraduit);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-137",
          "name"          : "La marque du pluriel",
          "normalizedName": "la marque du pluriel",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons une partie d'un correcteur automatique. Notre programme doit mettre les mots au pluriel lorsque nécessaire. Pour ce faire, le programme reçoit un nom et une quantité. Le programme doit décider d'ajouter ou d'enlever le \"s\" final, selon la quantité.</div><div class=text>Exemple:</div><div class=text>Le mot \"chats\" avec une quantité de 1 doit retourner \"chat\", puisqu'il y a un seul chat.</div><div class=text>Le mot \"chien\" avec une quantité de 3 doit retourner \"chiens\", puisqu'il y a plusieurs chiens.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=quantity>quantite</var> est égale à 1.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=lastLetter>derniereLettre</var> est égale à\n    <string>\"s\"</string>. À l'intérieur du bloc de code de cette instruction if, donnez à la variable <var id=word>mot</var> le résultat de l'instruction \n    <concept ref=removePluralword>enleverPluriel(<var id=word>mot</var>)</concept>.</li></ol>",
          "boilerplate"   : "var mot = obtenirMotHasard();\nvar quantite = obtenirNombreHasard();\n\n// Retourne la dernière lettre du mot\nvar derniereLettre = obtenirDerniereLettre(mot);\n\n// Vérifiez si quantite est égale à 1\nif(?)\n{\n  // Ajoutez une instruction if\n  // pour vérifier si derniereLettre est \"s\"\n  ?\n  \n}\nelse\n{\n  if(derniereLettre != \"s\")\n  {\n    mot = mot + \"s\";\n  }\n}\n\nconsole.log(\"Je possède \" + quantite + \" \" + mot + \".\");",
          "solution"      : "var mot = obtenirMotHasard();\nvar quantite = obtenirNombreHasard();\n\n// Retourne la dernière lettre du mot\nvar derniereLettre = obtenirDerniereLettre(mot);\n\n// Vérifiez si quantite est égale à 1\nif(quantite == 1)\n{\n  // Ajoutez une instruction if\n  // pour vérifier si derniereLettre est \"s\"\n  if(derniereLettre == \"s\")\n  {\n    mot = enleverPluriel(mot);\n  }\n}\nelse\n{\n  if(derniereLettre != \"s\")\n  {\n    mot = mot + \"s\";\n  }\n}\n\nconsole.log(\"Je possède \" + quantite + \" \" + mot + \".\");",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-138",
          "name"          : "L'employée du mois",
          "normalizedName": "lemployee du mois",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui permet de calculer la paie des employés d'une compagnie. Pour calculer la paie des employés, nous multiplions le nombre d'heures travaillées par leur salaire horaire. Toutefois, il y a des exceptions. Si un employé a travaillé plus de 40 heures, toutes les heures supplémentaires sont payées à un taux de 1.5. De plus, la compagnie offre un bonus de 150$ aux employés qui ont travaillé plus de 44 heures dans une semaine.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=overtime>heuresSupp</var>. Donnez-lui le résultat de  <var id=hoursWorked>heuresDeTravail</var> moins 40.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=regularSalary>salaireReg</var>. Donnez-lui le résultat de 40 multiplié par la valeur de <var id=hourlySalary>salaireHoraire</var>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une nouvelle variable appelée <var id=overtimeSalary>salaireSupp</var>. Donnez-lui le résultat de <var id=overtime>heuresSupp</var> multiplié par la valeur de <var id=hourlySalary>salaireHoraire</var> multiplié par 1.5.</li><li class=code-item>Remplacer le dernier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=hoursWorked>heuresDeTravail</var> est plus grande que 44. À l'intérieur du bloc de code de cette instruction if, augmentez la valeur de la variable <var id=grossSalary>salaireTotal</var> de 150.</li></ol>",
          "boilerplate"   : "var heuresDeTravail = obtenirHeuresDeTravail();\nvar salaireHoraire = obtenirSalaireHoraire();\n\nvar salaireTotal;\n\nconsole.log(\"Vous avez travaillé \" + heuresDeTravail + \" heures au taux de \" + salaireHoraire.toFixed(2) + \"$ l'heure\");\n\nif(heuresDeTravail > 40)\n{\n  // Calculez le nombre d'heures supplémentaires\n  ?\n\n  console.log(\"Vous avez travaillé \" + heuresSupp + \" heures supplémentaires\");\n\n  // Calculez le salaire régulier\n  ?\n  // Calculez le salaire supplémentaire\n  ?\n\n  salaireTotal = salaireReg + salaireSupp;\n\n  // Vérifiez si le nombre d'heures de travail dépasse 44 heures\n  ?\n  \n}\nelse\n{\n  salaireTotal = heuresDeTravail * salaireHoraire;\n}\n\nconsole.log(\"Votre salaire est \" + salaireTotal.toFixed(2) + \"$\");",
          "solution"      : "var heuresDeTravail = obtenirHeuresDeTravail();\nvar salaireHoraire = obtenirSalaireHoraire();\n\nvar salaireTotal;\n\nconsole.log(\"Vous avez travaillé \" + heuresDeTravail + \" heures au taux de \" + salaireHoraire.toFixed(2) + \"$ l'heure\");\n\nif(heuresDeTravail > 40)\n{\n  // Calculez le nombre d'heures supplémentaires\n  var heuresSupp = heuresDeTravail - 40;\n\n  console.log(\"Vous avez travaillé \" + heuresSupp + \" heures supplémentaires\");\n\n  // Calculez le salaire régulier\n  var salaireReg = 40 * salaireHoraire;\n  // Calculez le salaire supplémentaire\n  var salaireSupp = heuresSupp * salaireHoraire * 1.5;\n\n  salaireTotal = salaireReg + salaireSupp;\n\n  // Vérifiez si le nombre d'heures de travail dépasse 44 heures\n  if(heuresDeTravail > 44)\n  {\n    salaireTotal = salaireTotal + 150;\n  }\n}\nelse\n{\n  salaireTotal = heuresDeTravail * salaireHoraire;\n}\n\nconsole.log(\"Votre salaire est \" + salaireTotal.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-139",
          "name"          : "Les trois états",
          "normalizedName": "les trois etats",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>La matière qui nous entoure est habituellement dans l'un des trois états suivants: liquide, gazeux et solide. Par exemple, l'eau peut se trouver sous forme liquide, sous forme gazeuse lorsqu'elle est en vapeur et sous forme solide que nous appelons glace. Lorsque la matière atteint une certaine température, elle change d'état. Ces températures ont des noms spéciaux:</div><ul class=algorithm><li>Lorsque la matière passe de l'état <strong>liquide</strong> à l'état <strong>solide</strong>, la température est le <strong>point de congélation</strong>.</li><li>Lorsque la matière passe de l'état <strong>solide</strong> à l'état <strong>liquide</strong>, la température est le <strong>point de fusion</strong>.</li><li>Lorsque la matière passe de l'état <strong>liquide</strong> à l'état <strong>gazeux</strong>, la température est le <strong>point d'ébullition</strong>.</li></ul><div class=text>Construisons un programme qui analyse les points de congélation, de fusion et d'ébullition de l'eau et du mercure. L'eau gèle si la température est plus petite que 0 degrés Celsius, fond entre 0 et 100 degrés et bout si la température est plus grande que 100 degrés Celsius. Le mercure gèle si la température est plus petite que -38,8 degrés Celsius, fond entre -38,8 et 356,73 degrés et bout si la température est plus grande que 356,73 degrés Celsius.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=temperature>temperature</var> est plus petite que 0. À l'intérieur du bloc de code de cette instruction if, utilisez l'instruction \n    <concept ref=displaySubstanceState>afficherEtatSubstance()</concept>. Le premier paramètre de cette instruction doit être la variable <var id=substance>substance</var>, le deuxième doit être la chaîne\n    <string>\"solide\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=temperature>temperature</var> est plus petite que 100. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=displaySubstanceState>afficherEtatSubstance()</concept>. Le premier paramètre de cette instruction doit être la variable <var id=substance>substance</var>, le deuxième doit être la chaîne\n    <string>\"liquide\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=temperature>temperature</var> est plus grande ou égale à 100. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction    <concept ref=displaySubstanceState>afficherEtatSubstance()</concept>. Le premier paramètre de cette instruction doit être la variable <var id=substance>substance</var>, le deuxième doit être la chaîne\n    <string>\"gazeux\"</string>.</li></ol>",
          "boilerplate"   : "var substance = obtenirSubstance();\nvar temperature = obtenirTemperatureSubstance();\n\nif(substance == \"eau\")\n{\n  // Vérifiez si temperature est plus petite que 0\n  ?\n  \n  // Vérifiez si temperature est plus petite que 100\n  ?\n  \n  // Vérifiez si temperature est plus grande ou égale à 100\n  ?\n  \n}\nelse if(substance == \"mercure\")\n{\n  if(temperature < -38.8)\n  {\n    afficherEtatSubstance(substance, \"solide\");\n  }\n  else if(temperature < 356.73)\n  {\n    afficherEtatSubstance(substance, \"liquide\");\n  }\n  else if(temperature >= 356.73)\n  {\n    afficherEtatSubstance(substance, \"gazeux\");\n  }\n}",
          "solution"      : "var substance = obtenirSubstance();\nvar temperature = obtenirTemperatureSubstance();\n\nif(substance == \"eau\")\n{\n  // Vérifiez si temperature est plus petite que 0\n  if(temperature < 0)\n  {\n    afficherEtatSubstance(substance, \"solide\");\n  }\n  // Vérifiez si temperature est plus petite que 100\n  else if(temperature < 100)\n  {\n    afficherEtatSubstance(substance, \"liquide\");\n  }\n  // Vérifiez si temperature est plus grande ou égale à 100\n  else if(temperature >= 100)\n  {\n    afficherEtatSubstance(substance, \"gazeux\");\n  }\n}\nelse if(substance == \"mercure\")\n{\n  if(temperature < -38.8)\n  {\n    afficherEtatSubstance(substance, \"solide\");\n  }\n  else if(temperature < 356.73)\n  {\n    afficherEtatSubstance(substance, \"liquide\");\n  }\n  else if(temperature >= 356.73)\n  {\n    afficherEtatSubstance(substance, \"gazeux\");\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-131",
          "name"          : "Peut-être l'année prochaine?",
          "normalizedName": "peut-etre lannee prochaine",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Les années bissextiles comptent 366 jours, plutôt que 365 comme les autres années. Les années bissextiles sont les années qui peuvent être divisées entièrement par 4 (sans reste). Toutefois, si l'année peut être divisée entièrement par 100, ce n'est pas une année bissextile, sauf si elle peut être divisée entièrement par 400. Pouvez-vous compléter le programme pour déterminer si une année donnée est une année bissextile?</div><div class=text>Essayez votre programme avec les années suivantes:</div><div class=text>Ces années sont bissextiles: 2008, 1996, 1704, 2000, 2012</div><div class=text>Ces années ne sont pas bissextiles: 2001, 1994, 1701, 1900, 2015</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de la variable <var id=isDividableBy100>estDivisiblePar100</var> est égale à true (vrai).</li><li class=code-item>À l'intérieur du bloc de code de l'instruction if créée dans la première étape, remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=isDividableBy400>estDivisiblePar400</var>. Donnez-lui le résultat de l'instruction \n    <concept ref=\"isDividableByyear, 400\">estDivisiblePar(<var id=year>annee</var>, 400)</concept>.</li><li class=code-item>Toujours à l'intérieur du bloc de code de l'instruction if créée dans la première étape, remplacer le troisième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de la variable <var id=isDividableBy400>estDivisiblePar400</var> est égale à true. À l'intérieur du bloc de code de cette instruction if, utilisez l'instruction \n    <concept ref=console-log>console.log()</concept> pour afficher le message:\n    <string>\"est une année bissextile\"</string>.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une instruction else associée à l'instruction if créée dans la troisième étape. À l'intérieur du bloc de code de cette instruction else, utilisez l'instruction \n    <concept ref=console-log>console.log()</concept> pour afficher le message:\n    <string>\"n'est pas une année bissextile\"</string>.</li><li class=code-item>Remplacer le cinquième point d'interrogation par une instruction else associée à l'instruction if créée dans la première étape. À l'intérieur du bloc de code de cette instruction else, utilisez l'instruction \n    <concept ref=console-log>console.log()</concept> pour afficher le message:\n    <string>\"est une année bissextile\"</string>.</li></ol>",
          "boilerplate"   : "var annee = prompt(\"Entrez une année (ex: 2000)\");\nannee = Number(annee);\n\nconsole.log(\"L'année \" + annee + \"...\");\n\nvar estDivisiblePar4 = estDivisiblePar(annee, 4);\n\nif(estDivisiblePar4 == true)\n{\n  var estDivisiblePar100 = estDivisiblePar(annee, 100);\n\n  // Vérifiez si annee est divisible par 100\n  ?\n  \n  // Créez la variable estDivisiblePar400\n  ?\n\n  // Vérifiez si annee est divisible par 400\n  ?\n  \n  // Ajoutez une instruction else (annee n'est pas divisible par 400)\n  ?\n  \n  // Ajoutez une instruction else (annee n'est pas divisible par 100)\n  ?\n  \n}\nelse\n{\n  console.log(\"n'est pas une année bissextile\");\n}",
          "solution"      : "var annee = prompt(\"Entrez une année (ex: 2000)\");\nannee = Number(annee);\n\nconsole.log(\"L'année \" + annee + \"...\");\n\nvar estDivisiblePar4 = estDivisiblePar(annee, 4);\n\nif(estDivisiblePar4 == true)\n{\n  var estDivisiblePar100 = estDivisiblePar(annee, 100);\n\n  // Vérifiez si annee est divisible par 100\n  if(estDivisiblePar100 == true)\n  {\n    // Créez la variable estDivisiblePar400\n    var estDivisiblePar400 = estDivisiblePar(annee, 400);\n\n    // Vérifiez si annee est divisible par 400\n    if(estDivisiblePar400 == true)\n    {\n      console.log(\"est une année bissextile\");\n    }\n    // Ajoutez une instruction else (annee n'est pas divisible par 400)\n    else\n    {\n      console.log(\"n'est pas une année bissextile\");\n    }\n  }\n  // Ajoutez une instruction else (annee n'est pas divisible par 100)\n  else\n  {\n    console.log(\"est une année bissextile\");\n  }\n}\nelse\n{\n  console.log(\"n'est pas une année bissextile\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-007",
          "name"          : "Quiz 7",
          "description"   : "Les if imbriqués",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-007_q-01",
              "question": "<div>Vrai ou faux. Une instruction <code>if</code> peut avoir plusieurs instructions <code>if</code> à l'intérieur de son bloc de code.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-007_q-01_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "Les blocs de code sont utilisés pour grouper les instructions et nous pouvons mettre n'importe quelle instruction à l'intérieur."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-007_q-02",
              "question": "<div>Choisissez tous les énoncés qui sont vrais.</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>Une instruction <code>if</code> à l'intérieur du bloc de code d'une autre instruction <code>if</code> est toujours exécutée, même si la condition de la première instruction <code>if</code> est fausse.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-007_q-02_a-02",
                  "value"      : 1,
                  "answer"     : "<div>Une instruction <code>if</code> à l'intérieur du bloc de code d'une autre instruction <code>if</code> est seulement exécutée si la condition de la première instruction <code>if</code> est vraie.</div>",
                  "explanation": "Une instruction <code>if</code> à l'intérieur d'un bloc de code est seulement exécutée si le bloc de code est exécuté."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-02_a-03",
                  "value" : 0,
                  "answer": "<div>Une instruction <code>if</code> à l'intérieur du bloc de code d'une autre instruction <code>if</code> ne peut pas avoir une instruction <code>else</code>.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-02_a-04",
                  "value" : 0,
                  "answer": "<div>Une instruction <code>if</code> à l'intérieur du bloc de code d'une autre instruction <code>if</code> ne peut pas avoir une instruction <code>else if</code>.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-007_q-03",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var temperature = 16;\n  \nif(temperature &gt; 10)\n{\n  console.log(\"temperature est plus grande que 10\");\n\n  if(temperature &gt; 15)\n  {\n    console.log(\"temperature est plus grande que 15\");\n  }\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-03_a-01",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>temperature est plus grande que 10</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>temperature est plus grande que 15</samp></div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-007_q-03_a-03",
                  "value"      : 2,
                  "answer"     : "<div>Deux messages: <samp>temperature est plus grande que 10</samp> et <samp>temperature est plus grande que 15</samp></div>",
                  "explanation": "Puisque <code>temperature &gt; 10</code> est vrai, le premier message est affiché. Puisque le bloc de code est exécuté et que <code>temperature &gt; 15</code> est aussi vrai, le deuxième message est aussi affiché."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>Aucun message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-007_q-04",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var temperature = 2;\n\nif(temperature &gt; 10)\n{\n  console.log(\"temperature est plus grande que 10\");\n\n  if(temperature &gt; 15)\n  {\n    console.log(\"temperature est plus grande que 15\");\n  }\n}\nelse\n{\n  console.log(\"temperature est plus petite que 10\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-04_a-01",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>temperature est plus grande que 10</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>temperature est plus grande que 15</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-04_a-03",
                  "value" : 0,
                  "answer": "<div>Deux messages: <samp>temperature est plus grande que 10</samp> et <samp>temperature est plus grande que 15</samp></div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-007_q-04_a-04",
                  "value"      : 2,
                  "answer"     : "<div>Un message: <samp>temperature est plus grande que 10</samp></div>",
                  "explanation": "Puisque <code>temperature &gt; 10</code> est faux, le bloc de code de l'instruction <code>else</code> est exécuté."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-04_a-05",
                  "value" : 0,
                  "answer": "<div>Aucun message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-007_q-05",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var temperature = 11;\n\nif(temperature &gt; 10)\n{\n  if(temperature &gt; 15)\n  {\n    console.log(\"temperature est plus grande que 15\");\n  }\n  else\n  {\n    console.log(\"temperature est entre 10 et 15\");\n  }\n}\nelse\n{\n  console.log(\"temperature est plus petite que 10\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>temperature est plus grande que 15</samp></div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-007_q-05_a-02",
                  "value"      : 2,
                  "answer"     : "<div>Un message: <samp>temperature est entre 10 et 15</samp></div>",
                  "explanation": "Puisque <code>temperature &gt; 10</code> est vrai, le bloc de code de la première instruction <code>if</code> est exécuté. Puis, puisque <code>temperature &gt; 15</code> est faux, le bloc de code de la première instruction <code>else</code> est exécuté."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-05_a-03",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>temperature est plus petite que 10</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-05_a-04",
                  "value" : 0,
                  "answer": "<div>Deux messages: <samp>temperature est plus petite que 10</samp> et <samp>temperature est entre 10 et 15</samp></div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-007_q-06",
              "question": "<div>Quelle est l'erreur dans le programme suivant?</div>\n<pre class=\"language-javascript\"><code>var poids = 3;\n  \nif(poids &gt; 10)\n{\n  console.log(\"poids est plus grand que 10\");\n\n  if(poids &lt; 5)\n  {\n    console.log(\"poids est plus petit que 5\");\n  }\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-007_q-06_a-01",
                  "value"      : 2,
                  "answer"     : "<div>La deuxième instruction <code>if</code> ne peut jamais être exécutée. Un nombre ne peut pas être à la fois plus grand que 10 et plus petit que 5.</div>",
                  "explanation": "Le code contient une erreur de logique. L'instruction <code>if</code> interne devrait être à l'extérieur du bloc de code de la première instruction <code>if</code>."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>Une instruciton <code>if</code> se trouve à l'intérieur du bloc de code d'une autre instruction <code>if</code>.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>Les conditions des deux instructions <code>if</code> devraient être échangées.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>Il n'y a aucune erreur.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-007_q-07",
              "question": "<div>Quelle est l'erreur dans le programme suivant?</div>\n<pre class=\"language-javascript\"><code>var poids = 7;\n\nif(poids &lt; 15)\n{\n  console.log(\"poids est plus petit que 15\");\n\n  else\n  {\n    console.log(\"poids est plus grand que 15\");\n  }\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-07_a-01",
                  "value" : 0,
                  "answer": "<div>L'instruction <code>else</code> doit être remplacée par une instruction <code>if</code> qui vérifie si <var>poids</var> est plus grand que 15.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-07_a-02",
                  "value" : 0,
                  "answer": "<div>Il manque des accolades ({ }).</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-007_q-07_a-03",
                  "value"      : 2,
                  "answer"     : "<div>L'instruction <code>else</code> à l'intérieur du bloc de code de la première instruction <code>if</code> doit être déplacée après l'instruction if.</div>",
                  "explanation": "Une instruction <code>else</code> ne peut pas apparaître seule dans une instruction conditionnelle. Pour que le code soit valide, l'instruction <code>else</code> doit être déplacée à l'extérieur du bloc de code, tout de suite après la dernière accolade fermante (})."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-007_q-07_a-04",
                  "value" : 0,
                  "answer": "<div>Il n'y a aucune erreur.</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 7",
          "trialMode"     : false
        }
      ],
      "created"                 : 1543060095522,
      "createdBy"               : "xavier.baudry",
      "normalizedCreatedBy"     : "xavier.baudry",
      "lastModified"            : 1543060095522,
      "lastModifiedBy"          : "xavier.baudry",
      "normalizedLastModifiedBy": "xavier.baudry"
    },
    {
      "_id"                     : "cs-1B_fr-CA",
      "name"                    : "Introduction à la programmation (Deuxième partie)",
      "normalizedName"          : "introduction a la programmation deuxieme partie",
      "shortDescription"        : "Ce cours continue et complète la première partie en explorant des sujets de programmation plus avancés.",
      "longDescription"         : "Par le biais de projets STEM, vous apprendrez des concepts plus avancés d'un langage de programmation de haut niveau (JavaScript): les instructions conditionnelles, les opérateurs relationnels et les boucles. À la fin du cours, vous serez capables de résoudre des problèmes complexes par des programmes.",
      "locale"                  : "fr-CA",
      "grades"                  : ["6"],
      "allowLimited"            : false,
      "trialMode"               : true,
      "comingSoon"              : false,
      "enabled"                 : true,
      "units"                   : [
        {
          "_id"           : "cs-1_fr-CA_exercise-265",
          "name"          : "L'opérateur ET",
          "normalizedName": "loperateur et",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-265_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-265_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-15",
          "name"          : "Projet 15 - Prédire les inondations",
          "normalizedName": "projet 15 - predire les inondations",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-140",
          "name"          : "Une journée pluvieuse",
          "normalizedName": "une journee pluvieuse",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-140_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-140_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par deux perluètes (&amp;&amp;).</li></ol>",
          "boilerplate"   : "var pluie = obtenirPluie();\n\nif(pluie >= 0 ? pluie < 50)\n{\n  risqueInondation(\"aucun\");\n}\nelse\n{\n  risqueInondation(\"garanti\");\n}",
          "solution"      : "var pluie = obtenirPluie();\n\nif(pluie >= 0 && pluie < 50)\n{\n  risqueInondation(\"aucun\");\n}\nelse\n{\n  risqueInondation(\"garanti\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"and operator\">Opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">L'opérateur ET est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si deux ou plusieurs <concept ref=\"boolean\">valeurs booléennes</concept> sont vraies.</div><div class=\"text\">Une expression qui utilise l'opérateur ET est seulement vraie si toutes les conditions qui forment l'expression sont vraies.</div><div class=\"text\">L'opérateur s'écrit avec deux perluètes (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur AND</div><pre class=\"codeBlock\">var resultat = true && true; // resultat est true (vrai)\nresultat = false && true; // resultat est false (faux)\nresultat = true && false; // resultat est false (faux)\nresultat = false && false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-141",
          "name"          : "Des bottes ET un parapluie",
          "normalizedName": "des bottes et un parapluie",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-141_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-141_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Modifier la condition de l'instruction else if. La condition doit vérifier si <var id=rainfall>pluie</var> est plus grande ou égale à 50 <strong>et</strong> si <var id=rainfall>pluie</var> <strong>est plus petite que 100</strong>. Vous devrez utiliser l'opérateur ET (&amp;&amp;).</li></ol>",
          "boilerplate"   : "var pluie = obtenirPluie();\n\nif(pluie >= 0 && pluie < 50)\n{\n  risqueInondation(\"aucun\");\n}\nelse if(pluie >= 50 ?)\n{\n  risqueInondation(\"faible\");\n}\nelse\n{\n  risqueInondation(\"garanti\");\n}",
          "solution"      : "var pluie = obtenirPluie();\n\nif(pluie >= 0 && pluie < 50)\n{\n  risqueInondation(\"aucun\");\n}\nelse if(pluie >= 50 && pluie < 100)\n{\n  risqueInondation(\"faible\");\n}\nelse\n{\n  risqueInondation(\"garanti\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"and operator\">Opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">L'opérateur ET est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si deux ou plusieurs <concept ref=\"boolean\">valeurs booléennes</concept> sont vraies.</div><div class=\"text\">Une expression qui utilise l'opérateur ET est seulement vraie si toutes les conditions qui forment l'expression sont vraies.</div><div class=\"text\">L'opérateur s'écrit avec deux perluètes (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur AND</div><pre class=\"codeBlock\">var resultat = true && true; // resultat est true (vrai)\nresultat = false && true; // resultat est false (faux)\nresultat = true && false; // resultat est false (faux)\nresultat = false && false; // resultat est false (faux)</pre>\n<h3 class=\"title\" ref=\"and with if\">Opérateur ET (&amp;&amp;) et instructions if</h3>\n<div class=\"text\">L'<concept ref=\"and operator\">opérateur ET</concept> est souvent utilisé dans les <concept ref=\"if statement\">instructions if</concept> pour vérifier plusieurs <concept ref=\"condition\">conditions</concept> dans une seule instruction if.</div><div class=\"text\">Toutes les conditions qui forment l'expression doivent être vraies pour que le bloc de code soit exécuté.</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur AND dans une instruction if</div><pre class=\"codeBlock\">if(faim == true && argent > 5)\n{\n  console.log(\"Vous pouvez acheter de la pizza!\");\n}</pre>\n<div class=\"text\">Si vous avez faim et avez plus de 5$, vous pouvez acheter de la pizza.</div><div class=\"text\">Si vous n'avez pas faim, mais que vous avez plus de 5$, vous ne pouvez pas acheter de pizza.</div><div class=\"text\">Si vous avez faim, mais que n'avez pas plus de 5$, vous ne pouvez pas acheter de pizza.</div><div class=\"text\">Si vous n'avez pas faim et que vous n'avez pas plus de 5$, vous ne pouvez pas acheter de pizza.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-142",
          "name"          : "Nuageux, avec un risque d'inondation",
          "normalizedName": "nuageux avec un risque dinondation",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Pratiquons-nous à utiliser l'opérateur logique ET (&amp;&amp;). Rappelez-vous, pour combiner deux conditions, nous les écrivons ainsi:</div><div class=text>premiereCondition &amp;&amp; deuxiemeCondition</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=rainfall>pluie</var> est plus grande ou égale à 100 <strong>et</strong> si <var id=rainfall>pluie</var> est plus petite que 150. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=floodingChance>risqueInondation(<string>\"élevé\"</string>)</concept>. <strong>Indice:</strong> vous devrez utiliser l'opérateur ET (&amp;&amp;).</li></ol>",
          "boilerplate"   : "var pluie = obtenirPluie();\n\nif(pluie >= 0 && pluie < 50)\n{\n  risqueInondation(\"aucun\");\n}\nelse if(pluie >= 50 && pluie < 100)\n{\n  risqueInondation(\"faible\");\n}\n// Créez l'instruction else if ici\n?\n\nelse\n{\n  risqueInondation(\"garanti\");\n}",
          "solution"      : "var pluie = obtenirPluie();\n\nif(pluie >= 0 && pluie < 50)\n{\n  risqueInondation(\"aucun\");\n}\nelse if(pluie >= 50 && pluie < 100)\n{\n  risqueInondation(\"faible\");\n}\n// Créez l'instruction else if ici\nelse if(pluie >= 100 && pluie < 150)\n{\n  risqueInondation(\"élevé\");\n}\nelse\n{\n  risqueInondation(\"garanti\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-143",
          "name"          : "Et il neige!",
          "normalizedName": "et il neige!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-143_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-143_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si <var id=snow>neige</var> <strong>est plus petite que 40</strong>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si <var id=snow>neige</var> <strong>est plus petite que 60</strong>.</li></ol>",
          "boilerplate"   : "var pluie = obtenirPluie();\nvar neige = obtenirNeige();\n\nif(pluie >= 0 && pluie < 50 && neige < 20)\n{\n  risqueInondation(\"aucun\");\n}\nelse if(pluie >= 50 && pluie < 100 && ?)\n{\n  risqueInondation(\"faible\");\n}\nelse if(pluie >= 100 && pluie < 150 && ?)\n{\n  risqueInondation(\"élevé\");\n}\nelse\n{\n  risqueInondation(\"garanti\");\n}",
          "solution"      : "var pluie = obtenirPluie();\nvar neige = obtenirNeige();\n\nif(pluie >= 0 && pluie < 50 && neige < 20)\n{\n  risqueInondation(\"aucun\");\n}\nelse if(pluie >= 50 && pluie < 100 && neige < 40)\n{\n  risqueInondation(\"faible\");\n}\nelse if(pluie >= 100 && pluie < 150 && neige < 60)\n{\n  risqueInondation(\"élevé\");\n}\nelse\n{\n  risqueInondation(\"garanti\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"multiple and\">Opérateurs ET multiples dans une expression</h3>\n<div class=\"text\">Nous pouvons utiliser plus d'un <concept ref=\"and operator\">opérateur ET</concept> pour vérifier plusieurs conditions dans une seule expression. Pour que l'expression soit <concept ref=\"boolean\">vraie</concept>, chaque condition doit aussi être vraie. Si une seule condition est fausse, l'expression entière est aussi fausse.</div>\n<div class=\"code-sample-title\">Opérateurs ET multiples</div><pre class=\"codeBlock\">if(faim == true && argent > 5 && jour == \"mardi\")\n{\n  console.log(\"Vous pouvez acheter de la pizza!\");\n}</pre>\n<div class=\"text\">Si vous avez faim et que vous avez plus de 5$ et que nous sommes mardi, vous pouvez acheter de la pizza.</div><div class=\"text\">Si vous n'avez pas faim, mais que vous avez plus de 5$ et que nous sommes mardi, vous ne pouvez pas acheter de pizza.</div><div class=\"text\">Si vous avez faim, mais que vous n'avez pas plus de 5$ et que nous sommes mardi, vous ne pouvez pas acheter de pizza.</div><div class=\"text\">Si vous avez faim et que vous avez plus de 5$, mais que nous ne sommes pas mardi, vous ne pouvez pas acheter de pizza.</div><div class=\"text\">Si vous n'avez pas faim, que vous n'avez pas plus de 5$ et que nous ne sommes pas mardi, vous ne pouvez pas acheter de pizza.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-144",
          "name"          : "Quelle belle journée!",
          "normalizedName": "quelle belle journee!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Réparons ce programme simple pour qu'il affiche le message \n  <string>\"Quelle belle journée!\"</string> si la température est entre 15 et 30 degrés Celsius. Sinon, il doit afficher le message \n  <string>\"Il vaut mieux rester à l'intérieur...\"</string>.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une condition qui vérifie si la valeur de <var id=temperature>temperature</var> est plus grande ou égale à 15 <strong>et</strong> si la valeur de <var id=temperature>temperature</var> est plus petite ou égale à 30. <strong>Indice:</strong> vous devrez utiliser l'opérateur ET (&amp;&amp;).</li></ol>",
          "boilerplate"   : "var temperature = obtenirTemperature();\n\nif(?)\n{\n  console.log(\"Quelle belle journée!\");\n}\nelse\n{\n  console.log(\"Il vaut mieux rester à l'intérieur...\");\n}",
          "solution"      : "var temperature = obtenirTemperature();\n\nif(temperature >= 15 && temperature <= 30)\n{\n  console.log(\"Quelle belle journée!\");\n}\nelse\n{\n  console.log(\"Il vaut mieux rester à l'intérieur...\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-145",
          "name"          : "Roche, papier, ciseaux, version 2",
          "normalizedName": "roche papier ciseaux version 2",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Apportons une mise à jour au programme de roche, papier, ciseaux que nous avons créé plus tôt. Cette fois-ci, nous n'utiliserons pas d'instructions if imbriquées pour créer le programme. Nous vérifierons plutôt plusieurs conditions en même temps à l'aide de l'opérateur ET.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction qui donne à <var id=playerChoice>choixJoueur</var> la valeur de <var id=playerChoice>choixJoueur</var> en minuscules. Vous devrez utiliser l'instruction \n    <concept ref=toLowerCase>.toLowerCase()</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=playerChoice>choixJoueur</var> est égale à\n    <string>\"roche\"</string> <strong>et</strong> si la valeur de <var id=computerChoice>choixOrdinateur</var> est égale à \n    <string>\"ciseaux\"</string>. <strong>Indice:</strong> vous devrez utiliser l'opérateur ET (&amp;&amp;).</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de  <var id=playerChoice>choixJoueur</var>est égale à \n    <string>\"papier\"</string> <strong>et</strong> si la valeur de <var id=computerChoice>choixOrdinateur</var> est égale à \n    <string>\"roche\"</string>.</li></ol>",
          "boilerplate"   : "var choixJoueur = prompt(\"Choisissez: roche, papier ou ciseaux?\");\nvar choixOrdinateur = obtenirRochePapierCiseaux();\n\n// Mettez le choix du joueur en minuscules\n?\nchoixOrdinateur = choixOrdinateur.toLowerCase();\n\nafficherChoix(choixJoueur, choixOrdinateur);\n\nif(choixJoueur == choixOrdinateur)\n{\n  resultatDuJeu(\"égalité\");\n}\nelse if(?)\n{\n  resultatDuJeu(\"victoire\");\n}\nelse if(?)\n{\n  resultatDuJeu(\"victoire\");\n}\nelse if(choixJoueur == \"ciseaux\" && choixOrdinateur == \"papier\")\n{\n  resultatDuJeu(\"victoire\");\n}\nelse\n{\n  resultatDuJeu(\"défaite\");\n}",
          "solution"      : "var choixJoueur = prompt(\"Choisissez: roche, papier ou ciseaux?\");\nvar choixOrdinateur = obtenirRochePapierCiseaux();\n\n// Mettez le choix du joueur en minuscules\nchoixJoueur = choixJoueur.toLowerCase();\nchoixOrdinateur = choixOrdinateur.toLowerCase();\n\nafficherChoix(choixJoueur, choixOrdinateur);\n\nif(choixJoueur == choixOrdinateur)\n{\n  resultatDuJeu(\"égalité\");\n}\nelse if(choixJoueur == \"roche\" && choixOrdinateur == \"ciseaux\")\n{\n  resultatDuJeu(\"victoire\");\n}\nelse if(choixJoueur == \"papier\" && choixOrdinateur == \"roche\")\n{\n  resultatDuJeu(\"victoire\");\n}\nelse if(choixJoueur == \"ciseaux\" && choixOrdinateur == \"papier\")\n{\n  resultatDuJeu(\"victoire\");\n}\nelse\n{\n  resultatDuJeu(\"défaite\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"toLowerCase()\">Instruction .toLowerCase()</h3>\n<div class=\"text\">L'<concept ref=\"string\">instruction</concept> .toLowerCase() peut être utilisée pour convertir les lettres majuscules d'une <concept ref=\"string\">chaîne</concept> en minuscules.</div><div class=\"text\">Remarquez que les lettres qui sont déjà en minuscules ne sont pas affectées par l'instruction .toLowerCase().</div>\n<div class=\"code-sample-title\">Exemple de l'instruction .toLowerCase()</div><pre class=\"codeBlock\">var maChaine = \"Programmer Est Amusant!\";\nmaChaine = maChaine.toLowerCase();\nconsole.log(maChaine); // affiche: programmer est amusant!</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-146",
          "name"          : "Une friandise logique",
          "normalizedName": "une friandise logique",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>EduCode veut lancer une ligne de friandises qui seront vendues dans une fête foraine. Toutefois, certaines friandises ne sont disponibles que lorsque la température le permet! Nous avons besoin de votre aide pour construire un programme qui détermine les friandises qui sont disponibles. Voici les conditions qui s'appliquent à chaque friandise:</div><ul class=algorithm><li>Les <strong>Fluffles</strong> sont seulement disponibles si la température est <strong>plus petite ou égale à 18 degrés Celsius</strong> et coûtent <strong>2$</strong>.</li><li>Les <strong>Mr. Cold</strong> sont seulement disponibles si la température est <strong>entre 18 et 25 degrés</strong> et coûtent aussi <strong>2$</strong>.</li><li>Les <strong>EduCool</strong> sont seulement disponibles si la température est <strong>plus grande que 25 degrés</strong> et coûtent <strong>3$</strong>.</li><li>Les <strong>Sticky Code</strong> sont disponibles si les autres conditions ne sont pas remplies!</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=temperature>temperature</var> est plus petite ou égale à 18 <strong>et</strong> si la valeur de <var id=money>argent</var> est plus grande ou égale à 2. <strong>Indice:</strong> vous devrez utiliser l'opérateur ET (&amp;&amp;).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=temperature>temperature</var> est plus grande que 18 <strong>et</strong> si la valeur de <var id=temperature>temperature</var> est plus petite ou égale à 25.</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=temperature>temperature</var> est plus grande que 25 <strong>et</strong> si la valeur de <var id=money>argent</var> est plus grande ou égale à 3.</li></ol>",
          "boilerplate"   : "var temperature = obtenirTemperature();\nvar argent = prompt(\"Combien d'argent avez-vous?\");\n\nargent = Number(argent);\n\nif(?)\n{\n  afficherFriandise(\"Fluffle\");\n}\nelse if(? && argent >= 2)\n{\n  afficherFriandise(\"Mr. Cold\");\n}\nelse if(?)\n{\n  afficherFriandise(\"EduCool\");\n}\nelse\n{\n  afficherFriandise(\"StickyCode\");\n}",
          "solution"      : "var temperature = obtenirTemperature();\nvar argent = prompt(\"Combien d'argent avez-vous?\");\n\nargent = Number(argent);\n\nif(temperature <= 18 && argent >= 2)\n{\n  afficherFriandise(\"Fluffle\");\n}\nelse if(temperature > 18 && temperature <= 25 && argent >= 2)\n{\n  afficherFriandise(\"Mr. Cold\");\n}\nelse if(temperature > 25 && argent >= 3)\n{\n  afficherFriandise(\"EduCool\");\n}\nelse\n{\n  afficherFriandise(\"StickyCode\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-147",
          "name"          : "La couleur de la longueur",
          "normalizedName": "la couleur de la longueur",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>La lumière a une longueur d'onde qui peut être mesurée en nanomètres (nm). Elle est habituellement divisée en 6 couleurs:</div><ul class=algorithm><li><strong>Violet:</strong> 400 nm ou plus, mais moins de 440 nm</li><li><strong>Bleu:</strong> 440 nm ou plus, mais moins de 490 nm</li><li><strong>Vert:</strong> 490 nm ou plus, mais moins de 570 nm</li><li><strong>Jaune:</strong> 570 nm ou plus, mais moins de 585 nm</li><li><strong>Orange:</strong> 585 nm ou plus, mais moins de 620 nm</li><li><strong>Rouge:</strong> 620 nm ou plus, mais moins de 780 nm</li></ul><div class=text>Construisons un programme qui analyse la longueur d'onde de la lumière et détermine sa couleur!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=wavelength>longueurOnde</var> est plus grande ou égale à 440 <strong>et</strong> si la valeur de <var id=wavelength>longueurOnde</var> est plus petite que 490. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=showColor>afficherCouleur(<string>\"bleu\"</string>)</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=wavelength>longueurOnde</var> est plus grande ou égale à 490 <strong>et</strong> si la valeur de <var id=wavelength>longueurOnde</var> est plus petite que 570. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=showColor>afficherCouleur(<string>\"vert\"</string>)</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=wavelength>longueurOnde</var> est plus grande ou égale à 570 <strong>et</strong> si la valeur de <var id=wavelength>longueurOnde</var> est plus petite que 585. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=showColor>afficherCouleur(<string>\"jaune\"</string>)</concept>.</li></ol>",
          "boilerplate"   : "var longueurOnde = obtenirLongueurOnde();\n\nif(longueurOnde >= 400 && longueurOnde < 440)\n{\n  afficherCouleur(\"violet\");\n}\n// Ajoutez une instruction else if ici pour le bleu\n?\n\n// Ajoutez une instruction else if ici pour le vert\n?\n\n// Ajoutez une instruction else if ici pour le jaune\n?\n\nelse if(longueurOnde >= 585 && longueurOnde < 620)\n{\n  afficherCouleur(\"orange\");\n}\nelse if(longueurOnde >= 620 && longueurOnde < 780)\n{\n  afficherCouleur(\"rouge\");\n}",
          "solution"      : "var longueurOnde = obtenirLongueurOnde();\n\nif(longueurOnde >= 400 && longueurOnde < 440)\n{\n  afficherCouleur(\"violet\");\n}\n// Ajoutez une instruction else if ici pour le bleu\nelse if(longueurOnde >= 440 && longueurOnde < 490)\n{\n  afficherCouleur(\"bleu\");\n}\n// Ajoutez une instruction else if ici pour le vert\nelse if(longueurOnde >= 490 && longueurOnde < 570)\n{\n  afficherCouleur(\"vert\");\n}\n// Ajoutez une instruction else if ici pour le jaune\nelse if(longueurOnde >= 570 && longueurOnde < 585)\n{\n  afficherCouleur(\"jaune\");\n}\nelse if(longueurOnde >= 585 && longueurOnde < 620)\n{\n  afficherCouleur(\"orange\");\n}\nelse if(longueurOnde >= 620 && longueurOnde < 780)\n{\n  afficherCouleur(\"rouge\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-148",
          "name"          : "Un pH potable",
          "normalizedName": "un ph potable",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>L'eau est souvent contaminée par toutes sortes de particules (appelée polluants). Certaines agences gouvernementales ont la responsabilité de déterminer si l'eau est sécuritaire pour consommation. Deux conditions sont nécessaires pour que l'eau soit sécuritaire: le pH de l'eau doit être entre 5 et 9 et l'eau ne doit pas contenir plus de 50 microgrammes de fluorène. Construisons un programme qui détermine si l'eau est sécuritaire pour consommation.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=phLevel>niveauPh</var> est entre 5 et 9 (<strong>incluant 5 et 9</strong>).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. Cette instruction if doit être mise à l'intérieur du bloc de code de l'autre instruction if. La condition de cette nouvelle instruction if doit vérifier si la valeur de <var id=fluoreneQuantity>quantiteFluorene</var> est plus petite ou égale à 50. À l'intérieur du bloc de code de cette instruction if, utilisez l'instruction \n    <concept ref=waterQuality>qualiteEau(<string>\"sécuritaire\"</string>)</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction else associée à l'instruction if créée dans la deuxième étape. À l'intérieur du bloc de code de cette instruction else, utilisez l'instruction \n    <concept ref=waterQuality>qualiteEau(<string>\"dangereuse</string>\")</concept>.</li></ol>",
          "boilerplate"   : "var niveauPh = obtenirNiveauPh();\nvar quantiteFluorene = obtenirQuantiteFluorene();\n\nif(?)\n{\n  // Ajoutez une instruction if ici\n  ?\n  \n  // Ajoutez une instruction else ici\n  ?\n  \n}\nelse\n{\n  qualiteEau(\"mauvaise\");\n}",
          "solution"      : "var niveauPh = obtenirNiveauPh();\nvar quantiteFluorene = obtenirQuantiteFluorene();\n\nif(niveauPh >= 5 && niveauPh <= 9)\n{\n  // Ajoutez une instruction if ici\n  if(quantiteFluorene <= 50)\n  {\n    qualiteEau(\"sécuritaire\");\n  }\n  // Ajoutez une instruction else ici\n  else\n  {\n    qualiteEau(\"dangereuse\");\n  }\n}\nelse\n{\n  qualiteEau(\"mauvaise\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-16",
          "name"          : "Projet 16 - Un peu de dendrologie",
          "normalizedName": "projet 16 - un peu de dendrologie",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-149",
          "name"          : "Mais, c'est un pin gris!",
          "normalizedName": "mais cest un pin gris!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-149_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-149_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=height>hauteur</var> est plus grande ou égale à 9 <strong>et</strong> si la valeur de <var id=height>hauteur</var> est plus petite ou égale à 22.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=height>hauteur</var> est plus grande ou égale à 14 <strong>et</strong> si la valeur de <var id=height>hauteur</var> est plus petite ou égale à 20.</li></ol>",
          "boilerplate"   : "var hauteur = obtenirHauteur();\n\nif(?)\n{\n  afficherArbre(\"pin gris\");\n}\nelse if(?)\n{\n  afficherArbre(\"sapin baumier\");\n}\nelse\n{\n  afficherArbre(\"arbre rare\");\n}",
          "solution"      : "var hauteur = obtenirHauteur();\n\nif(hauteur >= 9 && hauteur <= 22)\n{\n  afficherArbre(\"pin gris\");\n}\nelse if(hauteur >= 14 && hauteur <= 20)\n{\n  afficherArbre(\"sapin baumier\");\n}\nelse\n{\n  afficherArbre(\"arbre rare\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-150",
          "name"          : "Un herbier moderne",
          "normalizedName": "un herbier moderne",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ajoutons encore trois arbres à notre programme!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=height>hauteur</var> est plus grande ou égale à 18 <strong>et</strong> si la valeur de <var id=height>hauteur</var> est plus petite ou égale à 40.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=height>hauteur</var> est plus grande ou égale à 20 <strong>et</strong> si la valeur de <var id=height>hauteur</var> est plus petite ou égale à 35.</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=height>hauteur</var> est plus grande ou égale à 50 <strong>et</strong> si la valeur de <var id=height>hauteur</var> est plus petite ou égale à 58.</li></ol>",
          "boilerplate"   : "var hauteur = obtenirHauteur();\n\nif(hauteur >= 9 && hauteur <= 22)\n{\n  afficherArbre(\"pin gris\");\n}\nelse if(hauteur >= 14 && hauteur <= 20)\n{\n  afficherArbre(\"sapin baumier\");\n}\nelse if(?)\n{\n  afficherArbre(\"épinette rouge\");\n}\nelse if(?)\n{\n  afficherArbre(\"pin rouge\");\n}\nelse if(?)\n{\n  afficherArbre(\"pin blanc\");\n}\nelse\n{\n  afficherArbre(\"arbre rare\");\n}",
          "solution"      : "var hauteur = obtenirHauteur();\n\nif(hauteur >= 9 && hauteur <= 22)\n{\n  afficherArbre(\"pin gris\");\n}\nelse if(hauteur >= 14 && hauteur <= 20)\n{\n  afficherArbre(\"sapin baumier\");\n}\nelse if(hauteur >= 18 && hauteur <= 40)\n{\n  afficherArbre(\"épinette rouge\");\n}\nelse if(hauteur >= 20 && hauteur <= 35)\n{\n  afficherArbre(\"pin rouge\");\n}\nelse if(hauteur >= 50 && hauteur <= 58)\n{\n  afficherArbre(\"pin blanc\");\n}\nelse\n{\n  afficherArbre(\"arbre rare\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-151",
          "name"          : "De fil en aiguille",
          "normalizedName": "de fil en aiguille",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-151_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-151_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=needleCount>nombreAiguilles</var> est égale à 4. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=needleCount>nombreAiguilles</var> est égale à 1. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=needleCount>nombreAiguilles</var> est égale à 1. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li><li class=code-item>Remplacer le quatrième point d'interrogation par une condition qui vérifie si la valeur de <var id=needleCount>nombreAiguilles</var> est égale à 2. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li><li class=code-item>Remplacer le cinquième point d'interrogation par une condition qui vérifie si la valeur de <var id=needleCount>nombreAiguilles</var> est égale à 5. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li></ol>",
          "boilerplate"   : "var hauteur = obtenirHauteur();\nvar nombreAiguilles = obtenirAiguilles();\n\nif((hauteur >= 9 && hauteur <= 22) ?)\n{\n  afficherArbre(\"pin gris\");\n}\nelse if((hauteur >= 14 && hauteur <= 20) ?)\n{\n  afficherArbre(\"sapin baumier\");\n}\nelse if((hauteur >= 18 && hauteur <= 40) ?)\n{\n  afficherArbre(\"épinette rouge\");\n}\nelse if((hauteur >= 20 && hauteur <= 35) ?)\n{\n  afficherArbre(\"pin rouge\");\n}\nelse if((hauteur >= 50 && hauteur <= 58) ?)\n{\n  afficherArbre(\"pin blanc\");\n}\nelse\n{\n  afficherArbre(\"arbre rare\");\n}",
          "solution"      : "var hauteur = obtenirHauteur();\nvar nombreAiguilles = obtenirAiguilles();\n\nif((hauteur >= 9 && hauteur <= 22) && (nombreAiguilles == 4))\n{\n  afficherArbre(\"pin gris\");\n}\nelse if((hauteur >= 14 && hauteur <= 20) && (nombreAiguilles == 1))\n{\n  afficherArbre(\"sapin baumier\");\n}\nelse if((hauteur >= 18 && hauteur <= 40) && (nombreAiguilles == 1))\n{\n  afficherArbre(\"épinette rouge\");\n}\nelse if((hauteur >= 20 && hauteur <= 35) && (nombreAiguilles == 2))\n{\n  afficherArbre(\"pin rouge\");\n}\nelse if((hauteur >= 50 && hauteur <= 58) && (nombreAiguilles == 5))\n{\n  afficherArbre(\"pin blanc\");\n}\nelse\n{\n  afficherArbre(\"arbre rare\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-152",
          "name"          : "Pour la forme",
          "normalizedName": "pour la forme",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-152_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-152_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=needleShape>formeAiguilles</var> est égale à <string>\"ronde\"</string>. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=needleShape>formeAiguilles</var> est égale à <string>\"plate\"</string>. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=needleShape>formeAiguilles</var> est égale à <string>\"ronde\"</string>. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li><li class=code-item>Remplacer le quatrième point d'interrogation par une condition qui vérifie si la valeur de <var id=needleShape>formeAiguilles</var> est égale à <string>\"ronde\"</string>. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li><li class=code-item>Remplacer le cinquième point d'interrogation par une condition qui vérifie si la valeur de <var id=needleShape>formeAiguilles</var> est égale à <string>\"ronde\"</string>. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li></ol>",
          "boilerplate"   : "var hauteur = obtenirHauteur();\nvar nombreAiguilles = obtenirAiguilles();\nvar formeAiguilles = obtenirFormeAiguilles();\n\nif((hauteur >= 9 && hauteur <= 22) && (nombreAiguilles == 4) ?)\n{\n  afficherArbre(\"pin gris\");\n}\nelse if((hauteur >= 14 && hauteur <= 20) && (nombreAiguilles == 1) ?)\n{\n  afficherArbre(\"sapin baumier\");\n}\nelse if((hauteur >= 18 && hauteur <= 40) && (nombreAiguilles == 1) ?)\n{\n  afficherArbre(\"épinette rouge\");\n}\nelse if((hauteur >= 20 && hauteur <= 35) && (nombreAiguilles == 2) ?)\n{\n  afficherArbre(\"pin rouge\");\n}\nelse if((hauteur >= 50 && hauteur <= 58) && (nombreAiguilles == 5) ?)\n{\n  afficherArbre(\"pin blanc\");\n}\nelse\n{\n  afficherArbre(\"arbre rare\");\n}",
          "solution"      : "var hauteur = obtenirHauteur();\nvar nombreAiguilles = obtenirAiguilles();\nvar formeAiguilles = obtenirFormeAiguilles();\n\nif((hauteur >= 9 && hauteur <= 22) && (nombreAiguilles == 4) && (formeAiguilles == \"ronde\"))\n{\n  afficherArbre(\"pin gris\");\n}\nelse if((hauteur >= 14 && hauteur <= 20) && (nombreAiguilles == 1) && (formeAiguilles == \"plate\"))\n{\n  afficherArbre(\"sapin baumier\");\n}\nelse if((hauteur >= 18 && hauteur <= 40) && (nombreAiguilles == 1) && (formeAiguilles == \"ronde\"))\n{\n  afficherArbre(\"épinette rouge\");\n}\nelse if((hauteur >= 20 && hauteur <= 35) && (nombreAiguilles == 2) && (formeAiguilles == \"ronde\"))\n{\n  afficherArbre(\"pin rouge\");\n}\nelse if((hauteur >= 50 && hauteur <= 58) && (nombreAiguilles == 5) && (formeAiguilles == \"ronde\"))\n{\n  afficherArbre(\"pin blanc\");\n}\nelse\n{\n  afficherArbre(\"arbre rare\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-153",
          "name"          : "De long en large",
          "normalizedName": "de long en large",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ajoutons un dernier paramètre à notre programme qui identifie les arbres. Nous allons cette fois examiner la longueur du fascicule. Toutefois, puisque la longueur peut varier grandement, nous utilisons une chaîne pour classer les fascicules en deux longueurs: \"courte\" et \"longue\".</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=needleLength>longueurAiguilles</var> est égale à \n    <string>\"longue\"</string>. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=needleLength>longueurAiguilles</var> est égale à\n    <string>\"courte\"</string>. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=needleLength>longueurAiguilles</var> est égale à \n    <string>\"courte\"</string>. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li><li class=code-item>Remplacer le quatrième point d'interrogation par une condition qui vérifie si la valeur de <var id=needleLength>longueurAiguilles</var> est égale à \n    <string>\"longue\"</string>. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li><li class=code-item>Remplacer le cinquième point d'interrogation par une condition qui vérifie si la valeur de <var id=needleLength>longueurAiguilles</var> est égale à \n    <string>\"longue\"</string>. N'oubliez pas d'ajouter l'opérateur ET (&amp;&amp;) devant cette condition!</li></ol>",
          "boilerplate"   : "var hauteur = obtenirHauteur();\nvar nombreAiguilles = obtenirAiguilles();\nvar formeAiguilles = obtenirFormeAiguilles();\nvar longueurAiguilles = obtenirLongueurAiguilles();\n\nif((hauteur >= 9 && hauteur <= 22) && (nombreAiguilles == 4) && (formeAiguilles == \"ronde\") ?)\n{\n  afficherArbre(\"pin gris\");\n}\nelse if((hauteur >= 14 && hauteur <= 20) && (nombreAiguilles == 1) && (formeAiguilles == \"plate\") ?)\n{\n  afficherArbre(\"sapin baumier\");\n}\nelse if((hauteur >= 18 && hauteur <= 40) && (nombreAiguilles == 1) && (formeAiguilles == \"ronde\") ?)\n{\n  afficherArbre(\"épinette rouge\");\n}\nelse if((hauteur >= 20 && hauteur <= 35) && (nombreAiguilles == 2) && (formeAiguilles == \"ronde\") ?)\n{\n  afficherArbre(\"pin rouge\");\n}\nelse if((hauteur >= 50 && hauteur <= 58) && (nombreAiguilles == 5) && (formeAiguilles == \"ronde\") ?)\n{\n  afficherArbre(\"pin blanc\");\n}\nelse\n{\n  afficherArbre(\"arbre rare\");\n}",
          "solution"      : "var hauteur = obtenirHauteur();\nvar nombreAiguilles = obtenirAiguilles();\nvar formeAiguilles = obtenirFormeAiguilles();\nvar longueurAiguilles = obtenirLongueurAiguilles();\n\nif((hauteur >= 9 && hauteur <= 22) && (nombreAiguilles == 4) && (formeAiguilles == \"ronde\") && (longueurAiguilles == \"longue\"))\n{\n  afficherArbre(\"pin gris\");\n}\nelse if((hauteur >= 14 && hauteur <= 20) && (nombreAiguilles == 1) && (formeAiguilles == \"plate\") && (longueurAiguilles == \"courte\"))\n{\n  afficherArbre(\"sapin baumier\");\n}\nelse if((hauteur >= 18 && hauteur <= 40) && (nombreAiguilles == 1) && (formeAiguilles == \"ronde\") && (longueurAiguilles == \"courte\"))\n{\n  afficherArbre(\"épinette rouge\");\n}\nelse if((hauteur >= 20 && hauteur <= 35) && (nombreAiguilles == 2) && (formeAiguilles == \"ronde\") && (longueurAiguilles == \"longue\"))\n{\n  afficherArbre(\"pin rouge\");\n}\nelse if((hauteur >= 50 && hauteur <= 58) && (nombreAiguilles == 5) && (formeAiguilles == \"ronde\") && (longueurAiguilles == \"longue\"))\n{\n  afficherArbre(\"pin blanc\");\n}\nelse\n{\n  afficherArbre(\"arbre rare\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-154",
          "name"          : "Sans colonne",
          "normalizedName": "sans colonne",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Une professeure de biologie a besoin de notre aide pour construire un programme qui peut identifier les différents types d'invertébrés. Les invertébrés sont des créatures qui n'ont pas de colonne vertébrale. Pouvez-vous compléter le programme?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=legs>nombrePattes</var> est égale à 8 <strong>et</strong> si la valeur de <var id=antennae>antennes</var> est false (faux).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=legs>nombrePattes</var> est égale à 10 <strong>et</strong> si la valeur de <var id=antennae>antennes</var> est true (vrai).</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=legs>nombrePattes</var> est égale à 0 (zéro) <strong>et</strong> si la valeur de <var id=antennae>antennes</var> est false.</li></ol>",
          "boilerplate"   : "var antennes = possedeAntennes();\nvar nombrePattes = obtenirNombrePattes();\n\nif(nombrePattes == 6 && antennes == true)\n{\n  afficherInvertebre(\"insecte\");\n}\nelse if(?)\n{\n  afficherInvertebre(\"arachnide\");\n}\nelse if(?)\n{\n  afficherInvertebre(\"crustacé\");\n}\nelse if(?)\n{\n  afficherInvertebre(\"mollusque\");\n}\nelse\n{\n  afficherInvertebre(\"inconnu\");\n}",
          "solution"      : "var antennes = possedeAntennes();\nvar nombrePattes = obtenirNombrePattes();\n\nif(nombrePattes == 6 && antennes == true)\n{\n  afficherInvertebre(\"insecte\");\n}\nelse if(nombrePattes == 8 && antennes == false)\n{\n  afficherInvertebre(\"arachnide\");\n}\nelse if(nombrePattes == 10 && antennes == true)\n{\n  afficherInvertebre(\"crustacé\");\n}\nelse if(nombrePattes == 0 && antennes == false)\n{\n  afficherInvertebre(\"mollusque\");\n}\nelse\n{\n  afficherInvertebre(\"inconnu\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<h3 class=\"title\" ref=\"boolean\">Booléens</h3>\n<div class=\"text\">Les booléens sont un <concept ref=\"data type\">type de données</concept> qui ont seulement deux valeurs possibles: true (vrai) ou false (faux).</div><div class=\"text\">Les expressions qui utilisent un <concept ref=\"relational operators\">opérateur relationnel</concept> retournent une valeur booléenne.</div>\n<div class=\"code-sample-title\">Exemples de valeurs booléennes</div><pre class=\"codeBlock\">var tuAimesLesCereales = true;\nvar estPlusGrandQue18 = 10 > 18; // estPlusGrandQue18 sera false (faux)\nvar age = 19;\nvar ageEstPlusGrandQue18 = age > 18; // ageEstPlusGrandQue18 sera true (vrai)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-155",
          "name"          : "Construire un accordeur",
          "normalizedName": "construire un accordeur",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un accordeur qui peut reconnaître des notes de musique. Les accordeurs analysent la fréquence d'une note, qui est calculée en hertz.</div><div class=text>Par exemple, la note do4 a une fréquence de 261,63 hertz. Puisqu'il est difficile d'accorder un instrument de musique à une fréquence exacte, nous permettons aux notes d'être un hertz en dessus ou en dessous. Par exemple, la note do4 peut se trouver entre 260,63 et 262,63 hertz. Voici la liste des notes que nous voulons que notre accordeur reconnaisse:</div><ul class=algorithm><li>La note <strong>do4</strong> a une fréquence de <strong>261,63 hertz</strong>.</li><li>La note <strong>ré4</strong> a une fréquence de <strong>293,66 hertz</strong>.</li><li>La note <strong>mi4</strong> a une fréquence de <strong>329,63 hertz</strong>.</li><li>La note <strong>fa4</strong> a une fréquence de <strong>349,23 hertz</strong>.</li><li>La note <strong>sol4</strong> a une fréquence de <strong>392,00 hertz</strong>.</li><li>La note <strong>la4</strong> a une fréquence de <strong>440,00 hertz</strong>.</li><li>La note <strong>si4</strong> a une fréquence de <strong>493,88 hertz</strong>.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=noteFrequency>frequenceNote</var> est plus grande ou égale à 328.63 <strong>et</strong> si la valeur de <var id=noteFrequency>frequenceNote</var> est plus petite ou égale à 330.63.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=noteFrequency>frequenceNote</var> est plus grande ou égale à 348.23 <strong>et</strong> si la valeur de <var id=noteFrequency>frequenceNote</var> est plus petite ou égale à 350.23.</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=noteFrequency>frequenceNote</var> est plus grande ou égale à 391.00 <strong>et</strong> si la valeur de <var id=noteFrequency>frequenceNote</var> est plus petite ou égale à 393.00.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une condition qui vérifie si la valeur de <var id=noteFrequency>frequenceNote</var> est plus grande ou égale à 439.00 <strong>et</strong> si la valeur de <var id=noteFrequency>frequenceNote</var> est plus petite ou égale à 441.00.</li><li class=code-item>Remplacer le cinquième point d'interrogation par une condition qui vérifie si la valeur de <var id=noteFrequency>frequenceNote</var> est plus grande ou égale à 492.88 <strong>et</strong> si la valeur de <var id=noteFrequency>frequenceNote</var> est plus petite ou égale à 494.88.</li></ol>",
          "boilerplate"   : "var frequenceNote = obtenirFrequenceNote();\n\nif(frequenceNote >= 260.63 && frequenceNote <= 262.63)\n{\n  identifierNote(\"do4\");\n}\nelse if(frequenceNote >= 292.66 && frequenceNote <= 294.66)\n{\n  identifierNote(\"ré4\");\n}\nelse if(?)\n{\n  identifierNote(\"mi4\");\n}\nelse if(?)\n{\n  identifierNote(\"fa4\");\n}\nelse if(?)\n{\n  identifierNote(\"sol4\");\n}\nelse if(?)\n{\n  identifierNote(\"la4\");\n}\nelse if(?)\n{\n  identifierNote(\"si4\");\n}\nelse\n{\n  identifierNote(\"inconnue\");\n}",
          "solution"      : "var frequenceNote = obtenirFrequenceNote();\n\nif(frequenceNote >= 260.63 && frequenceNote <= 262.63)\n{\n  identifierNote(\"do4\");\n}\nelse if(frequenceNote >= 292.66 && frequenceNote <= 294.66)\n{\n  identifierNote(\"ré4\");\n}\nelse if(frequenceNote >= 328.63 && frequenceNote <= 330.63)\n{\n  identifierNote(\"mi4\");\n}\nelse if(frequenceNote >= 348.23 && frequenceNote <= 350.23)\n{\n  identifierNote(\"fa4\");\n}\nelse if(frequenceNote >= 391.00 && frequenceNote <= 393.00)\n{\n  identifierNote(\"sol4\");\n}\nelse if(frequenceNote >= 439.00 && frequenceNote <= 441.00)\n{\n  identifierNote(\"la4\");\n}\nelse if(frequenceNote >= 492.88 && frequenceNote <= 494.88)\n{\n  identifierNote(\"si4\");\n}\nelse\n{\n  identifierNote(\"inconnue\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-156",
          "name"          : "Un géant de gaz",
          "normalizedName": "un geant de gaz",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui peut identifier une planète en examinant son type et le nombre de lunes qu'elles possède. Il y a 8 planètes dans notre système solaire, mais nous n'en identifierons que 5 pour simplifier notre programme. Voici les détails des planètes que nous voulons identifier:</div><ul class=algorithm><li>La planète <strong>Mercure</strong> est de type <string>\"terrestre\"</string> et possède <strong>0</strong> lunes.</li><li>La planète <strong>Terre</strong> est de type <string>\"terrestre\"</string> et possède <strong>1</strong> lune.</li><li>La planète <strong>Mars</strong> est de type <string>\"terrestre\"</string> et possède <strong>2</strong> lunes.</li><li>La planète <strong>Saturne</strong> est de type <string>\"géant de gaz\"</string> et possède <strong>62</strong> lunes.</li><li>La planète <strong>Neptune</strong> est de type <string>\"géant de glace\"</string> et possède <strong>14</strong> lunes.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=planetType>typePlanete</var> est égale à\n    <string>\"terrestre\"</string> <strong>et</strong> si la valeur de <var id=moons>lunes</var> est égale à 0.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=planetType>typePlanete</var> est égale à\n    <string>\"terrestre\"</string> <strong>et</strong> si la valeur de <var id=moons>lunes</var> est égale à 1.</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=planetType>typePlanete</var> est égale à\n    <string>\"terrestre\"</string> <strong>et</strong> si la valeur de <var id=moons>lunes</var> est égale à 2.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une condition qui vérifie si la valeur de <var id=planetType>typePlanete</var> est égale à\n    <string>\"géant de gaz\"</string> <strong>et</strong> si la valeur de <var id=moons>lunes</var> est égale à 62.</li><li class=code-item>Remplacer le cinquième point d'interrogation par une condition qui vérifie si la valeur de <var id=planetType>typePlanete</var> est égale à\n    <string>\"géant de glace\"</string> <strong>et</strong> si la valeur de <var id=moons>lunes</var> est égale à 14.</li></ol>",
          "boilerplate"   : "var lunes = obtenirNombreLunes();\nvar typePlanete = obtenirTypePlanete();\n\nif(?)\n{\n  afficherPlanete(\"Mercure\");\n}\nelse if(?)\n{\n  afficherPlanete(\"Terre\");\n}\nelse if(?)\n{\n  afficherPlanete(\"Mars\");\n}\nelse if(?)\n{\n  afficherPlanete(\"Saturne\");\n}\nelse if(?)\n{\n  afficherPlanete(\"Neptune\");\n}\nelse\n{\n  afficherPlanete(\"inconnue\");\n}",
          "solution"      : "var lunes = obtenirNombreLunes();\nvar typePlanete = obtenirTypePlanete();\n\nif(typePlanete == \"terrestre\" && lunes == 0)\n{\n  afficherPlanete(\"Mercure\");\n}\nelse if(typePlanete == \"terrestre\" && lunes == 1)\n{\n  afficherPlanete(\"Terre\");\n}\nelse if(typePlanete == \"terrestre\" && lunes == 2)\n{\n  afficherPlanete(\"Mars\");\n}\nelse if(typePlanete == \"géant de gaz\" && lunes == 62)\n{\n  afficherPlanete(\"Saturne\");\n}\nelse if(typePlanete == \"géant de glace\" && lunes == 14)\n{\n  afficherPlanete(\"Neptune\");\n}\nelse\n{\n  afficherPlanete(\"inconnue\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-157",
          "name"          : "Un ciel couvert",
          "normalizedName": "un ciel couvert",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui nous permet d'identifier les nuages. Les nuages peuvent être identifiés par leur forme et par leur hauteur dans le ciel (que nous appelons leur altitude). Voici quelques types de nuages communs que nous voulons identifier:</div><ul class=algorithm><li>Les <strong>stratus</strong> ont une forme <string>\"plate\"</string> avec une altitude de <strong>moins de 2000 m</strong>.</li><li>Les <strong>stratocumulus</strong> ont une forme de <string>\"nappe\"</string> avec une altitude de <strong>moins de 2000 m</strong>.</li><li>Les <strong>altocumulus</strong> ont une forme de <string>\"nappe\"</string> avec une altitude <strong>entre 2000 m et 7000 m</strong>.</li><li>Les <strong>altostratus</strong> ont une forme de <string>\"voile\"</string> avec une altitude <strong>entre 2000 m et 7000 m</strong>.</li><li>Les <strong>cirrus</strong> ont une forme <string>\"mince\"</string> avec une altitude de <strong>plus de 5000 m</strong>.</li><li>Les <strong>cumulonimbus</strong> ont une forme de <string>\"tour\"</string> avec une altitude qui peut varier.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction else if. Cette instruction else if doit vérifier si le nuage est un <strong>stratocumulus</strong>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=displayCloud>afficherNuage(<string>\"stratocumulus\"</string>)</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else if. Cette instruction else if doit vérifier si le nuage est un <strong>altocumulus</strong>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=displayCloud>afficherNuage(<string>\"altocumulus\"</string>)</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction else if. Cette instruction else if doit vérifier si le nuage est un <strong>altostratus</strong>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=displayCloud>afficherNuage(<string>\"altostratus\"</string>)</concept>.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une instruction else if. Cette instruction else if doit vérifier si le nuage est un <strong>cirrus</strong>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=displayCloud>afficherNuage(<string>\"cirrus\"</string>)</concept>.</li></ol>",
          "boilerplate"   : "var altitude = obtenirAltitudeNuage();\nvar forme = obtenirFormeNuage();\n\nif(altitude < 2000 && forme == \"plate\")\n{\n  afficherNuage(\"stratus\");\n}\n// Vérifiez si le nuage est un stratocumulus\n?\n\n// Vérifiez si le nuage est un altocumulus\n?\n\n// Vérifiez si le nuage est un altostratus\n?\n\n// Vérifiez si le nuage est un cirrus\n?\n\nelse if(forme == \"tour\")\n{\n  afficherNuage(\"cumulonimbus\");\n}\nelse\n{\n  afficherNuage(\"inconnu\");\n}",
          "solution"      : "var altitude = obtenirAltitudeNuage();\nvar forme = obtenirFormeNuage();\n\nif(altitude < 2000 && forme == \"plate\")\n{\n  afficherNuage(\"stratus\");\n}\n// Vérifiez si le nuage est un stratocumulus\nelse if(altitude < 2000 && forme == \"nappe\")\n{\n  afficherNuage(\"stratocumulus\");\n}\n// Vérifiez si le nuage est un altocumulus\nelse if(altitude >= 2000 && altitude <= 7000 && forme == \"nappe\")\n{\n  afficherNuage(\"altocumulus\");\n}\n// Vérifiez si le nuage est un altostratus\nelse if(altitude >= 2000 && altitude <= 7000 && forme == \"voile\")\n{\n  afficherNuage(\"altostratus\");\n}\n// Vérifiez si le nuage est un cirrus\nelse if(altitude > 5000 && forme == \"mince\")\n{\n  afficherNuage(\"cirrus\");\n}\nelse if(forme == \"tour\")\n{\n  afficherNuage(\"cumulonimbus\");\n}\nelse\n{\n  afficherNuage(\"inconnu\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<h3 class=\"title\" ref=\"multiple and\">Opérateurs ET multiples dans une expression</h3>\n<div class=\"text\">Nous pouvons utiliser plus d'un <concept ref=\"and operator\">opérateur ET</concept> pour vérifier plusieurs conditions dans une seule expression. Pour que l'expression soit <concept ref=\"boolean\">vraie</concept>, chaque condition doit aussi être vraie. Si une seule condition est fausse, l'expression entière est aussi fausse.</div>\n<div class=\"code-sample-title\">Opérateurs ET multiples</div><pre class=\"codeBlock\">if(faim == true && argent > 5 && jour == \"mardi\")\n{\n  console.log(\"Vous pouvez acheter de la pizza!\");\n}</pre>\n<div class=\"text\">Si vous avez faim et que vous avez plus de 5$ et que nous sommes mardi, vous pouvez acheter de la pizza.</div><div class=\"text\">Si vous n'avez pas faim, mais que vous avez plus de 5$ et que nous sommes mardi, vous ne pouvez pas acheter de pizza.</div><div class=\"text\">Si vous avez faim, mais que vous n'avez pas plus de 5$ et que nous sommes mardi, vous ne pouvez pas acheter de pizza.</div><div class=\"text\">Si vous avez faim et que vous avez plus de 5$, mais que nous ne sommes pas mardi, vous ne pouvez pas acheter de pizza.</div><div class=\"text\">Si vous n'avez pas faim, que vous n'avez pas plus de 5$ et que nous ne sommes pas mardi, vous ne pouvez pas acheter de pizza.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-008",
          "name"          : "Quiz 8",
          "description"   : "L'opérateur ET",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-008_q-01",
              "question": "<div>Vrai ou faux. Les deux perluètes (<code>&amp;&amp;</code>) sont appelées l'<em>opérateur ET</em>.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-008_q-01_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "Les deux perluètes sont utilisées pour écrire l'<em>opérateur ET</em>."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-008_q-02",
              "question": "<div>Vrai ou faux. Nous pouvons utiliser des instructions <code>if</code> imbriquées ou l'opérateur ET pour vérifier plusieurs conditions.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-008_q-02_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "Les instructions <code>if</code> imbriquées et l'opérateur ET peuvent être utilisés pour vérifier plusieurs conditions."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-02_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-008_q-03",
              "question": "<div>Choisissez la condition qui représente l'énoncé: \"La valeur de <var>monNombre</var> est plus grande ou égale à 5 et plus petite que 10\".</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-03_a-01",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>(monNombre &lt;= 5 &amp;&amp; monNombre &lt; 10)</code></pre>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-008_q-03_a-02",
                  "value"      : 2,
                  "answer"     : "<pre class=\"language-javascript\"><code>(monNombre &gt;= 5 &amp;&amp; monNombre &lt; 10)</code></pre>",
                  "explanation": "Cette condition vérifie si <var>monNombre</var> est plus grand ou égal à 5 ET si <var>monNombre</var> est plus petit que 10."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-03_a-03",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>(5 &lt;= monNombre &lt; 10)</code></pre>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-03_a-04",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>(5 &lt; monNombre &lt; 10)</code></pre>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-008_q-04",
              "question": "<div>Quelle est l'erreur dans la condition de cette instruction <code>if</code>?</div>\n<pre class=\"language-javascript\"><code>if(alimentFavori == \"pizza\" &amp;&amp; argent &gt; 3 &amp;&amp;)</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-04_a-01",
                  "value" : 0,
                  "answer": "<div>L'opérateur ET ne peut pas être utilisé avec une condition qui vérifie deux différentes variables.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>L'opérateur ET ne peut pas être utilisé avec une condition qui fait une comparaison avec une chaîne.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-008_q-04_a-03",
                  "value"      : 2,
                  "answer"     : "<div>Une condition ne peut pas se terminer par l'opérateur ET.</div>",
                  "explanation": "L'opérateur ET est utilisé pour joindre plusieurs conditions et doit avoir une condition de chaque côté."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-04_a-04",
                  "value" : 0,
                  "answer": "<div>Il n'y a aucune erreur.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-008_q-05",
              "question": "<div>Quelle est l'erreur dans la condition suivante?</div>\n<pre class=\"language-javascript\"><code>(monNombre &gt; 5 &amp;&amp; monNombre &lt; 5)</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>L'opérateur ET ne peut pas être utilisé pour vérifier deux conditions.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-05_a-02",
                  "value" : 0,
                  "answer": "<div>L'opérateur ET doit être placé à la fin de la condition.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-008_q-05_a-03",
                  "value"      : 2,
                  "answer"     : "<div>La condition ne peut jamais être vraie.</div>",
                  "explanation": "La variable <var>monNombre</var> ne peut pas être à la fois plus grande et plus petite que 5."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-05_a-04",
                  "value" : 0,
                  "answer": "<div>Il n'y a aucune erreur.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-008_q-06",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var temperature = 11;\n\nif(temperature &gt;= 10 &amp;&amp; temperature &lt;= 20)\n{\n  console.log(\"temperature est entre 10 et 20\");\n}\nelse\n{\n  console.log(\"temperature est plus petite que 10 ou plus grande que 20\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-008_q-06_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Un message: <samp>temperature est entre 10 et 20</samp></div>",
                  "explanation": "Puisque <code>temperature &gt;= 10</code> est vrai et que <code>temperature &lt;= 20</code> est aussi vrai, le bloc de code de l'instruction <code>if</code> est exécuté."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>temperature est plus petite que 10 ou plus grande que 20</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>Deux messages: <samp>temperature est entre 10 et 20</samp> et <samp>temperature est plus petite que 10 ou plus grande que 20</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>Aucun message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-008_q-07",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var hauteur = 12\nvar type = \"pin\";\n\nif(type == \"pin\" &amp;&amp; hauteur &lt; 10)\n{\n  console.log(\"L'arbre est un pin de moins de 10 mètres\");\n}\nelse if(type == \"pin\" &amp;&amp; hauteur &gt;= 10)\n{\n  console.log(\"L'arbre est un pin de 10 mètres ou plus\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-07_a-01",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>L'arbre est un pin de moins de 10 mètres</samp></div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-008_q-07_a-02",
                  "value"      : 2,
                  "answer"     : "<div>Un message: <samp>L'arbre est un pin de 10 mètres ou plus</samp></div>",
                  "explanation": "Puisque <code>type == \"pin\"</code> est vrai et que <code>hauteur &gt;= 10</code> est aussi vrai, le bloc de code de l'instruction <code>else if</code> est exécuté."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>Deux messages: <samp>L'arbre est un pin de moins de 10 mètres</samp> et <samp>L'arbre est un pin de 10 mètres ou plus</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-008_q-07_a-04",
                  "value" : 0,
                  "answer": "<div>Aucun message</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 8",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-266",
          "name"          : "L'opérateur OR",
          "normalizedName": "loperateur or",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-266_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-266_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-17",
          "name"          : "Projet 17 - Aider le professeur",
          "normalizedName": "projet 17 - aider le professeur",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-158",
          "name"          : "Étudier pour le test",
          "normalizedName": "etudier pour le test",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-158_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-158_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par l'opérateur OU (||).</li></ol>",
          "boilerplate"   : "var noteDevoirs = obtenirNoteDevoirs();\nvar noteExamen = obtenirNoteExamen();\n\nif(noteDevoirs >= 90 ? noteExamen >= 90)\n{\n  afficherNote(\"A\");\n}\nelse\n{\n  afficherNote(\"E\");\n}",
          "solution"      : "var noteDevoirs = obtenirNoteDevoirs();\nvar noteExamen = obtenirNoteExamen();\n\nif(noteDevoirs >= 90 || noteExamen >= 90)\n{\n  afficherNote(\"A\");\n}\nelse\n{\n  afficherNote(\"E\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or operator\">Opérateur OU (||)</h3>\n<div class=\"text\">L'opérateur OU est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si au moins une <concept ref=\"boolean\">valeur booléenne</concept> est vraie.</div><div class=\"text\">Une expression qui utilise l'opérateur OU est vraie si au moins une des conditions qui forment l'expression est vraie.</div><div class=\"text\">L'opérateur s'écrit avec deux barres verticales (||).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">var resultat = true || true; // resultat est true (vrai)\nresultat = false || true; // resultat est true (vrai)\nresultat = true || false; // resultat est true (vrai)\nresultat = false || false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-159",
          "name"          : "Un bon résultat",
          "normalizedName": "un bon resultat",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-159_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-159_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Modifier la condition de l'instruction else if. La condition doit vérifier si <var id=classMark>noteDevoirs</var> est plus grande ou égale à 80 <strong>ou</strong> si <var id=examMark>noteExamen</var> <strong>est plus grande ou égale à 80</strong>. Vous devrez utiliser l'opérateur OU (||).</li></ol>",
          "boilerplate"   : "var noteDevoirs = obtenirNoteDevoirs();\nvar noteExamen = obtenirNoteExamen();\n\nif(noteDevoirs >= 90 || noteExamen >= 90)\n{\n  afficherNote(\"A\");\n}\nelse if(noteDevoirs >= 80 ?)\n{\n  afficherNote(\"B\");\n}\nelse\n{\n  afficherNote(\"E\");\n}",
          "solution"      : "var noteDevoirs = obtenirNoteDevoirs();\nvar noteExamen = obtenirNoteExamen();\n\nif(noteDevoirs >= 90 || noteExamen >= 90)\n{\n  afficherNote(\"A\");\n}\nelse if(noteDevoirs >= 80 || noteExamen >= 80)\n{\n  afficherNote(\"B\");\n}\nelse\n{\n  afficherNote(\"E\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or operator\">Opérateur OU (||)</h3>\n<div class=\"text\">L'opérateur OU est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si au moins une <concept ref=\"boolean\">valeur booléenne</concept> est vraie.</div><div class=\"text\">Une expression qui utilise l'opérateur OU est vraie si au moins une des conditions qui forment l'expression est vraie.</div><div class=\"text\">L'opérateur s'écrit avec deux barres verticales (||).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">var resultat = true || true; // resultat est true (vrai)\nresultat = false || true; // resultat est true (vrai)\nresultat = true || false; // resultat est true (vrai)\nresultat = false || false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-160",
          "name"          : "La note de passage",
          "normalizedName": "la note de passage",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ajoutons encore deux notes à notre programme!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=classMark>noteDevoirs</var> est plus grande ou égale à 70 <strong>ou</strong> si la valeur de <var id=examMark>noteExamen</var> est plus grande ou égale à 70.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=classMark>noteDevoirs</var> est plus grande ou égale à 60 <strong>ou</strong> si la valeur de <var id=examMark>noteExamen</var> est plus grande ou égale à 60.</li></ol>",
          "boilerplate"   : "var noteDevoirs = obtenirNoteDevoirs();\nvar noteExamen = obtenirNoteExamen();\n\nif(noteDevoirs >= 90 || noteExamen >= 90)\n{\n  afficherNote(\"A\");\n}\nelse if(noteDevoirs >= 80 || noteExamen >= 80)\n{\n  afficherNote(\"B\");\n}\nelse if(?)\n{\n  afficherNote(\"C\");\n}\nelse if(?)\n{\n  afficherNote(\"D\");\n}\nelse\n{\n  afficherNote(\"E\");\n}",
          "solution"      : "var noteDevoirs = obtenirNoteDevoirs();\nvar noteExamen = obtenirNoteExamen();\n\nif(noteDevoirs >= 90 || noteExamen >= 90)\n{\n  afficherNote(\"A\");\n}\nelse if(noteDevoirs >= 80 || noteExamen >= 80)\n{\n  afficherNote(\"B\");\n}\nelse if(noteDevoirs >= 70 || noteExamen >= 70)\n{\n  afficherNote(\"C\");\n}\nelse if(noteDevoirs >= 60 || noteExamen >= 60)\n{\n  afficherNote(\"D\");\n}\nelse\n{\n  afficherNote(\"E\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or operator\">Opérateur OU (||)</h3>\n<div class=\"text\">L'opérateur OU est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si au moins une <concept ref=\"boolean\">valeur booléenne</concept> est vraie.</div><div class=\"text\">Une expression qui utilise l'opérateur OU est vraie si au moins une des conditions qui forment l'expression est vraie.</div><div class=\"text\">L'opérateur s'écrit avec deux barres verticales (||).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">var resultat = true || true; // resultat est true (vrai)\nresultat = false || true; // resultat est true (vrai)\nresultat = true || false; // resultat est true (vrai)\nresultat = false || false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-161",
          "name"          : "Une troisième chance",
          "normalizedName": "une troisieme chance",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-161_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-161_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si <var id=projectMark>noteProjet</var> est plus grande ou égale à 90. N'oubliez pas d'ajouter l'opérateur OU (||) devant cette condition!</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si <var id=projectMark>noteProjet</var> est plus grande ou égale à 80. N'oubliez pas d'ajouter l'opérateur OU (||) devant cette condition!</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si <var id=projectMark>noteProjet</var> est plus grande ou égale à 70. N'oubliez pas d'ajouter l'opérateur OU (||) devant cette condition!</li></ol>",
          "boilerplate"   : "var noteDevoirs = obtenirNoteDevoirs();\nvar noteExamen = obtenirNoteExamen();\nvar noteProjet = obtenirNoteProjet();\n\nif(noteDevoirs >= 90 || noteExamen >= 90 ?)\n{\n  afficherNote(\"A\");\n}\nelse if(noteDevoirs >= 80 || noteExamen >= 80 ?)\n{\n  afficherNote(\"B\");\n}\nelse if(noteDevoirs >= 70 || noteExamen >= 70 ?)\n{\n  afficherNote(\"C\");\n}\nelse if(noteDevoirs >= 60 || noteExamen >= 60 || noteProjet >= 60)\n{\n  afficherNote(\"D\");\n}\nelse\n{\n  afficherNote(\"E\");\n}",
          "solution"      : "var noteDevoirs = obtenirNoteDevoirs();\nvar noteExamen = obtenirNoteExamen();\nvar noteProjet = obtenirNoteProjet();\n\nif(noteDevoirs >= 90 || noteExamen >= 90 || noteProjet >= 90)\n{\n  afficherNote(\"A\");\n}\nelse if(noteDevoirs >= 80 || noteExamen >= 80 || noteProjet >= 80)\n{\n  afficherNote(\"B\");\n}\nelse if(noteDevoirs >= 70 || noteExamen >= 70 || noteProjet >= 70)\n{\n  afficherNote(\"C\");\n}\nelse if(noteDevoirs >= 60 || noteExamen >= 60 || noteProjet >= 60)\n{\n  afficherNote(\"D\");\n}\nelse\n{\n  afficherNote(\"E\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"multiple or\">Opérateurs OU multiples dans une expression</h3>\n<div class=\"text\">Nous pouvons utiliser plus d'un <concept ref=\"or operator\">opérateur OU</concept> pour vérifier plusieurs conditions dans une seule expression. Pour que l'expression soit <concept ref=\"boolean\">vraie</concept>, il suffit qu'une seule condition soit vraie. Si au moins une condition est vraie, l'expression entière est aussi vraie.</div>\n<div class=\"code-sample-title\">Opérateurs OU multiples</div><pre class=\"codeBlock\">if(jourFerie == true || temperature < -40 || weekend == true)\n{\n  console.log(\"L'école est fermée!\");\n}</pre>\n<div class=\"text\">Si c'est un jour férié et que la température est au-dessous de -40 et que c'est le weekend, alors l'école est fermée</div><div class=\"text\">Si ce n'est pas un jour férié, mais que la température est au-dessous de -40 et que c'est le weekend, l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40 et que c'est le weekend, l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40 et que ce n'est pas le weekend, l'école est fermée</div><div class=\"text\">Si ce n'est pas un jour férié et que la température n'est pas au-dessous de -40 et que ce n'est pas le weekend, alors l'école est ouverte</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-162",
          "name"          : "Une sortie au cinéma",
          "normalizedName": "une sortie au cinema",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui gère les ventes de maïs soufflé dans un cinéma. Pendant une offre de durée limitée, les clients peuvent acheter un maïs soufflé de format grand ou très grand pour 25$, un maïs soufflé de format moyen pour $20, ou un maïs soufflé de format petit ou très petit pour 15$.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=popcornSize>tailleMaisSouffle</var> est égale à \n    <string>\"G\"</string> <strong>ou</strong> si la valeur de <var id=popcornSize>tailleMaisSouffle</var> est égale à \n    <string>\"TG\"</string>. <strong>Indice:</strong> vous devrez utiliser l'opérateur OU (||).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=popcornSize>tailleMaisSouffle</var> est égale à \n    <string>\"P\"</string> <strong>ou</strong> si la valeur de <var id=popcornSize>tailleMaisSouffle</var> est égale à \n    <string>\"TP\"</string>.</li></ol>",
          "boilerplate"   : "var tailleMaisSouffle = obtenirTailleMaisSouffle();\n\nif(?)\n{\n  afficherPrix(\"25$\");\n}\nelse if(tailleMaisSouffle == \"M\")\n{\n  afficherPrix(\"20$\");\n}\nelse if(?)\n{\n  afficherPrix(\"10$\");\n}",
          "solution"      : "var tailleMaisSouffle = obtenirTailleMaisSouffle();\n\nif(tailleMaisSouffle == \"G\" || tailleMaisSouffle == \"TG\")\n{\n  afficherPrix(\"25$\");\n}\nelse if(tailleMaisSouffle == \"M\")\n{\n  afficherPrix(\"20$\");\n}\nelse if(tailleMaisSouffle == \"P\" || tailleMaisSouffle == \"TP\")\n{\n  afficherPrix(\"10$\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or with if\">Opérateur OU (||) et instructions if</h3>\n<div class=\"text\">L'<concept ref=\"or operator\">opérateur OU</concept> est souvent utilisé dans les <concept ref=\"if statement\">instructions if</concept> pour vérifier plusieurs <concept ref=\"condition\">conditions</concept> dans une seule instruction if.</div><div class=\"text\">Si au moins une condition est <concept ref=\"boolean\">vraie</concept>, le bloc de code est exécuté.</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">if(jourFerie == true || temperature < -40)\n{\n  console.log(\"L'école est fermée!\");\n}</pre>\n<div class=\"text\">Si c'est un jour férié et que la température est au-dessous de -40, alors l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40, l'école est quand même fermée</div><div class=\"text\">Si ce n'est pas un jour férié, mais que la température est au-dessous de -40, l'école est quand même fermée</div><div class=\"text\">Si ce n'est pas un jour férié et que la température n'est pas au-dessous de -40, l'école est ouverte</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-163",
          "name"          : "Une chance sur deux",
          "normalizedName": "une chance sur deux",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui détermine si la valeur roulée par un dé à 6 côtés est paire (2, 4, 6) ou impaire (1, 3, 5).</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=numberOnDice>nombre</var> est égale à 1 <strong>ou</strong> si la valeur de <var id=numberOnDice>nombre</var> est égale à 3 <strong>ou</strong> si la valeur de <var id=numberOnDice>nombre</var> est égale à 5. <strong>Indice:</strong> vous devrez utiliser l'opérateur OU (||).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=numberOnDice>nombre</var> est égale à 2 <strong>ou</strong> si la valeur de <var id=numberOnDice>nombre</var> est égale à 4 <strong>ou</strong> si la valeur de <var id=numberOnDice>nombre</var> est égale à 6.</li></ol>",
          "boilerplate"   : "var nombre = roulerDe();\n\nif(?)\n{\n  afficherResultatDe(\"impair\");\n}\nelse if(?)\n{\n  afficherResultatDe(\"pair\");\n}",
          "solution"      : "var nombre = roulerDe();\n\nif(nombre == 1 || nombre == 3 || nombre == 5)\n{\n  afficherResultatDe(\"impair\");\n}\nelse if(nombre == 2 || nombre == 4 || nombre == 6)\n{\n  afficherResultatDe(\"pair\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or with if\">Opérateur OU (||) et instructions if</h3>\n<div class=\"text\">L'<concept ref=\"or operator\">opérateur OU</concept> est souvent utilisé dans les <concept ref=\"if statement\">instructions if</concept> pour vérifier plusieurs <concept ref=\"condition\">conditions</concept> dans une seule instruction if.</div><div class=\"text\">Si au moins une condition est <concept ref=\"boolean\">vraie</concept>, le bloc de code est exécuté.</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">if(jourFerie == true || temperature < -40)\n{\n  console.log(\"L'école est fermée!\");\n}</pre>\n<div class=\"text\">Si c'est un jour férié et que la température est au-dessous de -40, alors l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40, l'école est quand même fermée</div><div class=\"text\">Si ce n'est pas un jour férié, mais que la température est au-dessous de -40, l'école est quand même fermée</div><div class=\"text\">Si ce n'est pas un jour férié et que la température n'est pas au-dessous de -40, l'école est ouverte</div>\n<h3 class=\"title\" ref=\"multiple or\">Opérateurs OU multiples dans une expression</h3>\n<div class=\"text\">Nous pouvons utiliser plus d'un <concept ref=\"or operator\">opérateur OU</concept> pour vérifier plusieurs conditions dans une seule expression. Pour que l'expression soit <concept ref=\"boolean\">vraie</concept>, il suffit qu'une seule condition soit vraie. Si au moins une condition est vraie, l'expression entière est aussi vraie.</div>\n<div class=\"code-sample-title\">Opérateurs OU multiples</div><pre class=\"codeBlock\">if(jourFerie == true || temperature < -40 || weekend == true)\n{\n  console.log(\"L'école est fermée!\");\n}</pre>\n<div class=\"text\">Si c'est un jour férié et que la température est au-dessous de -40 et que c'est le weekend, alors l'école est fermée</div><div class=\"text\">Si ce n'est pas un jour férié, mais que la température est au-dessous de -40 et que c'est le weekend, l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40 et que c'est le weekend, l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40 et que ce n'est pas le weekend, l'école est fermée</div><div class=\"text\">Si ce n'est pas un jour férié et que la température n'est pas au-dessous de -40 et que ce n'est pas le weekend, alors l'école est ouverte</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-164",
          "name"          : "Nos heures d'ouverture",
          "normalizedName": "nos heures douverture",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui gère les heures d'ouverture d'un magasin. Le magasin est fermé avant 9h et après 18h. Le magasin est aussi fermé les samedis et dimanches.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=timeOfDay>heure</var> est plus petite que 9 <strong>ou</strong> si la valeur de <var id=timeOfDay>heure</var> est plus grande que 18. <strong>Indice:</strong> vous devrez utiliser l'opérateur OU (||).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=dayOfWeek>jourSemaine</var> est égale à \n    <string>\"samedi\"</string> <strong>ou</strong> si la valeur de <var id=dayOfWeek>jourSemaine</var> est égale à \n    <string>\"dimanche\"</string>.</li></ol>",
          "boilerplate"   : "var heure = obtenirHeure();\nvar jourSemaine = obtenirJourSemaine();\n\nif((?) || (?))\n{\n  etatMagasin(\"fermé\");\n}\nelse\n{\n  etatMagasin(\"ouvert\");\n}",
          "solution"      : "var heure = obtenirHeure();\nvar jourSemaine = obtenirJourSemaine();\n\nif((heure < 9 || heure > 18) || (jourSemaine == \"samedi\" || jourSemaine == \"dimanche\"))\n{\n  etatMagasin(\"fermé\");\n}\nelse\n{\n  etatMagasin(\"ouvert\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or with if\">Opérateur OU (||) et instructions if</h3>\n<div class=\"text\">L'<concept ref=\"or operator\">opérateur OU</concept> est souvent utilisé dans les <concept ref=\"if statement\">instructions if</concept> pour vérifier plusieurs <concept ref=\"condition\">conditions</concept> dans une seule instruction if.</div><div class=\"text\">Si au moins une condition est <concept ref=\"boolean\">vraie</concept>, le bloc de code est exécuté.</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">if(jourFerie == true || temperature < -40)\n{\n  console.log(\"L'école est fermée!\");\n}</pre>\n<div class=\"text\">Si c'est un jour férié et que la température est au-dessous de -40, alors l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40, l'école est quand même fermée</div><div class=\"text\">Si ce n'est pas un jour férié, mais que la température est au-dessous de -40, l'école est quand même fermée</div><div class=\"text\">Si ce n'est pas un jour férié et que la température n'est pas au-dessous de -40, l'école est ouverte</div>\n<h3 class=\"title\" ref=\"multiple or\">Opérateurs OU multiples dans une expression</h3>\n<div class=\"text\">Nous pouvons utiliser plus d'un <concept ref=\"or operator\">opérateur OU</concept> pour vérifier plusieurs conditions dans une seule expression. Pour que l'expression soit <concept ref=\"boolean\">vraie</concept>, il suffit qu'une seule condition soit vraie. Si au moins une condition est vraie, l'expression entière est aussi vraie.</div>\n<div class=\"code-sample-title\">Opérateurs OU multiples</div><pre class=\"codeBlock\">if(jourFerie == true || temperature < -40 || weekend == true)\n{\n  console.log(\"L'école est fermée!\");\n}</pre>\n<div class=\"text\">Si c'est un jour férié et que la température est au-dessous de -40 et que c'est le weekend, alors l'école est fermée</div><div class=\"text\">Si ce n'est pas un jour férié, mais que la température est au-dessous de -40 et que c'est le weekend, l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40 et que c'est le weekend, l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40 et que ce n'est pas le weekend, l'école est fermée</div><div class=\"text\">Si ce n'est pas un jour férié et que la température n'est pas au-dessous de -40 et que ce n'est pas le weekend, alors l'école est ouverte</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-165",
          "name"          : "Retour aux sources",
          "normalizedName": "retour aux sources",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Les langues existent depuis très longtemps et ont souvent une histoire riche et complexe. Les langues modernes, comme le français, viennent de langues plus anciennes, que nous appelons la racine d'une langue. Construisons un programme qui reçoit une langue et nous indique sa racine.</div><ul class=algorithm><li><strong>L'allemand, l'anglais et le néerlandais</strong> partagent une racine <strong>germanique occidentale</strong>.</li><li><strong>Le danois, le suédois et le norvégien</strong> partagent une racine <strong>germanique nord</strong>.</li><li><strong>Le français, l'italien, le portugais et l'espagnol</strong> partagent une racine <strong>romance italique</strong>.</li><li><strong>Le russe, le polonais, le tchèque et le slovaque</strong> partagent une racine <strong>slave</strong>.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=language>langue</var> est égale à \n    <string>\"danois\"</string> <strong>ou</strong> à \n    <string>\"suédois\"</string> <strong>ou</strong> à \n    <string>\"norvégien\"</string>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=displayLanguageRoot>afficherRacineLangue(<string>\"germanique nord\"</string>)</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=language>langue</var> est égale à \n    <string>\"français\"</string> <strong>ou</strong> à \n    <string>\"italien\"</string> <strong>ou</strong> à \n    <string>\"portugais\"</string> <strong>ou</strong> à \n    <string>\"espagnol\"</string>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=displayLanguageRoot>afficherRacineLangue(<string>\"romance italique\"</string>)</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=language>langue</var> est égale à \n    <string>\"russe\"</string> <strong>ou</strong> à \n    <string>\"polonais\"</string> <strong>ou</strong> à \n    <string>\"tchèque\"</string> <strong>ou</strong> à \n    <string>\"slovaque\"</string>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=displayLanguageRoot>afficherRacineLangue(<string>\"slave\"</string>)</concept>.</li></ol>",
          "boilerplate"   : "var langue = obtenirLangueHasard();\n\nif (langue == \"allemand\" || langue == \"anglais\" || langue == \"néerlandais\")\n{\n  afficherRacineLangue(\"germanique occidentale\");\n}\n// Vérifiez si la langue est le danois, le suédois ou le norvégien\n?\n\n// Vérifiez si la langue est le français, l'italien, le portugais ou l'espagnol\n?\n\n// Vérifiez si la langue est le russe, le polonais, le tchèque ou le slovaque\n?",
          "solution"      : "var langue = obtenirLangueHasard();\n\nif (langue == \"allemand\" || langue == \"anglais\" || langue == \"néerlandais\")\n{\n  afficherRacineLangue(\"germanique occidentale\");\n}\n// Vérifiez si la langue est le danois, le suédois ou le norvégien\nelse if (langue == \"danois\" || langue == \"suédois\" || langue == \"norvégien\")\n{\n  afficherRacineLangue(\"germanique nord\");\n}\n// Vérifiez si la langue est le français, l'italien, le portugais ou l'espagnol\nelse if (langue == \"français\" || langue == \"italien\" || langue == \"portugais\" || langue == \"espagnol\")\n{\n  afficherRacineLangue(\"romance italique\");\n}\n// Vérifiez si la langue est le russe, le polonais, le tchèque ou le slovaque\nelse if (langue == \"russe\" || langue == \"polonais\" || langue == \"tchèque\" || langue == \"slovaque\")\n{\n  afficherRacineLangue(\"slave\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or with if\">Opérateur OU (||) et instructions if</h3>\n<div class=\"text\">L'<concept ref=\"or operator\">opérateur OU</concept> est souvent utilisé dans les <concept ref=\"if statement\">instructions if</concept> pour vérifier plusieurs <concept ref=\"condition\">conditions</concept> dans une seule instruction if.</div><div class=\"text\">Si au moins une condition est <concept ref=\"boolean\">vraie</concept>, le bloc de code est exécuté.</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">if(jourFerie == true || temperature < -40)\n{\n  console.log(\"L'école est fermée!\");\n}</pre>\n<div class=\"text\">Si c'est un jour férié et que la température est au-dessous de -40, alors l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40, l'école est quand même fermée</div><div class=\"text\">Si ce n'est pas un jour férié, mais que la température est au-dessous de -40, l'école est quand même fermée</div><div class=\"text\">Si ce n'est pas un jour férié et que la température n'est pas au-dessous de -40, l'école est ouverte</div>\n<h3 class=\"title\" ref=\"multiple or\">Opérateurs OU multiples dans une expression</h3>\n<div class=\"text\">Nous pouvons utiliser plus d'un <concept ref=\"or operator\">opérateur OU</concept> pour vérifier plusieurs conditions dans une seule expression. Pour que l'expression soit <concept ref=\"boolean\">vraie</concept>, il suffit qu'une seule condition soit vraie. Si au moins une condition est vraie, l'expression entière est aussi vraie.</div>\n<div class=\"code-sample-title\">Opérateurs OU multiples</div><pre class=\"codeBlock\">if(jourFerie == true || temperature < -40 || weekend == true)\n{\n  console.log(\"L'école est fermée!\");\n}</pre>\n<div class=\"text\">Si c'est un jour férié et que la température est au-dessous de -40 et que c'est le weekend, alors l'école est fermée</div><div class=\"text\">Si ce n'est pas un jour férié, mais que la température est au-dessous de -40 et que c'est le weekend, l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40 et que c'est le weekend, l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40 et que ce n'est pas le weekend, l'école est fermée</div><div class=\"text\">Si ce n'est pas un jour férié et que la température n'est pas au-dessous de -40 et que ce n'est pas le weekend, alors l'école est ouverte</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-166",
          "name"          : "Simplement fermer l'école",
          "normalizedName": "simplement fermer lecole",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ce programme permet au système scolaire de déterminer si les écoles doivent être fermées ou non. Présentement, le programme utilise trois instructions if pour vérifier trois différentes conditions. Le programme peut être simplifié en combinant les trois conditions en une seule. Pouvez-vous simplifier le programme pour qu'il n'y ait qu'une seule instruction if dans le code?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Simplifier le programme en combinant les trois conditions en une seule. Votre programme ne doit pas contenir plus qu'une instruction if et une instruction else!</li></ol>",
          "boilerplate"   : "var estConge = obtenirEstConge();\nvar routeEstGlacee = obtenirRouteEstGlacee();\nvar temperatureEstExtreme = obtenirTemperatureEstExtreme();\n\nif(estConge == true)\n{\n  etatEcole(\"fermée\");\n}\nelse if(routeEstGlacee == true)\n{\n  etatEcole(\"fermée\");\n}\nelse if(temperatureEstExtreme == true)\n{\n  etatEcole(\"fermée\");\n}\nelse\n{\n  etatEcole(\"ouverte\");\n}",
          "solution"      : "var estConge = obtenirEstConge();\nvar routeEstGlacee = obtenirRouteEstGlacee();\nvar temperatureEstExtreme = obtenirTemperatureEstExtreme();\n\nif(estConge == true || routeEstGlacee == true || temperatureEstExtreme == true)\n{\n  etatEcole(\"fermée\");\n}\n\nelse\n{\n  etatEcole(\"ouverte\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or with if\">Opérateur OU (||) et instructions if</h3>\n<div class=\"text\">L'<concept ref=\"or operator\">opérateur OU</concept> est souvent utilisé dans les <concept ref=\"if statement\">instructions if</concept> pour vérifier plusieurs <concept ref=\"condition\">conditions</concept> dans une seule instruction if.</div><div class=\"text\">Si au moins une condition est <concept ref=\"boolean\">vraie</concept>, le bloc de code est exécuté.</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">if(jourFerie == true || temperature < -40)\n{\n  console.log(\"L'école est fermée!\");\n}</pre>\n<div class=\"text\">Si c'est un jour férié et que la température est au-dessous de -40, alors l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40, l'école est quand même fermée</div><div class=\"text\">Si ce n'est pas un jour férié, mais que la température est au-dessous de -40, l'école est quand même fermée</div><div class=\"text\">Si ce n'est pas un jour férié et que la température n'est pas au-dessous de -40, l'école est ouverte</div>\n<h3 class=\"title\" ref=\"boolean\">Booléens</h3>\n<div class=\"text\">Les booléens sont un <concept ref=\"data type\">type de données</concept> qui ont seulement deux valeurs possibles: true (vrai) ou false (faux).</div><div class=\"text\">Les expressions qui utilisent un <concept ref=\"relational operators\">opérateur relationnel</concept> retournent une valeur booléenne.</div>\n<div class=\"code-sample-title\">Exemples de valeurs booléennes</div><pre class=\"codeBlock\">var tuAimesLesCereales = true;\nvar estPlusGrandQue18 = 10 > 18; // estPlusGrandQue18 sera false (faux)\nvar age = 19;\nvar ageEstPlusGrandQue18 = age > 18; // ageEstPlusGrandQue18 sera true (vrai)</pre>\n<h3 class=\"title\" ref=\"multiple or\">Opérateurs OU multiples dans une expression</h3>\n<div class=\"text\">Nous pouvons utiliser plus d'un <concept ref=\"or operator\">opérateur OU</concept> pour vérifier plusieurs conditions dans une seule expression. Pour que l'expression soit <concept ref=\"boolean\">vraie</concept>, il suffit qu'une seule condition soit vraie. Si au moins une condition est vraie, l'expression entière est aussi vraie.</div>\n<div class=\"code-sample-title\">Opérateurs OU multiples</div><pre class=\"codeBlock\">if(jourFerie == true || temperature < -40 || weekend == true)\n{\n  console.log(\"L'école est fermée!\");\n}</pre>\n<div class=\"text\">Si c'est un jour férié et que la température est au-dessous de -40 et que c'est le weekend, alors l'école est fermée</div><div class=\"text\">Si ce n'est pas un jour férié, mais que la température est au-dessous de -40 et que c'est le weekend, l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40 et que c'est le weekend, l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40 et que ce n'est pas le weekend, l'école est fermée</div><div class=\"text\">Si ce n'est pas un jour férié et que la température n'est pas au-dessous de -40 et que ce n'est pas le weekend, alors l'école est ouverte</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-18",
          "name"          : "Projet 18 - Un étrange triangle",
          "normalizedName": "projet 18 - un etrange triangle",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-167",
          "name"          : "Obtenir les angles",
          "normalizedName": "obtenir les angles",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-167_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-167_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer les trois premiers points d'interrogation par trois nouvelles variables, <var id=A>A</var>, <var id=B>B</var> et <var id=C>C</var>. Donnez à chacune de ces variables la valeur retournée par les instructions <concept ref=getAngle>obtenirAngle(<string>\"A\"</string>)</concept>, <concept ref=getAngle>obtenirAngle(<string>\"B\"</string>)</concept> et <concept ref=getAngle>obtenirAngle(<string>\"C\"</string>)</concept>.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la somme de <var id=A>A</var> plus <var id=B>B</var> plus <var id=C>C</var> n'est <strong>PAS</strong> égale à 180. À l'intérieur du bloc de code de cette instruction if, utilisez l'instruction <concept ref=identifyTriangle>identifierTriangle(<string>\"incorrect\"</string>)</concept>.</li></ol>",
          "boilerplate"   : "// Obtenir les angles\n?\n?\n?\n\n// Vérifiez si la somme des angles n'est PAS égale à 180\n?",
          "solution"      : "// Obtenir les angles\nvar A = obtenirAngle(\"A\");\nvar B = obtenirAngle(\"B\");\nvar C = obtenirAngle(\"C\");\n\n// Vérifiez si la somme des angles n'est PAS égale à 180\nif(A + B + C != 180)\n{\n  identifierTriangle(\"incorrect\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-168",
          "name"          : "Des angles égaux",
          "normalizedName": "des angles egaux",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-168_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-168_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Ajouter une instruction else if à l'instruction if existante. La condition de cette instruction else if doit vérifier si la valeur de <var id=A>A</var> est égale à la valeur de B <strong>ET</strong> si la valeur de <var id=B>B</var> est égale à la valeur de <var id=C>C</var>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction <concept ref=identifyTriangle>identifierTriangle(<string>\"équilatéral\"</string>)</concept>.</li></ol>",
          "boilerplate"   : "var A = obtenirAngle(\"A\");\nvar B = obtenirAngle(\"B\");\nvar C = obtenirAngle(\"C\");\n\nif(A + B + C != 180)\n{\n  identifierTriangle(\"incorrect\");\n}\n// Vérifiez si le triangle est équilatéral\n?",
          "solution"      : "var A = obtenirAngle(\"A\");\nvar B = obtenirAngle(\"B\");\nvar C = obtenirAngle(\"C\");\n\nif(A + B + C != 180)\n{\n  identifierTriangle(\"incorrect\");\n}\n// Vérifiez si le triangle est équilatéral\nelse if((A == B) && (B == C))\n{\n  identifierTriangle(\"équilatéral\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"and operator\">Opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">L'opérateur ET est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si deux ou plusieurs <concept ref=\"boolean\">valeurs booléennes</concept> sont vraies.</div><div class=\"text\">Une expression qui utilise l'opérateur ET est seulement vraie si toutes les conditions qui forment l'expression sont vraies.</div><div class=\"text\">L'opérateur s'écrit avec deux perluètes (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur AND</div><pre class=\"codeBlock\">var resultat = true && true; // resultat est true (vrai)\nresultat = false && true; // resultat est false (faux)\nresultat = true && false; // resultat est false (faux)\nresultat = false && false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-169",
          "name"          : "Deux contre un",
          "normalizedName": "deux contre un",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Ajouter une instruction else if à l'instruction if existante. La condition de cette instruction else if doit vérifier si la valeur de <var id=A>A</var> est égale à la valeur de <var id=B>B</var> <strong>OU</strong> si la valeur de <var id=A>A</var> est égale à la valeur de <var id=C>C</var> <strong>OU</strong> si la valeur de <var id=B>B</var> est égale à la valeur de <var id=C>C</var>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=identifyTriangle>identifierTriangle(<string>\"isocèle\"</string>)</concept>.</li></ol>",
          "boilerplate"   : "var A = obtenirAngle(\"A\");\nvar B = obtenirAngle(\"B\");\nvar C = obtenirAngle(\"C\");\n\nif(A + B + C != 180)\n{\n  identifierTriangle(\"incorrect\");\n}\nelse if((A == B) && (B == C))\n{\n  identifierTriangle(\"équilatéral\");\n}\n// Vérifiez si le triangle est isocèle\n?",
          "solution"      : "var A = obtenirAngle(\"A\");\nvar B = obtenirAngle(\"B\");\nvar C = obtenirAngle(\"C\");\n\nif(A + B + C != 180)\n{\n  identifierTriangle(\"incorrect\");\n}\nelse if((A == B) && (B == C))\n{\n  identifierTriangle(\"équilatéral\");\n}\n// Vérifiez si le triangle est isocèle\nelse if ((A == B) || (A == C) || (B == C))\n{\n  identifierTriangle(\"isocèle\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>\n<h3 class=\"title\" ref=\"or operator\">Opérateur OU (||)</h3>\n<div class=\"text\">L'opérateur OU est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si au moins une <concept ref=\"boolean\">valeur booléenne</concept> est vraie.</div><div class=\"text\">Une expression qui utilise l'opérateur OU est vraie si au moins une des conditions qui forment l'expression est vraie.</div><div class=\"text\">L'opérateur s'écrit avec deux barres verticales (||).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">var resultat = true || true; // resultat est true (vrai)\nresultat = false || true; // resultat est true (vrai)\nresultat = true || false; // resultat est true (vrai)\nresultat = false || false; // resultat est false (faux)</pre>\n<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-170",
          "name"          : "Des angles différents",
          "normalizedName": "des angles differents",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-170_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-170_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Ajouter une instruction else à l'instruction if existante. À l'intérieur du bloc de code de cette instruction else, utilisez l'instruction <concept ref=identifyTriangle>identifierTriangle(<string>\"scalène\"</string>)</concept>.</li></ol>",
          "boilerplate"   : "var A = obtenirAngle(\"A\");\nvar B = obtenirAngle(\"B\");\nvar C = obtenirAngle(\"C\");\n\nif(A + B + C != 180)\n{\n  identifierTriangle(\"incorrect\");\n}\nelse if((A == B) && (B == C))\n{\n  identifierTriangle(\"équilatéral\");\n}\nelse if ((A == B) || (A == C) || (B == C))\n{\n  identifierTriangle(\"isocèle\");\n}\n// Ajoutez une instruction else ici\n?",
          "solution"      : "var A = obtenirAngle(\"A\");\nvar B = obtenirAngle(\"B\");\nvar C = obtenirAngle(\"C\");\n\nif(A + B + C != 180)\n{\n  identifierTriangle(\"incorrect\");\n}\nelse if((A == B) && (B == C))\n{\n  identifierTriangle(\"équilatéral\");\n}\nelse if ((A == B) || (A == C) || (B == C))\n{\n  identifierTriangle(\"isocèle\");\n}\n// Ajoutez une instruction else ici\nelse\n{\n  identifierTriangle(\"scalène\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"else statement\">Instruction else</h3>\n<div class=\"text\">L'instruction else est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante afin d'ajouter un <concept ref=\"code block\">bloc de code</concept>. Le bloc de code contrôlé par l'instruction else est seulement exécuté si la <concept ref=\"condition\">condition</concept> de l'instruction if est <concept ref=\"boolean\">fausse</concept>.</div><div class=\"text\">Remarquez que l'instruction else n'a pas de condition et ne peut pas être utilisée sans l'instruction if.</div>\n<div class=\"code-sample-title\">Exemple d'instruction else</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // cette condition contrôle les deux blocs de code\n{\n  // seulement exécuté si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}\nelse // remarquez qu'il n'y a pas de condition ici\n{\n  // seulement exécuté si argent n'est PAS plus grand que 5\n  console.log(\"Vous n'avez pas assez d'argent pour acheter le jeu!\");\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-171",
          "name"          : "Une pêche abondante",
          "normalizedName": "une peche abondante",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Les homards sont de gros crustacés qui sont dégustés de par le monde. Pour pouvoir être vendus, les homards doivent avoir une taille spécifique. Les homards qui mesurent moins de 8,255 cm ou plus de 12,70 cm ne peuvent pas être vendus en magasin. Construisons un programme qui contrôle la qualité des homards.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=lobsterSize>tailleHomard</var> est plus petite que 8.255 <strong>ou</strong> si la valeur de <var id=lobsterSize>tailleHomard</var> est plus grande que 12.70. À l'intérieur du bloc de code de cette instruction if, utilisez l'instruction \n    <concept ref=lobsterQuality>qualiteHomard(<string>\"mauvaise\"</string>)</concept>.</li></ol>",
          "boilerplate"   : "var tailleHomard = obtenirTailleHomard();\n\n?\n\nelse\n{\n  qualiteHomard(\"bonne\");\n}",
          "solution"      : "var tailleHomard = obtenirTailleHomard();\n\nif(tailleHomard < 8.255 || tailleHomard > 12.70)\n{\n  qualiteHomard(\"mauvaise\");\n}\nelse\n{\n  qualiteHomard(\"bonne\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or operator\">Opérateur OU (||)</h3>\n<div class=\"text\">L'opérateur OU est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si au moins une <concept ref=\"boolean\">valeur booléenne</concept> est vraie.</div><div class=\"text\">Une expression qui utilise l'opérateur OU est vraie si au moins une des conditions qui forment l'expression est vraie.</div><div class=\"text\">L'opérateur s'écrit avec deux barres verticales (||).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">var resultat = true || true; // resultat est true (vrai)\nresultat = false || true; // resultat est true (vrai)\nresultat = true || false; // resultat est true (vrai)\nresultat = false || false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-172",
          "name"          : "Continuez de creuser!",
          "normalizedName": "continuez de creuser!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Les Industries Almahna sont une compagnie qui effectue des opérations minières. Ils veulent que nous les aidions à programmer l'un de leurs systèmes de sécurité. Durant les opérations minières, l'eau peut s'accumuler sur le sol. Pour résoudre ce problème, une pompe est installée pour amener l'eau vers l'extérieur de la mine. Toutefois, la pompe à eau ne peut pas être toujours active, car elle relâche des toxines dans l'air. Pour résoudre ce deuxième problème, un échangeur d'air permet de nettoyer l'air. Il est important que la pompe et l'échangeur d'air ne soient pas activés en même temps. Il nous faut un algorithme pour décider quel appareil doit être activé. Voici les conditions:</div><ul class=algorithm><li>Si le niveau de toxines dans l'air dépasse 60 %, l'échangeur d'air doit être activé.</li><li>Si le niveau d'eau au sol dépasse 3 mètres, la pompe à eau doit être activée.</li></ul><div class=text>Pouvez-vous compléter le programme?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=airToxinsLevel>niveauToxinesAir</var> est plus petite ou égale à 60 <strong>et</strong> si la valeur de <var id=waterLevel>niveauEau</var> est plus grande que 3.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=airToxinsLevel>niveauToxinesAir</var> est plus grande que 60 <strong>ou</strong> si la valeur de <var id=waterLevel>niveauEau</var> est plus petite que 1.</li></ol>",
          "boilerplate"   : "var niveauToxinesAir = obtenirNiveauToxinesAir();\nvar niveauEau = obtenirNiveauEau();\n\nif(niveauToxinesAir > 60)\n{\n  echangeurAir(\"activé\");\n}\nelse\n{\n  echangeurAir(\"désactivé\");\n}\n\n// Ajoutez une condition pour vérifier\n// si la pompe doit être activée\nif(?)\n{\n  pompeEau(\"activée\");\n}\n\n// Ajoutez une condition pour vérifier\n// si la pompe doit être désactivée\nif(?)\n{\n  pompeEau(\"désactivée\");\n}",
          "solution"      : "var niveauToxinesAir = obtenirNiveauToxinesAir();\nvar niveauEau = obtenirNiveauEau();\n\nif(niveauToxinesAir > 60)\n{\n  echangeurAir(\"activé\");\n}\nelse\n{\n  echangeurAir(\"désactivé\");\n}\n\n// Ajoutez une condition pour vérifier\n// si la pompe doit être activée\nif(niveauToxinesAir <= 60 && niveauEau > 3)\n{\n  pompeEau(\"activée\");\n}\n\n// Ajoutez une condition pour vérifier\n// si la pompe doit être désactivée\nif(niveauToxinesAir > 60 || niveauEau < 1)\n{\n  pompeEau(\"désactivée\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"AND interval\">Représentation d'un intervalle avec l'opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">Nous ne pouvons pas représenter les intervalles dans un programme de la même façon qu'en mathématiques. Nous devons plutôt séparer l'intervalle en deux parties et les combiner à l'aide de l'<concept ref=\"and operator\">opérateur ET</concept>.</div><div class=\"text\">L'exemple ci-dessous est une façon correcte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation correcte d'un intervalle avec l'opérateur ET</div><pre class=\"codeBlock\">if(1 <= monNombre && monNombre <= 10) // cette expression est correcte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<div class=\"text\">L'exemple suivant est une façon incorrecte de représenter un intervalle dans un programme.</div>\n<div class=\"code-sample-title\">Représentation incorrecte d'un intervalle dans un programme</div><pre class=\"codeBlock\">if(1 <= monNombre <= 10) // cette expression est incorrecte\n{\n  console.log(\"Le nombre est entre 1 et 10\");\n}</pre>\n<h3 class=\"title\" ref=\"or operator\">Opérateur OU (||)</h3>\n<div class=\"text\">L'opérateur OU est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si au moins une <concept ref=\"boolean\">valeur booléenne</concept> est vraie.</div><div class=\"text\">Une expression qui utilise l'opérateur OU est vraie si au moins une des conditions qui forment l'expression est vraie.</div><div class=\"text\">L'opérateur s'écrit avec deux barres verticales (||).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">var resultat = true || true; // resultat est true (vrai)\nresultat = false || true; // resultat est true (vrai)\nresultat = true || false; // resultat est true (vrai)\nresultat = false || false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-173",
          "name"          : "Ainsi passent les jours",
          "normalizedName": "ainsi passent les jours",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Les mois peuvent avoir soit 31 ou 30 jours, sauf le mois de février qui en a 28 (ou 29, pendant les années bissextiles). Construisons un programme pour nous rappeler combien de jours compte chaque mois.</div><ul class=algorithm><li>Les mois qui ont <strong>31 jours</strong> sont: janvier, mars, mai, juillet, août, octobre, décembre.</li><li>Les mois qui ont <strong>30 jours</strong> sont: avril, juin, septembre, novembre.</li><li>Le seul mois avec <strong>28 jours</strong> est février.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=month>mois</var> est égale à \n    <string>\"janvier\"</string> <strong>ou</strong> à \n    <string>\"mars\"</string> <strong>ou</strong> à \n    <string>\"mai\"</string> <strong>ou</strong> à \n    <string>\"juillet\"</string> <strong>ou</strong> à \n    <string>\"août\"</string> <strong>ou</strong> à \n    <string>\"octobre\"</string> <strong>ou</strong> à \n    <string>\"décembre\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=month>mois</var> est égale à \n    <string>\"avril\"</string> <strong>ou</strong> à \n    <string>\"juin\"</string> <strong>ou</strong> à \n    <string>\"septembre\"</string> <strong>ou</strong> à \n    <string>\"novembre\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=month>mois</var> est égale à \n    <string>\"février\"</string>.</li><li class=code-item>N'utilisez pas de lettres majuscules dans le nom des mois!</li></ol>",
          "boilerplate"   : "var mois = obtenirMois();\n\nif(?)\n{\n  joursParMois(mois, 31);\n}\nelse if(?)\n{\n  joursParMois(mois, 30);\n}\nelse if(?)\n{\n  joursParMois(mois, 28);\n}",
          "solution"      : "var mois = obtenirMois();\n\nif(mois == \"janvier\" || mois == \"mars\" || mois == \"mai\" || mois == \"juillet\" || mois == \"août\" || mois == \"octobre\" || mois == \"décembre\")\n{\n  joursParMois(mois, 31);\n}\nelse if(mois == \"avril\" || mois == \"juin\" || mois == \"septembre\" || mois == \"novembre\")\n{\n  joursParMois(mois, 30);\n}\nelse if(mois == \"février\")\n{\n  joursParMois(mois, 28);\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"or operator\">Opérateur OU (||)</h3>\n<div class=\"text\">L'opérateur OU est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si au moins une <concept ref=\"boolean\">valeur booléenne</concept> est vraie.</div><div class=\"text\">Une expression qui utilise l'opérateur OU est vraie si au moins une des conditions qui forment l'expression est vraie.</div><div class=\"text\">L'opérateur s'écrit avec deux barres verticales (||).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">var resultat = true || true; // resultat est true (vrai)\nresultat = false || true; // resultat est true (vrai)\nresultat = true || false; // resultat est true (vrai)\nresultat = false || false; // resultat est false (faux)</pre>\n<h3 class=\"title\" ref=\"multiple or\">Opérateurs OU multiples dans une expression</h3>\n<div class=\"text\">Nous pouvons utiliser plus d'un <concept ref=\"or operator\">opérateur OU</concept> pour vérifier plusieurs conditions dans une seule expression. Pour que l'expression soit <concept ref=\"boolean\">vraie</concept>, il suffit qu'une seule condition soit vraie. Si au moins une condition est vraie, l'expression entière est aussi vraie.</div>\n<div class=\"code-sample-title\">Opérateurs OU multiples</div><pre class=\"codeBlock\">if(jourFerie == true || temperature < -40 || weekend == true)\n{\n  console.log(\"L'école est fermée!\");\n}</pre>\n<div class=\"text\">Si c'est un jour férié et que la température est au-dessous de -40 et que c'est le weekend, alors l'école est fermée</div><div class=\"text\">Si ce n'est pas un jour férié, mais que la température est au-dessous de -40 et que c'est le weekend, l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40 et que c'est le weekend, l'école est fermée</div><div class=\"text\">Si c'est un jour férié, mais que la température n'est pas au-dessous de -40 et que ce n'est pas le weekend, l'école est fermée</div><div class=\"text\">Si ce n'est pas un jour férié et que la température n'est pas au-dessous de -40 et que ce n'est pas le weekend, alors l'école est ouverte</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-174",
          "name"          : "À poils ou à plumes?",
          "normalizedName": "a poils ou a plumes",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Aidons une professeure de biologie à construire un programme qui permet d'identifier différents vertébrés. Les vertébrés sont des créatures qui ont une colonne vertébrale. Voici la classification que nous utilisons:</div><ul class=algorithm><li>Les <strong>mammifères</strong> ont une peau de type <string>\"poilue\"</string>, ont <strong>4</strong> pattes et n'ont <strong>pas</strong> de nageoires.</li><li>Les <strong>oiseaux</strong> ont une peau de type <string>\"plumes\"</string>, ont <strong>2</strong> pattes et n'ont <strong>pas</strong> de nageoires.</li><li>Les <strong>reptiles </strong> ont une peau de type <string>\"écailles\"</string>, ont <strong>0 ou 4</strong> pattes et n'ont <strong>pas</strong> de nageoires.</li><li>Les <strong>amphibiens</strong> ont une peau de type <string>\"nue\"</string>, ont <strong>4</strong> pattes et n'ont <strong>pas</strong> de nageoires.</li><li>Les <strong>poissons</strong> ont une peau de type <string>\"écailles\"</string>, ont <strong>0</strong> pattes et <strong>ont</strong> des nageoires.</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=skin>peau</var> est égale à \n    <string>\"plumes\"</string> <strong>et</strong> si la valeur de <var id=legs>pattes</var> est égale à 2 <strong>et</strong> si la valeur de <var id=fins>nageoires</var> est égale à <strong>false</strong> (faux).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=skin>peau</var> est égale à \n    <string>\"écailles\"</string> <strong>et</strong> si la valeur de <var id=legs>pattes</var> est égale à 0 ou à 4 <strong>et</strong> si la valeur de <var id=fins>nageoires</var> est égale à <strong>false</strong>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=skin>peau</var> est égale à \n    <string>\"nue\"</string> <strong>et</strong> si la valeur de <var id=legs>pattes</var> est égale à 4 <strong>et</strong> si la valeur de <var id=fins>nageoires</var> est égale à <strong>false</strong>.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une condition qui vérifie si la valeur de <var id=skin>peau</var> est égale à \n    <string>\"écailles\"</string> <strong>et</strong> si la valeur de <var id=legs>pattes</var> est égale à 0 <strong>et</strong> si la valeur de <var id=fins>nageoires</var> est égale à <strong>true</strong> (vrai).</li></ol>",
          "boilerplate"   : "var peau = obtenirTypePeau();\nvar pattes = obtenirPattesCreature();\nvar nageoires = possedeNageoires();\n\nif(peau == \"poilue\" && pattes == 4 && nageoires == false)\n{\n  identifierCreature(\"mammifère\");\n}\nelse if(?)\n{\n  identifierCreature(\"oiseau\");\n}\nelse if(?)\n{\n  identifierCreature(\"reptile\");\n}\nelse if(?)\n{\n  identifierCreature(\"amphibien\");\n}\nelse if(?)\n{\n  identifierCreature(\"poisson\");\n}\nelse\n{\n  identifierCreature(\"créature étrange\");\n}",
          "solution"      : "var peau = obtenirTypePeau();\nvar pattes = obtenirPattesCreature();\nvar nageoires = possedeNageoires();\n\nif(peau == \"poilue\" && pattes == 4 && nageoires == false)\n{\n  identifierCreature(\"mammifère\");\n}\nelse if(peau == \"plumes\" && pattes == 2 && nageoires == false)\n{\n  identifierCreature(\"oiseau\");\n}\nelse if(peau == \"écailles\" && (pattes == 0 || pattes == 4) && nageoires == false)\n{\n  identifierCreature(\"reptile\");\n}\nelse if(peau == \"nue\" && pattes == 4 && nageoires == false)\n{\n  identifierCreature(\"amphibien\");\n}\nelse if(peau == \"écailles\" && pattes == 0 && nageoires == true)\n{\n  identifierCreature(\"poisson\");\n}\nelse\n{\n  identifierCreature(\"créature étrange\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"and operator\">Opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">L'opérateur ET est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si deux ou plusieurs <concept ref=\"boolean\">valeurs booléennes</concept> sont vraies.</div><div class=\"text\">Une expression qui utilise l'opérateur ET est seulement vraie si toutes les conditions qui forment l'expression sont vraies.</div><div class=\"text\">L'opérateur s'écrit avec deux perluètes (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur AND</div><pre class=\"codeBlock\">var resultat = true && true; // resultat est true (vrai)\nresultat = false && true; // resultat est false (faux)\nresultat = true && false; // resultat est false (faux)\nresultat = false && false; // resultat est false (faux)</pre>\n<h3 class=\"title\" ref=\"or operator\">Opérateur OU (||)</h3>\n<div class=\"text\">L'opérateur OU est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si au moins une <concept ref=\"boolean\">valeur booléenne</concept> est vraie.</div><div class=\"text\">Une expression qui utilise l'opérateur OU est vraie si au moins une des conditions qui forment l'expression est vraie.</div><div class=\"text\">L'opérateur s'écrit avec deux barres verticales (||).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">var resultat = true || true; // resultat est true (vrai)\nresultat = false || true; // resultat est true (vrai)\nresultat = true || false; // resultat est true (vrai)\nresultat = false || false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-175",
          "name"          : "Votre horoscope",
          "normalizedName": "votre horoscope",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Les horoscopes sont des prédictions basées sur les signes astrologiques. Le signe astrologique d'une personne est déterminé par sa date de naissance. Construisons un programme qui affiche le signe astrologique de l'utilisateur selon leur date de naissance. Voici les dates qui permettent de déterminer le signe astrologique:</div><table><thead><tr><th>Signe astrologique</th><th>Dates</th></tr></thead><tbody><tr><td>Capricorne</td><td>22 décembre au 19 janvier</td></tr><tr><td>Verseau</td><td>20 janvier au 18 février</td></tr><tr><td>Poissons</td><td>19 février au 20 mars</td></tr><tr><td>Bélier</td><td>21 mars au 19 avril</td></tr><tr><td>Taureau</td><td>20 avril au 20 mai</td></tr><tr><td>Gémeaux</td><td>21 mai au 20 juin</td></tr><tr><td>Cancer</td><td>21 juin au 22 juillet</td></tr><tr><td>Lion</td><td>23 juillet au 22 août</td></tr><tr><td>Vierge</td><td>23 août au 22 septembre</td></tr><tr><td>Balance</td><td>23 septembre au 22 octobre</td></tr><tr><td>Scorpion</td><td>23 octobre au 21 novembre</td></tr><tr><td>Sagittaire</td><td>22 novembre au 21 décembre</td></tr></tbody></table></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la date de naissance de l'utilisateur est entre le 20 janvier et le 18 février.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la date de naissance de l'utilisateur est entre le 19 février et le 20 mars.</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la date de naissance de l'utilisateur est entre le 21 mars et le 19 avril.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une condition qui vérifie si la date de naissance de l'utilisateur est entre le 20 avril et le 20 mai.</li><li class=code-item>Remplacer le cinquième point d'interrogation par une condition qui vérifie si la date de naissance de l'utilisateur est entre le 21 mai et le 20 juin.</li><li class=code-item>Remplacer le sixième point d'interrogation par une condition qui vérifie si la date de naissance de l'utilisateur est entre le 21 juin et le 22 juillet.</li><li class=code-item>N'utilisez pas de lettres majuscules dans le nom des mois!</li></ol>",
          "boilerplate"   : "var mois = obtenirMois();\nvar jour = obtenirJour();\n\nif((mois == \"décembre\" && jour >= 22) || (mois == \"janvier\" && jour <= 19))\n{\n  afficherHoroscope(\"Capricorne\");\n}\nelse if(?)\n{\n  afficherHoroscope(\"Verseau\");\n}\nelse if(?)\n{\n  afficherHoroscope(\"Poissons\");\n}\nelse if(?)\n{\n  afficherHoroscope(\"Bélier\");\n}\nelse if(?)\n{\n  afficherHoroscope(\"Taureau\");\n}\nelse if(?)\n{\n  afficherHoroscope(\"Gémeaux\");\n}\nelse if(?)\n{\n  afficherHoroscope(\"Cancer\");\n}\nelse if((mois == \"juillet\" && jour >= 23) || (mois == \"août\" && jour <= 22))\n{\n  afficherHoroscope(\"Lion\");\n}\nelse if((mois == \"août\" && jour >= 23) || (mois == \"septembre\" && jour <= 22))\n{\n  afficherHoroscope(\"Vierge\");\n}\nelse if((mois == \"septembre\" && jour >= 23) || (mois == \"octobre\" && jour <= 22))\n{\n  afficherHoroscope(\"Balance\");\n}\nelse if((mois == \"octobre\" && jour >= 23) || (mois == \"novembre\" && jour <= 21))\n{\n  afficherHoroscope(\"Scorpion\");\n}\nelse if((mois == \"novembre\" && jour >= 22) || (mois == \"décembre\" && jour <= 21))\n{\n  afficherHoroscope(\"Sagittaire\");\n}",
          "solution"      : "var mois = obtenirMois();\nvar jour = obtenirJour();\n\nif((mois == \"décembre\" && jour >= 22) || (mois == \"janvier\" && jour <= 19))\n{\n  afficherHoroscope(\"Capricorne\");\n}\nelse if((mois == \"janvier\" && jour >= 20) || (mois == \"février\" && jour <= 18))\n{\n  afficherHoroscope(\"Verseau\");\n}\nelse if((mois == \"février\" && jour >= 19) || (mois == \"mars\" && jour <= 20))\n{\n  afficherHoroscope(\"Poissons\");\n}\nelse if((mois == \"mars\" && jour >= 21) || (mois == \"avril\" && jour <= 19))\n{\n  afficherHoroscope(\"Bélier\");\n}\nelse if((mois == \"avril\" && jour >= 20) || (mois == \"mai\" && jour <= 20))\n{\n  afficherHoroscope(\"Taureau\");\n}\nelse if((mois == \"mai\" && jour >= 21) || (mois == \"juin\" && jour <= 20))\n{\n  afficherHoroscope(\"Gémeaux\");\n}\nelse if((mois == \"juin\" && jour >= 21) || (mois == \"juillet\" && jour <= 22))\n{\n  afficherHoroscope(\"Cancer\");\n}\nelse if((mois == \"juillet\" && jour >= 23) || (mois == \"août\" && jour <= 22))\n{\n  afficherHoroscope(\"Lion\");\n}\nelse if((mois == \"août\" && jour >= 23) || (mois == \"septembre\" && jour <= 22))\n{\n  afficherHoroscope(\"Vierge\");\n}\nelse if((mois == \"septembre\" && jour >= 23) || (mois == \"octobre\" && jour <= 22))\n{\n  afficherHoroscope(\"Balance\");\n}\nelse if((mois == \"octobre\" && jour >= 23) || (mois == \"novembre\" && jour <= 21))\n{\n  afficherHoroscope(\"Scorpion\");\n}\nelse if((mois == \"novembre\" && jour >= 22) || (mois == \"décembre\" && jour <= 21))\n{\n  afficherHoroscope(\"Sagittaire\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"and operator\">Opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">L'opérateur ET est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si deux ou plusieurs <concept ref=\"boolean\">valeurs booléennes</concept> sont vraies.</div><div class=\"text\">Une expression qui utilise l'opérateur ET est seulement vraie si toutes les conditions qui forment l'expression sont vraies.</div><div class=\"text\">L'opérateur s'écrit avec deux perluètes (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur AND</div><pre class=\"codeBlock\">var resultat = true && true; // resultat est true (vrai)\nresultat = false && true; // resultat est false (faux)\nresultat = true && false; // resultat est false (faux)\nresultat = false && false; // resultat est false (faux)</pre>\n<h3 class=\"title\" ref=\"or operator\">Opérateur OU (||)</h3>\n<div class=\"text\">L'opérateur OU est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si au moins une <concept ref=\"boolean\">valeur booléenne</concept> est vraie.</div><div class=\"text\">Une expression qui utilise l'opérateur OU est vraie si au moins une des conditions qui forment l'expression est vraie.</div><div class=\"text\">L'opérateur s'écrit avec deux barres verticales (||).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">var resultat = true || true; // resultat est true (vrai)\nresultat = false || true; // resultat est true (vrai)\nresultat = true || false; // resultat est true (vrai)\nresultat = false || false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-009",
          "name"          : "Quiz 9",
          "description"   : "L'opérateur OU",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-009_q-01",
              "question": "<div>Vrai ou faux. Les deux barres verticales (<code>||</code>) sont appelées l'<em>opérateur OU</em>.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-009_q-01_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "Les deux barres verticales sont utilisées pour écrire l'<em>opérateur OU</em>."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-009_q-02",
              "question": "<div>Choisissez toutes les conditions qui sont vraies, lorsque <var>x</var> est égal à 5 et que <var>y</var> est égal à 7.</div>",
              "type"    : "check",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-009_q-02_a-01",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>x &gt; 0 &amp;&amp; x &lt; 10</code></pre>",
                  "explanation": "La condition <code>x &gt; 0</code> est vraie et la condition <code>x &lt; 10</code> est vraie. Puisque les deux conditions sont vraies, l'expression entière est aussi vraie."
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-009_q-02_a-02",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>x &gt; 0 || x &lt; 10</code></pre>",
                  "explanation": "La condition <code>x &gt; 0</code> est vraie et la condition <code>x &lt; 10</code> est vraie. Puisque au moins une condition est vraie, l'expression entière est aussi vraie."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-02_a-03",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>y &gt; 5 &amp;&amp; y &gt; 10</code></pre>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-009_q-02_a-04",
                  "value"      : 1,
                  "answer"     : "<pre class=\"language-javascript\"><code>x &lt; 5 || y &gt; 5</code></pre>",
                  "explanation": "La condition <code>x &lt; 5</code> est fausse et la condition <code>y &gt; 5</code> est vraie. Puisque au moins une condition est vraie, l'expression entière est aussi vraie."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-02_a-05",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>x != 5 || y != 7</code></pre>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-009_q-03",
              "question": "<div>Choisissez la condition qui représente l'énoncé: \"La valeur de <var>monNombre</var> est plus petite que 5 ou plus grande que 15\".</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-03_a-01",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>(monNombre &gt; 5 || monNombre &lt; 15)</code></pre>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-03_a-02",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>(monNombre &lt; 5 &amp;&amp; monNombre &gt; 15)</code></pre>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-009_q-03_a-03",
                  "value"      : 2,
                  "answer"     : "<pre class=\"language-javascript\"><code>(monNombre &lt; 5 || monNombre &gt; 15)</code></pre>",
                  "explanation": "Cette condition vérifie si <var>monNombre</var> est plus petit que 5 OU si <var>monNombre</var> est plus grand que 15."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-03_a-04",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>(monNombre &gt; 5 &amp;&amp; monNombre &lt; 15)</code></pre>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-009_q-04",
              "question": "<div>Vrai ou faux. L'opérateur ET et l'opérateur OU peuvent être utilisés dans une même condition, comme dans l'exemple suivant:</div>\n<pre class=\"language-javascript\"><code>((x &lt; 5 &amp;&amp; x &gt; 0) || (y &lt; 5 &amp;&amp; y &gt; 0))</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-009_q-04_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "Une condition peut contenir n'importe quel nombre d'opérateurs ET et OU. Nous pouvons aussi utiliser une combinaison des deux opérateurs."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-009_q-05",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var temperature = 11;\n\nif(temperature &lt; 0 || temperature &gt; 35)\n{\n  console.log(\"La température est extrême\");\n}\nelse\n{\n  console.log(\"La température est normale\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>La température est extrême</samp></div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-009_q-05_a-02",
                  "value"      : 2,
                  "answer"     : "<div>Un message: <samp>La température est normale</samp></div>",
                  "explanation": "Puisque <code>temperature &lt; 0</code> est faux et que <code>temperature &gt; 35</code> est aussi faux, l'expression entière est fausse. Le bloc de code de l'instruction <code>else</code> est exécuté."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-05_a-03",
                  "value" : 0,
                  "answer": "<div>Deux messages: <samp>La température est extrême</samp> et <samp>La température est normale</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-05_a-04",
                  "value" : 0,
                  "answer": "<div>Aucun message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-009_q-06",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var argent = 2.50;\nvar carteCadeau = 10.00;\n\nif(argent &gt; 5 || carteCadeau &gt; 5)\n{\n  console.log(\"Vous pouvez acheter une tranche de pizza\");\n}\nelse\n{\n  console.log(\"Désolé, vous ne pouvez pas acheter une tranche de pizza\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-009_q-06_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Un message: <samp>Vous pouvez acheter une tranche de pizza</samp></div>",
                  "explanation": "Puisque <code>argent &gt; 0</code> est faux et que <code>carteCadeau &gt; 5</code> est vrai, l'expression entière est vraie. Le bloc de code de l'instruction <code>if</code> est exécuté."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>Désolé, vous ne pouvez pas acheter une tranche de pizza</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>Deux messages: <samp>Vous pouvez acheter une tranche de pizza</samp> et <samp>Désolé, vous ne pouvez pas acheter une tranche de pizza</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>Aucun message</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-009_q-07",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var pluie = 20;\nvar neige = 15;\n\nif((pluie &gt; 0 &amp;&amp; pluie &lt; 30) &amp;&amp; (neige &gt; 0 &amp;&amp; neige &lt; 20))\n{\n  console.log(\"Vous pouvez aller jouer dehors aujourd'hui\");\n}\nelse\n{\n  console.log(\"Il vaut mieux rester à l'intérieur aujourd'hui\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-009_q-07_a-01",
                  "value"      : 2,
                  "answer"     : "<div>Un message: <samp>Vous pouvez aller jouer dehors aujourd'hui</samp></div>",
                  "explanation": "Puisque <code>pluie &gt; 0</code> et <code>pluie &lt; 30</code> sont vrais ET que <code>neige &gt; 0</code> et <code>neige &lt; 20</code> sont aussi vrais, l'expression entière est vraie. Le bloc de code de l'instruction <code>if</code> est exécuté."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-07_a-02",
                  "value" : 0,
                  "answer": "<div>Un message: <samp>Il vaut mieux rester à l'intérieur aujourd'hui</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>Deux messages: <samp>Vous pouvez aller jouer dehors aujourd'hui</samp> et <samp>Il vaut mieux rester à l'intérieur aujourd'hui</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-009_q-07_a-04",
                  "value" : 0,
                  "answer": "<div>Aucun message</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 9",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-267",
          "name"          : "Les boucles while",
          "normalizedName": "les boucles while",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-267_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-267_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-19",
          "name"          : "Projet 19 - 3... 2... 1... Décollage!",
          "normalizedName": "projet 19 - 3... 2... 1... decollage!",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-176",
          "name"          : "Dix… neuf… huit.. ",
          "normalizedName": "dix neuf huit..",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-176_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-176_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Donner à la variable <var id=countdown>compteRebours</var> la valeur 10.</li></ol>",
          "boilerplate"   : "var compteRebours = ?;\n\nwhile(compteRebours >= 1)\n{\n  afficherCompte(compteRebours);\n  compteRebours = compteRebours - 1;\n}\n\ndecollage();",
          "solution"      : "var compteRebours = 10;\n\nwhile(compteRebours >= 1)\n{\n  afficherCompte(compteRebours);\n  compteRebours = compteRebours - 1;\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-177",
          "name"          : "Un compte variable",
          "normalizedName": "un compte variable",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-177_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-177_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=countdown>compteRebours</var>. Donnez-lui la valeur retournée par un <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: <string>\"Entrez la durée du compte à rebours\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=countdown>compteRebours</var> la valeur de <var id=countdown>compteRebours</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=countdown>compteRebours</var> est plus grande que 0.</li></ol>",
          "boilerplate"   : "// Demandez à l'utilisateur la durée du compte à rebours\n?\n// Convertissez compteRebours en nombre\n?\n\nwhile(?)\n{\n  afficherCompte(compteRebours);\n  compteRebours = compteRebours - 1;\n}\n\ndecollage();",
          "solution"      : "// Demandez à l'utilisateur la durée du compte à rebours\nvar compteRebours = prompt(\"Entrez la durée du compte à rebours\");\n// Convertissez compteRebours en nombre\ncompteRebours = Number(compteRebours);\n\nwhile(compteRebours > 0)\n{\n  afficherCompte(compteRebours);\n  compteRebours = compteRebours - 1;\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"control variable\">Variable de contrôle</h3>\n<div class=\"text\">Les boucles sont contrôlées par des conditions <concept ref=\"loops\">booléennes</concept>. Nous appelons la <concept ref=\"variable\">variable</concept> utilisée dans la <concept ref=\"condition\">condition</concept> la &quot;variable de contrôle&quot;.</div>\n<div class=\"code-sample-title\">Exemple de variable de contrôle</div><pre class=\"codeBlock\">var compteur = 3;\nwhile(compteur > 0) // compteur est la variable de contrôle\n{\n  console.log(compteur);\n  compteur = compteur - 1;\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-178",
          "name"          : "À l'envers",
          "normalizedName": "a lenvers",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Modifions le programme de compte à rebours pour qu'il compte à l'endroit plutôt qu'à l'envers. Pour ce faire, nous utilisons une boucle while qui compte de 1 jusqu'à la valeur entrée par l'utilisateur.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=currentCount>decompte</var> est plus petite ou égale à la valeur de <var id=countLimit>duree</var>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=currentCount>decompte</var> le résultat de <var id=currentCount>decompte</var> plus 1.</li></ol>",
          "boilerplate"   : "var duree = prompt(\"Entrez la durée du décompte\");\nduree = Number(duree);\n\nvar decompte = 1;\n\nwhile(?)\n{\n  afficherCompte(decompte);\n  ?\n}\n\ndecollage();",
          "solution"      : "var duree = prompt(\"Entrez la durée du décompte\");\nduree = Number(duree);\n\nvar decompte = 1;\n\nwhile(decompte <= duree)\n{\n  afficherCompte(decompte);\n  decompte = decompte + 1;\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-179",
          "name"          : "Houston, nous avons un problème!",
          "normalizedName": "houston nous avons un probleme!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-179_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-179_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>À l'intérieur du bloc de code de la boucle while, après l'instruction <concept ref=displayCount>afficherCompte()</concept>, ajouter une instruction qui diminue la valeur de <var id=countdown>compteRebours</var> de 1. Cette instruction devrait être la dernière instruction du bloc de code.</li></ol>",
          "boilerplate"   : "var compteRebours = prompt(\"Entrez la durée du compte à rebours\");\ncompteRebours = Number(compteRebours);\n\nwhile(compteRebours > 0)\n{\n  afficherCompte(compteRebours);\n  \n}\n\ndecollage();",
          "solution"      : "var compteRebours = prompt(\"Entrez la durée du compte à rebours\");\ncompteRebours = Number(compteRebours);\n\nwhile(compteRebours > 0)\n{\n  afficherCompte(compteRebours);\n  compteRebours = compteRebours - 1;\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"infinite loop\">Boucle infinie</h3>\n<div class=\"text\">Les <concept ref=\"loops\">boucles</concept> infinies sont un type de bogue qui se produit quand la <concept ref=\"condition\">condition</concept> d'une boucle ne peut jamais devenir <concept ref=\"boolean\">fausse</concept>.</div>\n<div class=\"code-sample-title\">Exemple de boucle infinie</div><pre class=\"codeBlock\">var compteur = 3;\nwhile(compteur > 0)\n{\n  console.log(compteur);\n  // il manque une instruction ici pour diminuer\n  // la valeur de compteur (ex: compteur = compteur - 1;)\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, la valeur de la <concept ref=\"control variable\">variable de contrôle</concept> ne change jamais et la condition &quot;compteur &gt; 0&quot; est toujours vraie. La boucle affiche le chiffre 3 et le programme ne se termine pas.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-180",
          "name"          : "Un compte infini",
          "normalizedName": "un compte infini",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-180_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-180_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Enlever le point-virgule après la condition booléenne de la boucle while.</li></ol>",
          "boilerplate"   : "var compteRebours = prompt(\"Entrez la durée du compte à rebours\");\ncompteRebours = Number(compteRebours);\n\nwhile(compteRebours > 0);\n{\n  afficherCompte(compteRebours);\n  compteRebours = compteRebours - 1;\n}\n\ndecollage();",
          "solution"      : "var compteRebours = prompt(\"Entrez la durée du compte à rebours\");\ncompteRebours = Number(compteRebours);\n\nwhile(compteRebours > 0)\n{\n  afficherCompte(compteRebours);\n  compteRebours = compteRebours - 1;\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"infinite while loops semicolon\">Boucles while infinies causées par un point-virgule</h3>\n<div class=\"text\">Si nous écrivons un point-virgule après la <concept ref=\"boolean\">condition</concept> d'une <concept ref=\"while loop\">boucle while</concept>, nous aurons une <concept ref=\"infinite loop\">boucle infinie</concept>.</div><div class=\"text\">L'ordinateur comprendra que le <concept ref=\"code block\">bloc de code</concept> est vide, et la valeur de la <concept ref=\"control variable\">variable de contrôle</concept> ne changera jamais.</div><div class=\"text\">Par exemple, si nous écrivons le code suivant:</div>\n<div class=\"code-sample-title\">Exemple de boucle infinie causée par un point-virgule</div><pre class=\"codeBlock\">var compteur = 3;\nwhile(compteur > 0); // remarquez le point-virgule ici\n{\n  console.log(compteur);\n  compteur = compteur - 1;\n}</pre>\n<div class=\"text\">L'ordinateur comprendra le code ci-dessus comme suit:</div>\n<div class=\"code-sample-title\">Exemple de boucle infinie causée par un point-virgule</div><pre class=\"codeBlock\">var compteur = 3;\nwhile(compteur > 0)\n{\n\n}\nconsole.log(compteur);\n// remarquez que la valeur de la variable de contrôle\n// change maintenant à l'extérieur de la boucle\ncompteur = compteur - 1;</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-181",
          "name"          : "Compter les bogues",
          "normalizedName": "compter les bogues",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ce programme de compte à rebours devrait permettre à la fusée de décoller lorsque le compte atteint zéro. Cependant, un bogue s'est glissé dans le programme et le compteur augmente au lieu de diminuer, ce qui cause une boucle infinie. Pouvez-vous réparer le bogue?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer l'instruction qui augmente la valeur de <var id=countdown>compteRebours</var> de 1 par une instruction qui diminue la valeur de  <var id=countdown>compteRebours</var> de 1.</li></ol>",
          "boilerplate"   : "var compteRebours = 10;\n\nwhile(compteRebours > 0)\n{\n  afficherCompte(compteRebours);\n  compteRebours = compteRebours + 1;\n}\n\ndecollage();",
          "solution"      : "var compteRebours = 10;\n\nwhile(compteRebours > 0)\n{\n  afficherCompte(compteRebours);\n  compteRebours = compteRebours - 1;\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"infinite loop\">Boucle infinie</h3>\n<div class=\"text\">Les <concept ref=\"loops\">boucles</concept> infinies sont un type de bogue qui se produit quand la <concept ref=\"condition\">condition</concept> d'une boucle ne peut jamais devenir <concept ref=\"boolean\">fausse</concept>.</div>\n<div class=\"code-sample-title\">Exemple de boucle infinie</div><pre class=\"codeBlock\">var compteur = 3;\nwhile(compteur > 0)\n{\n  console.log(compteur);\n  // il manque une instruction ici pour diminuer\n  // la valeur de compteur (ex: compteur = compteur - 1;)\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, la valeur de la <concept ref=\"control variable\">variable de contrôle</concept> ne change jamais et la condition &quot;compteur &gt; 0&quot; est toujours vraie. La boucle affiche le chiffre 3 et le programme ne se termine pas.</div>\n<h3 class=\"title\" ref=\"control variable\">Variable de contrôle</h3>\n<div class=\"text\">Les boucles sont contrôlées par des conditions <concept ref=\"loops\">booléennes</concept>. Nous appelons la <concept ref=\"variable\">variable</concept> utilisée dans la <concept ref=\"condition\">condition</concept> la &quot;variable de contrôle&quot;.</div>\n<div class=\"code-sample-title\">Exemple de variable de contrôle</div><pre class=\"codeBlock\">var compteur = 3;\nwhile(compteur > 0) // compteur est la variable de contrôle\n{\n  console.log(compteur);\n  compteur = compteur - 1;\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-182",
          "name"          : "De toutes pièces",
          "normalizedName": "de toutes pieces",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-182_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-182_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=countdown>compteRebours</var>. Donnez-lui la valeur 15.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une boucle while. La condition de cette boucle while doit vérifier si la valeur de <var id=countdown>compteRebours</var> est plus grande ou égale à 1.</li><li class=code-item>À l'intérieur du bloc de code de la boucle while, remplacer le troisième point d'interrogation par l'instruction <concept ref=displayCount>afficherCompte(<var id=countdown>compteRebours</var>)</concept>.</li><li class=code-item>Toujours à l'intérieur du bloc de code de la boucle while, remplacer le dernier point d'interrogation par une instruction qui donne à <var id=countdown>compteRebours</var> la valeur de <var id=countdown>compteRebours</var> moins 1.</li></ol>",
          "boilerplate"   : "// Créez la variable de contrôle ici\n?\n\n// Créez la boucle while ici\n?\n\n// Afficher le compte à rebours\n?\n\n// Diminuer la valeur de compteRebours\n?\n\ndecollage();",
          "solution"      : "// Créez la variable de contrôle ici\nvar compteRebours = 15;\n\n// Créez la boucle while ici\nwhile(compteRebours >= 1)\n{\n  // Afficher le compte à rebours\n  afficherCompte(compteRebours);\n\n  // Diminuer la valeur de compteRebours\n  compteRebours = compteRebours - 1;\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"iteration\">Itération</h3>\n<div class=\"text\">Lorsqu'une <concept ref=\"loops\">boucle</concept> termine toutes les instructions qui se trouvent dans son <concept ref=\"code block\">bloc de code</concept>, nous disons que la boucle a complété une itération.</div>\n<div class=\"code-sample-title\">Exemple d'itération</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, nous disons qu'une itération est complétée chaque fois que le programme augmente la valeur de x. Au total, le programme effectue 2 itérations, qui affichent les messages suivants: &quot;x est égal à 0&quot; and &quot;x est égal à 1&quot;.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-183",
          "name"          : "Une simplification",
          "normalizedName": "une simplification",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-183_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-183_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Simplifier le programme de compte à rebours en utilisant une boucle while. Le compte à rebours doit afficher tous les nombres, de 5 à 1. Le programme ne doit pas contenir plus d'une instruction <concept ref=displayCount>afficherCompte(<var id=countdown>compteRebours</var>)</concept>.</li></ol>",
          "boilerplate"   : "var compteRebours = 5;\n\nafficherCompte(compteRebours);\ncompteRebours = compteRebours - 1;\nafficherCompte(compteRebours);\ncompteRebours = compteRebours - 1;\nafficherCompte(compteRebours);\ncompteRebours = compteRebours - 1;\nafficherCompte(compteRebours);\ncompteRebours = compteRebours - 1;\nafficherCompte(compteRebours);\n\ndecollage();",
          "solution"      : "var compteRebours = 5;\n\nwhile(compteRebours >= 1)\n{\n  afficherCompte(compteRebours);\n  compteRebours = compteRebours - 1;\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"Loops Simplify Code\">Élimination du code répétitif avec les boucles</h3>\n<div class=\"text\">Les <concept ref=\"loops\">boucles</concept> peuvent être utilisées pour simplifier le code répétitif. Il s'agit pour cela de repérer un motif dans le code.</div>\n<div class=\"code-sample-title\">Exemple de code répétitif</div><pre class=\"codeBlock\">console.log(\"compteur est 10\");\nconsole.log(\"compteur est 9\");\nconsole.log(\"compteur est 8\");\nconsole.log(\"compteur est 7\");\nconsole.log(\"compteur est 6\");\nconsole.log(\"compteur est 5\");\nconsole.log(\"compteur est 4\");\nconsole.log(\"compteur est 3\");\nconsole.log(\"compteur est 2\");\nconsole.log(\"compteur est 1\");</pre>\n<div class=\"text\">L'exemple ci-dessus peut être simplifié comme suit:</div>\n<div class=\"code-sample-title\">Exemple de code simplifié</div><pre class=\"codeBlock\">var compteur = 10;\nwhile(compteur > 0)\n{\n  console.log(\"compteur est \" + compteur);\n  compteur = compteur - 1;\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-184",
          "name"          : "Une table de multiplication",
          "normalizedName": "une table de multiplication",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme capable d'afficher les 10 premiers multiples d'un nombre entré par l'utilisateur.</div><div class=text>Par exemple, si l'utilisateur entre la valeur 5, le programme affiche:</div><div class=text>1 x 5 = 5</div><div class=text>2 x 5 = 10</div><div class=text>3 x 5 = 15</div><div class=text>4 x 5 = 20</div><div class=text>5 x 5 = 25</div><div class=text>6 x 5 = 30</div><div class=text>7 x 5 = 35</div><div class=text>8 x 5 = 40</div><div class=text>9 x 5 = 45</div><div class=text>10 x 5 = 50</div><div class=text>Pouvez-vous compléter le programme?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=currentMultiplier>multiplicateur</var> est plus petite ou égale à 10.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=currentMultiplier>multiplicateur</var> le résultat de  <var id=currentMultiplier>multiplicateur</var> plus 1.</li></ol>",
          "boilerplate"   : "var monNombre = prompt(\"Entrez un nombre entre 1 et 10:\");\nmonNombre = Number(monNombre);\n\nvar multiplicateur = 1;\n\nwhile(?)\n{\n  console.log(multiplicateur + \" x \" + monNombre + \" = \" + (multiplicateur * monNombre));\n  ?\n}",
          "solution"      : "var monNombre = prompt(\"Entrez un nombre entre 1 et 10:\");\nmonNombre = Number(monNombre);\n\nvar multiplicateur = 1;\n\nwhile(multiplicateur <= 10)\n{\n  console.log(multiplicateur + \" x \" + monNombre + \" = \" + (multiplicateur * monNombre));\n  multiplicateur = multiplicateur + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-185",
          "name"          : "Dans votre intérêt",
          "normalizedName": "dans votre interet",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>L'intérêt est l'argent gagné en mettant simplement de l'argent de côté dans un compte d'épargne. Ce programme permet de calculer l'intérêt composé. L'intérêt composé est calculé en tenant compte de l'intérêt accumulé jusque-là. Par exemple, supposons que vous mettiez 100$ dans un compte d'épargne offrant un taux d'intérêt de 1% par an. Voici combien d'argent vous auriez après 5 ans:</div><pre><samp>Année 1 -- 100.00$ x 1.01 = 101.00$\nAnnée 2 -- 101.00$ x 1.01 = 102.01$\nAnnée 3 -- 102.01$ x 1.01 = 103.03$\nAnnée 4 -- 103.03$ x 1.01 = 104.06$\nAnnée 5 -- 104.06$ x 1.01 = 105.10$</samp></pre><div class=text>Construisons un programme qui calcule l'intérêt composé d'une somme d'argent!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=currentYear>annee</var>. Donnez-lui la valeur 1.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=currentYear>annee</var> est plus petite ou égale à <var id=years>totalAnnees</var>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui donne à <var id=currentYear>annee</var> la valeur de <var id=currentYear>annee</var> plus 1.</li></ol>",
          "boilerplate"   : "var argent = prompt(\"Combien d'argent voulez-vous mettre de côté?\");\nvar totalAnnees = prompt(\"Pour combien d'années voulez-vous économiser?\");\nvar tauxInteret = obtenirTauxInteret();\n?\n\nargent = Number(argent);\ntotalAnnees = Number(totalAnnees);\n\nconsole.log(\"Montant initial: \" + argent + \"$\");\n\nwhile(?)\n{\n  argent = argent * tauxInteret;\n\n  afficherMontant(annee, tauxInteret, argent);\n\n  ?\n}\n\nconsole.log(\"Montant total: \" + argent.toFixed(2) + \"$\");",
          "solution"      : "var argent = prompt(\"Combien d'argent voulez-vous mettre de côté?\");\nvar totalAnnees = prompt(\"Pour combien d'années voulez-vous économiser?\");\nvar tauxInteret = obtenirTauxInteret();\nvar annee = 1;\n\nargent = Number(argent);\ntotalAnnees = Number(totalAnnees);\n\nconsole.log(\"Montant initial: \" + argent + \"$\");\n\nwhile(annee <= totalAnnees)\n{\n  argent = argent * tauxInteret;\n\n  afficherMontant(annee, tauxInteret, argent);\n\n  annee = annee + 1;\n}\n\nconsole.log(\"Montant total: \" + argent.toFixed(2) + \"$\");",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-186",
          "name"          : "Pile ou face?",
          "normalizedName": "pile ou face",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un jeu simple. Le jeu commence par demander à l'utilisateur de deviner le côté d'une pièce de monnaie (pile ou face) qui sera lancé le plus souvent. L'ordinateur lance une pièce 100 fois et compte chaque résultat. Les utilisateurs remportent la partie s'ils ont correctement deviné le côté qui est apparu le plus souvent. Les utilisateurs perdent la partie si leur prédiction n'était pas correcte, ou si la pièce est tombée aussi souvent sur pile que sur face!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=numberOfFlips>nombreLancers</var>. Donnez-lui la valeur 0.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une boucle while. La condition de cette boucle while doit vérifier si la valeur de <var id=numberOfFlips>nombreLancers</var> est plus petite que 100. Le bloc de code de cette boucle while doit contenir l'instruction if et l'instruction qui augmente la valeur de <var id=numberOfFlips>nombreLancers</var>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui donne à <var id=numberOfFlips>nombreLancers</var> la valeur de <var id=numberOfFlips>nombreLancers</var> plus 1. Cette instruction doit se trouver à l'intérieur du bloc de code de la boucle while.</li></ol>",
          "boilerplate"   : "var choix = prompt(\"Sur quel côté tombera plus souvent la pièce de monnaie? (pile ou face)\");\nchoix = choix.toLowerCase();\n\nvar pile = 0;\nvar face = 0;\n\nvar cote;\n?\n\n?\n\ncote = lancerPiece();\n\nif(cote == \"face\")\n{\n  face = face + 1;\n}\nelse\n{\n  pile = pile + 1;\n}\n\n// Augmentez la valeur de nombreLancers de un\n?\n\nafficherResultatPileOuFace(face, pile);\n\n// Vérifiez si vous avez gagné la partie\nif(choix == \"face\" && face > pile) { resultatJeu(\"victoire\"); }\nelse if(choix == \"pile\" && pile > face) { resultatJeu(\"victoire\"); }\nelse { resultatJeu(\"défaite\"); }",
          "solution"      : "var choix = prompt(\"Sur quel côté tombera plus souvent la pièce de monnaie? (pile ou face)\");\nchoix = choix.toLowerCase();\n\nvar pile = 0;\nvar face = 0;\n\nvar cote;\nvar nombreLancers = 0;\n\nwhile(nombreLancers < 100)\n{\n  cote = lancerPiece();\n\n  if(cote == \"face\")\n  {\n    face = face + 1;\n  }\n  else\n  {\n    pile = pile + 1;\n  }\n\n  // Augmentez la valeur de nombreLancers de un\n  nombreLancers = nombreLancers + 1;\n}\n\nafficherResultatPileOuFace(face, pile);\n\n// Vérifiez si vous avez gagné la partie\nif(choix == \"face\" && face > pile) { resultatJeu(\"victoire\"); }\nelse if(choix == \"pile\" && pile > face) { resultatJeu(\"victoire\"); }\nelse { resultatJeu(\"défaite\"); }",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-187",
          "name"          : "Rien ne va plus!",
          "normalizedName": "rien ne va plus!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui analyse les lancers d'un dé à 4 côtés et détermine si le dé est truqué. Un dé truqué est un dé qui tombe plus souvent sur un côté que sur les autres (normalement, à l'avantage du joueur). Pour déterminer si un dé à 4 côtés est truqué, nous simulons 100 lancers du dé et comptons le résultat de chaque lancer. Puis, nous regardons combien de fois le dé est tombé sur chaque côté. Si un côté a été lancé trop souvent, le programme affiche que le dé est truqué.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=diceRolls>nombreLancers</var> est plus petite que 100.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=currentRoll>lancer</var> est égale à 3. À l'intérieur du bloc de code de cette instruction if, donnez à <var id=side3>cote3</var> la valeur de <var id=side3>cote3</var> plus 1.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=currentRoll>lancer</var> est égale à 4. À l'intérieur du bloc de code de cette instruction if, donnez à <var id=side4>cote4</var> la valeur de <var id=side4>cote4</var> plus 1.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une instruction qui donne à <var id=diceRolls>nombreLancers</var> la valeur de <var id=diceRolls>nombreLancers</var> plus 1.</li></ol>",
          "boilerplate"   : "var nombreLancers = 0;\nvar lancer;\n\n// Ces variables comptent combien de fois\n// le dé tombe sur chaque côté\nvar cote1 = 0;\nvar cote2 = 0;\nvar cote3 = 0;\nvar cote4 = 0;\n\nwhile(?)\n{\n  lancer = roulerDe4Cotes();\n\n  // Vérifiez sur quel côté le dé est tombé\n  if(lancer == 1) { cote1 = cote1 + 1; }\n  if(lancer == 2) { cote2 = cote2 + 1; }\n  ?\n  ?\n\n  ?\n}\n\nverifierSiDeEstTruque(cote1, cote2, cote3, cote4);",
          "solution"      : "var nombreLancers = 0;\nvar lancer;\n\n// Ces variables comptent combien de fois\n// le dé tombe sur chaque côté\nvar cote1 = 0;\nvar cote2 = 0;\nvar cote3 = 0;\nvar cote4 = 0;\n\nwhile(nombreLancers < 100)\n{\n  lancer = roulerDe4Cotes();\n\n  // Vérifiez sur quel côté le dé est tombé\n  if(lancer == 1) { cote1 = cote1 + 1; }\n  if(lancer == 2) { cote2 = cote2 + 1; }\n  if(lancer == 3) { cote3 = cote3 + 1; }\n  if(lancer == 4) { cote4 = cote4 + 1; }\n\n  nombreLancers = nombreLancers + 1;\n}\n\nverifierSiDeEstTruque(cote1, cote2, cote3, cote4);",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-188",
          "name"          : "Cent fois sur le métier",
          "normalizedName": "cent fois sur le metier",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>À la fin des années 1700, un élève appelé Carl Friedrich Gauss s'était fait demander par son enseignant de calculer la somme des 100 premiers nombres entiers (tous les nombres entre 1 et 100). Gauss a réalisé que s'il séparait les nombres en deux groupes, de 1 à 50, puis de 51 à 100, il pouvait rapidement calculer le résultat en ajoutant le premier nombre du premier groupe au dernier nombre du deuxième groupe. En prenant ensuite le deuxième nombre du premier groupe et l'avant-dernier nombre du deuxième groupe, il a observé que la somme des deux nombres était toujours 101. Il n'avait ensuite qu'à multiplier 101 par 50 pour obtenir le résultat, puisque les deux groupes contiennent 50 nombres. Utilisons nos connaissances de programmation pour créer un programme qui calcule la somme des 100 premiers nombres entiers. Lorsque vous exécutez votre programme, le résultat devrait être 5050.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=sum>somme</var>. Donnez-lui la valeur 0.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une nouvelle variable appelée <var id=currentNumber>nombre</var>. Donnez-lui la valeur 1.</li><li class=code-item>Remplacer le troisième point d'interrogation par une boucle while. La condition de cette boucle while doit vérifier si la valeur de <var id=currentNumber>nombre</var> est plus petite ou égale à 100. À l'intérieur du bloc de code de la boucle while, donnez à la variable <var id=sum>somme</var> la valeur de <var id=sum>somme</var> plus <var id=currentNumber>nombre</var>. Puis, toujours à l'intérieur du bloc de code, donnez à <var id=currentNumber>nombre</var> la valeur de <var id=currentNumber>nombre</var> plus 1.</li></ol>",
          "boilerplate"   : "// Créez la variable somme\n?\n\n// Créez la variable nombre\n?\n\n// Créez la boucle while ici\n?\n\nconsole.log(\"La somme des 100 premiers nombres est: \" + somme);",
          "solution"      : "// Créez la variable somme\nvar somme = 0;\n\n// Créez la variable nombre\nvar nombre = 1;\n\n// Créez la boucle while ici\nwhile(nombre <= 100)\n{\n  somme = somme + nombre;\n  nombre = nombre + 1;\n}\n\nconsole.log(\"La somme des 100 premiers nombres est: \" + somme);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-20",
          "name"          : "Projet 20 - Un robot revu et amélioré",
          "normalizedName": "projet 20 - un robot revu et ameliore",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-189",
          "name"          : "Changer de vitesse",
          "normalizedName": "changer de vitesse",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-189_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-189_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=step>etape</var> est plus petite que 6.</li><li class=code-item>Remplacer le deuxième point d'interrogation par l'instruction <concept ref=robot-forward>robot.forward()</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui donne à <var id=step>etape</var> le résultat de <var id=step>etape</var> plus 1.</li><li class=code-item>Le robot ne doit pas quitter le chemin. Pour cet exercice, vous ne pouvez pas utiliser l'instruction <concept ref=robot-forward>robot.forward()</concept> avec un nombre (ex: <concept ref=robot-forward>robot.forward(2)</concept>).</li></ol>",
          "boilerplate"   : "var etape = 0;\n\nwhile(?)\n{\n  ?\n  ?\n}",
          "solution"      : "var etape = 0;\n\nwhile(etape < 6)\n{\n  robot.forward();\n  etape = etape + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-190",
          "name"          : "Une solution éclairée",
          "normalizedName": "une solution eclairee",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Mettez vos connaissances des boucles à l'épreuve en amenant le robot au but.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une boucle while qui permet au robot d'atteindre le but. Votre code ne doit pas contenir plus de  <strong>2</strong> instructions \n    <concept ref=robot-forward>robot.forward()</concept>. Pour cet exercice, vous ne pouvez <strong>pas</strong> utiliser l'instruction \n    <concept ref=robot-forward>robot.forward()</concept> avec un nombre (ex:\n    <concept ref=robot-forward6>robot.forward(6)</concept>).</li><li class=code-item>Le robot ne doit pas quitter le chemin. N'oubliez pas d'augmenter la valeur de <var id=step>etape</var> à la fin de la boucle, sinon vous aurez une boucle infinie.</li></ol>",
          "boilerplate"   : "var etape = 0;\n\nwhile(etape < 3)\n{\n  robot.forward();\n  etape = etape + 1;\n}\n\nrobot.right();\n\netape = 0;\n\n?",
          "solution"      : "var etape = 0;\n\nwhile(etape < 3)\n{\n  robot.forward();\n  etape = etape + 1;\n}\n\nrobot.right();\n\netape = 0;\n\nwhile(etape < 4)\n{\n  robot.forward();\n  etape = etape + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"robot.forward()\">Instruction robot.forward()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> robot.forward() est utilisée pour faire avancer le robot d'une case. Comme toutes les autres instructions de <concept ref=\"programming languages\">JavaScript</concept>, robot.forward() est <concept ref=\"case sensitive\">sensible à la casse</concept> et nous devons <concept ref=\"forgetting parentheses\">l'écrire exactement</concept> comme indiqué ci-dessous.</div>\n<div class=\"code-sample-title\">Exemple de robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-191",
          "name"          : "Un petit tour",
          "normalizedName": "un petit tour",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-191_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-191_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=step>etape</var> est plus petite que 4.</li><li class=code-item>Remplacer le deuxième point d'interrogation par l'instruction <concept ref=robot-forward>robot.forward(3)</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par l'instruction <concept ref=robot-right>robot.right()</concept>.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une instruction qui donne à <var id=step>etape</var> le résultat de <var id=step>etape</var> plus 1.</li><li class=code-item>Le robot ne doit pas quitter le chemin. Pour cet exercice, vous ne pouvez pas utiliser plus d'une instruction <concept ref=robot-forward>robot.forward(3)</concept> et plus d'une instruction <concept ref=robot-right>robot.right()</concept>.</li></ol>",
          "boilerplate"   : "var etape = 0;\n\nwhile(?)\n{\n  ?\n  ?\n  ?\n}",
          "solution"      : "var etape = 0;\n\nwhile(etape < 4)\n{\n  robot.forward(3);\n  robot.right();\n  etape = etape + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-192",
          "name"          : "Un raccourci",
          "normalizedName": "un raccourci",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser une boucle while pour amener le robot au but. Votre code peut contenir <strong>1</strong> instruction \n    <concept ref=robot-forward>robot.forward(4)</concept>, <strong>1</strong> instruction \n    <concept ref=robot-right>robot.right()</concept>, <strong>1</strong> instruction \n    <concept ref=robot-forward>robot.forward()</concept>, et <strong>1</strong> instruction \n    <concept ref=robot-left>robot.left()</concept>.</li><li class=code-item>Le robot ne doit pas quitter le chemin. N'oubliez pas d'augmenter la valeur de <var id=step>etape</var> à la fin de la boucle, sinon vous aurez une boucle infinie.</li></ol>",
          "boilerplate"   : "var etape = 0;\n\nwhile(etape < 3)\n{\n  ?\n  \n  etape = etape + 1;\n}",
          "solution"      : "var etape = 0;\n\nwhile(etape < 3)\n{\n  robot.forward(4);\n  robot.right();\n  robot.forward();\n  robot.left();\n\n  etape = etape + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Instruction robot.left()</h3>\n<div class=\"text\">L'instruction robot.left() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens anti-horaire (le sens contraire des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.left().</div>\n<div class=\"code-sample-title\">Exemple de robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-193",
          "name"          : "Suivre les étapes",
          "normalizedName": "suivre les etapes",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-193_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-193_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=step>etape</var> est <strong>plus petite ou égale à</strong> 5.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=step>etape</var> est égale à 1 <strong>ou</strong> à 3 <strong>ou</strong> à 5.</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=step>etape</var> est égale à 2.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une condition qui vérifie si la valeur de <var id=step>etape</var> est égale à 4.</li><li class=code-item>Le robot ne doit pas quitter le chemin. Pour cet exercice, vous devez utiliser une seule instruction <concept ref=robot-forward>robot.forward()</concept>, une seule instruction <concept ref=robot-right>robot.right()</concept> et une seule instruction <concept ref=robot-left>robot.left()</concept>.</li></ol>",
          "boilerplate"   : "var etape = 1;\n\nwhile(?)\n{\n  if(?)\n  {\n    robot.forward();\n  }\n  else if(?)\n  {\n    robot.right();\n  }\n  else if(?)\n  {\n    robot.left();\n  }\n\n  etape = etape + 1;\n}",
          "solution"      : "var etape = 1;\n\nwhile(etape <= 5)\n{\n  if(etape == 1 || etape == 3 || etape == 5)\n  {\n    robot.forward();\n  }\n  else if(etape == 2)\n  {\n    robot.right();\n  }\n  else if(etape == 4)\n  {\n    robot.left();\n  }\n\n  etape = etape + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"or operator\">Opérateur OU (||)</h3>\n<div class=\"text\">L'opérateur OU est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si au moins une <concept ref=\"boolean\">valeur booléenne</concept> est vraie.</div><div class=\"text\">Une expression qui utilise l'opérateur OU est vraie si au moins une des conditions qui forment l'expression est vraie.</div><div class=\"text\">L'opérateur s'écrit avec deux barres verticales (||).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">var resultat = true || true; // resultat est true (vrai)\nresultat = false || true; // resultat est true (vrai)\nresultat = true || false; // resultat est true (vrai)\nresultat = false || false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-194",
          "name"          : "La puissance des boucles",
          "normalizedName": "la puissance des boucles",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Mettez vos connaissances des boucles while à l'épreuve en amenant le robot au but.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter le programme pour amener le robot au but. Votre code ne doit pas contenir plus de <strong>3</strong> instructions \n    <concept ref=robot-forward>robot.forward()</concept>. Pour cet exercice, vous ne pouvez <strong>pas</strong> utiliser l'instruction <concept ref=robot-forward>robot.forward()</concept> avec un nombre (ex: <concept ref=robot-forward>robot.forward(6)</concept>).</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "var etape = 0;\n\nwhile(etape < 3)\n{\n  robot.forward();\n  ?\n}\n\netape = 0;\nrobot.right();\n\nwhile(?)\n{\n  robot.forward();\n  ?\n}\n\netape = 0;\nrobot.left();\n\nwhile(?)\n{\n  robot.forward();\n  etape = etape + 1;\n}",
          "solution"      : "var etape = 0;\n\nwhile(etape < 3)\n{\n  robot.forward();\n  etape = etape + 1;\n}\n\netape = 0;\nrobot.right();\n\nwhile(etape < 3)\n{\n  robot.forward();\n  etape = etape + 1;\n}\n\netape = 0;\nrobot.left();\n\nwhile(etape < 4)\n{\n  robot.forward();\n  etape = etape + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-195",
          "name"          : "Un motif qui se répète",
          "normalizedName": "un motif qui se repete",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Mettez vos connaissances des boucles while à l'épreuve en amenant le robot au but.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter le programme pour amener le robot au but. Votre code ne doit pas contenir plus de <strong>2</strong> instructions \n    <concept ref=robot-forward>robot.forward()</concept>, <strong>1</strong> instruction \n    <concept ref=robot-right>robot.right()</concept>, et <strong>1</strong> instruction \n    <concept ref=robot-left>robot.left()</concept>.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "var etape = ?;\n\nwhile(?)\n{\n  ?\n  \n  etape = etape + 1;\n}",
          "solution"      : "var etape = 0;\n\nwhile(etape < 4)\n{\n  robot.left();\n  robot.forward();\n  robot.right();\n  robot.forward();\n\n  etape = etape + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Instruction robot.left()</h3>\n<div class=\"text\">L'instruction robot.left() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens anti-horaire (le sens contraire des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.left().</div>\n<div class=\"code-sample-title\">Exemple de robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-196",
          "name"          : "Déjà vu?",
          "normalizedName": "deja vu",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Mettez vos connaissances des boucles while à l'épreuve en amenant le robot au but.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter le programme pour amener le robot au but. Votre code ne doit pas contenir plus de <strong>5</strong> instructions \n    <concept ref=robot-forward>robot.forward()</concept>, <strong>2</strong> instructions \n    <concept ref=robot-right>robot.right()</concept>, et <strong>2</strong> instructions \n    <concept ref=robot-left>robot.left()</concept>. Pour cet exercice, vous <strong>pouvez</strong> utiliser l'instruction \n    <concept ref=robot-forward>robot.forward()</concept> avec un nombre (ex:\n    <concept ref=robot-forward>robot.forward(6)</concept>).</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "var etape = 0;\n\nwhile(?)\n{\n  ?\n  \n}",
          "solution"      : "var etape = 0;\n\nwhile(etape < 2)\n{\n  robot.forward();\n  robot.left();\n  robot.forward();\n  robot.right();\n  robot.forward(2);\n  robot.right();\n  robot.forward();\n  robot.left();\n  robot.forward();\n\n  etape = etape + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Instruction robot.left()</h3>\n<div class=\"text\">L'instruction robot.left() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens anti-horaire (le sens contraire des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.left().</div>\n<div class=\"code-sample-title\">Exemple de robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-197",
          "name"          : "Une étape à la fois",
          "normalizedName": "une etape a la fois",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Mettez vos connaissances des boucles while à l'épreuve en amenant le robot au but.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter le programme pour amener le robot au but. Votre code ne doit pas contenir plus de <strong>1</strong> instruction \n    <concept ref=robot-forward>robot.forward()</concept> , <strong>1</strong> instruction \n    <concept ref=robot-right>robot.right()</concept>, et <strong>1</strong> instruction \n    <concept ref=robot-left>robot.left()</concept>. Vous devrez décomposer le programme en étapes et utiliser la variable <var id=step>etape</var> pour déterminer l'instruction qui doit être exécutée.</li></ol>",
          "boilerplate"   : "var etape = ?;\n\nwhile(?)\n{\n  if(?)\n  {\n    ?\n  }\n\n  if(?)\n  {\n    ?\n  }\n\n  if(?)\n  {\n    ?\n  }\n\n  etape = etape + 1;\n}",
          "solution"      : "var etape = 1;\n\nwhile(etape <= 7)\n{\n  if(etape == 1 || etape == 3 || etape == 5 || etape == 7)\n  {\n    robot.forward();\n  }\n\n  if(etape == 2 || etape == 6)\n  {\n    robot.right();\n  }\n\n  if(etape == 4)\n  {\n    robot.left();\n  }\n\n  etape = etape + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"or operator\">Opérateur OU (||)</h3>\n<div class=\"text\">L'opérateur OU est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si au moins une <concept ref=\"boolean\">valeur booléenne</concept> est vraie.</div><div class=\"text\">Une expression qui utilise l'opérateur OU est vraie si au moins une des conditions qui forment l'expression est vraie.</div><div class=\"text\">L'opérateur s'écrit avec deux barres verticales (||).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur OU</div><pre class=\"codeBlock\">var resultat = true || true; // resultat est true (vrai)\nresultat = false || true; // resultat est true (vrai)\nresultat = true || false; // resultat est true (vrai)\nresultat = false || false; // resultat est false (faux)</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<h3 class=\"title\" ref=\"robot.left()\">Instruction robot.left()</h3>\n<div class=\"text\">L'instruction robot.left() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens anti-horaire (le sens contraire des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.left().</div>\n<div class=\"code-sample-title\">Exemple de robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-010",
          "name"          : "Quiz 10",
          "description"   : "Les boucles while",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-010_q-01",
              "question": "<div>Vrai ou faux. Une boucle <code>while</code> doit être contrôlée par une condition booléenne.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-010_q-01_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "Une boucle <code>while</code> peut faire seulement deux choses: continuer de boucler ou arrêter de boucler. Pour la contrôler, nous utilisons <code>true</code> (vrai) pour continuer et <code>false</code> (faux) pour arrêter. Donc, toutes les boucles sont contrôlées par une condition booléenne."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-010_q-02",
              "question": "<div>Que représente une <em>itération</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>La condition qui contrôle la boucle</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-02_a-02",
                  "value" : 0,
                  "answer": "<div>L'instruction qui augmente la valeur de la variable de contrôle d'une boucle (ex: <code>x = x + 1;</code>)</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-010_q-02_a-03",
                  "value"      : 2,
                  "answer"     : "<div>Chacune des exécutions des instructions du bloc de code d'une boucle</div>",
                  "explanation": "Une <em>itération</em> est complétée chaque fois que le bloc de code de la boucle est pleinement exécuté."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-02_a-04",
                  "value" : 0,
                  "answer": "<div>Aucune de ces réponses</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-010_q-03",
              "question": "<div>Lequel des énoncés suivants est vrai?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-03_a-01",
                  "value" : 0,
                  "answer": "<div>Les boucles <code>while</code> calculent combien de fois elles doivent exécuter les instructions de leur bloc de code. Les boucles savent d'avance combien de fois elles doivent itérer.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-010_q-03_a-02",
                  "value"      : 2,
                  "answer"     : "<div>Les boucles <code>while</code> vérifient leur condition à chaque itération. Les boucles ne savent pas d'avance combien d'itérations elles doivent faire et s'arrêtent seulement quand la condition est fausse.</div>",
                  "explanation": "Tant que la condition est vraie, la boucle continue d'itérer. Les boucles <code>while</code> ne savent pas d'avance combien de fois elles doivent itérer."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-03_a-03",
                  "value" : 0,
                  "answer": "<div>Nous devons donner un nombre aux boucles <code>while</code> pour leur indiquer combien de fois elles doivent itérer (ex: <code>while(10)</code>)</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-010_q-04",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var decompte = 3;\n\nwhile(decompte &gt;= 0)\n{\n  console.log(decompte);\n  decompte = decompte - 1;\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-04_a-01",
                  "value" : 0,
                  "answer": "<div><samp>0 1 2 3</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-04_a-02",
                  "value" : 0,
                  "answer": "<div><samp>3 2 1</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-04_a-03",
                  "value" : 0,
                  "answer": "<div><samp>1 2 3</samp></div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-010_q-04_a-04",
                  "value"      : 2,
                  "answer"     : "<div><samp>3 2 1 0</samp></div>",
                  "explanation": "La variable <var>decompte</var> commence à 3, donc la première sortie est 3. Elle diminue ensuite de un jusqu'à ce qu'elle atteigne zéro. Puisque la condition vérifie si la variabel <var>decompte</var> est aussi égale à zéro, la boucle fait une dernière itération."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-010_q-05",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>var argent = 10;\nvar annee = 0;\n\nwhile(annee &lt; 3)\n{\n  console.log(argent);\n  argent = argent + 10;\n  annee = annee + 1;\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-05_a-01",
                  "value" : 0,
                  "answer": "<div><samp>20 30 40</samp></div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-010_q-05_a-02",
                  "value"      : 2,
                  "answer"     : "<div><samp>10 20 30</samp></div>",
                  "explanation": "L'ordre des instructions est important ici: le <code>console.log()</code> est exécuté avant que la valeur de <var>argent</var> soit augmentée, donc la sortie est: <samp>10, 20, 30</samp>. Lorsque la variable var>argent</var> est mise à 30, la variable <var>annee</var> est augmentée à 3, ce qui arrête la boucle."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-05_a-03",
                  "value" : 0,
                  "answer": "<div><samp>0 1 2</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-05_a-04",
                  "value" : 0,
                  "answer": "<div><samp>10 20 30 40</samp></div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-010_q-06",
              "question": "<div>Le programme suivant entre-t-il dans une boucle infinie?</div>\n<pre class=\"language-javascript\"><code>var decompte = 3;\n\nwhile(decompte &gt;= 0)\n{\n  console.log(decompte);\n  decompte = decompte + 1;\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-010_q-06_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Oui, la boucle <code>while</code> ne se termine jamais.</div>",
                  "explanation": "La variable <var>decompte</var> commence à 3 et augmente à chaque itération de la boucle. La boucle arrête lorsque la variable <var>decompte</var> est plus petite que zéro, ce qui ne peut jamais arriver."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>Non, la boucle <code>while</code> se termine après quelques itérations.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-010_q-07",
              "question": "<div>Pourquoi le programme suivant entre-t-il dans une boucle infinie?</div>\n<pre class=\"language-javascript\"><code>var decompte = 10;\n\nwhile(decompte &gt; 0)\n{\n  console.log(decompte);\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-07_a-01",
                  "value" : 0,
                  "answer": "<div>La condition de la boucle n'est pas une condition booléenne.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-010_q-07_a-02",
                  "value"      : 2,
                  "answer"     : "<div>La valeur de la variable de contrôle ne change jamais.</div>",
                  "explanation": "La valeur de la variable <var>decompte</var> commence à 10 et ne change jamais. La condition <code>decompte &gt; 0</code> ne devient donc jamais fausse."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-07_a-03",
                  "value" : 0,
                  "answer": "<div>Le nom de la variable cause une boucle infinie.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-010_q-07_a-04",
                  "value" : 0,
                  "answer": "<div>Il manque un point-virgule après l'instruction while: <code>while(decompte &gt; 0);</code></div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 10",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-268",
          "name"          : "Les valeurs sentinelles",
          "normalizedName": "les valeurs sentinelles",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-268_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-268_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-21",
          "name"          : "Projet 21 - Un drôle de mélange",
          "normalizedName": "projet 21 - un drole de melange",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-198",
          "name"          : "Élémentaire",
          "normalizedName": "elementaire",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-198_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-198_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une condition qui vérifie si la valeur de <var id=userChoice>choix</var> n'est pas égale à <string>\"Q\"</string>.</li></ol>",
          "boilerplate"   : "var choix = \"\";\n\nwhile(?)\n{\n  choix = prompt(\"Entrez un élément, ou Q pour quitter. C:carbone\");\n\n  choix = choix.toUpperCase();\n\n  if(choix == \"C\")\n  {\n    ajouterElement(\"carbone\");\n  }\n}\n\nmelangerElements();",
          "solution"      : "var choix = \"\";\n\nwhile(choix != \"Q\")\n{\n  choix = prompt(\"Entrez un élément, ou Q pour quitter. C:carbone\");\n\n  choix = choix.toUpperCase();\n\n  if(choix == \"C\")\n  {\n    ajouterElement(\"carbone\");\n  }\n}\n\nmelangerElements();",
          "tips"          : "<h3 class=\"title\" ref=\"sentinel value\">Valeurs sentinelles</h3>\n<div class=\"text\">Les valeurs sentinelles sont des valeurs spéciales qui sont utilisées pour arrêter une <concept ref=\"loops\">boucle</concept>. Généralement, la boucle ne s'arrête pas tant que la valeur sentinelle n'a pas été entrée. Les programmes qui affichent un menu utilisent normalement des valeurs sentinelles.</div>\n<div class=\"code-sample-title\">Exemple de valeur sentinelle</div><pre class=\"codeBlock\">var choix = \"\";\nwhile(choix != \"Q\")\n{\n  choix = prompt(\"Veuillez choisir une option (ou Q pour quitter)\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, la boucle demande aux utilisateurs de choisir une option dans le menu, tant qu'ils n'entrent pas la lettre &quot;Q&quot;.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-200",
          "name"          : "Un éventail de choix",
          "normalizedName": "un eventail de choix",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ajoutons encore deux éléments à notre machine. Nous allons ajouter une option pour l'oxygène (O) et l'azote (N). Lorsque vous avez terminé votre programme, essayer de faire un nouveau mélange!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=userChoice>choix</var> est égale à \n    <string>\"O\"</string>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=addElement>ajouterElement(<string>\"oxygène\"</string>)</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=userChoice>choix</var> est égale à \n    <string>\"N\"</string> (le symbole utilisé en chimie pour l'azote). À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction \n    <concept ref=addElement>ajouterElement(<string>\"azote\"</string>)</concept>.</li></ol>",
          "boilerplate"   : "var choix = \"\";\n\nwhile(choix != \"Q\")\n{\n  choix = prompt(\"Entrez un élément, ou Q pour quitter. C:carbone, O:oxygène, N:azote\");\n\n  choix = choix.toUpperCase();\n\n  if(choix == \"C\")\n  {\n    ajouterElement(\"carbone\");\n  }\n  // Ajoutez une instruction else if pour l'oxygène (O)\n  ?\n  \n  // Ajoutez une instruction else if pour l'azote (N)\n  ?\n  \n}\n\nmelangerElements();",
          "solution"      : "var choix = \"\";\n\nwhile(choix != \"Q\")\n{\n  choix = prompt(\"Entrez un élément, ou Q pour quitter. C:carbone, O:oxygène, N:azote\");\n\n  choix = choix.toUpperCase();\n\n  if(choix == \"C\")\n  {\n    ajouterElement(\"carbone\");\n  }\n  // Ajoutez une instruction else if pour l'oxygène (O)\n  else if(choix == \"O\")\n  {\n    ajouterElement(\"oxygène\");\n  }\n  // Ajoutez une instruction else if pour l'azote (N)\n  else if(choix == \"N\")\n  {\n    ajouterElement(\"azote\");\n  }\n}\n\nmelangerElements();",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-201",
          "name"          : "Mélanger un bogue",
          "normalizedName": "melanger un bogue",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-201_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-201_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer l'instruction qui donne à la variable <var id=userChoice>choix</var> la valeur <string>\"Q\"</string> par une instruction qui donne à la variable <var id=userChoice>choix</var> la valeur <string>\"\"</string> (chaîne vide).</li><li class=code-item>Remplacer le point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=userChoice>choix</var> est égale à <string>\"H\"</string>. À l'intérieur du bloc de code de cette instruction else if, utilisez l'instruction <concept ref=addElement>ajouterElement(<string>\"hydrogène\"</string>)</concept>.</li></ol>",
          "boilerplate"   : "var choix = \"Q\";\n\nwhile(choix != \"Q\")\n{\n  choix = prompt(\"Entrez un élément, ou Q pour quitter. C:carbone, O:oxygène, N:azote, H:hydrogène\");\n\n  choix = choix.toUpperCase();\n\n  if(choix == \"C\")\n  {\n    ajouterElement(\"carbone\");\n  }\n  else if(choix == \"O\")\n  {\n    ajouterElement(\"oxygène\");\n  }\n  else if(choix == \"N\")\n  {\n    ajouterElement(\"azote\");\n  }\n  // Ajoutez une instruction else if pour l'hydrogène (H)\n  ?\n  \n}\n\nmelangerElements();",
          "solution"      : "var choix = \"\";\n\nwhile(choix != \"Q\")\n{\n  choix = prompt(\"Entrez un élément, ou Q pour quitter. C:carbone, O:oxygène, N:azote, H:hydrogène\");\n\n  choix = choix.toUpperCase();\n\n  if(choix == \"C\")\n  {\n    ajouterElement(\"carbone\");\n  }\n  else if(choix == \"O\")\n  {\n    ajouterElement(\"oxygène\");\n  }\n  else if(choix == \"N\")\n  {\n    ajouterElement(\"azote\");\n  }\n  // Ajoutez une instruction else if pour l'hydrogène (H)\n  else if(choix == \"H\")\n  {\n    ajouterElement(\"hydrogène\");\n  }\n}\n\nmelangerElements();",
          "tips"          : "<h3 class=\"title\" ref=\"sentinel initial\">Valeurs sentinelles et valeur initiale de la variable de contrôle</h3>\n<div class=\"text\">Lorsque nous utilisons une <concept ref=\"sentinel value\">valeur sentinelle</concept>, il est important de choisir soigneusement la valeur initiale de la <concept ref=\"control variable\">variable de contrôle</concept>.</div><div class=\"text\">Par exemple, si nous choisissons la lettre &quot;Q&quot; comme valeur sentinelle, il est important de ne pas donner la lettre &quot;Q&quot; comme valeur initiale de la variable de contrôle, sinon la boucle ne fera aucune <concept ref=\"iteration\">itération</concept>.</div>\n<div class=\"code-sample-title\">Exemple de valeur initiale incorrecte pour la variable de contrôle</div><pre class=\"codeBlock\">var choix = \"Q\"; // remarquez que la valeur initiale est aussi la valeur sentinelle!\nwhile(choix != \"Q\") // la condition est déjà fausse\n{\n  choix = prompt(\"Veuillez choisir une option (ou Q pour quitter)\");\n}</pre>\n<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-202",
          "name"          : "Un mélange plus précis",
          "normalizedName": "un melange plus precis",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-202_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-202_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=numberOfElements>nombreElements</var> et lui donner la valeur de 0.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=numberOfElements>nombreElements</var> est plus petite que 5. N'oubliez pas d'utiliser l'opérateur ET (&amp;&amp;) pour combiner les deux conditions!</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui donne à <var id=numberOfElements>nombreElements</var> la valeur de <var id=numberOfElements>nombreElements</var> plus 1.</li></ol>",
          "boilerplate"   : "var choix = \"\";\n?\n\nwhile(choix != \"Q\" ?)\n{\n  choix = prompt(\"Entrez un élément, ou Q pour quitter. C:carbone, O:oxygène, N:azote, H:hydrogène\");\n\n  choix = choix.toUpperCase();\n\n  if(choix == \"C\")\n  {\n    ajouterElement(\"carbone\");\n  }\n  else if(choix == \"O\")\n  {\n    ajouterElement(\"oxygène\");\n  }\n  else if(choix == \"N\")\n  {\n    ajouterElement(\"azote\");\n  }\n  else if(choix == \"H\")\n  {\n    ajouterElement(\"hydrogène\");\n  }\n\n  ?\n}\n\nmelangerElements();",
          "solution"      : "var choix = \"\";\nvar nombreElements = 0;\n\nwhile(choix != \"Q\" && nombreElements < 5)\n{\n  choix = prompt(\"Entrez un élément, ou Q pour quitter. C:carbone, O:oxygène, N:azote, H:hydrogène\");\n\n  choix = choix.toUpperCase();\n\n  if(choix == \"C\")\n  {\n    ajouterElement(\"carbone\");\n  }\n  else if(choix == \"O\")\n  {\n    ajouterElement(\"oxygène\");\n  }\n  else if(choix == \"N\")\n  {\n    ajouterElement(\"azote\");\n  }\n  else if(choix == \"H\")\n  {\n    ajouterElement(\"hydrogène\");\n  }\n\n  nombreElements = nombreElements + 1;\n}\n\nmelangerElements();",
          "tips"          : "<h3 class=\"title\" ref=\"multi condition while loop\">Boucles avec plus d'une condition</h3>\n<div class=\"text\">Une <concept ref=\"loops\">boucle</concept> peut être controlée par plusieurs <concept ref=\"condition\">conditions</concept>, même si la boucle est contrôlée par <concept ref=\"sentinel value\">valeur sentinelle</concept>.</div><div class=\"text\">Pour ce faire, nous pouvons utiliser un <concept ref=\"logical operators\">opérateur logique</concept> pour combiner plusieurs conditions en une seule expression.</div>\n<div class=\"code-sample-title\">Exemple de conditions multiples dans une boucle</div><pre class=\"codeBlock\">var choix = \"\";\nvar essais = 0;\nwhile(choix != \"Q\" && essais < 3)\n{\n  choix = prompt(\"Veuillez choisir une option (ou Q pour quitter)\");\n  essais = essais + 1;\n}</pre>\n<div class=\"text\">La boucle ci-dessus continue d'exécuter tant que le choix de l'utilisateur est différent de &quot;Q&quot; et que moins de 3 essais ont été effectués. Autrement dit, si l'utilisateur entre la lettre &quot;Q&quot; ou fait plus de trois essais, la boucle se termine.</div><div class=\"text\">Remarquez qu'il suffit que l'une des deux conditions soit fausse pour arrêter la boucle, puisque l'expression entière sera alors fausse.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-230",
          "name"          : "Une histoire à trous",
          "normalizedName": "une histoire a trous",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui crée une histoire à trous (aussi connues sous le nom de Mad Libs™). L'utilisateur doit entrer des noms communs pour compléter la phrase. Lorsqu'il ne reste plus de trous dans l'histoire, le programme se termine et affiche l'histoire entière à l'utilisateur.</div><div class=text>Le programme utilise la ligne de code suivante pour trouver les trous dans l'histoire:</div><div class=text>var position = phrase.indexOf(\"_\");</div><div class=text>Cette instruction indique à l'ordinateur de chercher la première occurrence de <string>\"_\"</string> dans le texte qui se trouve dans la variable <var id=sentence>phrase</var>. Lorsque le texte ne contient plus <string>\"_\"</string>, l'instruction retourne -1. Complétez le programme en utilisant la variable <var id=position>position</var> comme une valeur sentinelle.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une condition qui vérifie si <var id=position>position</var> n'est <strong>pas</strong> égale à -1. Vous devrez utiliser l'opérateur d'inégalité (!=).</li></ol>",
          "boilerplate"   : "var phrase = \"Pendant que je nettoyais ma _, j’ai trouvé un _. Je vais pouvoir l'ajouter à ma collection de _. Un jour, j'aimerais trouver une _ afin de l'ajouter à ma collection.\";\n\nvar position = phrase.indexOf(\"_\");\nvar mot;\n\nwhile(?)\n{\n  mot = prompt(phrase + \"\\n\\n\" + \"Entrez un nom commun:\");\n  phrase = phrase.replace(\"_\", mot);\n  position = phrase.indexOf(\"_\");\n}\n\nconsole.log(phrase);",
          "solution"      : "var phrase = \"Pendant que je nettoyais ma _, j’ai trouvé un _. Je vais pouvoir l'ajouter à ma collection de _. Un jour, j'aimerais trouver une _ afin de l'ajouter à ma collection.\";\n\nvar position = phrase.indexOf(\"_\");\nvar mot;\n\nwhile(position != -1)\n{\n  mot = prompt(phrase + \"\\n\\n\" + \"Entrez un nom commun:\");\n  phrase = phrase.replace(\"_\", mot);\n  position = phrase.indexOf(\"_\");\n}\n\nconsole.log(phrase);",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-231",
          "name"          : "Devinez le nombre!",
          "normalizedName": "devinez le nombre!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Modifions le programme que nous avons créé plus tôt qui nous demandait de deviner un nombre. Cette fois-ci, le programme va continuer de nous demander de deviner le nombre tant que nous ne l'aurons pas trouvé. Dans ce programme, le nombre secret que nous devons deviner agit comme une valeur sentinelle.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=myGuess>monEssai</var> n'est <strong>pas</strong> égale à la valeur de <var id=answer>reponse</var>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=myGuess>monEssai</var> est égale à la valeur de <var id=answer>reponse</var>. <strong>Note:</strong> vous n'avez pas besoin d'ajouter un bloc de code, puisqu'il y en a déjà un.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction else if. La condition de cette instruction else if doit vérifier si la valeur de <var id=myGuess>monEssai</var> est plus grande que la valeur de <var id=answer>reponse</var>. <strong>Note:</strong> vous n'avez pas besoin d'ajouter un bloc de code, puisqu'il y en a déjà un.</li></ol>",
          "boilerplate"   : "var monEssai = -1;\nvar reponse = obtenirNombreSecret();\nvar totalEssais = 0;\n\nwhile(?)\n{\n  monEssai = prompt(\"Essayez de deviner le nombre (0 à 100)\");\n\n  monEssai = Number(monEssai);\n\n  ?\n  {\n    console.log(\"Vous avez deviné le nombre! Félicitations!\");\n  }\n  ?\n  {\n    console.log(\"Essayez un nombre plus petit!\");\n  }\n  else\n  {\n    console.log(\"Essayez un nombre plus grand!\");\n  }\n\n  totalEssais = totalEssais + 1;\n}\n\nconsole.log(\"Il vous a fallu \" + totalEssais + \" essais pour deviner le nombre.\");",
          "solution"      : "var monEssai = -1;\nvar reponse = obtenirNombreSecret();\nvar totalEssais = 0;\n\nwhile(monEssai != reponse)\n{\n  monEssai = prompt(\"Essayez de deviner le nombre (0 à 100)\");\n\n  monEssai = Number(monEssai);\n\n  if(monEssai == reponse)\n  {\n    console.log(\"Vous avez deviné le nombre! Félicitations!\");\n  }\n  else if(monEssai > reponse)\n  {\n    console.log(\"Essayez un nombre plus petit!\");\n  }\n  else\n  {\n    console.log(\"Essayez un nombre plus grand!\");\n  }\n\n  totalEssais = totalEssais + 1;\n}\n\nconsole.log(\"Il vous a fallu \" + totalEssais + \" essais pour deviner le nombre.\");",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-232",
          "name"          : "RSVP",
          "normalizedName": "rsvp",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui gère la liste d'invités à une soirée. Le programme continue de demander à l'utilisateur d'entrer le nom d'une invitée ou d'un invité tant que l'utilisateur n'entre pas la lettre \"Q\" pour quitter le programme.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition. Cette condition doit vérifier si la valeur de <var id=guest>invite</var> n'est <strong>pas</strong> égale à \n    <string>\"Q\"</string>. <strong>Indice:</strong> vous devrez utiliser l'opérateur d'inégalité (!=).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=guest>invite</var> n'est <strong>pas</strong> égale à \n    <string>\"Q\"</string> et qu'elle n'est <strong>pas</strong> égale à \n    <string>\"\"</string> (chaîne vide). <strong>Note:</strong> vous n'avez pas besoin d'ajouter un bloc de code, puisqu'il y en a déjà un.</li></ol>",
          "boilerplate"   : "var invite = \"\";\n\nwhile(?)\n{\n  invite = prompt(\"Entrez le nom d'une invitée ou d'un invité, ou Q pour quitter\");\n\n  ?\n  {\n    ajouterAListeInvites(invite);\n  }\n}\n\nafficherListeInvites();",
          "solution"      : "var invite = \"\";\n\nwhile(invite != \"Q\")\n{\n  invite = prompt(\"Entrez le nom d'une invitée ou d'un invité, ou Q pour quitter\");\n\n  if(invite != \"Q\" && invite != \"\")\n  {\n    ajouterAListeInvites(invite);\n  }\n}\n\nafficherListeInvites();",
          "tips"          : "<h3 class=\"title\" ref=\"else if statement\">Instruction else if</h3>\n<div class=\"text\">L'instruction else if est une autre instruction conditionnelle que nous pouvons ajouter à une <concept ref=\"if statement\">instruction if</concept> existante pour ajouter un ou plusieurs <concept ref=\"code block\">blocs de code</concept> contrôlés par des <concept ref=\"condition\">conditions</concept>.</div><div class=\"text\">Remarquez que même si vous ajoutez plusieurs instructions else if à une instruction if, un seul bloc de code sera exécuté. Les conditions sont vérifiées en ordre, de haut en bas, et dès qu'une condition est vraie, le bloc de code correspondant est exécuté et les autres conditions sont ignorées.</div>\n<div class=\"code-sample-title\">Exemple d'instructions else if multiples</div><pre class=\"codeBlock\">var maVariable = 11;\n\nif(maVariable > 15)\n{\n  // pas exécuté: la condition est fausse\n  console.log(\"maVariable est plus grande que 15!\");\n}\nelse if(maVariable > 10)\n{\n  // exécuté: la condition est vraie\n  console.log(\"maVariable est plus grande que 10!\");\n}\nelse if(maVariable > 5)\n{\n  // pas exécuté: la condition est vraie, mais un autre bloc de code a déjà été exécuté\n  console.log(\"maVariable est plus grande que 5!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, puisque la <concept ref=\"variable\">variable</concept> maVariable a la valeur 11, le message &quot;maVariable est plus grande que 10!&quot; est affiché. Le premier bloc de code est ignoré car maVariable n'est pas plus grande que 15 et le dernier bloc de code est aussi ignoré car le deuxième bloc de code a déjà été exécuté.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"and operator\">Opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">L'opérateur ET est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si deux ou plusieurs <concept ref=\"boolean\">valeurs booléennes</concept> sont vraies.</div><div class=\"text\">Une expression qui utilise l'opérateur ET est seulement vraie si toutes les conditions qui forment l'expression sont vraies.</div><div class=\"text\">L'opérateur s'écrit avec deux perluètes (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur AND</div><pre class=\"codeBlock\">var resultat = true && true; // resultat est true (vrai)\nresultat = false && true; // resultat est false (faux)\nresultat = true && false; // resultat est false (faux)\nresultat = false && false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-233",
          "name"          : "Sésame, ouvre-toi!",
          "normalizedName": "sesame ouvre-toi!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Modifions un système de connexion par mot de passe. Présentement, le système continue de demander aux utilisateurs d'entrer leur nom d'utilisateur et mot de passe tant que l'un ou l'autre est incorrect. Ajoutons un compteur pour que le système bloque les utilisateurs qui entrent le mauvais nom d'utilisateur ou mot de passe trois fois de suite.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=attempts>essais</var> et lui donner une valeur initiale de 0.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition. Cette condition doit vérifier si la valeur de <var id=attempts>essais</var> est plus petite que 3. N'enlevez pas les parenthèses qui entourent les deux premières conditions.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui donne à la variable <var id=attempts>essais</var> la valeur de <var id=attempts>essais</var> plus 1.</li></ol>",
          "boilerplate"   : "var nomUtilisateurEntre = \"\";\nvar motDePasseEntre = \"\";\n\nvar nomUtilisateur = \"admin\";\nvar motDePasse = \"12345\";\n?\n\nwhile((motDePasseEntre != motDePasse || nomUtilisateurEntre != nomUtilisateur) && ?)\n{\n  nomUtilisateurEntre = prompt(\"Entrez votre nom d'utilisateur\");\n  motDePasseEntre = prompt(\"Entrez votre mot de passe\");\n\n  if(motDePasseEntre != motDePasse || nomUtilisateurEntre != nomUtilisateur)\n  {\n    console.log(\"Le nom d'utilisateur ou le mot de passe est incorrect! Veuillez réessayer!\");\n    ?\n  }\n  else\n  {\n    console.log(\"Bonjour, \" + nomUtilisateur + \"!\");\n  }\n}",
          "solution"      : "var nomUtilisateurEntre = \"\";\nvar motDePasseEntre = \"\";\n\nvar nomUtilisateur = \"admin\";\nvar motDePasse = \"12345\";\nvar essais = 0;\n\nwhile((motDePasseEntre != motDePasse || nomUtilisateurEntre != nomUtilisateur) && essais < 3)\n{\n  nomUtilisateurEntre = prompt(\"Entrez votre nom d'utilisateur\");\n  motDePasseEntre = prompt(\"Entrez votre mot de passe\");\n\n  if(motDePasseEntre != motDePasse || nomUtilisateurEntre != nomUtilisateur)\n  {\n    console.log(\"Le nom d'utilisateur ou le mot de passe est incorrect! Veuillez réessayer!\");\n    essais = essais + 1;\n  }\n  else\n  {\n    console.log(\"Bonjour, \" + nomUtilisateur + \"!\");\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-234",
          "name"          : "Une affaire en or",
          "normalizedName": "une affaire en or",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui gère les interactions entre un joueur et le propriétaire d'un magasin dans un jeu d'aventure. Le joueur peut vendre divers items au propriétaire du magasin. Lorsque les joueurs souhaitent quitter le magasin, ils entrent le mot \"quitter\".</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter la boucle while. Elle doit continuer de boucler tant que l'utilisateur n'entre pas la valeur \n    <string>\"quitter\"</string> pour la variable <var id=itemName>nomItem</var>.</li><li class=code-item>Compléter l'instruction if. La condition de cette instruction if doit s'assurer que la valeur de <var id=itemName>nomItem</var> n'est pas la valeur sentinelle.</li></ol>",
          "boilerplate"   : "var nomItem = \"\";\nvar totalPiecesOr = 0;\nvar valeurItem = 0;\n\nouvrirMagasin();\n\n?\n{\n  nomItem = prompt(\"Entrez le nom de l'item à vendre (épée, armure, poterie). Pour quitter, entrez le mot 'quitter'.\");\n\n  nomItem = nomItem.toLowerCase();\n\n  ?\n  {\n    valeurItem = vendreItem(nomItem);\n    totalPiecesOr = totalPiecesOr + valeurItem;\n  }\n}\n\nfermerMagasin(totalPiecesOr);",
          "solution"      : "var nomItem = \"\";\nvar totalPiecesOr = 0;\nvar valeurItem = 0;\n\nouvrirMagasin();\n\nwhile(nomItem != \"quitter\")\n{\n  nomItem = prompt(\"Entrez le nom de l'item à vendre (épée, armure, poterie). Pour quitter, entrez le mot 'quitter'.\");\n\n  nomItem = nomItem.toLowerCase();\n\n  if(nomItem != \"quitter\")\n  {\n    valeurItem = vendreItem(nomItem);\n    totalPiecesOr = totalPiecesOr + valeurItem;\n  }\n}\n\nfermerMagasin(totalPiecesOr);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-22",
          "name"          : "Projet 22 - Une montagne de minéraux!",
          "normalizedName": "projet 22 - une montagne de mineraux!",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-203",
          "name"          : "Au pic et à la pelle",
          "normalizedName": "au pic et a la pelle",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-203_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-203_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=miningDuration>dureeOperation</var> et lui donner une valeur de 1.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une boucle while. La condition de cette boucle while doit vérifier si la valeur de <var id=miningDuration>dureeOperation</var> est plus grande que 0. <strong>Note:</strong> vous n'avez pas besoin d'ajouter un bloc de code, puisqu'il y en a déjà un.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui donne à <var id=miningDuration>dureeOperation</var> la valeur retournée par un <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: <string>\"Entrez la durée en minutes de l'opération minière (-1 pour quitter)\"</string>.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une instruction qui donne à <var id=miningDuration>dureeOperation</var> la valeur de <var id=miningDuration>dureeOperation</var> convertie en nombre. Vous devrez utiliser l'instruction <concept ref=Number>Number()</concept>.</li></ol>",
          "boilerplate"   : "?\nvar minerauxObtenus = 0;\n\n?\n{\n  ?\n\n  ?\n\n  minerauxObtenus = minerAsteroide(dureeOperation);\n}\n\nafficherMineraux();",
          "solution"      : "var dureeOperation = 1;\nvar minerauxObtenus = 0;\n\nwhile(dureeOperation > 0)\n{\n  dureeOperation = prompt(\"Entrez la durée en minutes de l'opération minière (-1 pour quitter)\");\n\n  dureeOperation = Number(dureeOperation);\n\n  minerauxObtenus = minerAsteroide(dureeOperation);\n}\n\nafficherMineraux();",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-204",
          "name"          : "Donnez-moi de l'oxygène!",
          "normalizedName": "donnez-moi de loxygene!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Avant de pouvoir utiliser le programme qui gère les opérations minières, nous devons y ajouter un compteur d'oxygène. Chaque fois qu'un hamstronaute entreprend une nouvelle opération, sa quantité d'oxygène se trouve réduite.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=currentOxygenLevel>niveauOxygene</var>. Donnez-lui une valeur initiale de 100.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=currentOxygenLevel>niveauOxygene</var> est plus grande que 0. Vous devrez utiliser l'opérateur ET (&amp;&amp;).</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui donne à <var id=currentOxygenLevel>niveauOxygene</var> le résultat de l'instruction \n    <concept ref=consumeOxygen>consommerOxygene(<var id=currentOxygenLevel>niveauOxygene</var>, <var id=miningDuration>dureeOperation</var>)</concept>.</li></ol>",
          "boilerplate"   : "var dureeOperation = 1;\nvar minerauxObtenus = 0;\n?\n\nwhile(dureeOperation > 0 ?)\n{\n  dureeOperation = prompt(\"Entrez la durée en minutes de l'opération minière (-1 pour quitter)\");\n\n  dureeOperation = Number(dureeOperation);\n\n  minerauxObtenus = minerAsteroide(dureeOperation);\n\n  ?\n}\n\nafficherMineraux(niveauOxygene);",
          "solution"      : "var dureeOperation = 1;\nvar minerauxObtenus = 0;\nvar niveauOxygene = 100;\n\nwhile(dureeOperation > 0 && niveauOxygene > 0)\n{\n  dureeOperation = prompt(\"Entrez la durée en minutes de l'opération minière (-1 pour quitter)\");\n\n  dureeOperation = Number(dureeOperation);\n\n  minerauxObtenus = minerAsteroide(dureeOperation);\n\n  niveauOxygene = consommerOxygene(niveauOxygene, dureeOperation);\n}\n\nafficherMineraux(niveauOxygene);",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-205",
          "name"          : "De courte durée",
          "normalizedName": "de courte duree",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-205_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-205_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=miningDuration>dureeOperation</var> est plus grande que 0. <strong>Note:</strong> vous n'avez pas besoin d'ajouter un bloc de code, puisqu'il y en a déjà un.</li></ol>",
          "boilerplate"   : "var dureeOperation = 1;\nvar minerauxObtenus = 0;\nvar niveauOxygene = 100;\n\nwhile(dureeOperation > 0 && niveauOxygene > 0)\n{\n  dureeOperation = prompt(\"Entrez la durée en minutes de l'opération minière (-1 pour quitter)\");\n\n  dureeOperation = Number(dureeOperation);\n\n  ?\n  {\n    minerauxObtenus = minerAsteroide(dureeOperation);\n\n    niveauOxygene = consommerOxygene(niveauOxygene, dureeOperation);\n  }\n}\n\nafficherMineraux(niveauOxygene);",
          "solution"      : "var dureeOperation = 1;\nvar minerauxObtenus = 0;\nvar niveauOxygene = 100;\n\nwhile(dureeOperation > 0 && niveauOxygene > 0)\n{\n  dureeOperation = prompt(\"Entrez la durée en minutes de l'opération minière (-1 pour quitter)\");\n\n  dureeOperation = Number(dureeOperation);\n\n  if(dureeOperation > 0)\n  {\n    minerauxObtenus = minerAsteroide(dureeOperation);\n\n    niveauOxygene = consommerOxygene(niveauOxygene, dureeOperation);\n  }\n}\n\nafficherMineraux(niveauOxygene);",
          "tips"          : "<h3 class=\"title\" ref=\"sorting sentinel\">Exclusion des valeurs sentinelles dans les calculs</h3>\n<div class=\"text\">Lorsque nous utilisons une <concept ref=\"sentinel value\">valeur sentinelle</concept> pour contrôler une <concept ref=\"loops\">boucle</concept>, il est parfois nécessaire de distinguer la valeur sentinelle des autres entrées, afin qu'elle ne soit pas considérée dans les autres opérations.</div>\n<div class=\"code-sample-title\">Exemple d'exclusion de la valeur sentinelle</div><pre class=\"codeBlock\">var dureeActuelle = 0; // dureeActuelle est la variable de contrôle\nvar dureeTotale = 0;\nwhile(dureeActuelle != -1)\n{\n  dureeActuelle = prompt(\"Veuillez entrer une durée (ou -1 pour quitter)\");\n  dureeActuelle = Number(dureeActuelle);\n\n  if(dureeActuelle != -1) // si l'utilisateur n'a pas entré la valeur sentinelle\n  {\n    // ajouter l'entrée à la durée totale\n    dureeTotale = dureeTotale + dureeActuelle;\n  }\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, l'<concept ref=\"if statement\">instruction if</concept> dans la boucle while permet de nous assurer que la valeur sentinelle ne soit pas ajoutée à la durée totale. Sans l'instruction if, la durée totale finale serait toujours un de moins que celle attendue par l'utilisateur.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-206",
          "name"          : "Presque une montagne",
          "normalizedName": "presque une montagne",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-206_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-206_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=largestMinerals>plusGrosseRoche</var>. Donnez-lui une valeur initiale de 0.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=currentMineralsGathered>minerauxObtenus</var> est plus grande que la valeur de <var id=largestMinerals>plusGrosseRoche</var>. À l'intérieur du bloc de code de cette instruction if, donnez à <var id=largestMinerals>plusGrosseRoche</var> la valeur de <var id=currentMineralsGathered>minerauxObtenus</var>.</li></ol>",
          "boilerplate"   : "var dureeOperation = 1;\nvar minerauxObtenus = 0;\nvar niveauOxygene = 100;\n?\n\nwhile(dureeOperation > 0 && niveauOxygene > 0)\n{\n  dureeOperation = prompt(\"Entrez la durée en minutes de l'opération minière (-1 pour quitter)\");\n\n  dureeOperation = Number(dureeOperation);\n\n  if(dureeOperation > 0)\n  {\n    minerauxObtenus = minerAsteroide(dureeOperation);\n\n    niveauOxygene = consommerOxygene(niveauOxygene, dureeOperation);\n\n    ?\n    \n  }\n}\n\nafficherMineraux(niveauOxygene, plusGrosseRoche);",
          "solution"      : "var dureeOperation = 1;\nvar minerauxObtenus = 0;\nvar niveauOxygene = 100;\nvar plusGrosseRoche = 0;\n\nwhile(dureeOperation > 0 && niveauOxygene > 0)\n{\n  dureeOperation = prompt(\"Entrez la durée en minutes de l'opération minière (-1 pour quitter)\");\n\n  dureeOperation = Number(dureeOperation);\n\n  if(dureeOperation > 0)\n  {\n    minerauxObtenus = minerAsteroide(dureeOperation);\n\n    niveauOxygene = consommerOxygene(niveauOxygene, dureeOperation);\n\n    if(minerauxObtenus > plusGrosseRoche)\n    {\n      plusGrosseRoche = minerauxObtenus;\n    }\n  }\n}\n\nafficherMineraux(niveauOxygene, plusGrosseRoche);",
          "tips"          : "<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-235",
          "name"          : "Un coffre (pas très) fort",
          "normalizedName": "un coffre pas tres fort",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui devine la combinaison d'un coffre-fort. La combinaison du coffre-fort est un nombre entre 1 et 1000. Nous allons utiliser une attaque par force brute. L'idée derrière cette technique est simplement d'essayer tous les nombres de 1 à 1000, jusqu'à ce que nous trouvions la combinaison.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=currentKey>combinaison</var> est plus petite ou égale à 1000 <strong>et</strong> si la valeur de <var id=keyFound>combinaisonTrouvee</var> est égale à false (faux).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à la variable <var id=currentKey>combinaison</var> la valeur de  <var id=currentKey>combinaison</var> plus 1.</li></ol>",
          "boilerplate"   : "var combinaison = 1;\nvar combinaisonTrouvee = false;\n\nwhile(?)\n{\n  combinaisonTrouvee = essayerCombinaison(combinaison);\n  ?\n}",
          "solution"      : "var combinaison = 1;\nvar combinaisonTrouvee = false;\n\nwhile(combinaison <= 1000 && combinaisonTrouvee == false)\n{\n  combinaisonTrouvee = essayerCombinaison(combinaison);\n  combinaison = combinaison + 1;\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>\n<h3 class=\"title\" ref=\"and operator\">Opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">L'opérateur ET est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si deux ou plusieurs <concept ref=\"boolean\">valeurs booléennes</concept> sont vraies.</div><div class=\"text\">Une expression qui utilise l'opérateur ET est seulement vraie si toutes les conditions qui forment l'expression sont vraies.</div><div class=\"text\">L'opérateur s'écrit avec deux perluètes (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur AND</div><pre class=\"codeBlock\">var resultat = true && true; // resultat est true (vrai)\nresultat = false && true; // resultat est false (faux)\nresultat = true && false; // resultat est false (faux)\nresultat = false && false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-236",
          "name"          : "Faire les courses",
          "normalizedName": "faire les courses",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Nous allons aider une épicerie à construire un panier d'achats virtuel pour leur magasin en ligne. Notre programme va recevoir les entrées de l'utilisateur et présenter le menu qui correspond à l'option choisie. Lorsque l'utilisateur entre \"a\", le programme affiche le menu qui permet d'ajouter des items. Lorsque l'utilisateur entre \"e\", le programme affiche le menu qui permet d'enlever des items. Pour quitter le programme, l'utilisateur doit entrer \"q\", Le programme affiche alors la liste des achats et se termine.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=userChoice>choix</var> et lui donner une chaîne vide  (<string>\"\"</string>) comme valeur.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=userChoice>choix</var> n'est <strong>pas</strong> égale à \n    <string>\"q\"</string>. <strong>Indice:</strong> vous devrez utiliser l'opérateur d'inégalité (!=).</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=userChoice>choix</var> est égale à \n    <string>\"a\"</string>.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une condition qui vérifie si la valeur de <var id=userChoice>choix</var> est égale à \n    <string>\"e\"</string>.</li></ol>",
          "boilerplate"   : "?\n\nwhile(?)\n{\n  var choix = prompt(\"Choisissez une option: 'a' pour ajouter un item, 'e' pour enlever un item, 'q' pour quitter\");\n\n  choix = choix.toLowerCase();\n\n  if(?)\n  {\n    ouvrirMenuPourAjouter();\n  }\n  else if(?)\n  {\n    ouvrirMenuPourEnlever();\n  }\n}\n\nafficherPanierAchats();",
          "solution"      : "var choix = \"\";\n\nwhile(choix != \"q\")\n{\n  var choix = prompt(\"Choisissez une option: 'a' pour ajouter un item, 'e' pour enlever un item, 'q' pour quitter\");\n\n  choix = choix.toLowerCase();\n\n  if(choix == \"a\")\n  {\n    ouvrirMenuPourAjouter();\n  }\n  else if(choix == \"e\")\n  {\n    ouvrirMenuPourEnlever();\n  }\n}\n\nafficherPanierAchats();",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-237",
          "name"          : "Un adversaire de taille",
          "normalizedName": "un adversaire de taille",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un jeu de devinette un peu différent. Plutôt que d'avoir à deviner un nombre secret choisi par l'ordinateur, cette fois nous allons choisir un nombre et l'ordinateur essaiera de le deviner. Pour simplifier le programme, l'utilisateur doit choisir un nombre entre 1 et 1000.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=attempts>essais</var>. Donnez-lui une valeur initiale de 0.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=computerGuess>essaiOrdinateur</var> n'est <strong>pas</strong> égale à la valeur de <var id=secretNumber>nombreSecret</var>. <strong>Indice:</strong> vous devrez utiliser l'opérateur d'inégalité (!=).</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui donne à la variable <var id=attempts>essais</var> la valeur de <var id=attempts>essais</var> plus 1.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une condition qui vérifie si la valeur de <var id=computerGuess>essaiOrdinateur</var> est égale à la valeur de <var id=secretNumber>nombreSecret</var>.</li></ol>",
          "boilerplate"   : "var nombreSecret = prompt(\"Entrez un nombre secret (1 à 1000)\");\n\nnombreSecret = Number(nombreSecret);\n\nvar essaiOrdinateur = 0;\n?\n\nwhile(?)\n{\n  essaiOrdinateur = obtenirEssaiOrdinateur();\n  ?\n\n  if(?)\n  {\n    nombreDevine(essais);\n  }\n}",
          "solution"      : "var nombreSecret = prompt(\"Entrez un nombre secret (1 à 1000)\");\n\nnombreSecret = Number(nombreSecret);\n\nvar essaiOrdinateur = 0;\nvar essais = 0;\n\nwhile(essaiOrdinateur != nombreSecret)\n{\n  essaiOrdinateur = obtenirEssaiOrdinateur();\n  essais = essais + 1;\n\n  if(essaiOrdinateur == nombreSecret)\n  {\n    nombreDevine(essais);\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-240",
          "name"          : "Une mélodie avant-gardiste",
          "normalizedName": "une melodie avant-gardiste",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui permet de créer une mélodie. L'utilisateur entre une série de notes à l'aide d'une boucle while. Pour terminer le programme et jouer la mélodie, l'utilisateur doit entrer la lettre \"Q\".</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=userChoice>choix</var>. Donnez-lui une valeur initiale de \n    <string>\"\"</string> (chaîne vide).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=userChoice>choix</var> n'est <strong>pas</strong> égale à \n    <string>\"Q\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une condition qui vérifie si la valeur de <var id=userChoice>choix</var> n'est <strong>pas</strong> égale à \n    <string>\"Q\"</string>.</li></ol>",
          "boilerplate"   : "?\n\nwhile(?)\n{\n  var choix = obtenirNoteUtilisateur();\n\n  if(choix == \"J\")\n  {\n    jouerNotes();\n  }\n  else if(?)\n  {\n    ajouterNote(choix);\n  }\n}\n\njouerNotes();",
          "solution"      : "var choix = \"\";\n\nwhile(choix != \"Q\")\n{\n  var choix = obtenirNoteUtilisateur();\n\n  if(choix == \"J\")\n  {\n    jouerNotes();\n  }\n  else if(choix != \"Q\")\n  {\n    ajouterNote(choix);\n  }\n}\n\njouerNotes();",
          "tips"          : "<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-239",
          "name"          : "Une sentinelle de trop",
          "normalizedName": "une sentinelle de trop",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Mettons à l'épreuve nos connaissances des boucles while contrôlées par une valeur sentinelle. Nous allons construire un programme qui additionne les nombres entrés par l'utilisateur. Le programme se termine lorsque l'utilisateur entre -1, puis affiche la somme des nombres entrés. Rappelez-vous, la valeur sentinelle ne doit pas être ajoutée au total!</div><div class=text>Pour tester votre programme, entrez les nombres suivants: 10, 15, 10, -1. Le programme doit afficher un total de 35. Si le programme affiche 34, la valeur sentinelle a été ajoutée au total par erreur.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Créer la boucle while nécessaire pour le programme. Elle doit continuer de boucler tant que l'utilisateur n'entre pas -1 pour la valeur de <var id=currentNumber>nombre</var>. Le bloc de code de cette boucle while doit entourer toutes les instructions, sauf les déclarations de variables et l'instruction \n    <concept ref=console-log>console.log()</concept> qui affiche le total.</li><li class=code-item>À l'intérieur du bloc de code de la boucle while, ajouter une instruction if qui empêche la valeur sentinelle d'être ajoutée à la valeur de  <var id=total>total</var>. Le bloc de code de cette instruction if doit contenir une instruction qui ajoute la valeur de <var id=currentNumber>nombre</var> à la valeur de <var id=total>total</var>.</li></ol>",
          "boilerplate"   : "var nombre = 0;\nvar total = 0;\n\n?\n\nnombre = prompt(\"Entrez un nombre, ou -1 pour quitter\");\nnombre = Number(nombre);\n\n// Utilisez une instruction if pour que\n// la valeur sentinelle ne soit pas ajoutée au total\n?\n\nconsole.log(\"Le total est: \" + total);",
          "solution"      : "var nombre = 0;\nvar total = 0;\n\nwhile(nombre != -1)\n{\n  nombre = prompt(\"Entrez un nombre, ou -1 pour quitter\");\n  nombre = Number(nombre);\n\n  // Utilisez une instruction if pour que\n  // la valeur sentinelle ne soit pas ajoutée au total\n  if(nombre != -1)\n  {\n    total = total + nombre;\n  }\n}\n\nconsole.log(\"Le total est: \" + total);",
          "tips"          : "<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-011",
          "name"          : "Quiz 11",
          "description"   : "Les valeurs sentinelles",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-011_q-01",
              "question": "<div>Que sont les <em>valeurs sentinelles</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-01_a-01",
                  "value" : 0,
                  "answer": "<div>Des valeurs qui causent des boucles infinies</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-011_q-01_a-02",
                  "value"      : 2,
                  "answer"     : "<div>Des valeurs spéciales qui indiquent à une boucle d'arrêter</div>",
                  "explanation": "Les <em>valeurs sentinelles</em> sont un peu comme la touche échappement et permettent de sortir d'une boucle."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-01_a-03",
                  "value" : 0,
                  "answer": "<div>Des valeurs spéciales utilisées dans les instructions <code>if</code></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-01_a-04",
                  "value" : 0,
                  "answer": "<div>Aucune de ces réponses</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-011_q-02",
              "question": "<div>Vrai ou faux. La condition de la boucle <code>while</code> suivante, qui utilise une valeur sentinelle, est une condition booléenne:</div>\n<pre class=\"language-javascript\"><code>while(entreeUtilisateur != -1)</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-011_q-02_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "Les conditions qui vérifient les valeurs sentinelles sont quand même des conditions booléennes (peuvent être vraies ou fausses)."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-02_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-011_q-03",
              "question": "<div>Quelle est la valeur sentinelle de cette boucle?</div>\n<pre class=\"language-javascript\"><code>var entreeUtilisateur = \"\";\n\nwhile(entreeUtilisateur != \"q\")\n{\n  entreeUtilisateur = prompt(\"Choisissez une option (q pour quitter)\");\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-011_q-03_a-01",
                  "value"      : 2,
                  "answer"     : "<div>La lettre <string>\"q\"</string></div>",
                  "explanation": "La valeur sentinelle est la valeur que nous devons entrer pour terminer la boucle, ici la lettre <string>\"q\"</string>."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>N'importe quelle valeur</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-03_a-03",
                  "value" : 0,
                  "answer": "<div>N'importe quel nombre</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-03_a-04",
                  "value" : 0,
                  "answer": "<div>Le nombre -1</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-011_q-04",
              "question": "<div>À quoi sert l'instruction <code>if</code> dans le code suivant?</div>\n<pre class=\"language-javascript\"><code>var montant = 0;\nvar argent = 0;  \n\nwhile(montant != -1)\n{\n  montant = prompt(\"Entrez un montant (-1 pour quitter)\");\n\n  montant = Number(montant);\n\n  if(montant != -1)\n  {\n    argent = argent + montant;\n  }\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-04_a-01",
                  "value" : 0,
                  "answer": "<div>L'instruction <code>if</code> empêche l'utilisateur d'ajouter un montant négatif à la somme d'argent.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-04_a-02",
                  "value" : 0,
                  "answer": "<div>L'instruction <code>if</code> sert à allonger le code.</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-04_a-03",
                  "value" : 0,
                  "answer": "<div>L'instruction <code>if</code> sert à vérifier que seuls des montants numériques sont ajoutés à la somme d'argent.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-011_q-04_a-04",
                  "value"      : 2,
                  "answer"     : "<div>L'instruction <code>if</code> sert à vérifier que la valeur sentinelle n'est pas ajoutée à la somme d'argent.</div>",
                  "explanation": "L'instruction <code>if</code> est nécessaire pour éviter d'ajouter la valeur sentinelle à la somme d'argent."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-011_q-05",
              "question": "<div>Le programme suivant entre-t-il dans une boucle infinie?</div>\n<pre class=\"language-javascript\"><code>var montant = 0;\n\nwhile(montant != -1)\n{\n  montant = prompt(\"Entrez un montant (-1 pour quitter)\");\n  montant = Number(montant);\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>Oui, la boucle <code>while</code> ne se termine jamais.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-011_q-05_a-02",
                  "value"      : 1,
                  "answer"     : "<div>Non, la boucle <code>while</code> s'arrête quand l'utilisateur entre le nombre -1.</div>",
                  "explanation": "Non, la boucle n'est pas infinie. Puisque nous avons une valeur sentinelle, la boucle s'arrête lorsque l'utilisateur entre la valeur sentinelle."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-011_q-06",
              "question": "<div>Ce programme permet à l'utilisateur de déposer de l'argent à un guichet automatique en entrant un montant. Quelle serait une valeur sentinelle acceptable pour le programme suivant?</div>\n<pre class=\"language-javascript\"><code>var montantDepot = 0;\nvar argentTotal = 0;\n\nwhile(?)\n{\n  montantDepot = prompt(\"Entrez un montant à déposer\");\n  montantDepot = Number(montantDepot);\n  argentTotal = argentTotal + montantDepot;\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-06_a-01",
                  "value" : 0,
                  "answer": "<div>N'importe quel nombre (ex: -1, 0, 5)</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-011_q-06_a-02",
                  "value"      : 2,
                  "answer"     : "<div>N'importe quel nombre négatif (ex: -1, -10, -42)</div>",
                  "explanation": "Puisque l'utilisateur dépose de l'argent, le montant entré ne serait normalement jamais une valeur négative. Nous pouvons donc utiliser une valeur négative pour indiquer au programme que l'utilisateur a terminé."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>N'importe quelle valeur</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>Aucune de ces réponses</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-011_q-07",
              "question": "<div>Vrai ou faux. Une condition qui utilise une valeur sentinelle peut utiliser l'opérateur ET ou l'opérateur OU pour ajouter plusieurs conditions, comme dans l'exemple suivant:</div>\n<pre class=\"language-javascript\"><code>while(montant != -1 &amp;&amp; argent &lt; 100)</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-011_q-07_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "Les conditions qui vérifient les valeurs sentinelles sont comme toutes les autres conditions booléennes. Nous pouvons donc utiliser les opérateurs que nous utilisons normalement."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-011_q-07_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 11",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-269",
          "name"          : "Les boucles for",
          "normalizedName": "les boucles for",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-269_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-269_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-23",
          "name"          : "Projet 23 - Recompter à rebours",
          "normalizedName": "projet 23 - recompter a rebours",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-207",
          "name"          : "Pour la deuxième fois",
          "normalizedName": "pour la deuxieme fois",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-207_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-207_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation entre les parenthèses de la boucle for par le nombre 10.</li></ol>",
          "boilerplate"   : "for(var decompte = ?; decompte >= 0; decompte = decompte - 1)\n{\n  afficherCompte(decompte);\n}\n\ndecollage();",
          "solution"      : "for(var decompte = 10; decompte >= 0; decompte = decompte - 1)\n{\n  afficherCompte(decompte);\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-208",
          "name"          : "Des éléments bien rangés",
          "normalizedName": "des elements bien ranges",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-208_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-208_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=countdown>decompte</var>. Donnez-lui une valeur initiale de 10.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une condition qui vérifie si <var id=countdown>decompte</var> est plus grand ou égal à 0.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui donne à <var id=countdown>decompte</var> la valeur de <var id=countdown>decompte</var> moins 1.</li></ol>",
          "boilerplate"   : "for(?; ?; ?)\n{\n  afficherCompte(decompte);\n}\n\ndecollage();",
          "solution"      : "for(var decompte = 10; decompte >= 0; decompte = decompte - 1)\n{\n  afficherCompte(decompte);\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"for loop components\">Éléments d'une boucle for</h3>\n<div class=\"text\">Comme les <concept ref=\"while loop\">boucles while</concept>, les <concept ref=\"for loop\">boucles for</concept> ont une <concept ref=\"control variable\">variable de contrôle</concept>, une <concept ref=\"condition\">condition</concept> et une instruction qui modifie la valeur de la variable de contrôle.</div><div class=\"text\">Contrairement aux boucles while, les boucles for groupent ces 3 éléments au début de la boucle.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Le premier élément, &quot;var x = 0&quot;, est appelé l'initialisation et est exécuté une seule fois, au début de la boucle. La valeur initiale de la variable de contrôle est habituellement donnée ici.</div><div class=\"text\">Le deuxième élément, &quot;x &lt; 2&quot;, est appelé la condition et est exécuté avant chaque <concept ref=\"iteration\">itération</concept> de la boucle. La condition détermine si la boucle doit continuer d'être exécutée ou non.</div><div class=\"text\">Le troisième élément, &quot;x = x + 1&quot;, est appelé l'<concept ref=\"increment\">incrémentation</concept> et est exécuté après chaque itération. L'incrémentation modifie normalement la valeur de la variable de contrôle.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-209",
          "name"          : "Des bogues en boucle",
          "normalizedName": "des bogues en boucle",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>L'un des ingénieurs de la Space Hamster Agency a essayé de modifier notre programme de compte à rebours, afin qu'il compte plutôt de 0 à 10. Pouvez-vous mettre vos connaissances des boucles for à l'oeuvre pour l'aider à compléter le programme?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une condition qui vérifie si la valeur de <var id=currentCount>compte</var> est plus petite ou égale à 10.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=currentCount>compte</var> la valeur de <var id=currentCount>compte</var> plus 1.</li></ol>",
          "boilerplate"   : "for(var compte = 0; ?; ?)\n{\n  afficherCompte(compte);\n}\n\ndecollage();",
          "solution"      : "for(var compte = 0; compte <= 10; compte = compte + 1)\n{\n  afficherCompte(compte);\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"for loop components\">Éléments d'une boucle for</h3>\n<div class=\"text\">Comme les <concept ref=\"while loop\">boucles while</concept>, les <concept ref=\"for loop\">boucles for</concept> ont une <concept ref=\"control variable\">variable de contrôle</concept>, une <concept ref=\"condition\">condition</concept> et une instruction qui modifie la valeur de la variable de contrôle.</div><div class=\"text\">Contrairement aux boucles while, les boucles for groupent ces 3 éléments au début de la boucle.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Le premier élément, &quot;var x = 0&quot;, est appelé l'initialisation et est exécuté une seule fois, au début de la boucle. La valeur initiale de la variable de contrôle est habituellement donnée ici.</div><div class=\"text\">Le deuxième élément, &quot;x &lt; 2&quot;, est appelé la condition et est exécuté avant chaque <concept ref=\"iteration\">itération</concept> de la boucle. La condition détermine si la boucle doit continuer d'être exécutée ou non.</div><div class=\"text\">Le troisième élément, &quot;x = x + 1&quot;, est appelé l'<concept ref=\"increment\">incrémentation</concept> et est exécuté après chaque itération. L'incrémentation modifie normalement la valeur de la variable de contrôle.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-210",
          "name"          : "Une boucle vide",
          "normalizedName": "une boucle vide",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-210_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-210_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Enlever le point-virgule après les parenthèses de la boucle for, qui cause une erreur dans la sortie du programme.</li></ol>",
          "boilerplate"   : "console.log(\"Fermeture de la porte, verrouillage en cours.\");\n\nfor(var verrou = 0; verrou < 5; verrou = verrou + 1);\n{\n  console.log(\"Verrou \" + verrou + \" enclenché.\");\n}\n\nconsole.log(\"Verrouillage terminé. \" + verrou + \" verrous enclenchés.\");",
          "solution"      : "console.log(\"Fermeture de la porte, verrouillage en cours.\");\n\nfor(var verrou = 0; verrou < 5; verrou = verrou + 1)\n{\n  console.log(\"Verrou \" + verrou + \" enclenché.\");\n}\n\nconsole.log(\"Verrouillage terminé. \" + verrou + \" verrous enclenchés.\");",
          "tips"          : "<h3 class=\"title\" ref=\"semicolon after for\">Point-virgule après une boucle for</h3>\n<div class=\"text\">Contrairement aux <concept ref=\"infinite while loops semicolon\">boucles while</concept>, nous n'aurons PAS de <concept ref=\"infinite loop\">boucle infinie</concept> si nous écrivons un point-virgule après les parenthèses d'une <concept ref=\"for loop\">boucle for</concept>.</div><div class=\"text\">Les <concept ref=\"for loop components\">éléments d'itération</concept> de la boucle for font partie de l'instruction elle-même et ne se trouvent pas à l'intérieur du <concept ref=\"code block\">bloc de code</concept>.</div><div class=\"text\">Plutôt que d'entrer dans une boucle infinie, le programme va <concept ref=\"iteration\">itérer</concept> un bloc de code vide, puis exécuter les instructions qui se trouvent dans le bloc de code une seule fois.</div><div class=\"text\">Par exemple, si nous écrivons le code suivant:</div>\n<div class=\"code-sample-title\">Point-virgule après les parenthèses d'une boucle for</div><pre class=\"codeBlock\">for(var maVar = 0; maVar < 3; maVar = maVar + 1); // remarquez le point-virgule ici\n{\n  console.log(\"Valeur actuelle de maVar: \" + maVar);\n}</pre>\n<div class=\"text\">L'ordinateur comprendra le code ci-dessus comme suit:</div>\n<div class=\"code-sample-title\">Point-virgule causant l'itération d'un bloc de code vide</div><pre class=\"codeBlock\">for(var maVar = 0; maVar < 3; maVar = maVar + 1) // la boucle itère normalement\n{\n  // mais le bloc de code de la boucle est compris comme étant vide\n}\nconsole.log(\"Valeur actuelle de maVar: \" + maVar); // exécuté une seule fois</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-211",
          "name"          : "Deux points-virgules et un bogue",
          "normalizedName": "deux points-virgules et un bogue",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-211_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-211_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Corriger les deux erreurs causées par des points-virgules dans la boucle for.</li></ol>",
          "boilerplate"   : "console.log(\"Fermeture de la porte, verrouillage en cours.\");\n\nfor(var verrou = 0 verrou < 5; verrou = verrou + 1;)\n{\n  console.log(\"Verrou \" + verrou + \" enclenché.\");\n}\n\nconsole.log(\"Verrouillage terminé. \" + verrou + \" verrous enclenchés.\");",
          "solution"      : "console.log(\"Fermeture de la porte, verrouillage en cours.\");\n\nfor(var verrou = 0; verrou < 5; verrou = verrou + 1)\n{\n  console.log(\"Verrou \" + verrou + \" enclenché.\");\n}\n\nconsole.log(\"Verrouillage terminé. \" + verrou + \" verrous enclenchés.\");",
          "tips"          : "<h3 class=\"title\" ref=\"wrong semicolon in for\">Points-virgules incorrects entre les parenthèses d'une boucle for</h3>\n<div class=\"text\">Si nous oublions l'un des points-virgules qui séparent les <concept ref=\"for loop components\">éléments d'une boucle for</concept>, notre programme contiendra une erreur. Il y aura aussi une erreur si nous ajoutons un point-virgule après l'opération d'incrémentation.</div>\n<div class=\"code-sample-title\">Exemple de point-virgule manquant</div><pre class=\"codeBlock\">for(var maVar = 0 maVar < 3; maVar = maVar + 1) // remarquez le point-virgule manquant\n{\n  console.log(\"Valeur actuelle de maVar: \" + maVar);\n}</pre>\n<div class=\"text\">Le code ci-dessus contient une erreur, puisqu'il manque un point-virgule entre l'initialisation et la <concept ref=\"condition\">condition</concept>.</div>\n<div class=\"code-sample-title\">Exemple de point-virgule en trop</div><pre class=\"codeBlock\">for(var maVar = 0; maVar < 3; maVar = maVar + 1;) // remarquez le point-virgule en trop\n{\n  console.log(\"Valeur actuelle de maVar: \" + maVar);\n}</pre>\n<div class=\"text\">Le code ci-dessus contient une erreur, puisqu'il y a un point-virgule de trop après l'opération d'incrémentation.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-241",
          "name"          : "Où est le désinfectant?",
          "normalizedName": "ou est le desinfectant",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui simule la croissance d'une population de bactéries. Dans cette simulation, la population de bactéries augmente de 10% à chaque heure. Le programme affiche la taille de la population de bactéries après chaque heure, pour une durée totale de 10 heures. Voici un exemple avec une population initiale de 1000 bactéries:</div><pre><samp>Heure 1, la taille de la population est 1100.\nHeure 2, la taille de la population est 1210.\n...\nHeure 10, la taille de la population est 2591.</samp></pre><div class=text>Pouvez-vous compléter le programme?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation dans la boucle for par une nouvelle variable appelée <var id=hour>heure</var>. Donnez-lui une valeur initiale de 1.</li><li class=code-item>Remplacer le deuxième point d'interrogation dans la boucle for par une condition qui vérifie si la valeur de la variable <var id=hour>heure</var> est plus petite ou égale à 10.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui incrémente la valeur de <var id=hour>heure</var> de 1.</li></ol>",
          "boilerplate"   : "var populationBacteries = prompt(\"Entrez la taille initiale de la population de bactéries\");\n\npopulationBacteries = Number(populationBacteries);\n\nfor(?; ?; ?)\n{\n  populationBacteries = Math.floor(populationBacteries + populationBacteries * 0.1);\n  afficherPopulationBacteries(heure, populationBacteries);\n}",
          "solution"      : "var populationBacteries = prompt(\"Entrez la taille initiale de la population de bactéries\");\n\npopulationBacteries = Number(populationBacteries);\n\nfor(var heure = 1; heure <= 10; heure++)\n{\n  populationBacteries = Math.floor(populationBacteries + populationBacteries * 0.1);\n  afficherPopulationBacteries(heure, populationBacteries);\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-242",
          "name"          : "Une myriade d'octets",
          "normalizedName": "une myriade doctets",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui affiche le nom des tailles communes de fichiers. La taille des fichiers d'un ordinateur est exprimée en octets. Puisque les fichiers comptent souvent plus d'un million d'octets, nous donnons des noms spéciaux aux multiples de 1024 octets. Toutefois, puisqu'il est difficile d'exprimer des nombres par des multiples de 1024, nous utilisons parfois des multiples de 1000, qui sont assez près des multiples de 1024. Voici le nom des 5 premiers multiples de 1000:</div><ul class=algorithm><li>1000 octets font un <strong>kilooctet</strong>.</li><li>1000 kilooctets font un <strong>mégaoctet</strong>. (1 million d'octets)</li><li>1000 mégaoctets font un <strong>gigaoctet</strong>. (1 milliard d'octets)</li><li>1000 gigaoctets font un <strong>téraoctet</strong>. (1 billion d'octets)</li><li>1000 téraoctets font un <strong>pétaoctet</strong>. (1 billiard d'octets)</li></ul></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation dans la boucle for par une nouvelle variable appelée <var id=multiple>multiple</var>. Donnez-lui une valeur initiale de 1.</li><li class=code-item>Remplacer le deuxième point d'interrogation dans la boucle for par une condition qui vérifie si la valeur de la variable <var id=multiple>multiple</var> est plus petite ou égale à 5.</li><li class=code-item>Remplacer le troisième point d'interrogation dans la boucle for par une instruction qui incrémente la valeur de la variable <var id=multiple>multiple</var> de 1.</li><li class=code-item>Remplacer le quatrième point d'interrogation par une instruction qui donne à <var id=bytes>octets</var> la valeur de <var id=bytes>octets</var> multipliée par 1000.</li></ol>",
          "boilerplate"   : "var octets = 1;\n\nfor(?; ?; ?)\n{\n  ?\n  afficherNomOctets(octets);\n}",
          "solution"      : "var octets = 1;\n\nfor(var multiple = 1; multiple <= 5; multiple++)\n{\n  octets = octets * 1000;\n  afficherNomOctets(octets);\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-243",
          "name"          : "Un vaisseau spatial d'occasion",
          "normalizedName": "un vaisseau spatial doccasion",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui aide une vendeuse de vaisseaux spatiaux à évaluer le prix d'un vaisseau spatial. Pour calculer la valeur d'un vaisseau spatial, la vendeuse doit prendre le prix initial du vaisseau et le diminuer de 30% pour chaque année d'utilisation. Par exemple, disons qu'un vaisseau spatial a une valeur initiale d'un million de dollars. Voici ce que le programme devrait afficher:</div><pre><samp>La valeur initiale du vaisseau spatial est de 1000000.00$\nAnnée 1, la valeur du vaisseau spatial est de 700000.00$\nAnnée 2, la valeur du vaisseau spatial est de 490000.00$\nAnnée 3, la valeur du vaisseau spatial est de 343000.00$\n...\nAnnée 9, la valeur du vaisseau spatial est de 40353.61$\nAnnée 10, la valeur du vaisseau spatial est de 28247.52$</samp></pre></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par les trois éléments nécessaires pour compléter la boucle for. La variable de contrôle de la boucle for devrait s'appeler <var id=year>annee</var> et avoir une valeur initiale de 1. La condition de la boucle for doit vérifier si la valeur de <var id=year>annee</var> est plus petite ou égale à 10. L'incrémentation doit augmenter la valeur de <var id=year>annee</var> de 1. Rappelez-vous de séparer chaque élément par un point-virgule (;).</li></ol>",
          "boilerplate"   : "var valeurVaisseauSpatial = prompt(\"Entrez la valeur initiale du vaisseau spatial\");\n\nvaleurVaisseauSpatial = Number(valeurVaisseauSpatial);\n\nafficherValeurVaisseau(0, valeurVaisseauSpatial);\n\nfor(?)\n{\n  valeurVaisseauSpatial = valeurVaisseauSpatial * 0.7;\n\n  afficherValeurVaisseau(annee, valeurVaisseauSpatial);\n}",
          "solution"      : "var valeurVaisseauSpatial = prompt(\"Entrez la valeur initiale du vaisseau spatial\");\n\nvaleurVaisseauSpatial = Number(valeurVaisseauSpatial);\n\nafficherValeurVaisseau(0, valeurVaisseauSpatial);\n\nfor(var annee = 1; annee <= 10; annee++)\n{\n  valeurVaisseauSpatial = valeurVaisseauSpatial * 0.7;\n\n  afficherValeurVaisseau(annee, valeurVaisseauSpatial);\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-244",
          "name"          : "Une taille moyenne",
          "normalizedName": "une taille moyenne",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Notre amie Annette fait un projet qui porte sur la taille des humains. En faisant un peu de recherche sur Internet, elle a découvert que la taille moyenne des humains est de 167 cm. Annette aimerait maintenant savoir combien d'élèves de sa classe dépassent cette moyenne. Aidons-la à construire un programme qui vérifie combien des 20 élèves de sa classe dépassent la moyenne.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par les trois éléments nécessaires pour compléter la boucle for. La variable de contrôle de la boucle for devrait s'appeler <var id=studentNumber>eleve</var> et avoir une valeur initiale de 1. La condition de la boucle for doit vérifier si la valeur de <var id=studentNumber>eleve</var> est plus petite ou égale à 20. L'incrémentation doit augmenter la valeur de <var id=studentNumber>eleve</var> de 1. Rappelez-vous de séparer chaque élément par un point-virgule (;).</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=currentStudentHeight>tailleEleve</var> est plus grande que <var id=averageHeight>tailleMoyenne</var>. À l'intérieur du bloc de code de cette instruction if, incrémentez la valeur de <var id=exceedAverage>auDessusMoyenne</var> de 1.</li></ol>",
          "boilerplate"   : "var tailleMoyenne = 167;\nvar auDessusMoyenne = 0;\nvar tailleEleve;\n\nfor(?)\n{\n  tailleEleve = obtenirTailleEleve(eleve);\n\n  ?\n  \n}\n\nconsole.log(auDessusMoyenne + \" élèves dépassent la taille moyenne de \" + tailleMoyenne + \" cm.\");",
          "solution"      : "var tailleMoyenne = 167;\nvar auDessusMoyenne = 0;\nvar tailleEleve;\n\nfor(var eleve = 1; eleve <= 20; eleve++)\n{\n  tailleEleve = obtenirTailleEleve(eleve);\n\n  if(tailleEleve > tailleMoyenne)\n  {\n    auDessusMoyenne++;\n  }\n}\n\nconsole.log(auDessusMoyenne + \" élèves dépassent la taille moyenne de \" + tailleMoyenne + \" cm.\");",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"nested statements\">Instructions conditionnelles imbriquées</h3>\n<div class=\"text\">Nous pouvons créer une <concept ref=\"conditional statements\">instruction conditionnelle</concept> imbriquée en mettant une <concept ref=\"if statement\">instruction if</concept> à l'intérieur du <concept ref=\"code block\">bloc de code</concept> d'une autre instruction if.</div><div class=\"text\">De cette façon, nous pouvons vérifier la première <concept ref=\"condition\">condition</concept> avant de vérifier la deuxième condition. La première instruction if s'appelle l'instruction if externe, tandis que la deuxième instruction if s'appelle l'instruction if interne.</div>\n<div class=\"code-sample-title\">Exemple d'instruction conditionnelle imbriquée</div><pre class=\"codeBlock\">// instruction if externe\nif(vies > 0) // cette condition est vérifiée en premier\n{\n  // instruction if interne\n  if(pointage > 100) // cette condition est seulement vérifiée si la première est vraie\n  {\n    console.log(\"Vous avez gagné!\");\n  }\n}</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-245",
          "name"          : "Semer à tout vent",
          "normalizedName": "semer a tout vent",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui analyse les récoltes de pommes de terre d'une ferme dans les 20 dernières années. Chaque année, la ferme note la taille de la récolte de pommes de terre. Nous voudrions savoir la taille moyenne des récoltes et combien de récoltes dépassent la moyenne.</div><div class=text>Notre programme comprend deux parties. La première partie calcule la taille moyenne des récoltes en additionnant la taille des 20 récoltes puis en divisant la somme par 20. La deuxième partie itère sur chacune des récoltes et détermine combien dépassent la moyenne.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter la première boucle for. Sa variable de contrôle devrait s'appeler <var id=year>annee</var>. La boucle doit itérer de 1 à 20.</li><li class=code-item>Compléter la deuxième boucle for. Sa variable de contrôle devrait s'appeler <var id=cropNo>recolte</var>. La boucle doit itérer de 1 à 20.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=currentCropYield>tailleRecolte</var> est plus grande que la valeur de <var id=averageCropYield>moyenneRecoltes</var>. Lorsque cette condition est vraie, incrémentez la valeur de <var id=cropsExceedingAverage>auDessusMoyenne</var> de 1.</li></ol>",
          "boilerplate"   : "var totalRecoltes = 0;\nvar tailleRecolte;\n\nfor(?)\n{\n  tailleRecolte = obtenirTailleRecoltePourAnnee(annee);\n\n  console.log(\"Annee \" + annee + \": la récolte a rapporté \" + tailleRecolte + \" kg.\");\n\n  totalRecoltes = totalRecoltes + tailleRecolte;\n}\n\nvar moyenneRecoltes = totalRecoltes / 20;\nvar auDessusMoyenne = 0;\n\nfor(?)\n{\n  tailleRecolte = obtenirTailleRecoltePourAnnee(recolte);\n\n  ?\n  \n}\n\nconsole.log(auDessusMoyenne + \" récoltes dépassent la moyenne de \" + moyenneRecoltes + \" kg.\");",
          "solution"      : "var totalRecoltes = 0;\nvar tailleRecolte;\n\nfor(var annee = 1; annee <= 20; annee++)\n{\n  tailleRecolte = obtenirTailleRecoltePourAnnee(annee);\n\n  console.log(\"Annee \" + annee + \": la récolte a rapporté \" + tailleRecolte + \" kg.\");\n\n  totalRecoltes = totalRecoltes + tailleRecolte;\n}\n\nvar moyenneRecoltes = totalRecoltes / 20;\nvar auDessusMoyenne = 0;\n\nfor(var recolte = 1; recolte <= 20; recolte++)\n{\n  tailleRecolte = obtenirTailleRecoltePourAnnee(recolte);\n\n  if(tailleRecolte > moyenneRecoltes)\n  {\n    auDessusMoyenne++;\n  }\n}\n\nconsole.log(auDessusMoyenne + \" récoltes dépassent la moyenne de \" + moyenneRecoltes + \" kg.\");",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"console.log() concatenation\">Combinaison de chaînes et de variables dans un console.log()</h3>\n<div class=\"text\">Nous pouvons combiner une <concept ref=\"string\">chaîne</concept> et la <concept ref=\"variable value\">valeur</concept> d'une variable entre les parenthèses de l'instruction console.log() pour créer une <concept ref=\"output\">sortie</concept> complexe.</div><div class=\"text\">Pour ce faire, nous devons utiliser l'opérateur de <concept ref=\"concatenation\">concaténation (+)</concept> entre chacun des éléments.</div>\n<div class=\"code-sample-title\">Exemples de console.log() avec une variable et une chaîne</div><pre class=\"codeBlock\">var monNom = \"EduCode\";\nconsole.log(\"Mon nom est \" + monNom); // affiche la chaîne concaténée: Mon nom est EduCode\nvar monAge = 16;\nconsole.log(\"J'ai \" + monAge + \" ans\"); // affiche la chaîne concaténée: J'ai 16 ans</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-24",
          "name"          : "Projet 24 - Des jeux dans l'espace",
          "normalizedName": "projet 24 - des jeux dans lespace",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-212",
          "name"          : "Bâtir un mur",
          "normalizedName": "batir un mur",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-212_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-212_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Simplifier le code à l'aide d'une boucle for. L'instruction <concept ref=obstacle-create>obstacle.create()</concept> doit apparaître une seule fois dans votre code.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-212_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nobstacle.create(23, 6, \"square\");\n\nobstacle.create(23, 7, \"square\");\nobstacle.create(23, 8, \"square\");\nobstacle.create(23, 9, \"square\");\nobstacle.create(23, 10, \"square\");\nobstacle.create(23, 11, \"square\");\nobstacle.create(23, 12, \"square\");\nobstacle.create(23, 13, \"square\");\nobstacle.create(23, 14, \"square\");\nobstacle.create(23, 15, \"square\");\nobstacle.create(23, 16, \"square\");\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nfor(var y = 6; y <= 16; y = y + 1)\n{\n  obstacle.create(23, y, \"square\");\n}\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-213",
          "name"          : "Et un autre",
          "normalizedName": "et un autre",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un casse-tête qui utilise deux murs. Pour ce faire, ajoutons une deuxième boucle for à notre programme existant. Le premier obstacle de ce mur horizontal doit être aux coordonnées (6, 6). Le dernier obstacle de ce mur doit être aux coordonnées (24, 6). Le mur doit donc contenir au total 19 obstacles.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter la boucle for. Remplacez le premier point d'interrogation par une nouvelle variable appelée <var id=x>x</var> avec une valeur initiale de 6. Remplacez le deuxième point d'interrogation par une condition qui vérifie si la valeur de <var id=x>x</var> est plus petite ou égale à 24. Remplacez le troisième point d'interrogation par une instruction qui donne à la variable <var id=x>x</var> la valeur de la variable <var id=x>x</var> plus 1.</li><li class=code-item>Compléter l'instruction \n    <concept ref=obstacle-create>obstacle.create()</concept>. Remplacez le premier point d'interrogation par la variable <var id=x>x</var>. Remplacez le deuxième point d'interrogation par le chiffre 6.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-213_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nfor(?; ?; ?)\n{\n  obstacle.create(?, ?, \"square\");\n}\n\nfor(var x = 6; x <= 24; x = x + 1)\n{\n  obstacle.create(x, 16, \"square\");\n}\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nfor(var x = 6; x <= 24; x = x + 1)\n{\n  obstacle.create(x, 6, \"square\");\n}\n\nfor(var x = 6; x <= 24; x = x + 1)\n{\n  obstacle.create(x, 16, \"square\");\n}\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"obstacle.create()\">Instruction obstacle.create()</h3>\n<div class=\"text\">L'instruction obstacle.create() est utilisée pour créer des obstacles afin d'empêcher la <concept ref=\"puck.create()\">rondelle</concept> du joueur d'atteindre le <concept ref=\"goal.create()\">but</concept>. L'instruction obstacle.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme, [type]). Par défaut, le type est &quot;normal&quot;.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div><div class=\"text\">Le type doit être l'un des suivants: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // crée un obstacle carré de type \"normal\" à (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // crée un obstacle en forme de cercle de type \"faster\" à (7,7)\nobstacle.create(1, \"triangle\", 17); // incorrect: les paramètres sont dans le mauvais ordre\nobstacle.create(4, 5); // incorrect: la forme est obligatoire\nobstacle.Create(3, 1); // incorrect: le mot \"create\" prend un \"c\" minuscule\nobstacle.create(6, 6, hexagon); // incorrect: le mot \"hexagon\" doit être entouré de guillemets (\" \")\nobstacle.create(4, 21, \"octagon\"); // incorrect: \"octagon\" n'est pas une forme acceptée</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-214",
          "name"          : "Une boucle suffit",
          "normalizedName": "une boucle suffit",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-214_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-214_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Combiner les deux boucles for pour que les deux murs d'obstacles soient créés avec une seule boucle for.</li><li class=code-item>Remplacer l'instruction qui augmente la valeur de <var id=x>x</var> de un par l'opérateur d'incrémentation. <strong>Note:</strong> l'opérateur d'incrémentation est ++</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-214_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nfor(var x = 6; x <= 24; x = x + 1)\n{\n  obstacle.create(x, 6, \"square\");\n}\n\nfor(var x = 6; x <= 24; x = x + 1)\n{\n  obstacle.create(x, 16, \"square\");\n}\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nfor(var x = 6; x <= 24; x++)\n{\n  obstacle.create(x, 6, \"square\");\n  \n  obstacle.create(x, 16, \"square\");\n}\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"increment decrement\">Opérateurs d'incrémentation (++) et de décrémentation (--)</h3>\n<div class=\"text\">Il est très commun en programmation d'augmenter ou de réduire la valeur d'une <concept ref=\"variable\">variable</concept> de un. Pour cette raison, deux opérateurs ont été créés comme raccourcis pour ces deux opérations.</div><div class=\"text\">Le premier est l'opérateur d'incrémentation, que nous écrivons avec deux signes plus (++). L'opérateur augmente la <concept ref=\"variable value\">valeur</concept> de la variable de un.</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur d'incrémentation</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  x++; // veut dire: x = x + 1;\n}</pre>\n<div class=\"text\">Le deuxième est l'opérateur de décrémentation, que nous écrivons avec deux signes moins (--). L'opérateur diminue la valeur de la variable de un.</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur de décrémentation</div><pre class=\"codeBlock\">var x = 2;\nwhile(x > 0)\n{\n  x--; // veut dire: x = x - 1;\n}</pre>\n<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-215",
          "name"          : "Ils sont partout!",
          "normalizedName": "ils sont partout!",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-215_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-215_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une boucle for. La variable de contrôle de cette boucle for devrait s'appeler <var id=y>y</var> et avoir une valeur initiale de 7. La condition doit vérifier si la valeur de <var id=y>y</var> est plus petite ou égale à 15. L'incrémentation doit augmenter la valeur de <var id=y>y</var> de un. À l'intérieur du bloc de code de la boucle for, utilisez l'instruction <concept ref=obstacle-create>obstacle.create(15, <var id=y>y</var>, <string>\"circle\"</string>, <string>\"faster\"</string>, true)</concept>.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-215_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nfor(var x = 6; x <= 24; x++)\n{\n  obstacle.create(x, 6, \"square\");\n  obstacle.create(x, 16, \"square\");\n}\n\n?\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nfor(var x = 6; x <= 24; x++)\n{\n  obstacle.create(x, 6, \"square\");\n  obstacle.create(x, 16, \"square\");\n}\n\nfor(var y = 7; y <= 15; y++)\n{\n  obstacle.create(15, y, \"circle\", \"faster\", true);\n}\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"moveable obstacles\">Obstacles qui se déplacent</h3>\n<div class=\"text\">Nous pouvons modifier les obstacles créés par l'instruction <concept ref=\"obstacle.create()\">obstacle.create()</concept> pour qu'ils se déplacent lorsque la rondelle les frappe. Pour ce faire, nous utilisons un cinquième <concept ref=\"parameter\">paramètre</concept> en lui donnant une <concept ref=\"boolean\">valeur booléenne</concept>. Ce paramètre est optionnel.</div>\n<div class=\"code-sample-title\">Exemples d'obstacles qui se déplacent</div><pre class=\"codeBlock\">obstacle.create(11, 12, \"square\", \"normal\", true); // crée un obstacle carré qui se déplace\nobstacle.create(7, 1, \"circle\", \"change\", true); // crée un obstacle en forme de cercle qui se déplace\nobstacle.create(4, 4, true); // incorrect: il manque deux paramètres avant la valeur booléenne\nobstacle.create(14, 13, \"square\", true, \"faster\"); // incorrect: les paramètres sont dans le mauvais ordre</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-246",
          "name"          : "Une grande muraille",
          "normalizedName": "une grande muraille",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Utilisons une boucle for pour créer le mur d'obstacles illustré dans l'image ci-dessous.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une boucle for. La variable de contrôle de cette boucle for devrait s'appeler <var id=y>y</var> et avoir une valeur initiale de 5. La condition de cette boucle for doit vérifier si la valeur de <var id=y>y</var> est plus petite ou égale à 17. L'incrémentation doit augmenter la valeur de <var id=y>y</var> de 1. À l'intérieur du bloc de code de la boucle for, utilisez l'instruction \n    <concept ref=obstacle-create>obstacle.create(22, <var id=y>y</var>,\n      <string>\"square\"</string>)</concept>.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-246_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\n?\n\nobstacle.create(6, 7, \"circle\", \"faster\");\nobstacle.create(12, 7, \"circle\", \"faster\");\nobstacle.create(18, 7, \"circle\", \"faster\");\nobstacle.create(6, 15, \"circle\", \"faster\");\nobstacle.create(12, 15, \"circle\", \"faster\");\nobstacle.create(18, 15, \"circle\", \"faster\");\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nfor(var y = 5; y <= 17; y++)\n{\n  obstacle.create(22, y, \"square\");\n}\n\nobstacle.create(6, 7, \"circle\", \"faster\");\nobstacle.create(12, 7, \"circle\", \"faster\");\nobstacle.create(18, 7, \"circle\", \"faster\");\nobstacle.create(6, 15, \"circle\", \"faster\");\nobstacle.create(12, 15, \"circle\", \"faster\");\nobstacle.create(18, 15, \"circle\", \"faster\");\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"obstacle.create()\">Instruction obstacle.create()</h3>\n<div class=\"text\">L'instruction obstacle.create() est utilisée pour créer des obstacles afin d'empêcher la <concept ref=\"puck.create()\">rondelle</concept> du joueur d'atteindre le <concept ref=\"goal.create()\">but</concept>. L'instruction obstacle.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme, [type]). Par défaut, le type est &quot;normal&quot;.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div><div class=\"text\">Le type doit être l'un des suivants: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // crée un obstacle carré de type \"normal\" à (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // crée un obstacle en forme de cercle de type \"faster\" à (7,7)\nobstacle.create(1, \"triangle\", 17); // incorrect: les paramètres sont dans le mauvais ordre\nobstacle.create(4, 5); // incorrect: la forme est obligatoire\nobstacle.Create(3, 1); // incorrect: le mot \"create\" prend un \"c\" minuscule\nobstacle.create(6, 6, hexagon); // incorrect: le mot \"hexagon\" doit être entouré de guillemets (\" \")\nobstacle.create(4, 21, \"octagon\"); // incorrect: \"octagon\" n'est pas une forme acceptée</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-247",
          "name"          : "Deux murs",
          "normalizedName": "deux murs",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Maintenant que nous pouvons créer un mur d'obstacles avec une boucle for, essayons de créer deux murs, comme dans l'image ci-dessous.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une boucle for. La variable de contrôle de cette boucle for devrait s'appeler <var id=firstY>premierY</var> et avoir une valeur initiale de 0. La condition de cette boucle for doit vérifier si la valeur de <var id=firstY>premierY</var> est plus petite ou égale à 11. L'incrémentation doit augmenter la valeur de <var id=firstY>premierY</var> de 1. À l'intérieur du bloc de code de la boucle for, utilisez l'instruction \n    <concept ref=obstacle-create>obstacle.create(11, <var id=firstY>premierY</var>,\n      <string>\"square\"</string>)</concept>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une autre boucle for. La variable de contrôle de cette boucle for devrait s'appeler <var id=secondY>deuxiemeY</var> et avoir une valeur initiale de 22. La condition de cette boucle for doit vérifier si la valeur de <var id=secondY>deuxiemeY</var> est plus grande ou égale à 11. L'incrémentation doit diminuer la valeur de <var id=secondY>deuxiemeY</var> de 1. À l'intérieur du bloc de code de la boucle for, utilisez l'instruction \n    <concept ref=obstacle-create>obstacle.create(17, <var id=secondY>deuxiemeY</var>,\n      <string>\"square\"</string>)</concept>. Rappelez-vous, pour diminuer la valeur d'une variable de un, vous pouvez utiliser l'opérateur de décrémentation (--).</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-247_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\n// Cette boucle for devrait créer une\n// ligne verticale d'obstacles, de (11,0) à (11,11)\n?\n\n// Cette boucle for devrait créer une\n// ligne verticale d'obstacles, de (17,22) à (17,11)\n?\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\n// Cette boucle for devrait créer une\n// ligne verticale d'obstacles, de (11,0) à (11,11)\nfor(var premierY = 0; premierY <= 11; premierY++)\n{\n  obstacle.create(11, premierY, \"square\");\n}\n\n// Cette boucle for devrait créer une\n// ligne verticale d'obstacles, de (17,22) à (17,11)\nfor(var deuxiemeY = 22; deuxiemeY >= 11; deuxiemeY--)\n{\n  obstacle.create(17, deuxiemeY, \"square\");\n}\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"obstacle.create()\">Instruction obstacle.create()</h3>\n<div class=\"text\">L'instruction obstacle.create() est utilisée pour créer des obstacles afin d'empêcher la <concept ref=\"puck.create()\">rondelle</concept> du joueur d'atteindre le <concept ref=\"goal.create()\">but</concept>. L'instruction obstacle.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires et 1 paramètre optionnel. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme, [type]). Par défaut, le type est &quot;normal&quot;.</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div><div class=\"text\">Le type doit être l'un des suivants: &quot;faster&quot;, &quot;slower&quot;, &quot;change&quot;, &quot;normal&quot; [optionnel]</div>\n<div class=\"code-sample-title\">Exemples de obstacle.create()</div><pre class=\"codeBlock\">obstacle.create(1, 11, \"square\"); // crée un obstacle carré de type \"normal\" à (1,11)\nobstacle.create(7, 7, \"circle\", \"faster\"); // crée un obstacle en forme de cercle de type \"faster\" à (7,7)\nobstacle.create(1, \"triangle\", 17); // incorrect: les paramètres sont dans le mauvais ordre\nobstacle.create(4, 5); // incorrect: la forme est obligatoire\nobstacle.Create(3, 1); // incorrect: le mot \"create\" prend un \"c\" minuscule\nobstacle.create(6, 6, hexagon); // incorrect: le mot \"hexagon\" doit être entouré de guillemets (\" \")\nobstacle.create(4, 21, \"octagon\"); // incorrect: \"octagon\" n'est pas une forme acceptée</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-248",
          "name"          : "En formation",
          "normalizedName": "en formation",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ajoutons des obstacles triangulaires en formation rectangulaire devant le but! Complétez la boucle for pour créer les obstacles triangulaires, comme dans l'image ci-dessous.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter la boucle for. La variable de contrôle devrait s'appeler <var id=x>x</var> et avoir une valeur initiale de 5. La condition doit vérifier si la valeur de <var id=x>x</var> est plus petite ou égale à 25. L'incrémentation doit augmenter la valeur de <var id=x>x</var> de 5. <strong>Indice:</strong> vous ne pourrez pas utiliser l'opérateur d'incrémentation (++) ici.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-248_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(1, 11, \"circle\");\n\nfor(?)\n{\n  obstacle.create(x, 8, \"triangle\");\n  obstacle.create(x, 11, \"triangle\");\n  obstacle.create(x, 14, \"triangle\");\n}\n\n// Limites du jeu\n// Ne pas modifier le code ci-dessous\nfor(var x = 0; x <= 30; x++)\n{\n  obstacle.create(x, 5, \"square\", \"faster\");\n  obstacle.create(x, 17, \"square\", \"faster\");\n}\n\ngoal.create(29, 11);",
          "solution"      : "puck.create(1, 11, \"circle\");\n\nfor(var x = 5; x <= 25; x = x + 5)\n{\n  obstacle.create(x, 8, \"triangle\");\n  obstacle.create(x, 11, \"triangle\");\n  obstacle.create(x, 14, \"triangle\");\n}\n\n// Limites du jeu\n// Ne pas modifier le code ci-dessous\nfor(var x = 0; x <= 30; x++)\n{\n  obstacle.create(x, 5, \"square\", \"faster\");\n  obstacle.create(x, 17, \"square\", \"faster\");\n}\n\ngoal.create(29, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-249",
          "name"          : "Faire la vague",
          "normalizedName": "faire la vague",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Ce programme utilise quatre boucles for pour créer diverses lignes diagonales (les obstacles en forme de cercle). Si vous regardez le code attentivement, vous remarquez que les quatre boucles for ont exactement les mêmes paramètres et peuvent être remplacées par une seule boucle for. Essayez de reproduire le casse-tête en utilisant une seule boucle for!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Déplacer chacune des instructions \n    <concept ref=obstacle-create>obstacle.create()</concept> qui se trouvent à l'intérieur des blocs de code des trois dernières boucles for à l'intérieur du bloc de code de la première boucle.</li><li class=code-item>Enlevez les trois boucles for qui sont (maintenant) vides.</li><li class=code-item>Votre code devrait contenir une seule boucle for avec <strong>8</strong> instructions \n    <concept ref=obstacle-create>obstacle.create()</concept> à l'intérieur de son bloc de code.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-249_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(0, 14, \"circle\");\n\ngoal.create(30, 14);\n\n// Gardez cette boucle for\nfor(var x = 1; x <= 6; x++)\n{\n  obstacle.create(x, 12 - x, \"circle\");\n  obstacle.create(x, 18 - x, \"circle\");\n  ?\n  \n}\n\n// Enlevez cette boucle for, après avoir\n// déplacé les instructions obstacle.create()\nfor(var x = 1; x <= 6; x++)\n{\n  // Déplacez ces instructions dans le bloc de code de la première boucle\n  obstacle.create(x + 8, x + 5, \"circle\");\n  obstacle.create(x + 8, x + 11, \"circle\");\n}\n\n// Enlevez cette boucle for, après avoir\n// déplacé les instructions obstacle.create()\nfor(var x = 1; x <= 6; x++)\n{\n  // Déplacez ces instructions dans le bloc de code de la première boucle\n  obstacle.create(x + 16, 12 - x, \"circle\");\n  obstacle.create(x + 16, 18 - x, \"circle\");\n}\n\n// Enlevez cette boucle for, après avoir\n// déplacé les instructions obstacle.create()\nfor(var x = 1; x <= 6; x++)\n{\n  // Déplacez ces instructions dans le bloc de code de la première boucle\n  obstacle.create(x + 24, x + 5, \"circle\");\n  obstacle.create(x + 24, x + 11, \"circle\");\n}\n\n// Limites du jeu\n// Ne pas modifier le code ci-dessous\nobstacle.create(0, 11, \"square\");\nobstacle.create(0, 17, \"square\");\n\nobstacle.create(7, 6, \"square\", \"faster\");\nobstacle.create(8, 6, \"square\", \"faster\");\nobstacle.create(7, 12, \"square\", \"faster\");\nobstacle.create(8, 12, \"square\", \"faster\");\n\nobstacle.create(15, 11, \"square\", \"faster\");\nobstacle.create(16, 11, \"square\", \"faster\");\nobstacle.create(15, 17, \"square\", \"faster\");\nobstacle.create(16, 17, \"square\", \"faster\");\n\nobstacle.create(23, 6, \"square\", \"faster\");\nobstacle.create(24, 6, \"square\", \"faster\");\nobstacle.create(23, 12, \"square\", \"faster\");\nobstacle.create(24, 12, \"square\", \"faster\");",
          "solution"      : "puck.create(0, 14, \"circle\");\n\ngoal.create(30, 14);\n\n// Gardez cette boucle for\nfor(var x = 1; x <= 6; x++)\n{\n  obstacle.create(x, 12 - x, \"circle\");\n  obstacle.create(x, 18 - x, \"circle\");\n  obstacle.create(x + 8, x + 5, \"circle\");\n  obstacle.create(x + 8, x + 11, \"circle\");\n  obstacle.create(x + 16, 12 - x, \"circle\");\n  obstacle.create(x + 16, 18 - x, \"circle\");\n  obstacle.create(x + 24, x + 5, \"circle\");\n  obstacle.create(x + 24, x + 11, \"circle\");\n}\n\n// Limites du jeu\n// Ne pas modifier le code ci-dessous\nobstacle.create(0, 11, \"square\");\nobstacle.create(0, 17, \"square\");\n\nobstacle.create(7, 6, \"square\", \"faster\");\nobstacle.create(8, 6, \"square\", \"faster\");\nobstacle.create(7, 12, \"square\", \"faster\");\nobstacle.create(8, 12, \"square\", \"faster\");\n\nobstacle.create(15, 11, \"square\", \"faster\");\nobstacle.create(16, 11, \"square\", \"faster\");\nobstacle.create(15, 17, \"square\", \"faster\");\nobstacle.create(16, 17, \"square\", \"faster\");\n\nobstacle.create(23, 6, \"square\", \"faster\");\nobstacle.create(24, 6, \"square\", \"faster\");\nobstacle.create(23, 12, \"square\", \"faster\");\nobstacle.create(24, 12, \"square\", \"faster\");",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-250",
          "name"          : "Une courte-pointe magique",
          "normalizedName": "une courte-pointe magique",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un casse-tête où tous les obstacles dont la coordonnée en x est impaire transforment la rondelle en cercle et tous les obstacles dont la coordonnée en x est paire transforment la rondelle en triangle. Votre casse-tête devrait ressembler à l'image ci-dessous.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter la boucle for. La variable de contrôle devrait s'appeler <var id=x>x</var> et avoir une valeur initiale de 3. La condition doit vérifier si la valeur de <var id=x>x</var> est plus petite ou égale à 27. L'incrémentation doit augmenter la valeur de <var id=x>x</var> de 3. <strong>Indice:</strong> vous ne pourrez pas utiliser l'opérateur d'incrémentation (++) ici.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction if. La condition de cette instruction if doit vérifier si la valeur de <var id=isDividableBy2>estDivisiblePar2</var> est égale à true (vrai). À l'intérieur du bloc de code de cette instruction if, donnez à la variable <var id=shape>forme</var> la valeur \n    <string>\"triangle\"</string>.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction else. À l'intérieur du bloc de code de cette instruction else, donnez à la variable <var id=shape>forme</var> la valeur \n    <string>\"circle\"</string>.</li></ol><div class=\"rs-image-wrapper\"><img class=\"runscript-image\" src=\"/images/cs-1_fr-CA/exercise-250_en-ca.png\"></div>",
          "boilerplate"   : "puck.create(0, 11, \"circle\");\n\ngoal.create(30, 11);\n\nvar forme;\n\nfor(?)\n{\n  var estDivisiblePar2 = estDivisiblePar(x, 2);\n\n  // Créez une instruction if ici\n  ?\n  \n  // Créez une instruction else ici\n  ?\n  \n  obstacle.create(x, 2, forme, \"change\");\n  obstacle.create(x, 5, forme, \"change\");\n  obstacle.create(x, 8, forme, \"change\");\n  obstacle.create(x, 11, forme, \"change\");\n  obstacle.create(x, 14, forme, \"change\");\n  obstacle.create(x, 17, forme, \"change\");\n  obstacle.create(x, 20, forme, \"change\");\n}",
          "solution"      : "puck.create(0, 11, \"circle\");\n\ngoal.create(30, 11);\n\nvar forme;\n\nfor(var x = 3; x <= 27; x = x + 3)\n{\n  var estDivisiblePar2 = estDivisiblePar(x, 2);\n\n  // Créez une instruction if ici\n  if(estDivisiblePar2 == true)\n  {\n    forme = \"triangle\";\n  }\n  // Créez une instruction else ici\n  else\n  {\n    forme = \"circle\";\n  }\n\n  obstacle.create(x, 2, forme, \"change\");\n  obstacle.create(x, 5, forme, \"change\");\n  obstacle.create(x, 8, forme, \"change\");\n  obstacle.create(x, 11, forme, \"change\");\n  obstacle.create(x, 14, forme, \"change\");\n  obstacle.create(x, 17, forme, \"change\");\n  obstacle.create(x, 20, forme, \"change\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-012",
          "name"          : "Quiz 12",
          "description"   : "Les boucles for",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-012_q-01",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>for(var x = 0; x &lt; 3; x = x + 1)\n{\n  console.log(x);\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-01_a-01",
                  "value" : 0,
                  "answer": "<div><samp>0 1 2 3</samp></div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-012_q-01_a-02",
                  "value"      : 2,
                  "answer"     : "<div><samp>0 1 2</samp></div>",
                  "explanation": "La variable <var>x</var> commence à 0 et augmente de un jusqu'à ce qu'elle atteigne la valeur 3. Le chiffre 3 n'est jamais affiché, puisque la boucle s'arrête quand <var>x</var> atteint 3 et aucune autre valeur n'est affichée."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-01_a-03",
                  "value" : 0,
                  "answer": "<div><samp>3 2 1 0</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-01_a-04",
                  "value" : 0,
                  "answer": "<div><samp>2 1 0</samp></div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-012_q-02",
              "question": "<div>Que signifie <em>incrémenter</em> la valeur d'une variable?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>Donne une nouvelle valeur à une variable</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-02_a-02",
                  "value" : 0,
                  "answer": "<div>Supprimer la valeur d'une variable</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-02_a-03",
                  "value" : 0,
                  "answer": "<div>Diminuer la valeur d'une variable</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-012_q-02_a-04",
                  "value"      : 2,
                  "answer"     : "<div>Augmenter la valeur d'une variable</div>",
                  "explanation": "Le terme <em>incrémenter</em> signifie augmenter la valeur d'une variable."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-012_q-03",
              "question": "<div>Vrai ou faux. L'opérateur d'incrémentation (<code>++</code>) augmente la valeur d'une variable de un.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-012_q-03_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "L'opérateur d'incrémentation, utilisé sur la variable <var>x</var>, est égal à l'instruction: <code>x = x + 1;</code>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-012_q-04",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>for(var x = 3; x &gt; 0; x--)\n{\n  console.log(x);\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-04_a-01",
                  "value" : 0,
                  "answer": "<div><samp>3 2 1 0</samp></div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-012_q-04_a-02",
                  "value"      : 2,
                  "answer"     : "<div><samp>3 2 1</samp></div>",
                  "explanation": "La variable <var>x</var> commence à 3 et diminue de un jusqu'à ce qu'elle atteigne la valeur de zéro. Le chiffre zéro n'est jamais affiché, puisque la boucle s'arrête quand <var>x</var> atteint zéro et aucune autre valeur n'est affichée."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-04_a-03",
                  "value" : 0,
                  "answer": "<div><samp>1 2 3</samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-04_a-04",
                  "value" : 0,
                  "answer": "<div><samp>0 1 2 3<samp></div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-012_q-05",
              "question": "<div>Vrai ou faux. Une boucle <code>for</code> ne peut jamais entrer dans une boucle infinie.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-05_a-01",
                  "value" : 0,
                  "answer": "<div>Vrai</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-012_q-05_a-02",
                  "value"      : 1,
                  "answer"     : "<div>Faux</div>",
                  "explanation": "Les boucles <code>for</code> entrent aussi dans une boucle infinie lorsque leur condition ne peut jamais devenir fausse."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-012_q-06",
              "question": "<div>Quelle est l'erreur dans la boucle <code>for</code> suivante?</div>\n<pre class=\"language-javascript\"><code>for(var x = 3; x++)\n{\n  console.log(x);\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-012_q-06_a-01",
                  "value"      : 2,
                  "answer"     : "<div>La condition de la boucle est manquante (l'élément du milieu)</div>",
                  "explanation": "Les boucles <code>for</code> ont toujours trois éléments: l'initialisation, la condition et l'incrémentation ou décrémentation."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>La variable de contrôle d'une boucle ne peut pas s'appeler \"x\"</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>L'opérateur d'incrémentation (<code>++</code>) ne peut pas être utilisé dans une boucle</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-06_a-04",
                  "value" : 0,
                  "answer": "<div>Toutes ces réponses</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-012_q-07",
              "question": "<div>Dans le code suivant, un point-virgule a été ajouté immédiatement après la boucle <code>for</code>. Le point-virgule causera-t-il une boucle infinie?</div>\n<pre class=\"language-javascript\"><code>for(var x = 0; x &lt; 3; x = x + 1);\n{\n  console.log(x);\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-012_q-07_a-01",
                  "value" : 0,
                  "answer": "<div>Oui, le point-virgule ne permettra pas à la valeur de la variable de contrôle de changer, ce qui fera entrer la boucle dans une boucle infinie.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-012_q-07_a-02",
                  "value"      : 1,
                  "answer"     : "<div>Non, le bloc de code de la boucle sera vide et la boucle ne fera rien.</div>",
                  "explanation": "Puisque l'incrémentation de la variable de contrôle est faite à l'intérieur de la boucle elle-même, la boucle ne sera pas infinie. Cependant, les itérations ne feront rien."
                }
              ]
            }
          ],
          "normalizedName": "quiz 12",
          "trialMode"     : false
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-270",
          "name"          : "Les types de boucles",
          "normalizedName": "les types de boucles",
          "type"          : "s",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-270_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-270_fr-ca.vtt"
        },
        {
          "_id"           : "cs-1_fr-CA_project-25",
          "name"          : "Projet 25 - Comparer deux boucles",
          "normalizedName": "projet 25 - comparer deux boucles",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-216",
          "name"          : "For ou while?",
          "normalizedName": "for ou while",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-216_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-216_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser une boucle for pour créer un programme qui compte à rebours de 10 à 0.</li></ol>",
          "boilerplate"   : "?\n\ndecollage();",
          "solution"      : "for(var decompte = 10; decompte >= 0; decompte--)\n{\n  afficherCompte(decompte);\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"incremental loop\">Boucles incrémentales</h3>\n<div class=\"text\">Les boucles qui <concept ref=\"iteration\">itèrent</concept> un nombre prédéterminé de fois sont appelées boucles incrémentales. Les variables de contrôle de ces boucles ont toujours une valeur de départ et de fin déterminées d'avance.</div><div class=\"text\">Un exemple de boucle incrémentale est un programme de compte à rebours. Les <concept ref=\"for loop\">boucles for</concept> sont le plus souvent utilisées pour les boucles incrémentales.</div>\n<h3 class=\"title\" ref=\"conditional loop\">Boucles conditionnelles</h3>\n<div class=\"text\">Les boucles qui <concept ref=\"iteration\">itèrent</concept> un nombre inconnu de fois sont appelées boucles conditionnelles. Ces boucles se terminent habituellement quand l'utilisateur entre une valeur prédéterminée.</div><div class=\"text\">Un exemple de boucle conditionnelle est un menu dans un programme. Les <concept ref=\"while loop\">boucles while</concept> sont le plus souvent utilisées pour les boucles conditionnelles.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-217",
          "name"          : "Tout est dans la condition",
          "normalizedName": "tout est dans la condition",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Pratiquons-nous à utiliser le bon type de boucle pour un programme. Nous allons construire un programme qui demande aux hamstronautes d'entrer \"oui\" s'ils sont prêts pour le décollage. Tant qu'ils répondent autre chose que \"oui\", le programme continue de leur demander s'ils sont prêts.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=readyForLiftOff>pretsPourDecollage</var> et lui donner une valeur initiale de \n    <string>\"non\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une boucle while. La condition de cette boucle while doit vérifier si la valeur de <var id=readyForLiftOff>pretsPourDecollage</var> n'est <strong>pas</strong> égale à \n    <string>\"oui\"</string>. À l'intérieur du bloc de code de cette boucle while, donnez à <var id=readyForLiftOff>pretsPourDecollage</var> la valeur retournée par une instruction \n    <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: \n    <string>\"Êtes-vous prêts pour le décollage? (oui/non)\"</string>.</li></ol>",
          "boilerplate"   : "?\n\n?\n\ndecollage();",
          "solution"      : "var pretsPourDecollage = \"non\";\n\nwhile(pretsPourDecollage != \"oui\")\n{\n  pretsPourDecollage = prompt(\"Êtes-vous prêts pour le décollage? (oui/non)\");\n}\n\ndecollage();",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-218",
          "name"          : "De while à for",
          "normalizedName": "de while a for",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-218_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-218_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer la boucle while par une boucle for. Le programme devrait fonctionner de la même façon avant et après vos changements.</li></ol>",
          "boilerplate"   : "var heures = 0;\n\nwhile(heures < 24)\n{\n  console.log(heures + \" heures se sont écoulées.\");\n  heures++;\n}",
          "solution"      : "for(var heures = 0; heures < 24; heures++)\n{\n  console.log(heures + \" heures se sont écoulées.\");\n  \n}",
          "tips"          : "<h3 class=\"title\" ref=\"changing loop\">Transformation d'une boucle while en boucle for</h3>\n<div class=\"text\">Nous pouvons toujours utiliser une <concept ref=\"while loop\">boucle while</concept> ou une <concept ref=\"for loop\">boucle for</concept> dans n'importe quelle situation. Pour ce faire, nous devons identifier les trois éléments: la <concept ref=\"control variable\">variable de contrôle</concept>, la <concept ref=\"condition\">condition</concept> et l'<concept ref=\"increment\">incrémentation</concept>. Puis, nous choisissons la boucle qui est la plus appropriée à notre problème.</div>\n<div class=\"code-sample-title\">Transformation d'une boucle while en boucle for</div><pre class=\"codeBlock\">var x = 0; // variable de contrôle (premier élément de la boucle for)\nwhile(x < 2) // condition (deuxième élément de la boucle for)\n{\n  console.log(\"La valeur de x est \" + x);\n  x = x + 1; // incrémentation (troisième élément de la boucle for)\n}\n\n// la même boucle, mais avec une boucle for\nfor(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"La valeur de x est \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, nous voyons que la variable de contrôle (var x = 0), la condition (x &lt; 2) et l'incrémentation (x = x + 1) sont les mêmes pour les deux boucles, mais ils apparaissent à différents endroits.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-219",
          "name"          : "Une étrange sentinelle",
          "normalizedName": "une etrange sentinelle",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Les boucles while sont idéales pour les programmes qui doivent se terminer lorsqu'une certaine valeur est entrée. Ce programme calcule le poids des bagages d'un hamstronaute et s'assure qu'ils ne dépassent pas le poids limite de 100 kg. Lorsque les hamstronautes ont fini d'enregistrer le poids de leurs bagages, ils entrent un poids de -1 pour terminer le programme. Pouvez-vous compléter le programme?</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une boucle while. La condition de cette boucle while doit vérifier si la valeur de <var id=currentItem>poidsItem</var> n'est <strong>pas</strong> égale à -1. N'oubliez pas d'entourer les instructions qui suivent la boucle dans un bloc de code.</li></ol>",
          "boilerplate"   : "var poidsItem = 0;\nvar poidsTotal = 0;\n\n?\n\n// Ces instructions doivent être à l'intérieur du bloc de code de la boucle\npoidsItem = prompt(\"Entrez le poids de l'item (-1 pour quitter)\");\npoidsItem = Number(poidsItem);\nif(poidsItem != -1)\n{\n  poidsTotal = poidsTotal + poidsItem;\n}\n\n// Ces instructions doivent être à l'extérieur du bloc de code de la boucle\nif(poidsTotal > 100)\n{\n  console.log(\"Les bagages dépassent le poids maximal!\");\n}\nelse\n{\n  console.log(\"Le poids des bagages est sécuritaire. Bonne expédition!\");\n}",
          "solution"      : "var poidsItem = 0;\nvar poidsTotal = 0;\n\nwhile(poidsItem != -1)\n{\n  // Ces instructions doivent être à l'intérieur du bloc de code de la boucle\n  poidsItem = prompt(\"Entrez le poids de l'item (-1 pour quitter)\");\n  poidsItem = Number(poidsItem);\n  if(poidsItem != -1)\n  {\n    poidsTotal = poidsTotal + poidsItem;\n  }\n}\n\n// Ces instructions doivent être à l'extérieur du bloc de code de la boucle\nif(poidsTotal > 100)\n{\n  console.log(\"Les bagages dépassent le poids maximal!\");\n}\nelse\n{\n  console.log(\"Le poids des bagages est sécuritaire. Bonne expédition!\");\n}",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"if statement\">Instruction if</h3>\n<div class=\"text\">L'instruction if est un type d'instruction conditionnelle qui nous permet de contrôler si un <concept ref=\"code block\">bloc de code</concept> sera exécuté. Elles comportent deux parties: une <concept ref=\"condition\">condition booléenne</concept> et du code qui sera exécuté si la condition est vraie.</div>\n<div class=\"code-sample-title\">Exemple d'instruction if</div><pre class=\"codeBlock\">var argent = 8;\nif(argent > 5) // la condition booléenne, entre parenthèses\n{\n  // les instructions qui se trouvent entre les accolades ({})\n  // seront seulement exécutées si argent est plus grand que 5\n  console.log(\"Vous pouvez acheter le jeu!\");\n}</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, si la <concept ref=\"variable value\">valeur</concept> de la variable argent est plus grande que 5, alors l'instruction console.log() est exécutée, sinon aucune instruction n'est exécutée.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-220",
          "name"          : "Une incrémentation différente",
          "normalizedName": "une incrementation differente",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-220_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-220_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une boucle while. La condition de la boucle while doit vérifier si la valeur de <var id=oxygenTanks>bonbonnesOxygene</var> est plus grande que 0.</li></ol>",
          "boilerplate"   : "var bonbonnesOxygene = 10;\nvar choix = 0;\nvar hamstronautes = 0;\n\n?\n{\n  choix = prompt(\"Il reste \" + bonbonnesOxygene + \" bonbonnes d'oxygène, combien en voulez-vous? (1 ou 2)\");\n  choix = Number(choix);\n\n  if(choix == 1)\n  {\n    bonbonnesOxygene = bonbonnesOxygene - 1;\n    hamstronautes++;\n  }\n  else if(choix == 2 && bonbonnesOxygene > 1)\n  {\n    bonbonnesOxygene = bonbonnesOxygene - 2;\n    hamstronautes++;\n  }\n}\n\nconsole.log(\"Avec 10 bonbonnes d'oxygène, \" + hamstronautes + \" hamstronautes peuvent aller en mission.\");",
          "solution"      : "var bonbonnesOxygene = 10;\nvar choix = 0;\nvar hamstronautes = 0;\n\nwhile(bonbonnesOxygene > 0)\n{\n  choix = prompt(\"Il reste \" + bonbonnesOxygene + \" bonbonnes d'oxygène, combien en voulez-vous? (1 ou 2)\");\n  choix = Number(choix);\n\n  if(choix == 1)\n  {\n    bonbonnesOxygene = bonbonnesOxygene - 1;\n    hamstronautes++;\n  }\n  else if(choix == 2 && bonbonnesOxygene > 1)\n  {\n    bonbonnesOxygene = bonbonnesOxygene - 2;\n    hamstronautes++;\n  }\n}\n\nconsole.log(\"Avec 10 bonbonnes d'oxygène, \" + hamstronautes + \" hamstronautes peuvent aller en mission.\");",
          "tips"          : "<h3 class=\"title\" ref=\"conditional increment\">Incrémentation de la variable de contrôle selon une condition</h3>\n<div class=\"text\">L'<concept ref=\"increment\">incrémentation</concept> d'une <concept ref=\"loops\">boucle</concept> dépend parfois d'une certaine condition dans un programme. Il peut alors être difficile d'utiliser une <concept ref=\"for loop\">boucle for</concept>.</div><div class=\"text\">Regardez le programme suivant:</div>\n<div class=\"code-sample-title\">Exemple d'incrémentation selon une condition</div><pre class=\"codeBlock\">var unNombre;\nvar points = 0;\n\nwhile(points < 100)\n{\n  unNombre = nombreAuHasard(1, 20); // retourne un nombre au hasard entre 1 et 20\n\n  if(unNombre < 10) // si le nombre est plus petit que 10\n  {\n    points = points + 1; // augmenter la valeur de la variable de contrôle\n  }\n  else\n  {\n    points = points - 1; // diminuer la valeur de la variable de contrôle\n  }\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la valeur de la variable points peut être augmentée ou diminuée de un. Il serait difficile d'écrire ce code dans l'<concept ref=\"for loop components\">élément d'incrémentation</concept> d'une boucle for, donc il est préférable ici d'utiliser une <concept ref=\"while loop\">boucle while</concept>.</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-252",
          "name"          : "Un séjour sur Neptune",
          "normalizedName": "un sejour sur neptune",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>La durée d'un jour sur une planète est déterminée par le temps que met la planète à faire une rotation complète sur elle-même. Sur certaines planètes, le jour peut durer jusqu'à 58 jours terrestres. Sur d'autres planètes, le jour ne dure que 12 heures! Construisons un programme qui nous permet d'identifier la planète sur laquelle le jour dure le plus longtemps.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par le type de boucle le plus approprié. La variable de contrôle de la boucle devrait s'appeler <var id=planetNumber>numeroPlanete</var> et sa valeur initiale doit être 0. La condition de la boucle doit vérifier si la valeur de <var id=planetNumber>numeroPlanete</var> est plus petite que 8. L'incrémentation de la boucle doit augmenter la valeur de <var id=planetNumber>numeroPlanete</var> de 1.</li></ol>",
          "boilerplate"   : "var plusLongJour = 0;\nvar nomPlanetePlusLongJour = \"\";\nvar dureeJour;\nvar nomPlanete;\n\n?\n{\n  nomPlanete = obtenirNomPlanete(numeroPlanete);\n  dureeJour = obtenirDureeJour(nomPlanete);\n\n  if(dureeJour > plusLongJour)\n  {\n    plusLongJour = dureeJour;\n    nomPlanetePlusLongJour = nomPlanete;\n  }\n}\n\nconsole.log(\"La planète dont les jours sont les plus longs est \" + nomPlanetePlusLongJour + \", où les jours durent \" + plusLongJour + \" jours terrestres.\");",
          "solution"      : "var plusLongJour = 0;\nvar nomPlanetePlusLongJour = \"\";\nvar dureeJour;\nvar nomPlanete;\n\nfor(var numeroPlanete = 0; numeroPlanete < 8; numeroPlanete++)\n{\n  nomPlanete = obtenirNomPlanete(numeroPlanete);\n  dureeJour = obtenirDureeJour(nomPlanete);\n\n  if(dureeJour > plusLongJour)\n  {\n    plusLongJour = dureeJour;\n    nomPlanetePlusLongJour = nomPlanete;\n  }\n}\n\nconsole.log(\"La planète dont les jours sont les plus longs est \" + nomPlanetePlusLongJour + \", où les jours durent \" + plusLongJour + \" jours terrestres.\");",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"boolean\">Booléens</h3>\n<div class=\"text\">Les booléens sont un <concept ref=\"data type\">type de données</concept> qui ont seulement deux valeurs possibles: true (vrai) ou false (faux).</div><div class=\"text\">Les expressions qui utilisent un <concept ref=\"relational operators\">opérateur relationnel</concept> retournent une valeur booléenne.</div>\n<div class=\"code-sample-title\">Exemples de valeurs booléennes</div><pre class=\"codeBlock\">var tuAimesLesCereales = true;\nvar estPlusGrandQue18 = 10 > 18; // estPlusGrandQue18 sera false (faux)\nvar age = 19;\nvar ageEstPlusGrandQue18 = age > 18; // ageEstPlusGrandQue18 sera true (vrai)</pre>\n<h3 class=\"title\" ref=\"and operator\">Opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">L'opérateur ET est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si deux ou plusieurs <concept ref=\"boolean\">valeurs booléennes</concept> sont vraies.</div><div class=\"text\">Une expression qui utilise l'opérateur ET est seulement vraie si toutes les conditions qui forment l'expression sont vraies.</div><div class=\"text\">L'opérateur s'écrit avec deux perluètes (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur AND</div><pre class=\"codeBlock\">var resultat = true && true; // resultat est true (vrai)\nresultat = false && true; // resultat est false (faux)\nresultat = true && false; // resultat est false (faux)\nresultat = false && false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-253",
          "name"          : "Bonhomme pendu",
          "normalizedName": "bonhomme pendu",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un jeu de bonhomme pendu! Le joueur a 10 chances de deviner le mot secret. À chaque itération, le joueur doit essayer de deviner une lettre. Le joueur gagne s'il devine le mot en 10 essais ou moins, sinon il perd!</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par le type de boucle le plus approprié. La condition de cette boucle doit vérifier si la valeur de <var id=attempts>essais</var> est plus petite que 10 <strong>et</strong> si la valeur de <var id=secretFound>motTrouve</var> est égale à false (faux).</li></ol>",
          "boilerplate"   : "var motSecret = verifierLettre();\nvar motTrouve = false;\nvar essais = 0;\n\n?\n{\n  var lettre = prompt(\"Lettres trouvées: \" + motSecret + \". Il vous reste \" + (10 - essais) + \" essais. Entrez une lettre!\");\n\n  motSecret = verifierLettre(lettre);\n\n  motTrouve = verifierSiMotTrouve();\n\n  essais++;\n}\n\nif(motTrouve == true)\n{\n  console.log(\"Vous avez trouvé le mot secret: \" + motSecret);\n}\nelse\n{\n  console.log(\"Vous n'avez pas trouvé le mot secret\");\n}",
          "solution"      : "var motSecret = verifierLettre();\nvar motTrouve = false;\nvar essais = 0;\n\nwhile(essais < 10 && motTrouve == false)\n{\n  var lettre = prompt(\"Lettres trouvées: \" + motSecret + \". Il vous reste \" + (10 - essais) + \" essais. Entrez une lettre!\");\n\n  motSecret = verifierLettre(lettre);\n\n  motTrouve = verifierSiMotTrouve();\n\n  essais++;\n}\n\nif(motTrouve == true)\n{\n  console.log(\"Vous avez trouvé le mot secret: \" + motSecret);\n}\nelse\n{\n  console.log(\"Vous n'avez pas trouvé le mot secret\");\n}",
          "tips"          : "<h4 class=\"no-content\">No tips</h4>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-254",
          "name"          : "Se perdre en conjectures",
          "normalizedName": "se perdre en conjectures",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>La conjecture de Collatz est un phénomène mathématique intéressant. Selon cette conjecture, tout nombre positif entier arrive à une valeur de 1 après un nombre fixé d'itérations lorsque nous lui appliquons l'algorithme décrit ci-dessous. Personne n'a jamais trouvé un nombre qui n'arrivait pas à 1. Construisons un programme à partir de l'algorithme et essayons de trouver un nombre qui n'arrive pas à la valeur de 1!</div><div class=text>Algorithme:</div><ol class=algorithm><li>Commencer avec n'importe quel nombre positif entier (un nombre sans décimales).</li><li>Si le nombre est pair, diviser le nombre par 2 (n = n / 2).</li><li>Si le nombre est impair, multiplier le nombre par 3 et ajouter 1 (n = 3 x n + 1).</li><li>Si le nombre est maintenant égal à 1, arrêter.</li><li>Si le nombre n'est pas égal à 1, retourner à l'étape (b).</li></ol><div class=text>Par exemple, supposons que notre nombre de départ est 12. Nous obtenons la séquence suivante:</div><pre><samp>12 (pair, diviser par 2)\n 6 (pair, diviser par 2)\n 3 (impair, multiplier par 3 et ajouter 1)\n10 (pair, diviser par 2)\n 5 (impair, multiplier par 3 et ajouter 1)\n16 (pair, diviser par 2)\n 8 (pair, diviser par 2)\n 4 (pair, diviser par 2)\n 2 (pair, diviser par 2)\n 1.</samp></pre></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par le type de boucle le plus approprié. La boucle doit seulement arrêter lorsque la valeur de <var id=temporaryNumber>nombreTemporaire</var> est égale à 1.</li></ol>",
          "boilerplate"   : "var monNombre = prompt(\"Entrez le nombre de départ (doit être plus grand que zéro)\");\nvar nombreIterations = 0;\n\nmonNombre = Number(monNombre);\n\nvar nombreTemporaire = monNombre;\n\n?\n{\n  var estDivisiblePar2 = estDivisiblePar(nombreTemporaire, 2);\n\n  if(estDivisiblePar2 == false)\n  {\n    nombreTemporaire = nombreTemporaire * 3 + 1;\n  }\n  else\n  {\n    nombreTemporaire = nombreTemporaire / 2;\n  }\n\n  nombreIterations++;\n}\n\nconsole.log(\"Le nombre est devenu \" + nombreTemporaire + \", après \" + nombreIterations + \" itérations\");",
          "solution"      : "var monNombre = prompt(\"Entrez le nombre de départ (doit être plus grand que zéro)\");\nvar nombreIterations = 0;\n\nmonNombre = Number(monNombre);\n\nvar nombreTemporaire = monNombre;\n\nwhile(nombreTemporaire != 1)\n{\n  var estDivisiblePar2 = estDivisiblePar(nombreTemporaire, 2);\n\n  if(estDivisiblePar2 == false)\n  {\n    nombreTemporaire = nombreTemporaire * 3 + 1;\n  }\n  else\n  {\n    nombreTemporaire = nombreTemporaire / 2;\n  }\n\n  nombreIterations++;\n}\n\nconsole.log(\"Le nombre est devenu \" + nombreTemporaire + \", après \" + nombreIterations + \" itérations\");",
          "tips"          : "<h3 class=\"title\" ref=\"while loop\">Boucles while</h3>\n<div class=\"text\">Les boucles while sont un type de <concept ref=\"loops\">boucle</concept> qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div>\n<div class=\"code-sample-title\">Exemple de boucle while</div><pre class=\"codeBlock\">var x = 0;\nwhile(x < 2)\n{\n  console.log(\"x est égal à: \" + x);\n  x = x + 1;\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"and operator\">Opérateur ET (&amp;&amp;)</h3>\n<div class=\"text\">L'opérateur ET est un <concept ref=\"logical operators\">opérateur logique</concept> qui nous permet de vérifier si deux ou plusieurs <concept ref=\"boolean\">valeurs booléennes</concept> sont vraies.</div><div class=\"text\">Une expression qui utilise l'opérateur ET est seulement vraie si toutes les conditions qui forment l'expression sont vraies.</div><div class=\"text\">L'opérateur s'écrit avec deux perluètes (&amp;&amp;).</div>\n<div class=\"code-sample-title\">Exemple de l'opérateur AND</div><pre class=\"codeBlock\">var resultat = true && true; // resultat est true (vrai)\nresultat = false && true; // resultat est false (faux)\nresultat = true && false; // resultat est false (faux)\nresultat = false && false; // resultat est false (faux)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_project-26",
          "name"          : "Projet 26 - Le jeu de la vie",
          "normalizedName": "projet 26 - le jeu de la vie",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-221",
          "name"          : "Une colonie grandissante",
          "normalizedName": "une colonie grandissante",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-221_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-221_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter la boucle for. La variable de contrôle devrait s'appeler <var id=col>col</var> et avoir une valeur initiale de 0. La condition de la boucle doit vérifier si la valeur de <var id=col>col</var> est plus petite que la valeur retournée par l'instruction <concept ref=getColumns>obtenirColonnes()</concept>. L'incrémentation doit augmenter la valeur de <var id=col>col</var> de un.</li><li class=code-item>Compléter l'instruction if. Le premier point d'interrogation dans sa condition doit être remplacé par une condition qui vérifie si la valeur de <var id=cellState>etatCellule</var> est égale à <string>\"vivante\"</string>. Le deuxième point d'interrogation doit être remplacé par une condition qui vérifie si la valeur de <var id=neighbors>voisins</var> est plus petite que 2 ou plus grande que 3.</li><li class=code-item>Compléter l'instruction else if. Le premier point d'interrogation dans sa condition doit être remplacé par une condition qui vérifie si la valeur de <var id=cellState>etatCellule</var> est égale à <string>\"vide\"</string>. Le deuxième point d'interrogation doit être remplacé par une condition qui vérifie si la valeur de <var id=neighbors>voisins</var> est égale à 3.</li></ol>",
          "boilerplate"   : "initialiserGrille();\n\nfor(?)\n{\n  var etatCellule = obtenirEtatCellule(0, col);\n  var voisins = obtenirVoisins(0, col);\n\n  if(? && (?))\n  {\n    viderCellule(0, col);\n  }\n  else if(? && ?)\n  {\n    remplirCellule(0, col);\n  }\n}\n\nmettreAJourGrille();",
          "solution"      : "initialiserGrille();\n\nfor(var col = 0; col < obtenirColonnes(); col++)\n{\n  var etatCellule = obtenirEtatCellule(0, col);\n  var voisins = obtenirVoisins(0, col);\n\n  if(etatCellule == \"vivante\" && (voisins < 2 || voisins > 3))\n  {\n    viderCellule(0, col);\n  }\n  else if(etatCellule == \"vide\" && voisins == 3)\n  {\n    remplirCellule(0, col);\n  }\n}\n\nmettreAJourGrille();",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"relational operators\">Opérateurs relationnels</h3>\n<div class=\"text\">Les opérateurs relationnels nous permettent de comparer des valeurs. Elles retournent toujours une valeur <concept ref=\"boolean\">booléenne</concept>.</div><div class=\"text\">Les opérateurs relationnels sont: plus grand (&gt;), plus petit (&lt;), plus grand ou égal (&gt;=), plus petit ou égal (&lt;=), égalité (==) et inégalité (!=).</div>\n<div class=\"code-sample-title\">Exemples d'opérateurs relationnels</div><pre class=\"codeBlock\">var resultat = 10 > 5; // true (vrai), car 10 est plus grand que 5\nresultat = 10 < 5; // false (faux), car 10 n'est pas plus petit que 5\nresultat = 10 <= 10; // true (vrai), car 10 est égal à 10\nresultat = 10 < 10; // false (faux), car 10 n'est pas plus petit que 10\nresultat = 15 == 10; // false (faux), car 15 n'est pas égal à 10\nresultat = 15 == 15; // true (vrai), car 15 est égal à 15\nresultat = 5 != 7; // true (vrai), car 5 n'est pas égal à 7\nresultat = 5 != 5; // false (faux), car 5 est égal à 5</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-222",
          "name"          : "Le voisinage",
          "normalizedName": "le voisinage",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-222_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-222_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Compléter la boucle for. La variable de contrôle devrait s'appeler <var id=row>ligne</var> et avoir une valeur initiale de 0. La condition de la boucle doit vérifier si la valeur de <var id=row>ligne</var> est plus petite que la valeur retournée par l'instruction <concept ref=getRows>obtenirLignes()</concept>. L'incrémentation doit augmenter la valeur de <var id=row>ligne</var> de un.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une accolade ouvrante ({).</li><li class=code-item>Remplacer le troisième point d'interrogation par une accolade fermante (}).</li></ol>",
          "boilerplate"   : "initialiserGrille();\n\nfor(?)\n?\nfor(var col = 0; col < obtenirColonnes(); col++)\n{\n  var etatCellule = obtenirEtatCellule(ligne, col);\n  var voisins = obtenirVoisins(ligne, col);\n\n  if(etatCellule == \"vivante\" && (voisins < 2 || voisins > 3))\n  {\n    viderCellule(ligne, col);\n  }\n  else if(etatCellule == \"vide\" && voisins == 3)\n  {\n    remplirCellule(ligne, col);\n  }\n}\n?\n\nmettreAJourGrille();",
          "solution"      : "initialiserGrille();\n\nfor(var ligne = 0; ligne < obtenirLignes(); ligne++)\n{\n  for(var col = 0; col < obtenirColonnes(); col++)\n  {\n    var etatCellule = obtenirEtatCellule(ligne, col);\n    var voisins = obtenirVoisins(ligne, col);\n\n    if(etatCellule == \"vivante\" && (voisins < 2 || voisins > 3))\n    {\n      viderCellule(ligne, col);\n    }\n    else if(etatCellule == \"vide\" && voisins == 3)\n    {\n      remplirCellule(ligne, col);\n    }\n  }\n}\n\nmettreAJourGrille();",
          "tips"          : "<h3 class=\"title\" ref=\"nested loops\">Boucles imbriquées</h3>\n<div class=\"text\">Nous pouvons mettre une boucle à l'intérieur d'une autre boucle pour créer une boucle imbriquée (d'une façon semblable aux <concept ref=\"nested statements\">instructions conditionnelles imbriquées</concept>). La première boucle s'appelle la boucle externe, tandis que la deuxième boucle s'appelle la boucle interne. Les boucles imbriquées peuvent être créées avec des <concept ref=\"for loop\">boucles for</concept> ou des <concept ref=\"while loop\">boucles while</concept>.</div>\n<div class=\"code-sample-title\">Exemple de boucle imbriquée</div><pre class=\"codeBlock\">console.log(\"début de la boucle externe\");\nfor(var x = 0; x < 2; x = x + 1) // boucle externe\n{\n  console.log(\"début de la boucle interne\");\n  for(var y = 0; y < 2; y = y + 1) // boucle interne\n  {\n    console.log(\"x est égal à \" + x + \" et y est égal à \" + y);\n  }\n  console.log(\"fin de la boucle interne\");\n}\nconsole.log(\"fin de la boucle externe\");</pre>\n<div class=\"text\">Le programme commence par faire la première itération de la boucle externe, ce qui débute l'exécution de toutes les itérations de la boucle interne. Puis, le programme passe à l'itération suivante de la boucle externe, ce qui débute à nouveau toutes les itérations de la boucle interne. Le programme continue jusqu'à ce que la boucle externe termine toutes ses itérations.</div><div class=\"text\">La sortie du programme ci-dessus est comme suit:</div><div class=\"text\">début de la boucle externe</div><div class=\"text\">début de la boucle interne</div><div class=\"text\">x est égal à 0 et y est égal à 0</div><div class=\"text\">x est égal à 0 et y est égal à 1</div><div class=\"text\">fin de la boucle interne</div><div class=\"text\">début de la boucle interne</div><div class=\"text\">x est égal à 1 et y est égal à 0</div><div class=\"text\">x est égal à 1 et y est égal à 1</div><div class=\"text\">fin de la boucle interne</div><div class=\"text\">fin de la boucle externe</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-223",
          "name"          : "Échantillon 9147",
          "normalizedName": "echantillon 9147",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Modifions notre programme en ajoutant une entrée. L'utilisateur pourra entrer un numéro d'échantillon qui servira à déterminer les cellules qui contiennent des bactéries.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=sampleNumber>echantillon</var>. Donnez-lui la valeur retournée par une instruction \n    <concept ref=prompt>prompt()</concept> demandant à l'utilisateur: \n    <string>\"Entrez un numéro d'échantillon (1 à 10000)\"</string>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une instruction qui donne à <var id=sampleNumber>echantillon</var> la valeur de <var id=sampleNumber>echantillon</var> convertie en nombre. Vous devrez utiliser l'instruction \n    <concept ref=Number>Number()</concept>.</li><li class=code-item>Remplacer le troisième point d'interrogation par la variable <var id=sampleNumber>echantillon</var>.</li></ol>",
          "boilerplate"   : "?\n?\n\ninitialiserGrille(?);\n\nfor(var ligne = 0; ligne < obtenirLignes(); ligne++)\n{\n  for(var col = 0; col < obtenirColonnes(); col++)\n  {\n    var etatCellule = obtenirEtatCellule(ligne, col);\n    var voisins = obtenirVoisins(ligne, col);\n\n    if(etatCellule == \"vivante\" && (voisins < 2 || voisins > 3))\n    {\n      viderCellule(ligne, col);\n    }\n    else if(etatCellule == \"vide\" && voisins == 3)\n    {\n      remplirCellule(ligne, col);\n    }\n  }\n}\n\nmettreAJourGrille();",
          "solution"      : "var echantillon = prompt(\"Entrez un numéro d'échantillon (1 à 10000)\");\nechantillon = Number(echantillon);\n\ninitialiserGrille(echantillon);\n\nfor(var ligne = 0; ligne < obtenirLignes(); ligne++)\n{\n  for(var col = 0; col < obtenirColonnes(); col++)\n  {\n    var etatCellule = obtenirEtatCellule(ligne, col);\n    var voisins = obtenirVoisins(ligne, col);\n\n    if(etatCellule == \"vivante\" && (voisins < 2 || voisins > 3))\n    {\n      viderCellule(ligne, col);\n    }\n    else if(etatCellule == \"vide\" && voisins == 3)\n    {\n      remplirCellule(ligne, col);\n    }\n  }\n}\n\nmettreAJourGrille();",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"prompt()\">Instruction prompt()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> prompt() crée une <concept ref=\"input\">entrée</concept> de type texte. L'instruction a un <concept ref=\"parameter\">paramètre</concept>. Normalement, le paramètre est une <concept ref=\"string\">chaîne</concept>. La valeur du paramètre est affichée au-dessus de la boîte de saisie, où l'utilisateur peut saisir du texte.</div><div class=\"text\">L'instruction retourne une chaîne, qui est la valeur entrée par l'utilisateur dans la boîte de saisie. Nous devons habituellement conserver cette valeur dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard.</div>\n<div class=\"code-sample-title\">Exemples de prompt()</div><pre class=\"codeBlock\">var monNom = prompt(\"Quel est votre nom?\"); // l'utilisateur entre: EduCode\nconsole.log(\"Votre nom est \" + monNom); // affiche le texte: Votre nom est EduCode\nvar monAge = prompt(\"Quel âge avez-vous?\"); // l'utilisateur entre: 16\nconsole.log(\"Vous avez \" + monAge + \" ans\"); // affiche le texte: Vous avez 16 ans</pre>\n<h3 class=\"title\" ref=\"Number()\">Instruction Number()</h3>\n<div class=\"text\">L'instruction Number() convertit une chaîne en <concept ref=\"number\">nombre</concept>. Cette instruction a un <concept ref=\"parameter\">paramètre</concept>. Le paramètre devrait être une <concept ref=\"string\">chaîne</concept>, ou une <concept ref=\"variable\">variable</concept> contenant une <concept ref=\"variable value\">valeur</concept> de type texte. Dans les deux cas, la chaîne devrait représenter un nombre.</div><div class=\"text\">L'instruction retourne la valeur du paramètre convertie en nombre. Cette valeur devrait être conservée dans une <concept ref=\"variable\">variable</concept> afin de pouvoir l'utiliser plus tard. Si la chaîne ne peut pas être convertie en nombre, l'instruction retourne <concept ref=\"not a number\">NaN</concept>, c'est-à-dire Not a Number, ou Pas un Nombre en français.</div><div class=\"text\">Remarquez que le &quot;N&quot; de Number() doit être écrit en majuscule.</div>\n<div class=\"code-sample-title\">Exemples de Number()</div><pre class=\"codeBlock\">var premier = Number(\"10\"); // premier reçoit la valeur convertie de 10\n\nvar entree = prompt(\"Entrez un nombre\"); // l'utilisateur entre: 42\nentree = Number(entree); // entree reçoit la valeur convertie de 42\n\nvar deuxieme = number(\"6\"); // incorrect: la lettre \"n\" doit être en majuscule\nvar troisieme = Number(\"a\"); // incorrect: retourne NaN (Pas un Nombre)</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-224",
          "name"          : "Au fil des jours",
          "normalizedName": "au fil des jours",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-224_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-224_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=currentDay>jour</var>. Donnez-lui la valeur de 0.</li><li class=code-item>Remplacer le deuxième point d'interrogation par une boucle while. La condition de la boucle while doit vérifier si la valeur de <var id=currentDay>jour</var> est plus petite que 50. <strong>Note:</strong> vous n'avez pas besoin d'ajouter un bloc de code, puisqu'il y en a déjà un.</li><li class=code-item>Remplacer le troisième point d'interrogation par une instruction qui incrémente la valeur de <var id=currentDay>jour</var> de un.</li></ol>",
          "boilerplate"   : "var echantillon = prompt(\"Entrez un numéro d'échantillon (1 à 10000)\");\nechantillon = Number(echantillon);\n\ninitialiserGrille(echantillon);\n\n// Créez la variable jour ici\n?\n\n?\n{\n  for(var ligne = 0; ligne < obtenirLignes(); ligne++)\n  {\n    for(var col = 0; col < obtenirColonnes(); col++)\n    {\n      var etatCellule = obtenirEtatCellule(ligne, col);\n      var voisins = obtenirVoisins(ligne, col);\n\n      if(etatCellule == \"vivante\" && (voisins < 2 || voisins > 3))\n      {\n        viderCellule(ligne, col);\n      }\n      else if(etatCellule == \"vide\" && voisins == 3)\n      {\n        remplirCellule(ligne, col);\n      }\n    }\n  }\n\n  // Augmentez la valeur de la variable jour de un\n  ?\n\n  mettreAJourGrille();\n}",
          "solution"      : "var echantillon = prompt(\"Entrez un numéro d'échantillon (1 à 10000)\");\nechantillon = Number(echantillon);\n\ninitialiserGrille(echantillon);\n\n// Créez la variable jour ici\nvar jour = 0;\n\nwhile(jour < 50)\n{\n  for(var ligne = 0; ligne < obtenirLignes(); ligne++)\n  {\n    for(var col = 0; col < obtenirColonnes(); col++)\n    {\n      var etatCellule = obtenirEtatCellule(ligne, col);\n      var voisins = obtenirVoisins(ligne, col);\n\n      if(etatCellule == \"vivante\" && (voisins < 2 || voisins > 3))\n      {\n        viderCellule(ligne, col);\n      }\n      else if(etatCellule == \"vide\" && voisins == 3)\n      {\n        remplirCellule(ligne, col);\n      }\n    }\n  }\n\n  // Augmentez la valeur de la variable jour de un\n  jour++;\n\n  mettreAJourGrille();\n}",
          "tips"          : "<h3 class=\"title\" ref=\"nested loops\">Boucles imbriquées</h3>\n<div class=\"text\">Nous pouvons mettre une boucle à l'intérieur d'une autre boucle pour créer une boucle imbriquée (d'une façon semblable aux <concept ref=\"nested statements\">instructions conditionnelles imbriquées</concept>). La première boucle s'appelle la boucle externe, tandis que la deuxième boucle s'appelle la boucle interne. Les boucles imbriquées peuvent être créées avec des <concept ref=\"for loop\">boucles for</concept> ou des <concept ref=\"while loop\">boucles while</concept>.</div>\n<div class=\"code-sample-title\">Exemple de boucle imbriquée</div><pre class=\"codeBlock\">console.log(\"début de la boucle externe\");\nfor(var x = 0; x < 2; x = x + 1) // boucle externe\n{\n  console.log(\"début de la boucle interne\");\n  for(var y = 0; y < 2; y = y + 1) // boucle interne\n  {\n    console.log(\"x est égal à \" + x + \" et y est égal à \" + y);\n  }\n  console.log(\"fin de la boucle interne\");\n}\nconsole.log(\"fin de la boucle externe\");</pre>\n<div class=\"text\">Le programme commence par faire la première itération de la boucle externe, ce qui débute l'exécution de toutes les itérations de la boucle interne. Puis, le programme passe à l'itération suivante de la boucle externe, ce qui débute à nouveau toutes les itérations de la boucle interne. Le programme continue jusqu'à ce que la boucle externe termine toutes ses itérations.</div><div class=\"text\">La sortie du programme ci-dessus est comme suit:</div><div class=\"text\">début de la boucle externe</div><div class=\"text\">début de la boucle interne</div><div class=\"text\">x est égal à 0 et y est égal à 0</div><div class=\"text\">x est égal à 0 et y est égal à 1</div><div class=\"text\">fin de la boucle interne</div><div class=\"text\">début de la boucle interne</div><div class=\"text\">x est égal à 1 et y est égal à 0</div><div class=\"text\">x est égal à 1 et y est égal à 1</div><div class=\"text\">fin de la boucle interne</div><div class=\"text\">fin de la boucle externe</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-255",
          "name"          : "Multiplier les tables",
          "normalizedName": "multiplier les tables",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Pratiquons-nous à utiliser les boucles for imbriquées. Nous allons construire un programme qui affiche la table de multiplication des 9 premiers nombres entiers. La première boucle contrôle chaque ligne de la table, tandis que la deuxième boucle contrôle chaque colonne de la table.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par les trois éléments nécessaires pour compléter la boucle for. La variable de contrôle de la boucle for devrait s'appeler <var id=number>nombre</var> et avoir une valeur initiale de 1. La condition de la boucle for doit vérifier si la valeur de <var id=number>nombre</var> est plus petite ou égale à 9. L'incrémentation doit augmenter la valeur de <var id=number>nombre</var> de 1. Rappelez-vous de séparer chaque élément par un point-virgule (;).</li><li class=code-item>Remplacer le deuxième point d'interrogation par les trois éléments nécessaires pour compléter la boucle for. La variable de contrôle de la boucle for devrait s'appeler <var id=multiplier>multiplicateur</var> et avoir une valeur initiale de 1. La condition de la boucle for doit vérifier si la valeur de <var id=multiplier>multiplicateur</var> est plus petite ou égale à 9. L'incrémentation doit augmenter la valeur de <var id=multiplier>multiplicateur</var> de 1.</li></ol>",
          "boilerplate"   : "for(?)\n{\n  for(?)\n  {\n    var resultat = nombre * multiplicateur;\n    ajouterResultatALigne(resultat);\n  }\n  afficherLigne();\n}",
          "solution"      : "for(var nombre = 1; nombre <= 9; nombre++)\n{\n  for(var multiplicateur = 1; multiplicateur <= 9; multiplicateur++)\n  {\n    var resultat = nombre * multiplicateur;\n    ajouterResultatALigne(resultat);\n  }\n  afficherLigne();\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"nested loops\">Boucles imbriquées</h3>\n<div class=\"text\">Nous pouvons mettre une boucle à l'intérieur d'une autre boucle pour créer une boucle imbriquée (d'une façon semblable aux <concept ref=\"nested statements\">instructions conditionnelles imbriquées</concept>). La première boucle s'appelle la boucle externe, tandis que la deuxième boucle s'appelle la boucle interne. Les boucles imbriquées peuvent être créées avec des <concept ref=\"for loop\">boucles for</concept> ou des <concept ref=\"while loop\">boucles while</concept>.</div>\n<div class=\"code-sample-title\">Exemple de boucle imbriquée</div><pre class=\"codeBlock\">console.log(\"début de la boucle externe\");\nfor(var x = 0; x < 2; x = x + 1) // boucle externe\n{\n  console.log(\"début de la boucle interne\");\n  for(var y = 0; y < 2; y = y + 1) // boucle interne\n  {\n    console.log(\"x est égal à \" + x + \" et y est égal à \" + y);\n  }\n  console.log(\"fin de la boucle interne\");\n}\nconsole.log(\"fin de la boucle externe\");</pre>\n<div class=\"text\">Le programme commence par faire la première itération de la boucle externe, ce qui débute l'exécution de toutes les itérations de la boucle interne. Puis, le programme passe à l'itération suivante de la boucle externe, ce qui débute à nouveau toutes les itérations de la boucle interne. Le programme continue jusqu'à ce que la boucle externe termine toutes ses itérations.</div><div class=\"text\">La sortie du programme ci-dessus est comme suit:</div><div class=\"text\">début de la boucle externe</div><div class=\"text\">début de la boucle interne</div><div class=\"text\">x est égal à 0 et y est égal à 0</div><div class=\"text\">x est égal à 0 et y est égal à 1</div><div class=\"text\">fin de la boucle interne</div><div class=\"text\">début de la boucle interne</div><div class=\"text\">x est égal à 1 et y est égal à 0</div><div class=\"text\">x est égal à 1 et y est égal à 1</div><div class=\"text\">fin de la boucle interne</div><div class=\"text\">fin de la boucle externe</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-256",
          "name"          : "Un petit bulletin",
          "normalizedName": "un petit bulletin",
          "type"          : "e",
          "level"         : 1,
          "category"      : "p",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Construisons un programme qui affiche le résultat obtenus sur un test par les élèves d'une classe. Notre programme a deux boucles. La première itère sur les noms des élèves et la deuxième itère sur chaque test, pour chaque élève.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par les trois éléments nécessaires pour compléter la boucle for. La variable de contrôle de la boucle for devrait s'appeler <var id=studentId>numeroEleve</var> et avoir une valeur initiale de 0. La condition de la boucle for doit vérifier si la valeur de <var id=studentId>numeroEleve</var> est plus petite que 3. L'incrémentation doit augmenter la valeur de <var id=studentId>numeroEleve</var> de 1. Rappelez-vous de séparer chaque élément par un point-virgule (;).</li><li class=code-item>Remplacer le deuxième point d'interrogation par les trois éléments nécessaires pour compléter la boucle for. La variable de contrôle de la boucle for devrait s'appeler <var id=testNumber>numeroTest</var> et avoir une valeur initiale de 1. La condition de la boucle for doit vérifier si la valeur de <var id=testNumber>numeroTest</var> est plus petite ou égale à 3. L'incrémentation doit augmenter la valeur de <var id=testNumber>numeroTest</var> de 1.</li></ol>",
          "boilerplate"   : "var nomEleve;\nvar resultatTest;\n\nfor(?)\n{\n  nomEleve = obtenirNomEleve(numeroEleve);\n\n  console.log(\"Nom de l'élève: \" + nomEleve);\n\n  for(?)\n  {\n    resultatTest = obtenirResultatTest(nomEleve, numeroTest);\n\n    console.log(\"Test \" + numeroTest + \": \" + resultatTest);\n  }\n}",
          "solution"      : "var nomEleve;\nvar resultatTest;\n\nfor(var numeroEleve = 0; numeroEleve < 3; numeroEleve++)\n{\n  nomEleve = obtenirNomEleve(numeroEleve);\n\n  console.log(\"Nom de l'élève: \" + nomEleve);\n\n  for(var numeroTest = 1; numeroTest <= 3; numeroTest++)\n  {\n    resultatTest = obtenirResultatTest(nomEleve, numeroTest);\n\n    console.log(\"Test \" + numeroTest + \": \" + resultatTest);\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"nested loops\">Boucles imbriquées</h3>\n<div class=\"text\">Nous pouvons mettre une boucle à l'intérieur d'une autre boucle pour créer une boucle imbriquée (d'une façon semblable aux <concept ref=\"nested statements\">instructions conditionnelles imbriquées</concept>). La première boucle s'appelle la boucle externe, tandis que la deuxième boucle s'appelle la boucle interne. Les boucles imbriquées peuvent être créées avec des <concept ref=\"for loop\">boucles for</concept> ou des <concept ref=\"while loop\">boucles while</concept>.</div>\n<div class=\"code-sample-title\">Exemple de boucle imbriquée</div><pre class=\"codeBlock\">console.log(\"début de la boucle externe\");\nfor(var x = 0; x < 2; x = x + 1) // boucle externe\n{\n  console.log(\"début de la boucle interne\");\n  for(var y = 0; y < 2; y = y + 1) // boucle interne\n  {\n    console.log(\"x est égal à \" + x + \" et y est égal à \" + y);\n  }\n  console.log(\"fin de la boucle interne\");\n}\nconsole.log(\"fin de la boucle externe\");</pre>\n<div class=\"text\">Le programme commence par faire la première itération de la boucle externe, ce qui débute l'exécution de toutes les itérations de la boucle interne. Puis, le programme passe à l'itération suivante de la boucle externe, ce qui débute à nouveau toutes les itérations de la boucle interne. Le programme continue jusqu'à ce que la boucle externe termine toutes ses itérations.</div><div class=\"text\">La sortie du programme ci-dessus est comme suit:</div><div class=\"text\">début de la boucle externe</div><div class=\"text\">début de la boucle interne</div><div class=\"text\">x est égal à 0 et y est égal à 0</div><div class=\"text\">x est égal à 0 et y est égal à 1</div><div class=\"text\">fin de la boucle interne</div><div class=\"text\">début de la boucle interne</div><div class=\"text\">x est égal à 1 et y est égal à 0</div><div class=\"text\">x est égal à 1 et y est égal à 1</div><div class=\"text\">fin de la boucle interne</div><div class=\"text\">fin de la boucle externe</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-257",
          "name"          : "Les premiers nombres premiers",
          "normalizedName": "les premiers nombres premiers",
          "type"          : "e",
          "level"         : 1,
          "category"      : "c",
          "allowLimited"  : false,
          "trialMode"     : false,
          "enabled"       : true,
          "description"   : "<div class=\"description\"><span class=\"noVideoLine1\">À votre tour!</span><img src=\"/images/you_got_this.svg\" class=\"description-image\"><div class=\"content\"><div class=text>Nous devons cette fois trouver les nombres premiers qui sont parmi les 100 premiers nombres entiers. Un nombre premier est un nombre qui ne peut être divisé que par 1 et par lui-même. Par exemple, 7 est un nombre premier, car il ne peut être divisé que par 1 et par 7. Par contre, 6 n'est pas un nombre premier, puisqu'il peut être divisé par 1, par 2, par 3 et par 6. Pour déterminer si un nombre est premier, nous devons essayer de le diviser par tous les nombres entre 2 et le nombre moins 1 (n - 1). Par exemple, pour déterminer si 10 est un nombre premier, nous divisons 10 par 2, puis par 3, puis par 4 et ainsi de suite. Si nous trouvons un nombre qui divise entièrement le nombre (sans reste), alors le nombre n'est pas premier! Construisons un programme qui permet de trouver tous les nombres premiers parmi les 100 premiers nombres.</div></div></div>",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par les trois éléments nécessaires pour compléter la boucle for. La variable de contrôle de la boucle for devrait s'appeler <var id=currentNumber>nombre</var>. La boucle for doit itérer de 2 à 100.</li><li class=code-item>Remplacer le deuxième point d'interrogation par les trois éléments nécessaires pour compléter la boucle for. La variable de contrôle de la boucle for devrait s'appeler <var id=divider>diviseur</var>. La boucle for doit itérer de 2 à la valeur de <var id=currentNumber>nombre</var> moins 1. <strong>Indice:</strong> si cette boucle itère de 2 à la valeur de <var id=currentNumber>nombre</var>, aucun nombre ne sera considéré comme premier, parce que vous diviserez alors <var id=currentNumber>nombre</var> par <var id=currentNumber>nombre</var>.</li></ol>",
          "boilerplate"   : "for(?)\n{\n  var estNombrePremier = true;\n\n  for(?)\n  {\n    var estDivisible = estDivisiblePar(nombre, diviseur);\n\n    if(estDivisible == true)\n    {\n      estNombrePremier = false;\n    }\n  }\n\n  if(estNombrePremier == true)\n  {\n    console.log(nombre + \" est un nombre premier\");\n  }\n}",
          "solution"      : "for(var nombre = 2; nombre <= 100; nombre++)\n{\n  var estNombrePremier = true;\n\n  for(var diviseur = 2; diviseur < nombre; diviseur++)\n  {\n    var estDivisible = estDivisiblePar(nombre, diviseur);\n\n    if(estDivisible == true)\n    {\n      estNombrePremier = false;\n    }\n  }\n\n  if(estNombrePremier == true)\n  {\n    console.log(nombre + \" est un nombre premier\");\n  }\n}",
          "tips"          : "<h3 class=\"title\" ref=\"for loop\">Boucles for</h3>\n<div class=\"text\">Les boucles for sont un autre type de <concept ref=\"loops\">boucle</concept>, qui nous permet de répéter le code d'un <concept ref=\"code block\">bloc de code</concept> jusqu'à ce qu'une certaine <concept ref=\"condition\">condition</concept> devienne fausse.</div><div class=\"text\">Contrairement aux <concept ref=\"while loop\">boucles while</concept>, les boucles for groupent tous leurs <concept ref=\"for loop components\">éléments d'itération</concept> en un seul endroit.</div>\n<div class=\"code-sample-title\">Exemple de boucle for</div><pre class=\"codeBlock\">for(var x = 0; x < 2; x = x + 1)\n{\n  console.log(\"x est égal à: \" + x);\n}</pre>\n<div class=\"text\">Dans le code ci-dessus, la condition &quot;x &lt; 2&quot; est d'abord <concept ref=\"boolean\">vraie</concept>. Le bloc de code est exécuté et affiche le message: &quot;x est égal à 0&quot;, puis la valeur de x est augmentée de 1.</div><div class=\"text\">La condition est vérifiée une deuxième fois et puisqu'elle est toujours vraie, le programme affiche &quot;x est égal à 1&quot;. La valeur de x est encore une fois augmentée de 1.</div><div class=\"text\">Maintenant que x est égal à 2, la condition est fausse et la boucle s'arrête.</div>\n<h3 class=\"title\" ref=\"nested loops\">Boucles imbriquées</h3>\n<div class=\"text\">Nous pouvons mettre une boucle à l'intérieur d'une autre boucle pour créer une boucle imbriquée (d'une façon semblable aux <concept ref=\"nested statements\">instructions conditionnelles imbriquées</concept>). La première boucle s'appelle la boucle externe, tandis que la deuxième boucle s'appelle la boucle interne. Les boucles imbriquées peuvent être créées avec des <concept ref=\"for loop\">boucles for</concept> ou des <concept ref=\"while loop\">boucles while</concept>.</div>\n<div class=\"code-sample-title\">Exemple de boucle imbriquée</div><pre class=\"codeBlock\">console.log(\"début de la boucle externe\");\nfor(var x = 0; x < 2; x = x + 1) // boucle externe\n{\n  console.log(\"début de la boucle interne\");\n  for(var y = 0; y < 2; y = y + 1) // boucle interne\n  {\n    console.log(\"x est égal à \" + x + \" et y est égal à \" + y);\n  }\n  console.log(\"fin de la boucle interne\");\n}\nconsole.log(\"fin de la boucle externe\");</pre>\n<div class=\"text\">Le programme commence par faire la première itération de la boucle externe, ce qui débute l'exécution de toutes les itérations de la boucle interne. Puis, le programme passe à l'itération suivante de la boucle externe, ce qui débute à nouveau toutes les itérations de la boucle interne. Le programme continue jusqu'à ce que la boucle externe termine toutes ses itérations.</div><div class=\"text\">La sortie du programme ci-dessus est comme suit:</div><div class=\"text\">début de la boucle externe</div><div class=\"text\">début de la boucle interne</div><div class=\"text\">x est égal à 0 et y est égal à 0</div><div class=\"text\">x est égal à 0 et y est égal à 1</div><div class=\"text\">fin de la boucle interne</div><div class=\"text\">début de la boucle interne</div><div class=\"text\">x est égal à 1 et y est égal à 0</div><div class=\"text\">x est égal à 1 et y est égal à 1</div><div class=\"text\">fin de la boucle interne</div><div class=\"text\">fin de la boucle externe</div>"
        },
        {
          "_id"           : "cs-1_fr-CA_quiz-013",
          "name"          : "Quiz 13",
          "description"   : "Les types de boucles",
          "type"          : "q",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true,
          "questions"     : [
            {
              "_id"     : "cs-1_fr-CA_quiz-013_q-01",
              "question": "<div>Nous voulons construire un programme qui compte à rebours de 10 à 0. Quel type de boucle convient le mieux à ce type de problème?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-013_q-01_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Les boucles <code>for</code> conviennent mieux aux problèmes incrémentaux.</div>",
                  "explanation": "Puisque nous savons d'avance combien d'itérations la boucle doit faire, une boucle <code>for</code> est idéale ici."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-013_q-01_a-02",
                  "value" : 0,
                  "answer": "<div>Les boucles <code>while</code> conviennent mieux aux problèmes incrémentaux.</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-013_q-02",
              "question": "<div>Nous voulons construire un programme qui demande à l'utilisateur d'entrer divers montants d'argent à déposer. Lorsque les utilisateurs veulent arrêter le programme, ils doivent entrer une valeur négative. Quel type de boucle convient le mieux à ce type de problème?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-013_q-02_a-01",
                  "value" : 0,
                  "answer": "<div>Les boucles <code>for</code> conviennent mieux aux problèmes conditionnels.</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-013_q-02_a-02",
                  "value"      : 1,
                  "answer"     : "<div>Les boucles <code>while</code> conviennent mieux aux problèmes conditionnels.</div>",
                  "explanation": "Püisque nous ne savons pas d'avance combien d'itérations la boucle doit faire, une boucle <code>while</code> est idéale ici."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-013_q-03",
              "question": "<div>Vrai ou faux. Les boucles <code>while</code> et les boucles <code>for</code> utilisent toutes deux une condition booléenne pour contrôler leur exécution.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-013_q-03_a-01",
                  "value"      : 1,
                  "answer"     : "<div>Vrai</div>",
                  "explanation": "Les boucles peuvent seulement faire deux choses: continuer de boucler ou arrêter de boucler. Pour les contrôler, nous utilisons <code>true</code> (vrai) pour continuer et <code>false</code> (faux) pour arrêter. Donc, toutes les boucles sont contrôlées par une condition booléenne."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-013_q-03_a-02",
                  "value" : 0,
                  "answer": "<div>Faux</div>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-013_q-04",
              "question": "<div>Vrai ou faux. Une boucle imbriquée ne peut pas entrer dans une boucle infinie.</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-013_q-04_a-01",
                  "value" : 0,
                  "answer": "<div>Vrai</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-013_q-04_a-02",
                  "value"      : 1,
                  "answer"     : "<div>Faux</div>",
                  "explanation": "Les boucles imbriquées sont comme toutes les boucles et peuvent entrer dans une boucle infinie."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-013_q-05",
              "question": "<div>Choisissez la boucle <code>for</code> qui fonctionne de la même façon que la boucle <code>while</code> suivante:</div>\n<pre class=\"language-javascript\"><code>var x = 0;\nwhile(x &lt; 5)\n{\n  x++;\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-013_q-05_a-01",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>for(var x = 5; x &gt; 0; x++)</code></pre>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-013_q-05_a-02",
                  "value"      : 2,
                  "answer"     : "<pre class=\"language-javascript\"><code>for(var x = 0; x &lt; 5; x++)</code></pre>",
                  "explanation": "L'initialisation est la même (<code>var x = 0</code>), la condition est la même (<code>x &lt; 5</code>) et l'incrémentation est la même (<code>x++</code>)."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-013_q-05_a-03",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>for(var x = 0; x &gt; 5; x--)</code></pre>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-013_q-05_a-04",
                  "value" : 0,
                  "answer": "<pre class=\"language-javascript\"><code>for(var x = 5; x &lt; 5; x--)</code></pre>"
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-013_q-06",
              "question": "<div>Que sont les <em>boucles imbriquées</em>?</div>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"   : "cs-1_fr-CA_quiz-013_q-06_a-01",
                  "value" : 0,
                  "answer": "<div>Une boucle dont la variable de contrôle s'appelle \"boucle\"</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-013_q-06_a-02",
                  "value" : 0,
                  "answer": "<div>Une instruction <code>if</code> à l'intérieur du bloc de code d'une boucle</div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-013_q-06_a-03",
                  "value" : 0,
                  "answer": "<div>Une boucle qui ne se termine jamais</div>"
                },
                {
                  "_id"        : "cs-1_fr-CA_quiz-013_q-06_a-04",
                  "value"      : 2,
                  "answer"     : "<div>Une boucle à l'intérieur du bloc de code d'une autre boucle</div>",
                  "explanation": "Les <em>boucles imbriquées</em> sont très semblables aux instructions <code>if</code> imbriquées. Elles sont des boucles à l'intérieur du bloc de code d'une autre boucle."
                }
              ]
            },
            {
              "_id"     : "cs-1_fr-CA_quiz-013_q-07",
              "question": "<div>Quelle est la sortie du programme suivant?</div>\n<pre class=\"language-javascript\"><code>for(var x = 0; x &lt; 2; x++)\n{\n  for(var y = 0; y &lt; 2; y++)\n  {\n    console.log(\"x: \" + x + \", y: \" + y);\n  }\n}</code></pre>",
              "type"    : "radio",
              "answers" : [
                {
                  "_id"        : "cs-1_fr-CA_quiz-013_q-07_a-01",
                  "value"      : 2,
                  "answer"     : "<div><pre><samp>x: 0, y: 0\nx: 0, y: 1\nx: 1, y: 0\nx: 1, y: 1</pre></samp></div>",
                  "explanation": "Nous commençons avec la boucle externe (<var>x</var> = 0), puis nous commençons la boucle interne (<var>y</var> = 0). La boucle interne affiche le message puis augmente la valeur de <var>y</var> de 1 (<var>y</var> = 1). Puisque Since <var>y</var> est toujours plus petit que 2, le bloc de code de la boucle interne affiche encore le message. La valeur de <var>y</var> est encore une fois augmentée (<var>y</var> = 2) et puisque sa nouvelle valeur rend la condition fausse, la boucle interne s'arrête. La valeur de <var>x</var> est maintenant augmentée (<var>x</var> = 1) et le bloc de code est encore exécuté. La valeur de <var>y</var> est remise à zéro et la boucle interne recommence. Deux autres itérations de la boucle interne affichent les deux autres messages."
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-013_q-07_a-02",
                  "value" : 0,
                  "answer": "<div><pre><samp>x: 0, y: 0\nx: 1, y: 0\nx: 0, y: 1\nx: 1, y: 1</pre></samp></div>"
                },
                {
                  "_id"   : "cs-1_fr-CA_quiz-013_q-07_a-03",
                  "value" : 0,
                  "answer": "<div><pre><samp>x: 1, y: 0\nx: 0, y: 1\nx: 0, y: 1\nx: 1, y: 0</pre></samp></div>"
                }
              ]
            }
          ],
          "normalizedName": "quiz 13",
          "trialMode"     : false
        }
      ],
      "created"                 : 1543060095522,
      "createdBy"               : "xavier.baudry",
      "normalizedCreatedBy"     : "xavier.baudry",
      "lastModified"            : 1543060095522,
      "lastModifiedBy"          : "xavier.baudry",
      "normalizedLastModifiedBy": "xavier.baudry"
    },
    {
      "_id"                     : "cs-0_en-CA",
      "name"                    : "Introduction to Computer Science",
      "normalizedName"          : "introduction to computer science",
      "shortDescription"        : "This course is designed to give complete beginners an overview of computer science and its applications in our world.",
      "longDescription"         : "In this course, you will embark on a quick tour of the world of computer science. Gain exposure to the fundamental concepts of programming and its many applications in our daily lives, without getting bogged down by details. You will emerge with a high-level understanding and be better prepared to write you own code in more advanced projects down the road.",
      "locale"                  : "en-CA",
      "grades"                  : ["4"],
      "allowLimited"            : false,
      "trialMode"               : true,
      "comingSoon"              : false,
      "enabled"                 : true,
      "units"                   : [
        {
          "_id"           : "cs-1_en-CA_project-01",
          "name"          : "Learning the Basics",
          "normalizedName": "learning the basics",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_en-CA_exercise-025",
          "name"          : "Being Precise with Our Instructions",
          "normalizedName": "being precise with our instructions",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-025_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-025_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Add a <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-forward>robot.forward()</concept> instructions to get the robot to the goal.</li><li class=code-item>The robot cannot leave the designated path. Pay close attention to the order of your instructions as it affects your program!</li></ol>",
          "boilerplate"   : "robot.forward();\n?\n?",
          "solution"      : "robot.forward();\nrobot.right();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"order of instructions\">Order of Instructions</h3>\n<div class=\"text\">As programs are read from top to bottom, the order in which instructions are presented is important.</div>\n<div class=\"code-sample-title\">Example 1</div><pre class=\"codeBlock\">robot.forward();\nrobot.right();</pre>\n<div class=\"text\">In the example above, the robot moves forward before turning right.</div>\n<div class=\"code-sample-title\">Example 2</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<div class=\"text\">In the example above, the robot turns right before moving forward.</div>\n<h3 class=\"title\" ref=\"robot.forward()\">Using the robot.forward() instruction</h3>\n<div class=\"text\">The robot.forward() <concept ref=\"instruction\">instruction</concept> is used to make the robot move forward by one square. Like any other <concept ref=\"programming languages\">JavaScript</concept> instruction, robot.forward() is <concept ref=\"case sensitive\">case sensitive</concept> and requires <concept ref=\"forgetting parentheses\">precise spelling</concept>.</div>\n<div class=\"code-sample-title\">Example of robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // moves the robot forward by one square</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Using the robot.right() Instruction</h3>\n<div class=\"text\">The robot.right() instruction is used to make the robot turn on itself 90 degrees clockwise. Note that it does not make the robot move in any direction. To complete a right turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.right() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-028",
          "name"          : "A New Hope",
          "normalizedName": "a new hope",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-028_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-028_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the three <concept ref=robot-right>robot.right()</concept> instructions by a single <concept ref=robot-left>robot.left()</concept> instruction.</li><li class=code-item>Add the missing instructions to help the robot reach the goal.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "robot.forward();\nrobot.right();\nrobot.right();\nrobot.right();",
          "solution"      : "robot.forward();\nrobot.left();\n\nrobot.forward();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"robot.left()\">Using the robot.left() Instruction</h3>\n<div class=\"text\">The robot.left() instruction is used to make the robot turn on itself 90 degrees counterclockwise. Note that it does not make the robot move in any direction. To complete a left turn, the <concept ref=\"robot.forward()\">robot.forward()</concept> instruction should be used <concept ref=\"order of instructions\">after</concept> a robot.left() instruction.</div>\n<div class=\"code-sample-title\">Example of robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-032",
          "name"          : "Which Way is the Right Way?",
          "normalizedName": "which way is the right way",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-032_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-032_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Use the <concept ref=robot-forward>robot.forward()</concept>, <concept ref=robot-right>robot.right()</concept> and <concept ref=robot-left>robot.left()</concept> instructions to help the robot reach the goal.</li><li class=code-item>The robot cannot leave the designated path.</li></ol>",
          "boilerplate"   : "// Use robot.forward();,\n// robot.left(); and robot.right();\n// to get to the goal\n?",
          "solution"      : "// Use robot.forward();,\n// robot.left(); and robot.right();\n// to get to the goal\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward(2);\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward(2);\nrobot.left();\nrobot.forward();\nrobot.right();\nrobot.forward(2);",
          "tips"          : "<h3 class=\"title\" ref=\"algorithm\">Algorithm</h3>\n<div class=\"text\">A specific set of steps to solve a problem. For example, think of a cake cooking recipe. We cannot apply the frosting to the cake before cooking the cake.</div>\n<h3 class=\"title\" ref=\"parameter\">Parameter</h3>\n<div class=\"text\">A parameter is a value that we give to an <concept ref=\"instruction\">instruction</concept> to give more details. A parameter will usually change the outcome of an instruction. Some parameters are optional while others are required. Every parameter in an instruction is separated by a comma.</div>\n<div class=\"code-sample-title\">Example of parameters</div><pre class=\"codeBlock\">robot.forward(); // robot.forward() with no parameter\nrobot.forward(6); // robot.forward() with the optional number parameter\nsquare.draw(3, 7); // square.draw() with the two required coordinate parameters</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Using the robot.forward() Instruction with a Number</h3>\n<div class=\"text\">The <concept ref=\"robot.forward()\">robot.forward()</concept> instruction can be used with a <concept ref=\"number\">number</concept> between the parentheses to make the robot move more than one square. Note that the number must be greater than 0 but no more than 10.</div>\n<div class=\"code-sample-title\">Example of robot.forward() with a number</div><pre class=\"codeBlock\">robot.forward(); // robot moves forward one square\nrobot.forward(6); // robot moves forward 6 squares\nrobot.forward(13); // invalid, number is greater than 10\nrobot.forward(-1); // invalid, number is not greater than 0</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-001",
          "name"          : "A Special Box",
          "normalizedName": "a special box",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-001_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-001_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with the word <var id=score>score</var>.</li><li class=code-item>Replace the second question mark with a number smaller than 100.</li></ol>",
          "boilerplate"   : "var ? = ?;",
          "solution"      : "var score = 42;",
          "tips"          : "<h3 class=\"title\" ref=\"variable\">Variable</h3>\n<div class=\"text\">A variable is a special storage space in a program that has a <concept ref=\"variable name\">name</concept> and a <concept ref=\"variable value\">value</concept>. You can think of a variable like a cardboard box with a label identifying its name. The content of the box is the value of the variable.</div>\n<div class=\"code-sample-title\">Example of a variable</div><pre class=\"codeBlock\">var score = 42; // creates a variable named score with a value of 42</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-002",
          "name"          : "The Anatomy of a Box",
          "normalizedName": "the anatomy of a box",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-002_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-002_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Create a variable named <var id=age>age</var> and assign to it a number representing your age.</li></ol>",
          "boilerplate"   : "?",
          "solution"      : "var age = 13;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-004",
          "name"          : "A Box in a Box",
          "normalizedName": "a box in a box",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-004_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-004_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Create a new variable named <var id=score>score</var>. Assign to it the product of <var id=coins>coins</var> multiplied by 10. Remember, the multiplication symbol is the asterisk (*).</li></ol>",
          "boilerplate"   : "var coins = 2 + 2;\n?",
          "solution"      : "var coins = 2 + 2;\nvar score = coins * 10;",
          "tips"          : "<h3 class=\"title\" ref=\"variable value\">Assigning a Value to a Variable</h3>\n<div class=\"text\">Assigning a value to a variable means to give it a value. We can assign a value to a variable by referencing its <concept ref=\"variable name\">name</concept> followed by the assignment operator (=) and a value.</div><div class=\"text\">If the variable is a <concept ref=\"variable create\">new variable</concept>, we must use the instruction var before the variable name. The var instruction is required to create a new variable, however it should not be used with an existing variable.</div>\n<div class=\"code-sample-title\">Example of assigning a value to a new and an existing variable</div><pre class=\"codeBlock\">var variableName = 42; // assigns a value of 42 to a new variable\nvariableName = 52; // assigns a value of 52 to an existing variable</pre>\n<div class=\"text\">The value we assign to a variable can be of many different <concept ref=\"data type\">types</concept> and can even be the result of a <concept ref=\"mathematical operators\">calculation</concept>.</div>\n<div class=\"code-sample-title\">Example of assigning a value to variables</div><pre class=\"codeBlock\">var lives; // creates a variable named lives with a value of undefined\nvar score = 42; // creates a variable named score and assigns it the value of 42\nlives = 3; // assigns the value of 3 to the existing variable named lives\nscore = 2 + 2; // assigns the sum of 2 + 2 (4) to the variable score\nvar name = \"EduCode\"; // creates a variable named name and assigns it a value of \"EduCode\"</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-008",
          "name"          : "An Ever Changing Box",
          "normalizedName": "an ever changing box",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-008_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-008_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Create a new variable named <var id=lives>lives</var>. Assign to it the number 3.</li><li class=code-item>In a different instruction, assign to <var id=lives>lives</var> the number 2.</li></ol>",
          "boilerplate"   : "?\n?",
          "solution"      : "var lives = 3;\nlives = 2;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Creating and Using a Variable</h3>\n<div class=\"text\">To create a variable, we use the var instruction followed by a <concept ref=\"variable name\">name</concept>.</div><div class=\"text\">To <concept ref=\"variable value\">assign a value</concept> to a variable we have previously created, we reference its name without using the var instruction.</div><div class=\"text\">By default, the value of a variable is <concept ref=\"undefined variable\">undefined</concept>.</div>\n<div class=\"code-sample-title\">Example of creating and using a variable</div><pre class=\"codeBlock\">var score; // creates a new variable named score with a value of undefined\nscore = 42; // gives the value of 42 to the existing variable named score\nvar lives = 3; // creates a new variable named lives with a value of 3</pre>\n<h3 class=\"title\" ref=\"variable value\">Assigning a Value to a Variable</h3>\n<div class=\"text\">Assigning a value to a variable means to give it a value. We can assign a value to a variable by referencing its <concept ref=\"variable name\">name</concept> followed by the assignment operator (=) and a value.</div><div class=\"text\">If the variable is a <concept ref=\"variable create\">new variable</concept>, we must use the instruction var before the variable name. The var instruction is required to create a new variable, however it should not be used with an existing variable.</div>\n<div class=\"code-sample-title\">Example of assigning a value to a new and an existing variable</div><pre class=\"codeBlock\">var variableName = 42; // assigns a value of 42 to a new variable\nvariableName = 52; // assigns a value of 52 to an existing variable</pre>\n<div class=\"text\">The value we assign to a variable can be of many different <concept ref=\"data type\">types</concept> and can even be the result of a <concept ref=\"mathematical operators\">calculation</concept>.</div>\n<div class=\"code-sample-title\">Example of assigning a value to variables</div><pre class=\"codeBlock\">var lives; // creates a variable named lives with a value of undefined\nvar score = 42; // creates a variable named score and assigns it the value of 42\nlives = 3; // assigns the value of 3 to the existing variable named lives\nscore = 2 + 2; // assigns the sum of 2 + 2 (4) to the variable score\nvar name = \"EduCode\"; // creates a variable named name and assigns it a value of \"EduCode\"</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-009",
          "name"          : "A Dynamic Box",
          "normalizedName": "a dynamic box",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-009_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-009_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question mark with an instruction to increase the value of <var id=score>score</var> by 100.</li></ol>",
          "boilerplate"   : "var score = 1000;\n?",
          "solution"      : "var score = 1000;\nscore = score + 100;",
          "tips"          : "<h3 class=\"title\" ref=\"undefined variable\">Using Variables with an Undefined Value</h3>\n<div class=\"text\">The default <concept ref=\"variable value\">value</concept> of a variable is undefined. For this reason, it is important that we assign a value to a variable before using it, otherwise we may get strange results.</div>\n<div class=\"code-sample-title\">Example of undefined variable</div><pre class=\"codeBlock\">var coins; // value of coins is undefined\nvar score = coins * 10; // undefined multiplied by 10 is NaN</pre>\n<div class=\"text\">In the above code example, the variable score will receive a value of <concept ref=\"not a number\">NaN</concept>, short for Not a Number, because the result of the expression undefined <concept ref=\"mathematical operators\">multiplied</concept> by 10 is not something that can be calculated.</div>\n<h3 class=\"title\" ref=\"variable assign with variable\">Using a Variable in an Assignment Operation</h3>\n<div class=\"text\">Sometimes a variable will be used to <concept ref=\"variable value\">assign a value</concept> to another variable. In those cases, the value of the variable on the right of the assignment operator (=) will be looked up then the variable on the left will receive its value.</div>\n<div class=\"code-sample-title\">Example of a variable used in an assignment</div><pre class=\"codeBlock\">var firstNumber = 5;\nvar secondNumber = 10 + firstNumber; // secondNumber receives a value of 15</pre>\n<div class=\"text\">To calculate the value of secondNumber, we first look at the value of firstNumber, which is 5, and then calculate the <concept ref=\"mathematical operators\">sum</concept> of 10 plus 5. Once the result 15 is known, we assign it to the variable secondNumber. Note that the variable firstNumber must be created and <concept ref=\"undefined variable\">have a value</concept> before it is used to calculate secondNumber.</div>\n<h3 class=\"title\" ref=\"variable self reference\">Assigning a New Value to a Variable Using its Existing Value</h3>\n<div class=\"text\">Since the right side of an <concept ref=\"variable value\">assignment</concept> operation is always <concept ref=\"mathematical operators\">calculated</concept> first, we can use a variable's current value to calculate a new value. To do this, it is important that the variable has value, otherwise the result will be <concept ref=\"not a number\">NaN</concept> (Not a Number).</div>\n<div class=\"code-sample-title\">Example of using a current value to calculate a new value</div><pre class=\"codeBlock\">var lives = 3;\nlives = lives - 1; // lives will be equal to 2, the current value of lives (3) minus 1\nvar score = score + 100; // invalid, score will be NaN since score has no initial value</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-014",
          "name"          : "A Player and a Goal",
          "normalizedName": "a player and a goal",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-014_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-014_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the question marks in the <concept ref=puck-create>puck.create()</concept> instruction by an x coordinate, a y coordinate and a shape. <strong>Hint:</strong> the puck <strong>shape</strong> can be <string>\"circle\"</string>, <string>\"square\"</string>, <string>\"triangle\"</string> or <string>\"hexagon\"</string>.</li><li class=code-item>Replace the question marks in the <concept ref=goal-create>goal.create()</concept> instruction by an x coordinate and a y coordinate.</li></ol>",
          "boilerplate"   : "puck.create(?, ?, \"?\");\n\ngoal.create(?, ?);",
          "solution"      : "puck.create(2, 11, \"circle\");\n\ngoal.create(23, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"physics puzzle game\">How to Play the Physics Puzzle Game</h3>\n<div class=\"text\">The physics puzzle game is a simple game in which the player must try to hit the goal with his puck.</div><div class=\"text\">To play the game, the player's <concept ref=\"puck.create()\">puck</concept> and the <concept ref=\"goal.create()\">goal</concept> must at least be created. To create obstacles, you can use the <concept ref=\"obstacle.create()\">obstacle.create()</concept> instruction.</div>\n<h3 class=\"title\" ref=\"puck.create()\">Using the puck.create() Instruction</h3>\n<div class=\"text\">The puck.create() instruction is used to create the player's puck at a set of coordinates. The puck.create() instruction has 3 required <concept ref=\"parameter\">parameters</concept>. The parameters must be put in the following order: puck.create(x, y, shape).</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div><div class=\"text\">The shape can be any of the following: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, and is required</div>\n<div class=\"code-sample-title\">Example of puck.create()</div><pre class=\"codeBlock\">puck.create(2, 11, \"circle\"); // creates the circle puck at (2,11)\npuck.create(2, 11); // invalid, missing shape\npuck.create(22, 15, triangle); // invalid, triangle missing surrounding quotation marks (\" \")\npuck.create(\"hexagon\", 10, 11); // invalid, shape before coordinates</pre>\n<h3 class=\"title\" ref=\"goal.create()\">Using the goal.create() Instruction</h3>\n<div class=\"text\">The goal.create() instruction is used to create the game goal at a set of coordinates. The goal.create() instruction has 2 required <concept ref=\"parameter\">parameters</concept>. The parameters must be put in the following order: goal.create(x, y).</div><div class=\"text\">The x coordinate must be between 0 and 30 and is required</div><div class=\"text\">The y coordinate must be between 0 and 22 and is required</div>\n<div class=\"code-sample-title\">Example of goal.create()</div><pre class=\"codeBlock\">goal.create(20, 11); // creates the goal at (20,11)\ngoal.create(32, 11); // invalid, x coordinate greater than 30\ngoal.Create(15, 11); // invalid, \"C\" of create written in uppercase</pre>"
        },
        {
          "_id"           : "cs-1_en-CA_exercise-081",
          "name"          : "True or False?",
          "normalizedName": "true or false",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_en-CA/exercise-081_en-ca.mp4",
          "videoSubtitles": "cs-1_en-CA/exercise-081_en-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">To successfully complete this exercise, you must:</h5><ol class=code><li class=code-item>Replace the first question mark with a new variable named <var id=myBool>myBool</var>. Assign to it the Boolean value returned by the comparison of <strong>5 less than 10</strong>.</li><li class=code-item>Replace the second question mark with the variable <var id=myBool>myBool</var>.</li></ol>",
          "boilerplate"   : "?\n\nbooleanBall(\"Is 5 less than 10?\", ?);",
          "solution"      : "var myBool = (5 < 10);\n\nbooleanBall(\"Is 5 less than 10?\", myBool);",
          "tips"          : "<h3 class=\"title\" ref=\"boolean\">Booleans</h3>\n<div class=\"text\">Booleans are a <concept ref=\"data type\">data type</concept> with only two possible values: true or false.</div><div class=\"text\">Any expression using a <concept ref=\"relational operators\">relational operator</concept> will return a Boolean value.</div>\n<div class=\"code-sample-title\">Example of Boolean values</div><pre class=\"codeBlock\">var iLikeCereals = true;\nvar isGreaterThan18 = 10 > 18; // isGreaterThan18 will be false\nvar age = 19;\nvar ageIsGreaterThan18 = age > 18; // ageIsGreaterThan18 will be true</pre>"
        }
      ],
      "created"                 : 1546605869420,
      "createdBy"               : "david.gallant",
      "normalizedCreatedBy"     : "david.gallant",
      "lastModified"            : 1546605869420,
      "lastModifiedBy"          : "david.gallant",
      "normalizedLastModifiedBy": "david.gallant"
    },
    {
      "_id"                     : "cs-0_fr-CA",
      "name"                    : "Introduction à l'informatique",
      "normalizedName"          : "introduction a linformatique",
      "shortDescription"        : "Ce cours est conçu pour donner aux débutants un survol de l'informatique et de ses applications dans le monde réel.",
      "longDescription"         : "Dans ce cours, vous ferez un bref parcours dans le monde de l'informatique. Vous apprendrez les concepts fondamentaux de la programmation et de ses applications dans la vie de tous les jours, sans entrer dans les détails. Vous obtiendrez une compréhension de haut niveau et serez prêts à écrire votre propre code pour résoudre des problèmes.",
      "locale"                  : "fr-CA",
      "grades"                  : ["4"],
      "allowLimited"            : false,
      "trialMode"               : true,
      "comingSoon"              : false,
      "enabled"                 : true,
      "units"                   : [
        {
          "_id"           : "cs-1_fr-CA_project-01",
          "name"          : "Apprendre la base",
          "normalizedName": "apprendre la base",
          "type"          : "p",
          "level"         : 0,
          "allowLimited"  : false,
          "enabled"       : true
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-025",
          "name"          : "Des instructions précises",
          "normalizedName": "des instructions precises",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-025_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-025_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Ajouter les instructions \n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-forward>robot.forward()</concept> pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin. Attention à l'ordre des instructions, puisqu'il affecte le résultat du programme!</li></ol>",
          "boilerplate"   : "robot.forward();\n?\n?",
          "solution"      : "robot.forward();\nrobot.right();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"order of instructions\">Ordre des instructions</h3>\n<div class=\"text\">Puisque les programmes sont lus de haut en bas, l'ordre dans lequel apparaissent les instructions est très important.</div>\n<div class=\"code-sample-title\">Exemple 1</div><pre class=\"codeBlock\">robot.forward();\nrobot.right();</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, le robot avance, puis tourne à droite.</div>\n<div class=\"code-sample-title\">Exemple 2</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>\n<div class=\"text\">Dans l'exemple ci-dessus, le robot tourne à droite, puis avance.</div>\n<h3 class=\"title\" ref=\"robot.forward()\">Instruction robot.forward()</h3>\n<div class=\"text\">L'<concept ref=\"instruction\">instruction</concept> robot.forward() est utilisée pour faire avancer le robot d'une case. Comme toutes les autres instructions de <concept ref=\"programming languages\">JavaScript</concept>, robot.forward() est <concept ref=\"case sensitive\">sensible à la casse</concept> et nous devons <concept ref=\"forgetting parentheses\">l'écrire exactement</concept> comme indiqué ci-dessous.</div>\n<div class=\"code-sample-title\">Exemple de robot.forward()</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case</pre>\n<h3 class=\"title\" ref=\"robot.right()\">Instruction robot.right()</h3>\n<div class=\"text\">L'instruction robot.right() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens horaire (le sens des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.right().</div>\n<div class=\"code-sample-title\">Exemple de robot.right()</div><pre class=\"codeBlock\">robot.right();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-028",
          "name"          : "Un nouvel espoir",
          "normalizedName": "un nouvel espoir",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-028_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-028_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer les trois instructions \n    <concept ref=robot-right>robot.right()</concept> par une seule instruction \n    <concept ref=robot-left>robot.left()</concept>.</li><li class=code-item>Ajouter les instructions manquantes pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "robot.forward();\nrobot.right();\nrobot.right();\nrobot.right();",
          "solution"      : "robot.forward();\nrobot.left();\n\nrobot.forward();\nrobot.forward();",
          "tips"          : "<h3 class=\"title\" ref=\"robot.left()\">Instruction robot.left()</h3>\n<div class=\"text\">L'instruction robot.left() est utilisée pour faire tourner le robot sur lui-même de 90 degrés dans le sens anti-horaire (le sens contraire des aiguilles d'une montre). Remarquez que cette instruction ne fait pas avancer le robot. Pour faire tourner un coin au robot, l'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> devrait être utilisée <concept ref=\"order of instructions\">après</concept> une instruction robot.left().</div>\n<div class=\"code-sample-title\">Exemple de robot.left()</div><pre class=\"codeBlock\">robot.left();\nrobot.forward();</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-032",
          "name"          : "Où est la sortie?",
          "normalizedName": "ou est la sortie",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-032_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-032_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Utiliser les instructions \n    <concept ref=robot-forward>robot.forward()</concept>,\n    <concept ref=robot-right>robot.right()</concept> et\n    <concept ref=robot-left>robot.left()</concept> pour amener le robot au but.</li><li class=code-item>Le robot ne doit pas quitter le chemin.</li></ol>",
          "boilerplate"   : "// Utilisez robot.forward();,\n// robot.left(); et robot.right();\n// pour amener le robot au but\n?",
          "solution"      : "// Utilisez robot.forward();,\n// robot.left(); et robot.right();\n// pour amener le robot au but\nrobot.forward();\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward(2);\nrobot.right();\nrobot.forward();\nrobot.left();\nrobot.forward(2);\nrobot.left();\nrobot.forward();\nrobot.right();\nrobot.forward(2);",
          "tips"          : "<h3 class=\"title\" ref=\"algorithm\">Algorithme</h3>\n<div class=\"text\">Un ensemble d'étapes spécifiques pour résoudre un problème. Pensez par exemple à une recette de gâteau. Nous ne pouvons pas glacer le gâteau avant de le faire cuire.</div>\n<h3 class=\"title\" ref=\"parameter\">Paramètre</h3>\n<div class=\"text\">Un paramètre est une valeur que nous donnons à une <concept ref=\"instruction\">instruction</concept> pour lui donner plus de détails. Un paramètre change habituellement le résultat d'une instruction. Certains paramètres sont optionnels, tandis que d'autres sont obligatoires. Les paramètres donnés à une instruction doivent être séparés par des virgules.</div>\n<div class=\"code-sample-title\">Exemples de paramètres</div><pre class=\"codeBlock\">robot.forward(); // robot.forward(), sans paramètre\nrobot.forward(6); // robot.forward(), avec un nombre optionnel comme paramètre\nsquare.draw(3, 7); // square.draw(), avec les deux paramètres obligatoires pour les coordonnées</pre>\n<h3 class=\"title\" ref=\"robot.forward(x)\">Instruction robot.forward() avec un nombre</h3>\n<div class=\"text\">L'instruction <concept ref=\"robot.forward()\">robot.forward()</concept> peut être utilisée avec un <concept ref=\"number\">nombre</concept> entre les parenthèses, afin de faire avancer le robot de plus d'une case. Remarquez que le nombre doit être plus grand que zéro et ne doit pas être plus grand que 10.</div>\n<div class=\"code-sample-title\">Exemples de robot.forward() avec un nombre</div><pre class=\"codeBlock\">robot.forward(); // fait avancer le robot d'une case\nrobot.forward(6); // fait avancer le robot de 6 cases\nrobot.forward(13); // incorrect: le nombre ne doit pas être plus grand que 10\nrobot.forward(-1); // incorrect: le nombre doit être plus grand que zéro</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-001",
          "name"          : "Une boîte spéciale",
          "normalizedName": "une boite speciale",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-001_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-001_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par le mot <var id=score>pointage</var>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par un nombre plus petit que 100.</li></ol>",
          "boilerplate"   : "var ? = ?;",
          "solution"      : "var pointage = 42;",
          "tips"          : "<h3 class=\"title\" ref=\"variable\">Variable</h3>\n<div class=\"text\">Les variables sont des endroits spéciaux dans un programme qui possèdent un <concept ref=\"variable name\">nom</concept> et dans lesquels nous pouvons mettre une <concept ref=\"variable value\">valeur</concept>. Les variables sont comme des boîtes de carton, avec une étiquette qui indique leur nom. Le contenu de la boîte représente la valeur de la variable.</div>\n<div class=\"code-sample-title\">Exemple de variable</div><pre class=\"codeBlock\">var pointage = 42; // crée une variable appelée pointage avec une valeur de 42</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-002",
          "name"          : "L'anatomie d'une boîte",
          "normalizedName": "lanatomie dune boite",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-002_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-002_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Créer une variable appelée <var id=age>age</var>. Donnez-lui un nombre qui représente votre âge.</li></ol>",
          "boilerplate"   : "?",
          "solution"      : "var age = 13;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-004",
          "name"          : "Une boîte dans une boîte",
          "normalizedName": "une boite dans une boite",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-004_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-004_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Créer une nouvelle variable appelée <var id=score>pointage</var>. Donnez-lui le produit de <var id=coins>monnaie</var> multipliée par 10. Rappelez-vous, le symbole de multiplication est l'astérisque (*).</li></ol>",
          "boilerplate"   : "var monnaie = 2 + 2;\n?",
          "solution"      : "var monnaie = 2 + 2;\nvar pointage = monnaie * 10;",
          "tips"          : "<h3 class=\"title\" ref=\"variable value\">Affectation d'une valeur à une variable</h3>\n<div class=\"text\">Affecter une valeur à une variable signifie lui donner une valeur. Nous pouvons donner une valeur une variable en indiquant son <concept ref=\"variable name\">nom</concept> suivi de l'opérateur d'affectation (=) et d'une valeur.</div><div class=\"text\">Si nous souhaitons <concept ref=\"variable create\">créer une variable</concept>, nous devons utiliser l'instruction var avant le nom de la variable. L'instruction var est requise pour créer une nouvelle variable. Toutefois, elle ne devrait pas être utilisée avec une variable existante.</div>\n<div class=\"code-sample-title\">Exemple d'affectation à une nouvelle variable et à une variable existante</div><pre class=\"codeBlock\">var nomVariable = 42; // donne la valeur 42 à une nouvelle variable\nnomVariable = 52; // donne la valeur 52 à une variable existante</pre>\n<div class=\"text\">La valeur que nous donnons à une variable peut être de différents <concept ref=\"data type\">types</concept> et peut même être le résultat d'un <concept ref=\"mathematical operators\">calcul</concept>.</div>\n<div class=\"code-sample-title\">Exemples d'affectations</div><pre class=\"codeBlock\">var vies; // crée une nouvelle variable appelée vies avec une valeur non définie\nvar pointage = 42; // crée une variable appelée pointage et lui donne la valeur 42\nvies = 3; // donne une valeur de 3 à la variable vies existante\npointage = 2 + 2; // affecte la somme de 2 + 2 (4) à la variable pointage\nvar nom = \"EduCode\"; // crée une variable appelée nom et lui donne la valeur de \"EduCode\"</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-008",
          "name"          : "Une boîte changeante",
          "normalizedName": "une boite changeante",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-008_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-008_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Créer une nouvelle variable appelée <var id=lives>vies</var>. Donnez-lui la valeur 3.</li><li class=code-item>Dans une autre instruction, donnez à <var id=lives>vies</var> la valeur 2.</li></ol>",
          "boilerplate"   : "?\n?",
          "solution"      : "var vies = 3;\nvies = 2;",
          "tips"          : "<h3 class=\"title\" ref=\"variable create\">Création et utilisation d'une variable</h3>\n<div class=\"text\">Pour créer une variable, nous utilisons l'instruction var suivie d'un <concept ref=\"variable name\">nom</concept>.</div><div class=\"text\">Pour <concept ref=\"variable value\">donner une valeur</concept> à une variable que nous avons créée, nous utilisons son nom, sans l'instruction var.</div><div class=\"text\">Par défaut, la valeur d'une variable est <concept ref=\"undefined variable\">undefined</concept>, c'est-à-dire non définie.</div>\n<div class=\"code-sample-title\">Exemple de création et d'utilisation d'une variable</div><pre class=\"codeBlock\">var pointage; // crée une nouvelle variable appelée pointage avec une valeur non définie\npointage = 42; // donne la valeur 42 à la variable pointage existante\nvar vies = 3; // crée une nouvelle variable appelée vies et lui donne la valeur 3</pre>\n<h3 class=\"title\" ref=\"variable value\">Affectation d'une valeur à une variable</h3>\n<div class=\"text\">Affecter une valeur à une variable signifie lui donner une valeur. Nous pouvons donner une valeur une variable en indiquant son <concept ref=\"variable name\">nom</concept> suivi de l'opérateur d'affectation (=) et d'une valeur.</div><div class=\"text\">Si nous souhaitons <concept ref=\"variable create\">créer une variable</concept>, nous devons utiliser l'instruction var avant le nom de la variable. L'instruction var est requise pour créer une nouvelle variable. Toutefois, elle ne devrait pas être utilisée avec une variable existante.</div>\n<div class=\"code-sample-title\">Exemple d'affectation à une nouvelle variable et à une variable existante</div><pre class=\"codeBlock\">var nomVariable = 42; // donne la valeur 42 à une nouvelle variable\nnomVariable = 52; // donne la valeur 52 à une variable existante</pre>\n<div class=\"text\">La valeur que nous donnons à une variable peut être de différents <concept ref=\"data type\">types</concept> et peut même être le résultat d'un <concept ref=\"mathematical operators\">calcul</concept>.</div>\n<div class=\"code-sample-title\">Exemples d'affectations</div><pre class=\"codeBlock\">var vies; // crée une nouvelle variable appelée vies avec une valeur non définie\nvar pointage = 42; // crée une variable appelée pointage et lui donne la valeur 42\nvies = 3; // donne une valeur de 3 à la variable vies existante\npointage = 2 + 2; // affecte la somme de 2 + 2 (4) à la variable pointage\nvar nom = \"EduCode\"; // crée une variable appelée nom et lui donne la valeur de \"EduCode\"</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-009",
          "name"          : "Une boîte dynamique",
          "normalizedName": "une boite dynamique",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-009_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-009_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le point d'interrogation par une instruction qui augmente la valeur de <var id=score>pointage</var> de 100.</li></ol>",
          "boilerplate"   : "var pointage = 1000;\n?",
          "solution"      : "var pointage = 1000;\npointage = pointage + 100;",
          "tips"          : "<h3 class=\"title\" ref=\"undefined variable\">Utilisation des variables avec valeur non définie</h3>\n<div class=\"text\">La <concept ref=\"variable value\">valeur</concept> par défaut des variables est undefined, c'est-à-dire non définie. Il est donc important de donner une valeur à une variable avant de l'utiliser, sinon nous obtenons des résultats étranges.</div>\n<div class=\"code-sample-title\">Exemple de variable non définie</div><pre class=\"codeBlock\">var monnaie; // la valeur de monnaie est undefined (non définie)\nvar pointage = monnaie * 10; // undefined multiplié par 10 est NaN (pas un nombre)</pre>\n<div class=\"text\">Dans l'exemple de code ci-dessus, la variable pointage reçoit la valeur de <concept ref=\"not a number\">NaN</concept>, c'est-à-dire Not a Number, ou Pas un Nombre en français, parce que le résultat de l'expression undefined <concept ref=\"mathematical operators\">multiplié</concept> par 10 ne peut pas être calculé.</div>\n<h3 class=\"title\" ref=\"variable assign with variable\">Utilisation d'une variable dans une affectation</h3>\n<div class=\"text\">Les variables peuvent être utilisées pour <concept ref=\"variable value\">affecter une valeur</concept> à une autre variable. Dans ce cas, la valeur de la variable à la droite de l'opérateur d'affectation (=) est d'abord récupérée, puis la variable à gauche reçoit cette même valeur.</div>\n<div class=\"code-sample-title\">Exemple d'une variable utilisée dans une affectation</div><pre class=\"codeBlock\">var premierNombre = 5;\nvar deuxiemeNombre = 10 + premierNombre; // deuxiemeNombre reçoit la valeur de 15</pre>\n<div class=\"text\">Pour calculer la valeur de deuxiemeNombre, nous récupérons d'abord la valeur de premierNombre, qui est 5, et calculons la <concept ref=\"mathematical operators\">somme</concept> de 10 plus 5. Lorsque nous avons obtenu le résultat de 15, nous l'affectons à la variable deuxiemeNombre. Remarquez que la variable premierNombre doit avoir été créée et doit <concept ref=\"undefined variable\">avoir une valeur</concept> avant de l'utiliser pour calculer deuxiemeNombre.</div>\n<h3 class=\"title\" ref=\"variable self reference\">Affectation d'une valeur à une variable avec sa valeur existante</h3>\n<div class=\"text\">Puisque l'expression à droite d'une opération d'<concept ref=\"variable value\">affectation</concept> est toujours <concept ref=\"mathematical operators\">calculée</concept> en premier, nous pouvons utiliser la valeur existante d'une variable pour calculer une nouvelle valeur. Pour ce faire, il est important que la variable ait déjà une valeur, sinon le résultat sera <concept ref=\"not a number\">NaN</concept> (Not a Number, ou Pas un Nombre, en français).</div>\n<div class=\"code-sample-title\">Exemples d'affectation en utilisant une valeur existante</div><pre class=\"codeBlock\">var vies = 3;\nvies = vies - 1; // vies reçoit la valeur 2, c'est-à-dire la valeur existante de vies (3) moins 1\nvar pointage = pointage + 100; // incorrect: la variable pointage sera NaN puisque la variable pointage n'a pas encore de valeur</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-014",
          "name"          : "Une rondelle et un but",
          "normalizedName": "une rondelle et un but",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-014_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-014_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer les points d'interrogation dans l'instruction \n    <concept ref=puck-create>puck.create()</concept> par une coordonnée en x, une coordonnée en y et une forme. <strong>Indice:</strong> la <strong>forme</strong> de la rondelle peut être: <string>\"circle\"</string>, <string>\"square\"</string>, <string>\"triangle\"</string> ou <string>\"hexagon\"</string>.</li><li class=code-item>Remplacer les points d'interrogation dans l'instruction \n    <concept ref=goal-create>goal.create()</concept> par une coordonnée en x et une coordonnée en y.</li></ol>",
          "boilerplate"   : "puck.create(?, ?, \"?\");\n\ngoal.create(?, ?);",
          "solution"      : "puck.create(2, 11, \"circle\");\n\ngoal.create(23, 11);",
          "tips"          : "<h3 class=\"title\" ref=\"physics puzzle game\">Un jeu d'obstacles</h3>\n<div class=\"text\">Le jeu d'obstacles est un jeu simple dans lequel le joueur doit tenter de frapper le but avec la rondelle.</div><div class=\"text\">Pour y jouer, nous devons au moins créer la <concept ref=\"puck.create()\">rondelle</concept> du joueur et le <concept ref=\"goal.create()\">but</concept>. Pour créer des obstacles, nous utilisons l'instruction <concept ref=\"obstacle.create()\">obstacle.create()</concept>.</div>\n<h3 class=\"title\" ref=\"puck.create()\">Instruction puck.create()</h3>\n<div class=\"text\">L'instruction puck.create() est utilisée pour créer la rondelle du joueur aux coordonnées indiquées. L'instruction puck.create() a 3 <concept ref=\"parameter\">paramètres</concept> obligatoires. Les paramètres doivent être indiqués dans l'ordre suivant: puck.create(x, y, forme).</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div><div class=\"text\">La forme doit être l'une des suivantes: &quot;square&quot;, &quot;triangle&quot;, &quot;circle&quot;, &quot;hexagon&quot;, et est obligatoire</div>\n<div class=\"code-sample-title\">Exemples de puck.create()</div><pre class=\"codeBlock\">puck.create(2, 11, \"circle\"); // crée une rondelle en forme de cercle à (2,11)\npuck.create(2, 11); // incorrect: la forme est obligatoire\npuck.create(22, 15, triangle); // incorrect: le mot \"triangle\" doit être entouré de guillemets (\" \")\npuck.create(\"hexagon\", 10, 11); // incorrect: la forme doit venir après les coordonnées</pre>\n<h3 class=\"title\" ref=\"goal.create()\">Instruction goal.create()</h3>\n<div class=\"text\">L'instruction goal.create() est utilisée pour créer le but du jeu aux coordonnées indiquées. L'instruction goal.create() a 2 <concept ref=\"parameter\">paramètres</concept> obligatoires. Les paramètres doivent être indiqués dans l'ordre suivant: goal.create(x, y).</div><div class=\"text\">La coordonnée en x doit être un nombre entre 0 et 30 et est obligatoire</div><div class=\"text\">La coordonnée en y doit être un nombre entre 0 et 22 et est obligatoire</div>\n<div class=\"code-sample-title\">Exemples de goal.create()</div><pre class=\"codeBlock\">goal.create(20, 11); // crée le but à (20,11)\ngoal.create(32, 11); // incorrect: la coordonnée en x ne doit pas dépasser 30\ngoal.Create(15, 11); // incorrect: le mot \"create\" prend un \"c\" minuscule</pre>"
        },
        {
          "_id"           : "cs-1_fr-CA_exercise-081",
          "name"          : "Vrai ou faux?",
          "normalizedName": "vrai ou faux",
          "type"          : "e",
          "level"         : 1,
          "category"      : "l",
          "allowLimited"  : false,
          "enabled"       : true,
          "videoFile"     : "cs-1_fr-CA/exercise-081_fr-ca.mp4",
          "videoSubtitles": "cs-1_fr-CA/exercise-081_fr-ca.vtt",
          "task"          : "<h5 class=\"section-subtitle\">Pour compléter cet exercice avec succès, vous devez&nbsp;:</h5><ol class=code><li class=code-item>Remplacer le premier point d'interrogation par une nouvelle variable appelée <var id=myBool>monBooleen</var>. Donnez-lui la valeur booléenne retournée par la comparaison de <strong>5 plus petit que 10</strong>.</li><li class=code-item>Remplacer le deuxième point d'interrogation par la variable <var id=myBool>monBooleen</var>.</li></ol>",
          "boilerplate"   : "?\n\nbouleBooleenne(\"5 est-il plus petit que 10?\", ?);",
          "solution"      : "var monBooleen = (5 < 10);\n\nbouleBooleenne(\"5 est-il plus petit que 10?\", monBooleen);",
          "tips"          : "<h3 class=\"title\" ref=\"boolean\">Booléens</h3>\n<div class=\"text\">Les booléens sont un <concept ref=\"data type\">type de données</concept> qui ont seulement deux valeurs possibles: true (vrai) ou false (faux).</div><div class=\"text\">Les expressions qui utilisent un <concept ref=\"relational operators\">opérateur relationnel</concept> retournent une valeur booléenne.</div>\n<div class=\"code-sample-title\">Exemples de valeurs booléennes</div><pre class=\"codeBlock\">var tuAimesLesCereales = true;\nvar estPlusGrandQue18 = 10 > 18; // estPlusGrandQue18 sera false (faux)\nvar age = 19;\nvar ageEstPlusGrandQue18 = age > 18; // ageEstPlusGrandQue18 sera true (vrai)</pre>"
        }
      ],
      "created"                 : 1546605869420,
      "createdBy"               : "david.gallant",
      "normalizedCreatedBy"     : "david.gallant",
      "lastModified"            : 1546605869420,
      "lastModifiedBy"          : "david.gallant",
      "normalizedLastModifiedBy": "david.gallant"
    },
    {
      "_id"                     : "cs-2_en-CA",
      "name"                    : "Introduction to Game Programming",
      "normalizedName"          : "introduction to game programming",
      "shortDescription"        : "This course is a follow-up to Introduction to Programming.",
      "longDescription"         : "You'll learn how to write advanced programming scripts to create rich and immersive casual games. As you progress, you'll interact with a game loop, create functions, use a spatial reference system (SRS) to display visual elements, and generate and respond to events. By the end of the course, you'll be able to build 2D games and complex programs.",
      "locale"                  : "en-CA",
      "grades"                  : ["7"],
      "allowLimited"            : false,
      "trialMode"               : false,
      "comingSoon"              : true,
      "enabled"                 : true,
      "units"                   : [],
      "created"                 : 1546605869420,
      "createdBy"               : "david.gallant",
      "normalizedCreatedBy"     : "david.gallant",
      "lastModified"            : 1546605869420,
      "lastModifiedBy"          : "david.gallant",
      "normalizedLastModifiedBy": "david.gallant"
    },
    {
      "_id"                     : "cs-2_fr-CA",
      "name"                    : "Programmation des jeux",
      "normalizedName"          : "programmation des jeux",
      "shortDescription"        : "Ce cours est la suite du cours Introduction à la programmation.",
      "longDescription"         : "En créant des jeux vidéo riches et immersifs, vous découvrirez que les programmes vont au-delà de simples scripts. Au long de votre parcours, vous apprendrez à interagir avec la boucle du jeu, à créer des fonctions, à utiliser un système référentiel pour afficher les éléments visuels, ainsi qu'à générer et à répondre aux événements. À la fin du cours, vous serez en mesure de construire divers jeux 2D et des programmes complexes.",
      "locale"                  : "fr-CA",
      "grades"                  : ["7"],
      "allowLimited"            : false,
      "trialMode"               : false,
      "comingSoon"              : true,
      "enabled"                 : true,
      "units"                   : [],
      "created"                 : 1546605869420,
      "createdBy"               : "david.gallant",
      "normalizedCreatedBy"     : "david.gallant",
      "lastModified"            : 1546605869420,
      "lastModifiedBy"          : "david.gallant",
      "normalizedLastModifiedBy": "david.gallant"
    },
    {
      "_id"                     : "cs-4_en-CA",
      "name"                    : "Introduction to Data Science",
      "normalizedName"          : "introduction to data science",
      "shortDescription"        : "This course covers the application of a high-level programming language in the field of data science.",
      "longDescription"         : "You'll learn how to create and search through large datasets, structure and organize information, and consider the ethical implications of collecting user data. By the end of the course, you will be able to structure, sanitize and use large quantities of data in programs.",
      "locale"                  : "en-CA",
      "grades"                  : ["9"],
      "allowLimited"            : false,
      "trialMode"               : false,
      "comingSoon"              : true,
      "enabled"                 : true,
      "units"                   : [],
      "created"                 : 1546605869420,
      "createdBy"               : "david.gallant",
      "normalizedCreatedBy"     : "david.gallant",
      "lastModified"            : 1546605869420,
      "lastModifiedBy"          : "david.gallant",
      "normalizedLastModifiedBy": "david.gallant"
    },
    {
      "_id"                     : "cs-4_fr-CA",
      "name"                    : "Introduction à la science des données",
      "normalizedName"          : "introduction a la science des donnees",
      "shortDescription"        : "Ce cours applique un langage de programmation de haut niveau à la sphère de la science des données.",
      "longDescription"         : "Vous apprendrez à créer et à effectuer des recherches dans de grands ensembles de données, à structurer et à organiser l'information, ainsi qu'à considérer l'éthique de la collecte des données des utilisateurs. À la fin du cours, vous serez capables de structurer, de nettoyer et de manipuler de grandes quantités de données dans un programme.",
      "locale"                  : "fr-CA",
      "grades"                  : ["9"],
      "allowLimited"            : false,
      "trialMode"               : false,
      "comingSoon"              : true,
      "enabled"                 : true,
      "units"                   : [],
      "created"                 : 1546605869420,
      "createdBy"               : "david.gallant",
      "normalizedCreatedBy"     : "david.gallant",
      "lastModified"            : 1546605869420,
      "lastModifiedBy"          : "david.gallant",
      "normalizedLastModifiedBy": "david.gallant"
    }
  ],
  "lastModified": 1546605869420
}
